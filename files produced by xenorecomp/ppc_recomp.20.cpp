#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_822F2684"))) PPC_WEAK_FUNC(sub_822F2684);
PPC_FUNC_IMPL(__imp__sub_822F2684) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2688"))) PPC_WEAK_FUNC(sub_822F2688);
PPC_FUNC_IMPL(__imp__sub_822F2688) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-29044(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29044);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f26c0
	if (!ctx.cr6.eq) goto loc_822F26C0;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x825bf3e0
	ctx.lr = 0x822F26B4;
	sub_825BF3E0(ctx, base);
	// stw r3,-29044(r31)
	PPC_STORE_U32(ctx.r31.u32 + -29044, ctx.r3.u32);
	// bl 0x825bf4a0
	ctx.lr = 0x822F26BC;
	sub_825BF4A0(ctx, base);
	// lwz r3,-29044(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29044);
loc_822F26C0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F26D4"))) PPC_WEAK_FUNC(sub_822F26D4);
PPC_FUNC_IMPL(__imp__sub_822F26D4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F26D8"))) PPC_WEAK_FUNC(sub_822F26D8);
PPC_FUNC_IMPL(__imp__sub_822F26D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-29056(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29056);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2710
	if (!ctx.cr6.eq) goto loc_822F2710;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x825bed50
	ctx.lr = 0x822F2704;
	sub_825BED50(ctx, base);
	// stw r3,-29056(r31)
	PPC_STORE_U32(ctx.r31.u32 + -29056, ctx.r3.u32);
	// bl 0x825bee10
	ctx.lr = 0x822F270C;
	sub_825BEE10(ctx, base);
	// lwz r3,-29056(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29056);
loc_822F2710:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2724"))) PPC_WEAK_FUNC(sub_822F2724);
PPC_FUNC_IMPL(__imp__sub_822F2724) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2728"))) PPC_WEAK_FUNC(sub_822F2728);
PPC_FUNC_IMPL(__imp__sub_822F2728) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-29060(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29060);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2760
	if (!ctx.cr6.eq) goto loc_822F2760;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x825beb20
	ctx.lr = 0x822F2754;
	sub_825BEB20(ctx, base);
	// stw r3,-29060(r31)
	PPC_STORE_U32(ctx.r31.u32 + -29060, ctx.r3.u32);
	// bl 0x825bebe0
	ctx.lr = 0x822F275C;
	sub_825BEBE0(ctx, base);
	// lwz r3,-29060(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29060);
loc_822F2760:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2774"))) PPC_WEAK_FUNC(sub_822F2774);
PPC_FUNC_IMPL(__imp__sub_822F2774) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2778"))) PPC_WEAK_FUNC(sub_822F2778);
PPC_FUNC_IMPL(__imp__sub_822F2778) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-29052(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29052);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f27b0
	if (!ctx.cr6.eq) goto loc_822F27B0;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x825bef80
	ctx.lr = 0x822F27A4;
	sub_825BEF80(ctx, base);
	// stw r3,-29052(r31)
	PPC_STORE_U32(ctx.r31.u32 + -29052, ctx.r3.u32);
	// bl 0x825bf040
	ctx.lr = 0x822F27AC;
	sub_825BF040(ctx, base);
	// lwz r3,-29052(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29052);
loc_822F27B0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F27C4"))) PPC_WEAK_FUNC(sub_822F27C4);
PPC_FUNC_IMPL(__imp__sub_822F27C4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F27C8"))) PPC_WEAK_FUNC(sub_822F27C8);
PPC_FUNC_IMPL(__imp__sub_822F27C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-29020(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29020);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2800
	if (!ctx.cr6.eq) goto loc_822F2800;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x825c0100
	ctx.lr = 0x822F27F4;
	sub_825C0100(ctx, base);
	// stw r3,-29020(r31)
	PPC_STORE_U32(ctx.r31.u32 + -29020, ctx.r3.u32);
	// bl 0x825c01c0
	ctx.lr = 0x822F27FC;
	sub_825C01C0(ctx, base);
	// lwz r3,-29020(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29020);
loc_822F2800:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2814"))) PPC_WEAK_FUNC(sub_822F2814);
PPC_FUNC_IMPL(__imp__sub_822F2814) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2818"))) PPC_WEAK_FUNC(sub_822F2818);
PPC_FUNC_IMPL(__imp__sub_822F2818) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-26096(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -26096);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2850
	if (!ctx.cr6.eq) goto loc_822F2850;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x827e1600
	ctx.lr = 0x822F2844;
	sub_827E1600(ctx, base);
	// stw r3,-26096(r31)
	PPC_STORE_U32(ctx.r31.u32 + -26096, ctx.r3.u32);
	// bl 0x827e16c0
	ctx.lr = 0x822F284C;
	sub_827E16C0(ctx, base);
	// lwz r3,-26096(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -26096);
loc_822F2850:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2864"))) PPC_WEAK_FUNC(sub_822F2864);
PPC_FUNC_IMPL(__imp__sub_822F2864) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2868"))) PPC_WEAK_FUNC(sub_822F2868);
PPC_FUNC_IMPL(__imp__sub_822F2868) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-27968(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27968);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f28a0
	if (!ctx.cr6.eq) goto loc_822F28A0;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x8267f600
	ctx.lr = 0x822F2894;
	sub_8267F600(ctx, base);
	// stw r3,-27968(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27968, ctx.r3.u32);
	// bl 0x8267f6c0
	ctx.lr = 0x822F289C;
	sub_8267F6C0(ctx, base);
	// lwz r3,-27968(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27968);
loc_822F28A0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F28B4"))) PPC_WEAK_FUNC(sub_822F28B4);
PPC_FUNC_IMPL(__imp__sub_822F28B4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F28B8"))) PPC_WEAK_FUNC(sub_822F28B8);
PPC_FUNC_IMPL(__imp__sub_822F28B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-27728(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27728);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f28f0
	if (!ctx.cr6.eq) goto loc_822F28F0;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826d8be0
	ctx.lr = 0x822F28E4;
	sub_826D8BE0(ctx, base);
	// stw r3,-27728(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27728, ctx.r3.u32);
	// bl 0x826d8ca0
	ctx.lr = 0x822F28EC;
	sub_826D8CA0(ctx, base);
	// lwz r3,-27728(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27728);
loc_822F28F0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2904"))) PPC_WEAK_FUNC(sub_822F2904);
PPC_FUNC_IMPL(__imp__sub_822F2904) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2908"))) PPC_WEAK_FUNC(sub_822F2908);
PPC_FUNC_IMPL(__imp__sub_822F2908) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-27732(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27732);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2940
	if (!ctx.cr6.eq) goto loc_822F2940;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826d89c0
	ctx.lr = 0x822F2934;
	sub_826D89C0(ctx, base);
	// stw r3,-27732(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27732, ctx.r3.u32);
	// bl 0x826d8a70
	ctx.lr = 0x822F293C;
	sub_826D8A70(ctx, base);
	// lwz r3,-27732(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27732);
loc_822F2940:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2954"))) PPC_WEAK_FUNC(sub_822F2954);
PPC_FUNC_IMPL(__imp__sub_822F2954) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2958"))) PPC_WEAK_FUNC(sub_822F2958);
PPC_FUNC_IMPL(__imp__sub_822F2958) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-27484(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27484);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2990
	if (!ctx.cr6.eq) goto loc_822F2990;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x8270f4d8
	ctx.lr = 0x822F2984;
	sub_8270F4D8(ctx, base);
	// stw r3,-27484(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27484, ctx.r3.u32);
	// bl 0x8270f598
	ctx.lr = 0x822F298C;
	sub_8270F598(ctx, base);
	// lwz r3,-27484(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27484);
loc_822F2990:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F29A4"))) PPC_WEAK_FUNC(sub_822F29A4);
PPC_FUNC_IMPL(__imp__sub_822F29A4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F29A8"))) PPC_WEAK_FUNC(sub_822F29A8);
PPC_FUNC_IMPL(__imp__sub_822F29A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-27376(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27376);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f29e0
	if (!ctx.cr6.eq) goto loc_822F29E0;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x8274fa20
	ctx.lr = 0x822F29D4;
	sub_8274FA20(ctx, base);
	// stw r3,-27376(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27376, ctx.r3.u32);
	// bl 0x8274fae0
	ctx.lr = 0x822F29DC;
	sub_8274FAE0(ctx, base);
	// lwz r3,-27376(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27376);
loc_822F29E0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F29F4"))) PPC_WEAK_FUNC(sub_822F29F4);
PPC_FUNC_IMPL(__imp__sub_822F29F4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F29F8"))) PPC_WEAK_FUNC(sub_822F29F8);
PPC_FUNC_IMPL(__imp__sub_822F29F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-26088(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -26088);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2a30
	if (!ctx.cr6.eq) goto loc_822F2A30;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x827e3178
	ctx.lr = 0x822F2A24;
	sub_827E3178(ctx, base);
	// stw r3,-26088(r31)
	PPC_STORE_U32(ctx.r31.u32 + -26088, ctx.r3.u32);
	// bl 0x827e3238
	ctx.lr = 0x822F2A2C;
	sub_827E3238(ctx, base);
	// lwz r3,-26088(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -26088);
loc_822F2A30:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2A44"))) PPC_WEAK_FUNC(sub_822F2A44);
PPC_FUNC_IMPL(__imp__sub_822F2A44) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2A48"))) PPC_WEAK_FUNC(sub_822F2A48);
PPC_FUNC_IMPL(__imp__sub_822F2A48) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-27588(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27588);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2a80
	if (!ctx.cr6.eq) goto loc_822F2A80;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826f38d8
	ctx.lr = 0x822F2A74;
	sub_826F38D8(ctx, base);
	// stw r3,-27588(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27588, ctx.r3.u32);
	// bl 0x826f3998
	ctx.lr = 0x822F2A7C;
	sub_826F3998(ctx, base);
	// lwz r3,-27588(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27588);
loc_822F2A80:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2A94"))) PPC_WEAK_FUNC(sub_822F2A94);
PPC_FUNC_IMPL(__imp__sub_822F2A94) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2A98"))) PPC_WEAK_FUNC(sub_822F2A98);
PPC_FUNC_IMPL(__imp__sub_822F2A98) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-27584(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27584);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2ad0
	if (!ctx.cr6.eq) goto loc_822F2AD0;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826f3ea8
	ctx.lr = 0x822F2AC4;
	sub_826F3EA8(ctx, base);
	// stw r3,-27584(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27584, ctx.r3.u32);
	// bl 0x826f3f68
	ctx.lr = 0x822F2ACC;
	sub_826F3F68(ctx, base);
	// lwz r3,-27584(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27584);
loc_822F2AD0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2AE4"))) PPC_WEAK_FUNC(sub_822F2AE4);
PPC_FUNC_IMPL(__imp__sub_822F2AE4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2AE8"))) PPC_WEAK_FUNC(sub_822F2AE8);
PPC_FUNC_IMPL(__imp__sub_822F2AE8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-27580(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27580);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2b20
	if (!ctx.cr6.eq) goto loc_822F2B20;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826f58a8
	ctx.lr = 0x822F2B14;
	sub_826F58A8(ctx, base);
	// stw r3,-27580(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27580, ctx.r3.u32);
	// bl 0x826f5960
	ctx.lr = 0x822F2B1C;
	sub_826F5960(ctx, base);
	// lwz r3,-27580(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27580);
loc_822F2B20:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2B34"))) PPC_WEAK_FUNC(sub_822F2B34);
PPC_FUNC_IMPL(__imp__sub_822F2B34) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2B38"))) PPC_WEAK_FUNC(sub_822F2B38);
PPC_FUNC_IMPL(__imp__sub_822F2B38) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-26148(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -26148);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2b70
	if (!ctx.cr6.eq) goto loc_822F2B70;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x827c62a8
	ctx.lr = 0x822F2B64;
	sub_827C62A8(ctx, base);
	// stw r3,-26148(r31)
	PPC_STORE_U32(ctx.r31.u32 + -26148, ctx.r3.u32);
	// bl 0x827c6360
	ctx.lr = 0x822F2B6C;
	sub_827C6360(ctx, base);
	// lwz r3,-26148(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -26148);
loc_822F2B70:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2B84"))) PPC_WEAK_FUNC(sub_822F2B84);
PPC_FUNC_IMPL(__imp__sub_822F2B84) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2B88"))) PPC_WEAK_FUNC(sub_822F2B88);
PPC_FUNC_IMPL(__imp__sub_822F2B88) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-26144(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -26144);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2bc0
	if (!ctx.cr6.eq) goto loc_822F2BC0;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x827c68c0
	ctx.lr = 0x822F2BB4;
	sub_827C68C0(ctx, base);
	// stw r3,-26144(r31)
	PPC_STORE_U32(ctx.r31.u32 + -26144, ctx.r3.u32);
	// bl 0x827c6980
	ctx.lr = 0x822F2BBC;
	sub_827C6980(ctx, base);
	// lwz r3,-26144(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -26144);
loc_822F2BC0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2BD4"))) PPC_WEAK_FUNC(sub_822F2BD4);
PPC_FUNC_IMPL(__imp__sub_822F2BD4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2BD8"))) PPC_WEAK_FUNC(sub_822F2BD8);
PPC_FUNC_IMPL(__imp__sub_822F2BD8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-27260(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27260);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2c10
	if (!ctx.cr6.eq) goto loc_822F2C10;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x827881c8
	ctx.lr = 0x822F2C04;
	sub_827881C8(ctx, base);
	// stw r3,-27260(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27260, ctx.r3.u32);
	// bl 0x82788280
	ctx.lr = 0x822F2C0C;
	sub_82788280(ctx, base);
	// lwz r3,-27260(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27260);
loc_822F2C10:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2C24"))) PPC_WEAK_FUNC(sub_822F2C24);
PPC_FUNC_IMPL(__imp__sub_822F2C24) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2C28"))) PPC_WEAK_FUNC(sub_822F2C28);
PPC_FUNC_IMPL(__imp__sub_822F2C28) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-27256(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27256);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2c60
	if (!ctx.cr6.eq) goto loc_822F2C60;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x827883f0
	ctx.lr = 0x822F2C54;
	sub_827883F0(ctx, base);
	// stw r3,-27256(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27256, ctx.r3.u32);
	// bl 0x827884a8
	ctx.lr = 0x822F2C5C;
	sub_827884A8(ctx, base);
	// lwz r3,-27256(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27256);
loc_822F2C60:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2C74"))) PPC_WEAK_FUNC(sub_822F2C74);
PPC_FUNC_IMPL(__imp__sub_822F2C74) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2C78"))) PPC_WEAK_FUNC(sub_822F2C78);
PPC_FUNC_IMPL(__imp__sub_822F2C78) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-28264(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28264);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2cb0
	if (!ctx.cr6.eq) goto loc_822F2CB0;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82640c58
	ctx.lr = 0x822F2CA4;
	sub_82640C58(ctx, base);
	// stw r3,-28264(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28264, ctx.r3.u32);
	// bl 0x82640d10
	ctx.lr = 0x822F2CAC;
	sub_82640D10(ctx, base);
	// lwz r3,-28264(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28264);
loc_822F2CB0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2CC4"))) PPC_WEAK_FUNC(sub_822F2CC4);
PPC_FUNC_IMPL(__imp__sub_822F2CC4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2CC8"))) PPC_WEAK_FUNC(sub_822F2CC8);
PPC_FUNC_IMPL(__imp__sub_822F2CC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-28260(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28260);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2d00
	if (!ctx.cr6.eq) goto loc_822F2D00;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82641448
	ctx.lr = 0x822F2CF4;
	sub_82641448(ctx, base);
	// stw r3,-28260(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28260, ctx.r3.u32);
	// bl 0x82641508
	ctx.lr = 0x822F2CFC;
	sub_82641508(ctx, base);
	// lwz r3,-28260(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28260);
loc_822F2D00:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2D14"))) PPC_WEAK_FUNC(sub_822F2D14);
PPC_FUNC_IMPL(__imp__sub_822F2D14) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2D18"))) PPC_WEAK_FUNC(sub_822F2D18);
PPC_FUNC_IMPL(__imp__sub_822F2D18) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-28256(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28256);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2d50
	if (!ctx.cr6.eq) goto loc_822F2D50;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82641c08
	ctx.lr = 0x822F2D44;
	sub_82641C08(ctx, base);
	// stw r3,-28256(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28256, ctx.r3.u32);
	// bl 0x82641cc8
	ctx.lr = 0x822F2D4C;
	sub_82641CC8(ctx, base);
	// lwz r3,-28256(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28256);
loc_822F2D50:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2D64"))) PPC_WEAK_FUNC(sub_822F2D64);
PPC_FUNC_IMPL(__imp__sub_822F2D64) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2D68"))) PPC_WEAK_FUNC(sub_822F2D68);
PPC_FUNC_IMPL(__imp__sub_822F2D68) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-28252(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28252);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2da0
	if (!ctx.cr6.eq) goto loc_822F2DA0;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826425f0
	ctx.lr = 0x822F2D94;
	sub_826425F0(ctx, base);
	// stw r3,-28252(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28252, ctx.r3.u32);
	// bl 0x826426b0
	ctx.lr = 0x822F2D9C;
	sub_826426B0(ctx, base);
	// lwz r3,-28252(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28252);
loc_822F2DA0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2DB4"))) PPC_WEAK_FUNC(sub_822F2DB4);
PPC_FUNC_IMPL(__imp__sub_822F2DB4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2DB8"))) PPC_WEAK_FUNC(sub_822F2DB8);
PPC_FUNC_IMPL(__imp__sub_822F2DB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-27652(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27652);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2df0
	if (!ctx.cr6.eq) goto loc_822F2DF0;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826e3b70
	ctx.lr = 0x822F2DE4;
	sub_826E3B70(ctx, base);
	// stw r3,-27652(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27652, ctx.r3.u32);
	// bl 0x826e3c30
	ctx.lr = 0x822F2DEC;
	sub_826E3C30(ctx, base);
	// lwz r3,-27652(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27652);
loc_822F2DF0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2E04"))) PPC_WEAK_FUNC(sub_822F2E04);
PPC_FUNC_IMPL(__imp__sub_822F2E04) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2E08"))) PPC_WEAK_FUNC(sub_822F2E08);
PPC_FUNC_IMPL(__imp__sub_822F2E08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-27648(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27648);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2e40
	if (!ctx.cr6.eq) goto loc_822F2E40;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826e4a88
	ctx.lr = 0x822F2E34;
	sub_826E4A88(ctx, base);
	// stw r3,-27648(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27648, ctx.r3.u32);
	// bl 0x826e4b48
	ctx.lr = 0x822F2E3C;
	sub_826E4B48(ctx, base);
	// lwz r3,-27648(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27648);
loc_822F2E40:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2E54"))) PPC_WEAK_FUNC(sub_822F2E54);
PPC_FUNC_IMPL(__imp__sub_822F2E54) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2E58"))) PPC_WEAK_FUNC(sub_822F2E58);
PPC_FUNC_IMPL(__imp__sub_822F2E58) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r3,-31320(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31320);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x822f2e90
	if (!ctx.cr6.eq) goto loc_822F2E90;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x8240d140
	ctx.lr = 0x822F2E84;
	sub_8240D140(ctx, base);
	// stw r3,-31320(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31320, ctx.r3.u32);
	// bl 0x8240d1f8
	ctx.lr = 0x822F2E8C;
	sub_8240D1F8(ctx, base);
	// lwz r3,-31320(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31320);
loc_822F2E90:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_822F2EA4"))) PPC_WEAK_FUNC(sub_822F2EA4);
PPC_FUNC_IMPL(__imp__sub_822F2EA4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_822F2EA8"))) PPC_WEAK_FUNC(sub_822F2EA8);
PPC_FUNC_IMPL(__imp__sub_822F2EA8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F2EB0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-21032
	ctx.r30.s64 = ctx.r11.s64 + -21032;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-21032(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -21032);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f2f08
	if (ctx.cr6.eq) goto loc_822F2F08;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F2ED4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F2EE0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f2f14
	if (ctx.cr6.eq) goto loc_822F2F14;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f2ed4
	if (!ctx.cr6.eq) goto loc_822F2ED4;
loc_822F2F08:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F2F14:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F2F30"))) PPC_WEAK_FUNC(sub_822F2F30);
PPC_FUNC_IMPL(__imp__sub_822F2F30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F2F38;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-20948
	ctx.r30.s64 = ctx.r11.s64 + -20948;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-20948(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -20948);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f2f90
	if (ctx.cr6.eq) goto loc_822F2F90;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F2F5C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F2F68;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f2f9c
	if (ctx.cr6.eq) goto loc_822F2F9C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f2f5c
	if (!ctx.cr6.eq) goto loc_822F2F5C;
loc_822F2F90:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F2F9C:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F2FB8"))) PPC_WEAK_FUNC(sub_822F2FB8);
PPC_FUNC_IMPL(__imp__sub_822F2FB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F2FC0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,29840
	ctx.r30.s64 = ctx.r11.s64 + 29840;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,29840(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 29840);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3010
	if (ctx.cr6.eq) goto loc_822F3010;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F2FE4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F2FF0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f301c
	if (ctx.cr6.eq) goto loc_822F301C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f2fe4
	if (!ctx.cr6.eq) goto loc_822F2FE4;
loc_822F3010:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F301C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3030"))) PPC_WEAK_FUNC(sub_822F3030);
PPC_FUNC_IMPL(__imp__sub_822F3030) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3038;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,30920
	ctx.r30.s64 = ctx.r11.s64 + 30920;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,30920(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30920);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3088
	if (ctx.cr6.eq) goto loc_822F3088;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F305C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3068;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3094
	if (ctx.cr6.eq) goto loc_822F3094;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f305c
	if (!ctx.cr6.eq) goto loc_822F305C;
loc_822F3088:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3094:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F30A8"))) PPC_WEAK_FUNC(sub_822F30A8);
PPC_FUNC_IMPL(__imp__sub_822F30A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F30B0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,30952
	ctx.r30.s64 = ctx.r11.s64 + 30952;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,30952(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30952);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3100
	if (ctx.cr6.eq) goto loc_822F3100;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F30D4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F30E0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f310c
	if (ctx.cr6.eq) goto loc_822F310C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f30d4
	if (!ctx.cr6.eq) goto loc_822F30D4;
loc_822F3100:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F310C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3120"))) PPC_WEAK_FUNC(sub_822F3120);
PPC_FUNC_IMPL(__imp__sub_822F3120) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3128;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,30968
	ctx.r30.s64 = ctx.r11.s64 + 30968;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,30968(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30968);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3178
	if (ctx.cr6.eq) goto loc_822F3178;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F314C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3158;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3184
	if (ctx.cr6.eq) goto loc_822F3184;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f314c
	if (!ctx.cr6.eq) goto loc_822F314C;
loc_822F3178:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3184:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3198"))) PPC_WEAK_FUNC(sub_822F3198);
PPC_FUNC_IMPL(__imp__sub_822F3198) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F31A0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31000
	ctx.r30.s64 = ctx.r11.s64 + 31000;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31000(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31000);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f31f0
	if (ctx.cr6.eq) goto loc_822F31F0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F31C4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F31D0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f31fc
	if (ctx.cr6.eq) goto loc_822F31FC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f31c4
	if (!ctx.cr6.eq) goto loc_822F31C4;
loc_822F31F0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F31FC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3210"))) PPC_WEAK_FUNC(sub_822F3210);
PPC_FUNC_IMPL(__imp__sub_822F3210) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3218;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31064
	ctx.r30.s64 = ctx.r11.s64 + 31064;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31064(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31064);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3268
	if (ctx.cr6.eq) goto loc_822F3268;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F323C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3248;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3274
	if (ctx.cr6.eq) goto loc_822F3274;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f323c
	if (!ctx.cr6.eq) goto loc_822F323C;
loc_822F3268:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3274:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3288"))) PPC_WEAK_FUNC(sub_822F3288);
PPC_FUNC_IMPL(__imp__sub_822F3288) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3290;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31088
	ctx.r30.s64 = ctx.r11.s64 + 31088;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31088(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31088);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f32e0
	if (ctx.cr6.eq) goto loc_822F32E0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F32B4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F32C0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f32ec
	if (ctx.cr6.eq) goto loc_822F32EC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f32b4
	if (!ctx.cr6.eq) goto loc_822F32B4;
loc_822F32E0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F32EC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3300"))) PPC_WEAK_FUNC(sub_822F3300);
PPC_FUNC_IMPL(__imp__sub_822F3300) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3308;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31120
	ctx.r30.s64 = ctx.r11.s64 + 31120;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31120(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31120);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3358
	if (ctx.cr6.eq) goto loc_822F3358;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F332C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3338;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3364
	if (ctx.cr6.eq) goto loc_822F3364;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f332c
	if (!ctx.cr6.eq) goto loc_822F332C;
loc_822F3358:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3364:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3378"))) PPC_WEAK_FUNC(sub_822F3378);
PPC_FUNC_IMPL(__imp__sub_822F3378) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3380;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31216
	ctx.r30.s64 = ctx.r11.s64 + 31216;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31216(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31216);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f33d0
	if (ctx.cr6.eq) goto loc_822F33D0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F33A4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F33B0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f33dc
	if (ctx.cr6.eq) goto loc_822F33DC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f33a4
	if (!ctx.cr6.eq) goto loc_822F33A4;
loc_822F33D0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F33DC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F33F0"))) PPC_WEAK_FUNC(sub_822F33F0);
PPC_FUNC_IMPL(__imp__sub_822F33F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F33F8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31240
	ctx.r30.s64 = ctx.r11.s64 + 31240;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31240(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31240);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3448
	if (ctx.cr6.eq) goto loc_822F3448;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F341C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3428;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3454
	if (ctx.cr6.eq) goto loc_822F3454;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f341c
	if (!ctx.cr6.eq) goto loc_822F341C;
loc_822F3448:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3454:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3468"))) PPC_WEAK_FUNC(sub_822F3468);
PPC_FUNC_IMPL(__imp__sub_822F3468) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3470;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31480
	ctx.r30.s64 = ctx.r11.s64 + 31480;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31480(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31480);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f34c0
	if (ctx.cr6.eq) goto loc_822F34C0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3494:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F34A0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f34cc
	if (ctx.cr6.eq) goto loc_822F34CC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3494
	if (!ctx.cr6.eq) goto loc_822F3494;
loc_822F34C0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F34CC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F34E0"))) PPC_WEAK_FUNC(sub_822F34E0);
PPC_FUNC_IMPL(__imp__sub_822F34E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F34E8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31512
	ctx.r30.s64 = ctx.r11.s64 + 31512;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31512(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31512);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3538
	if (ctx.cr6.eq) goto loc_822F3538;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F350C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3518;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3544
	if (ctx.cr6.eq) goto loc_822F3544;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f350c
	if (!ctx.cr6.eq) goto loc_822F350C;
loc_822F3538:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3544:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3558"))) PPC_WEAK_FUNC(sub_822F3558);
PPC_FUNC_IMPL(__imp__sub_822F3558) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3560;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31632
	ctx.r30.s64 = ctx.r11.s64 + 31632;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31632(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31632);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f35b0
	if (ctx.cr6.eq) goto loc_822F35B0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3584:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3590;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f35bc
	if (ctx.cr6.eq) goto loc_822F35BC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3584
	if (!ctx.cr6.eq) goto loc_822F3584;
loc_822F35B0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F35BC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F35D0"))) PPC_WEAK_FUNC(sub_822F35D0);
PPC_FUNC_IMPL(__imp__sub_822F35D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F35D8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31648
	ctx.r30.s64 = ctx.r11.s64 + 31648;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31648(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31648);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3628
	if (ctx.cr6.eq) goto loc_822F3628;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F35FC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3608;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3634
	if (ctx.cr6.eq) goto loc_822F3634;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f35fc
	if (!ctx.cr6.eq) goto loc_822F35FC;
loc_822F3628:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3634:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3648"))) PPC_WEAK_FUNC(sub_822F3648);
PPC_FUNC_IMPL(__imp__sub_822F3648) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3650;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31712
	ctx.r30.s64 = ctx.r11.s64 + 31712;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31712(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31712);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f36a0
	if (ctx.cr6.eq) goto loc_822F36A0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3674:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3680;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f36ac
	if (ctx.cr6.eq) goto loc_822F36AC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3674
	if (!ctx.cr6.eq) goto loc_822F3674;
loc_822F36A0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F36AC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F36C0"))) PPC_WEAK_FUNC(sub_822F36C0);
PPC_FUNC_IMPL(__imp__sub_822F36C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F36C8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31728
	ctx.r30.s64 = ctx.r11.s64 + 31728;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31728);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3718
	if (ctx.cr6.eq) goto loc_822F3718;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F36EC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F36F8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3724
	if (ctx.cr6.eq) goto loc_822F3724;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f36ec
	if (!ctx.cr6.eq) goto loc_822F36EC;
loc_822F3718:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3724:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3738"))) PPC_WEAK_FUNC(sub_822F3738);
PPC_FUNC_IMPL(__imp__sub_822F3738) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3740;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31744
	ctx.r30.s64 = ctx.r11.s64 + 31744;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31744(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31744);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3790
	if (ctx.cr6.eq) goto loc_822F3790;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3764:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3770;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f379c
	if (ctx.cr6.eq) goto loc_822F379C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3764
	if (!ctx.cr6.eq) goto loc_822F3764;
loc_822F3790:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F379C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F37B0"))) PPC_WEAK_FUNC(sub_822F37B0);
PPC_FUNC_IMPL(__imp__sub_822F37B0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F37B8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31760
	ctx.r30.s64 = ctx.r11.s64 + 31760;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31760(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31760);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3808
	if (ctx.cr6.eq) goto loc_822F3808;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F37DC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F37E8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3814
	if (ctx.cr6.eq) goto loc_822F3814;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f37dc
	if (!ctx.cr6.eq) goto loc_822F37DC;
loc_822F3808:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3814:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3828"))) PPC_WEAK_FUNC(sub_822F3828);
PPC_FUNC_IMPL(__imp__sub_822F3828) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3830;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31776
	ctx.r30.s64 = ctx.r11.s64 + 31776;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31776(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31776);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3880
	if (ctx.cr6.eq) goto loc_822F3880;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3854:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3860;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f388c
	if (ctx.cr6.eq) goto loc_822F388C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3854
	if (!ctx.cr6.eq) goto loc_822F3854;
loc_822F3880:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F388C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F38A0"))) PPC_WEAK_FUNC(sub_822F38A0);
PPC_FUNC_IMPL(__imp__sub_822F38A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F38A8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31792
	ctx.r30.s64 = ctx.r11.s64 + 31792;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31792(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31792);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f38f8
	if (ctx.cr6.eq) goto loc_822F38F8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F38CC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F38D8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3904
	if (ctx.cr6.eq) goto loc_822F3904;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f38cc
	if (!ctx.cr6.eq) goto loc_822F38CC;
loc_822F38F8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3904:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3918"))) PPC_WEAK_FUNC(sub_822F3918);
PPC_FUNC_IMPL(__imp__sub_822F3918) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3920;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31808
	ctx.r30.s64 = ctx.r11.s64 + 31808;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31808(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31808);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3970
	if (ctx.cr6.eq) goto loc_822F3970;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3944:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3950;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f397c
	if (ctx.cr6.eq) goto loc_822F397C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3944
	if (!ctx.cr6.eq) goto loc_822F3944;
loc_822F3970:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F397C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3990"))) PPC_WEAK_FUNC(sub_822F3990);
PPC_FUNC_IMPL(__imp__sub_822F3990) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3998;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31832
	ctx.r30.s64 = ctx.r11.s64 + 31832;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31832(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31832);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f39e8
	if (ctx.cr6.eq) goto loc_822F39E8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F39BC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F39C8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f39f4
	if (ctx.cr6.eq) goto loc_822F39F4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f39bc
	if (!ctx.cr6.eq) goto loc_822F39BC;
loc_822F39E8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F39F4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3A08"))) PPC_WEAK_FUNC(sub_822F3A08);
PPC_FUNC_IMPL(__imp__sub_822F3A08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3A10;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31856
	ctx.r30.s64 = ctx.r11.s64 + 31856;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31856(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31856);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3a60
	if (ctx.cr6.eq) goto loc_822F3A60;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3A34:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3A40;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3a6c
	if (ctx.cr6.eq) goto loc_822F3A6C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3a34
	if (!ctx.cr6.eq) goto loc_822F3A34;
loc_822F3A60:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3A6C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3A80"))) PPC_WEAK_FUNC(sub_822F3A80);
PPC_FUNC_IMPL(__imp__sub_822F3A80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3A88;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31880
	ctx.r30.s64 = ctx.r11.s64 + 31880;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31880(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31880);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3ad8
	if (ctx.cr6.eq) goto loc_822F3AD8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3AAC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3AB8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3ae4
	if (ctx.cr6.eq) goto loc_822F3AE4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3aac
	if (!ctx.cr6.eq) goto loc_822F3AAC;
loc_822F3AD8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3AE4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3AF8"))) PPC_WEAK_FUNC(sub_822F3AF8);
PPC_FUNC_IMPL(__imp__sub_822F3AF8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3B00;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31912
	ctx.r30.s64 = ctx.r11.s64 + 31912;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31912(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31912);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3b50
	if (ctx.cr6.eq) goto loc_822F3B50;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3B24:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3B30;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3b5c
	if (ctx.cr6.eq) goto loc_822F3B5C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3b24
	if (!ctx.cr6.eq) goto loc_822F3B24;
loc_822F3B50:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3B5C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3B70"))) PPC_WEAK_FUNC(sub_822F3B70);
PPC_FUNC_IMPL(__imp__sub_822F3B70) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3B78;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31936
	ctx.r30.s64 = ctx.r11.s64 + 31936;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31936(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31936);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3bc8
	if (ctx.cr6.eq) goto loc_822F3BC8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3B9C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3BA8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3bd4
	if (ctx.cr6.eq) goto loc_822F3BD4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3b9c
	if (!ctx.cr6.eq) goto loc_822F3B9C;
loc_822F3BC8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3BD4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3BE8"))) PPC_WEAK_FUNC(sub_822F3BE8);
PPC_FUNC_IMPL(__imp__sub_822F3BE8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3BF0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31960
	ctx.r30.s64 = ctx.r11.s64 + 31960;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31960(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31960);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3c40
	if (ctx.cr6.eq) goto loc_822F3C40;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3C14:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3C20;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3c4c
	if (ctx.cr6.eq) goto loc_822F3C4C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3c14
	if (!ctx.cr6.eq) goto loc_822F3C14;
loc_822F3C40:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3C4C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3C60"))) PPC_WEAK_FUNC(sub_822F3C60);
PPC_FUNC_IMPL(__imp__sub_822F3C60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3C68;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,31976
	ctx.r30.s64 = ctx.r11.s64 + 31976;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,31976(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31976);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3cb8
	if (ctx.cr6.eq) goto loc_822F3CB8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3C8C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3C98;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3cc4
	if (ctx.cr6.eq) goto loc_822F3CC4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3c8c
	if (!ctx.cr6.eq) goto loc_822F3C8C;
loc_822F3CB8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3CC4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3CD8"))) PPC_WEAK_FUNC(sub_822F3CD8);
PPC_FUNC_IMPL(__imp__sub_822F3CD8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3CE0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32024
	ctx.r30.s64 = ctx.r11.s64 + 32024;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32024(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32024);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3d30
	if (ctx.cr6.eq) goto loc_822F3D30;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3D04:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3D10;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3d3c
	if (ctx.cr6.eq) goto loc_822F3D3C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3d04
	if (!ctx.cr6.eq) goto loc_822F3D04;
loc_822F3D30:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3D3C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3D50"))) PPC_WEAK_FUNC(sub_822F3D50);
PPC_FUNC_IMPL(__imp__sub_822F3D50) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3D58;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32040
	ctx.r30.s64 = ctx.r11.s64 + 32040;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32040(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32040);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3da8
	if (ctx.cr6.eq) goto loc_822F3DA8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3D7C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3D88;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3db4
	if (ctx.cr6.eq) goto loc_822F3DB4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3d7c
	if (!ctx.cr6.eq) goto loc_822F3D7C;
loc_822F3DA8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3DB4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3DC8"))) PPC_WEAK_FUNC(sub_822F3DC8);
PPC_FUNC_IMPL(__imp__sub_822F3DC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3DD0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-20924
	ctx.r30.s64 = ctx.r11.s64 + -20924;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-20924(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -20924);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3e28
	if (ctx.cr6.eq) goto loc_822F3E28;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3DF4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3E00;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3e34
	if (ctx.cr6.eq) goto loc_822F3E34;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3df4
	if (!ctx.cr6.eq) goto loc_822F3DF4;
loc_822F3E28:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3E34:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3E50"))) PPC_WEAK_FUNC(sub_822F3E50);
PPC_FUNC_IMPL(__imp__sub_822F3E50) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3E58;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32152
	ctx.r30.s64 = ctx.r11.s64 + 32152;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32152(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32152);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3ea8
	if (ctx.cr6.eq) goto loc_822F3EA8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3E7C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3E88;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3eb4
	if (ctx.cr6.eq) goto loc_822F3EB4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3e7c
	if (!ctx.cr6.eq) goto loc_822F3E7C;
loc_822F3EA8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3EB4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3EC8"))) PPC_WEAK_FUNC(sub_822F3EC8);
PPC_FUNC_IMPL(__imp__sub_822F3EC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3ED0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32168
	ctx.r30.s64 = ctx.r11.s64 + 32168;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32168(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32168);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3f20
	if (ctx.cr6.eq) goto loc_822F3F20;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3EF4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3F00;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3f2c
	if (ctx.cr6.eq) goto loc_822F3F2C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3ef4
	if (!ctx.cr6.eq) goto loc_822F3EF4;
loc_822F3F20:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3F2C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3F40"))) PPC_WEAK_FUNC(sub_822F3F40);
PPC_FUNC_IMPL(__imp__sub_822F3F40) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3F48;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32256
	ctx.r30.s64 = ctx.r11.s64 + 32256;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32256(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32256);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f3f98
	if (ctx.cr6.eq) goto loc_822F3F98;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3F6C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3F78;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f3fa4
	if (ctx.cr6.eq) goto loc_822F3FA4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3f6c
	if (!ctx.cr6.eq) goto loc_822F3F6C;
loc_822F3F98:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F3FA4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F3FB8"))) PPC_WEAK_FUNC(sub_822F3FB8);
PPC_FUNC_IMPL(__imp__sub_822F3FB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F3FC0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32272
	ctx.r30.s64 = ctx.r11.s64 + 32272;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32272(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32272);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4010
	if (ctx.cr6.eq) goto loc_822F4010;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F3FE4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F3FF0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f401c
	if (ctx.cr6.eq) goto loc_822F401C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f3fe4
	if (!ctx.cr6.eq) goto loc_822F3FE4;
loc_822F4010:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F401C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4030"))) PPC_WEAK_FUNC(sub_822F4030);
PPC_FUNC_IMPL(__imp__sub_822F4030) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4038;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32288
	ctx.r30.s64 = ctx.r11.s64 + 32288;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32288(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32288);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4088
	if (ctx.cr6.eq) goto loc_822F4088;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F405C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4068;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4094
	if (ctx.cr6.eq) goto loc_822F4094;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f405c
	if (!ctx.cr6.eq) goto loc_822F405C;
loc_822F4088:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4094:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F40A8"))) PPC_WEAK_FUNC(sub_822F40A8);
PPC_FUNC_IMPL(__imp__sub_822F40A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F40B0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32328
	ctx.r30.s64 = ctx.r11.s64 + 32328;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32328(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32328);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4100
	if (ctx.cr6.eq) goto loc_822F4100;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F40D4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F40E0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f410c
	if (ctx.cr6.eq) goto loc_822F410C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f40d4
	if (!ctx.cr6.eq) goto loc_822F40D4;
loc_822F4100:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F410C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4120"))) PPC_WEAK_FUNC(sub_822F4120);
PPC_FUNC_IMPL(__imp__sub_822F4120) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4128;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-20888
	ctx.r30.s64 = ctx.r11.s64 + -20888;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-20888(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -20888);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4180
	if (ctx.cr6.eq) goto loc_822F4180;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F414C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4158;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f418c
	if (ctx.cr6.eq) goto loc_822F418C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f414c
	if (!ctx.cr6.eq) goto loc_822F414C;
loc_822F4180:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F418C:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F41A8"))) PPC_WEAK_FUNC(sub_822F41A8);
PPC_FUNC_IMPL(__imp__sub_822F41A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F41B0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32344
	ctx.r30.s64 = ctx.r11.s64 + 32344;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4200
	if (ctx.cr6.eq) goto loc_822F4200;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F41D4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F41E0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f420c
	if (ctx.cr6.eq) goto loc_822F420C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f41d4
	if (!ctx.cr6.eq) goto loc_822F41D4;
loc_822F4200:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F420C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4220"))) PPC_WEAK_FUNC(sub_822F4220);
PPC_FUNC_IMPL(__imp__sub_822F4220) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4228;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32360
	ctx.r30.s64 = ctx.r11.s64 + 32360;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32360(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32360);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4278
	if (ctx.cr6.eq) goto loc_822F4278;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F424C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4258;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4284
	if (ctx.cr6.eq) goto loc_822F4284;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f424c
	if (!ctx.cr6.eq) goto loc_822F424C;
loc_822F4278:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4284:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4298"))) PPC_WEAK_FUNC(sub_822F4298);
PPC_FUNC_IMPL(__imp__sub_822F4298) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F42A0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32416
	ctx.r30.s64 = ctx.r11.s64 + 32416;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32416(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32416);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f42f0
	if (ctx.cr6.eq) goto loc_822F42F0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F42C4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F42D0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f42fc
	if (ctx.cr6.eq) goto loc_822F42FC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f42c4
	if (!ctx.cr6.eq) goto loc_822F42C4;
loc_822F42F0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F42FC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4310"))) PPC_WEAK_FUNC(sub_822F4310);
PPC_FUNC_IMPL(__imp__sub_822F4310) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4318;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32480
	ctx.r30.s64 = ctx.r11.s64 + 32480;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32480(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32480);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4368
	if (ctx.cr6.eq) goto loc_822F4368;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F433C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4348;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4374
	if (ctx.cr6.eq) goto loc_822F4374;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f433c
	if (!ctx.cr6.eq) goto loc_822F433C;
loc_822F4368:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4374:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4388"))) PPC_WEAK_FUNC(sub_822F4388);
PPC_FUNC_IMPL(__imp__sub_822F4388) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4390;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32496
	ctx.r30.s64 = ctx.r11.s64 + 32496;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32496(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32496);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f43e0
	if (ctx.cr6.eq) goto loc_822F43E0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F43B4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F43C0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f43ec
	if (ctx.cr6.eq) goto loc_822F43EC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f43b4
	if (!ctx.cr6.eq) goto loc_822F43B4;
loc_822F43E0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F43EC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4400"))) PPC_WEAK_FUNC(sub_822F4400);
PPC_FUNC_IMPL(__imp__sub_822F4400) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4408;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32528
	ctx.r30.s64 = ctx.r11.s64 + 32528;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32528(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32528);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4458
	if (ctx.cr6.eq) goto loc_822F4458;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F442C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4438;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4464
	if (ctx.cr6.eq) goto loc_822F4464;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f442c
	if (!ctx.cr6.eq) goto loc_822F442C;
loc_822F4458:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4464:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4478"))) PPC_WEAK_FUNC(sub_822F4478);
PPC_FUNC_IMPL(__imp__sub_822F4478) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4480;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32704
	ctx.r30.s64 = ctx.r11.s64 + 32704;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32704(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32704);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f44d0
	if (ctx.cr6.eq) goto loc_822F44D0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F44A4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F44B0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f44dc
	if (ctx.cr6.eq) goto loc_822F44DC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f44a4
	if (!ctx.cr6.eq) goto loc_822F44A4;
loc_822F44D0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F44DC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F44F0"))) PPC_WEAK_FUNC(sub_822F44F0);
PPC_FUNC_IMPL(__imp__sub_822F44F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F44F8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,32728
	ctx.r30.s64 = ctx.r11.s64 + 32728;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,32728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32728);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4548
	if (ctx.cr6.eq) goto loc_822F4548;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F451C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4528;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4554
	if (ctx.cr6.eq) goto loc_822F4554;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f451c
	if (!ctx.cr6.eq) goto loc_822F451C;
loc_822F4548:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4554:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4568"))) PPC_WEAK_FUNC(sub_822F4568);
PPC_FUNC_IMPL(__imp__sub_822F4568) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4570;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-32736
	ctx.r30.s64 = ctx.r11.s64 + -32736;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-32736(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -32736);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f45c0
	if (ctx.cr6.eq) goto loc_822F45C0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4594:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F45A0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f45cc
	if (ctx.cr6.eq) goto loc_822F45CC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4594
	if (!ctx.cr6.eq) goto loc_822F4594;
loc_822F45C0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F45CC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F45E0"))) PPC_WEAK_FUNC(sub_822F45E0);
PPC_FUNC_IMPL(__imp__sub_822F45E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F45E8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-32528
	ctx.r30.s64 = ctx.r11.s64 + -32528;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-32528(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -32528);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4638
	if (ctx.cr6.eq) goto loc_822F4638;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F460C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4618;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4644
	if (ctx.cr6.eq) goto loc_822F4644;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f460c
	if (!ctx.cr6.eq) goto loc_822F460C;
loc_822F4638:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4644:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4658"))) PPC_WEAK_FUNC(sub_822F4658);
PPC_FUNC_IMPL(__imp__sub_822F4658) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4660;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-32512
	ctx.r30.s64 = ctx.r11.s64 + -32512;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-32512(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -32512);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f46b0
	if (ctx.cr6.eq) goto loc_822F46B0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4684:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4690;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f46bc
	if (ctx.cr6.eq) goto loc_822F46BC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4684
	if (!ctx.cr6.eq) goto loc_822F4684;
loc_822F46B0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F46BC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F46D0"))) PPC_WEAK_FUNC(sub_822F46D0);
PPC_FUNC_IMPL(__imp__sub_822F46D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F46D8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-32288
	ctx.r30.s64 = ctx.r11.s64 + -32288;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-32288(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -32288);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4728
	if (ctx.cr6.eq) goto loc_822F4728;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F46FC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4708;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4734
	if (ctx.cr6.eq) goto loc_822F4734;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f46fc
	if (!ctx.cr6.eq) goto loc_822F46FC;
loc_822F4728:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4734:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4748"))) PPC_WEAK_FUNC(sub_822F4748);
PPC_FUNC_IMPL(__imp__sub_822F4748) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4750;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-32264
	ctx.r30.s64 = ctx.r11.s64 + -32264;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-32264(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -32264);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f47a0
	if (ctx.cr6.eq) goto loc_822F47A0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4774:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4780;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f47ac
	if (ctx.cr6.eq) goto loc_822F47AC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4774
	if (!ctx.cr6.eq) goto loc_822F4774;
loc_822F47A0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F47AC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F47C0"))) PPC_WEAK_FUNC(sub_822F47C0);
PPC_FUNC_IMPL(__imp__sub_822F47C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F47C8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-32248
	ctx.r30.s64 = ctx.r11.s64 + -32248;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-32248(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -32248);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4818
	if (ctx.cr6.eq) goto loc_822F4818;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F47EC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F47F8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4824
	if (ctx.cr6.eq) goto loc_822F4824;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f47ec
	if (!ctx.cr6.eq) goto loc_822F47EC;
loc_822F4818:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4824:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4838"))) PPC_WEAK_FUNC(sub_822F4838);
PPC_FUNC_IMPL(__imp__sub_822F4838) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4840;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-32232
	ctx.r30.s64 = ctx.r11.s64 + -32232;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-32232(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -32232);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4890
	if (ctx.cr6.eq) goto loc_822F4890;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4864:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4870;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f489c
	if (ctx.cr6.eq) goto loc_822F489C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4864
	if (!ctx.cr6.eq) goto loc_822F4864;
loc_822F4890:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F489C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F48B0"))) PPC_WEAK_FUNC(sub_822F48B0);
PPC_FUNC_IMPL(__imp__sub_822F48B0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F48B8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-32192
	ctx.r30.s64 = ctx.r11.s64 + -32192;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-32192(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -32192);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4908
	if (ctx.cr6.eq) goto loc_822F4908;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F48DC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F48E8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4914
	if (ctx.cr6.eq) goto loc_822F4914;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f48dc
	if (!ctx.cr6.eq) goto loc_822F48DC;
loc_822F4908:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4914:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4928"))) PPC_WEAK_FUNC(sub_822F4928);
PPC_FUNC_IMPL(__imp__sub_822F4928) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4930;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-32176
	ctx.r30.s64 = ctx.r11.s64 + -32176;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-32176(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -32176);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4980
	if (ctx.cr6.eq) goto loc_822F4980;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4954:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4960;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f498c
	if (ctx.cr6.eq) goto loc_822F498C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4954
	if (!ctx.cr6.eq) goto loc_822F4954;
loc_822F4980:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F498C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F49A0"))) PPC_WEAK_FUNC(sub_822F49A0);
PPC_FUNC_IMPL(__imp__sub_822F49A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F49A8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-31896
	ctx.r30.s64 = ctx.r11.s64 + -31896;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-31896(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31896);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f49f8
	if (ctx.cr6.eq) goto loc_822F49F8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F49CC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F49D8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4a04
	if (ctx.cr6.eq) goto loc_822F4A04;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f49cc
	if (!ctx.cr6.eq) goto loc_822F49CC;
loc_822F49F8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4A04:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4A18"))) PPC_WEAK_FUNC(sub_822F4A18);
PPC_FUNC_IMPL(__imp__sub_822F4A18) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4A20;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-31880
	ctx.r30.s64 = ctx.r11.s64 + -31880;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-31880(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31880);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4a70
	if (ctx.cr6.eq) goto loc_822F4A70;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4A44:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4A50;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4a7c
	if (ctx.cr6.eq) goto loc_822F4A7C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4a44
	if (!ctx.cr6.eq) goto loc_822F4A44;
loc_822F4A70:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4A7C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4A90"))) PPC_WEAK_FUNC(sub_822F4A90);
PPC_FUNC_IMPL(__imp__sub_822F4A90) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4A98;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-31856
	ctx.r30.s64 = ctx.r11.s64 + -31856;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-31856(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31856);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4ae8
	if (ctx.cr6.eq) goto loc_822F4AE8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4ABC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4AC8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4af4
	if (ctx.cr6.eq) goto loc_822F4AF4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4abc
	if (!ctx.cr6.eq) goto loc_822F4ABC;
loc_822F4AE8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4AF4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4B08"))) PPC_WEAK_FUNC(sub_822F4B08);
PPC_FUNC_IMPL(__imp__sub_822F4B08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4B10;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-31840
	ctx.r30.s64 = ctx.r11.s64 + -31840;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-31840(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31840);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4b60
	if (ctx.cr6.eq) goto loc_822F4B60;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4B34:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4B40;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4b6c
	if (ctx.cr6.eq) goto loc_822F4B6C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4b34
	if (!ctx.cr6.eq) goto loc_822F4B34;
loc_822F4B60:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4B6C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4B80"))) PPC_WEAK_FUNC(sub_822F4B80);
PPC_FUNC_IMPL(__imp__sub_822F4B80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4B88;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-31488
	ctx.r30.s64 = ctx.r11.s64 + -31488;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-31488(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31488);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4bd8
	if (ctx.cr6.eq) goto loc_822F4BD8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4BAC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4BB8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4be4
	if (ctx.cr6.eq) goto loc_822F4BE4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4bac
	if (!ctx.cr6.eq) goto loc_822F4BAC;
loc_822F4BD8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4BE4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4BF8"))) PPC_WEAK_FUNC(sub_822F4BF8);
PPC_FUNC_IMPL(__imp__sub_822F4BF8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4C00;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-31048
	ctx.r30.s64 = ctx.r11.s64 + -31048;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-31048(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31048);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4c50
	if (ctx.cr6.eq) goto loc_822F4C50;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4C24:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4C30;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4c5c
	if (ctx.cr6.eq) goto loc_822F4C5C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4c24
	if (!ctx.cr6.eq) goto loc_822F4C24;
loc_822F4C50:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4C5C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4C70"))) PPC_WEAK_FUNC(sub_822F4C70);
PPC_FUNC_IMPL(__imp__sub_822F4C70) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4C78;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-31032
	ctx.r30.s64 = ctx.r11.s64 + -31032;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-31032(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31032);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4cc8
	if (ctx.cr6.eq) goto loc_822F4CC8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4C9C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4CA8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4cd4
	if (ctx.cr6.eq) goto loc_822F4CD4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4c9c
	if (!ctx.cr6.eq) goto loc_822F4C9C;
loc_822F4CC8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4CD4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4CE8"))) PPC_WEAK_FUNC(sub_822F4CE8);
PPC_FUNC_IMPL(__imp__sub_822F4CE8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4CF0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-31008
	ctx.r30.s64 = ctx.r11.s64 + -31008;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-31008(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31008);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4d40
	if (ctx.cr6.eq) goto loc_822F4D40;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4D14:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4D20;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4d4c
	if (ctx.cr6.eq) goto loc_822F4D4C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4d14
	if (!ctx.cr6.eq) goto loc_822F4D14;
loc_822F4D40:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4D4C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4D60"))) PPC_WEAK_FUNC(sub_822F4D60);
PPC_FUNC_IMPL(__imp__sub_822F4D60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4D68;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30984
	ctx.r30.s64 = ctx.r11.s64 + -30984;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30984(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30984);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4db8
	if (ctx.cr6.eq) goto loc_822F4DB8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4D8C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4D98;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4dc4
	if (ctx.cr6.eq) goto loc_822F4DC4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4d8c
	if (!ctx.cr6.eq) goto loc_822F4D8C;
loc_822F4DB8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4DC4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4DD8"))) PPC_WEAK_FUNC(sub_822F4DD8);
PPC_FUNC_IMPL(__imp__sub_822F4DD8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4DE0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30944
	ctx.r30.s64 = ctx.r11.s64 + -30944;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30944(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30944);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4e30
	if (ctx.cr6.eq) goto loc_822F4E30;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4E04:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4E10;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4e3c
	if (ctx.cr6.eq) goto loc_822F4E3C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4e04
	if (!ctx.cr6.eq) goto loc_822F4E04;
loc_822F4E30:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4E3C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4E50"))) PPC_WEAK_FUNC(sub_822F4E50);
PPC_FUNC_IMPL(__imp__sub_822F4E50) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4E58;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30920
	ctx.r30.s64 = ctx.r11.s64 + -30920;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30920(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30920);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4ea8
	if (ctx.cr6.eq) goto loc_822F4EA8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4E7C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4E88;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4eb4
	if (ctx.cr6.eq) goto loc_822F4EB4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4e7c
	if (!ctx.cr6.eq) goto loc_822F4E7C;
loc_822F4EA8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4EB4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4EC8"))) PPC_WEAK_FUNC(sub_822F4EC8);
PPC_FUNC_IMPL(__imp__sub_822F4EC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4ED0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30904
	ctx.r30.s64 = ctx.r11.s64 + -30904;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30904(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30904);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4f20
	if (ctx.cr6.eq) goto loc_822F4F20;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4EF4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4F00;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4f2c
	if (ctx.cr6.eq) goto loc_822F4F2C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4ef4
	if (!ctx.cr6.eq) goto loc_822F4EF4;
loc_822F4F20:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4F2C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4F40"))) PPC_WEAK_FUNC(sub_822F4F40);
PPC_FUNC_IMPL(__imp__sub_822F4F40) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4F48;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30888
	ctx.r30.s64 = ctx.r11.s64 + -30888;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30888(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30888);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f4f98
	if (ctx.cr6.eq) goto loc_822F4F98;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4F6C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4F78;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f4fa4
	if (ctx.cr6.eq) goto loc_822F4FA4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4f6c
	if (!ctx.cr6.eq) goto loc_822F4F6C;
loc_822F4F98:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F4FA4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F4FB8"))) PPC_WEAK_FUNC(sub_822F4FB8);
PPC_FUNC_IMPL(__imp__sub_822F4FB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F4FC0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30872
	ctx.r30.s64 = ctx.r11.s64 + -30872;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30872(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30872);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5010
	if (ctx.cr6.eq) goto loc_822F5010;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F4FE4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F4FF0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f501c
	if (ctx.cr6.eq) goto loc_822F501C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f4fe4
	if (!ctx.cr6.eq) goto loc_822F4FE4;
loc_822F5010:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F501C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5030"))) PPC_WEAK_FUNC(sub_822F5030);
PPC_FUNC_IMPL(__imp__sub_822F5030) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5038;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30848
	ctx.r30.s64 = ctx.r11.s64 + -30848;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30848(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30848);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5088
	if (ctx.cr6.eq) goto loc_822F5088;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F505C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5068;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5094
	if (ctx.cr6.eq) goto loc_822F5094;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f505c
	if (!ctx.cr6.eq) goto loc_822F505C;
loc_822F5088:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5094:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F50A8"))) PPC_WEAK_FUNC(sub_822F50A8);
PPC_FUNC_IMPL(__imp__sub_822F50A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F50B0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-20780
	ctx.r30.s64 = ctx.r11.s64 + -20780;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-20780(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -20780);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5108
	if (ctx.cr6.eq) goto loc_822F5108;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F50D4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F50E0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5114
	if (ctx.cr6.eq) goto loc_822F5114;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f50d4
	if (!ctx.cr6.eq) goto loc_822F50D4;
loc_822F5108:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5114:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5130"))) PPC_WEAK_FUNC(sub_822F5130);
PPC_FUNC_IMPL(__imp__sub_822F5130) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5138;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30728
	ctx.r30.s64 = ctx.r11.s64 + -30728;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30728);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5188
	if (ctx.cr6.eq) goto loc_822F5188;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F515C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5168;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5194
	if (ctx.cr6.eq) goto loc_822F5194;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f515c
	if (!ctx.cr6.eq) goto loc_822F515C;
loc_822F5188:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5194:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F51A8"))) PPC_WEAK_FUNC(sub_822F51A8);
PPC_FUNC_IMPL(__imp__sub_822F51A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F51B0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30696
	ctx.r30.s64 = ctx.r11.s64 + -30696;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30696(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30696);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5200
	if (ctx.cr6.eq) goto loc_822F5200;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F51D4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F51E0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f520c
	if (ctx.cr6.eq) goto loc_822F520C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f51d4
	if (!ctx.cr6.eq) goto loc_822F51D4;
loc_822F5200:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F520C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5220"))) PPC_WEAK_FUNC(sub_822F5220);
PPC_FUNC_IMPL(__imp__sub_822F5220) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5228;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30672
	ctx.r30.s64 = ctx.r11.s64 + -30672;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30672(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30672);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5278
	if (ctx.cr6.eq) goto loc_822F5278;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F524C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5258;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5284
	if (ctx.cr6.eq) goto loc_822F5284;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f524c
	if (!ctx.cr6.eq) goto loc_822F524C;
loc_822F5278:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5284:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5298"))) PPC_WEAK_FUNC(sub_822F5298);
PPC_FUNC_IMPL(__imp__sub_822F5298) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F52A0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30656
	ctx.r30.s64 = ctx.r11.s64 + -30656;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30656(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30656);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f52f0
	if (ctx.cr6.eq) goto loc_822F52F0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F52C4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F52D0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f52fc
	if (ctx.cr6.eq) goto loc_822F52FC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f52c4
	if (!ctx.cr6.eq) goto loc_822F52C4;
loc_822F52F0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F52FC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5310"))) PPC_WEAK_FUNC(sub_822F5310);
PPC_FUNC_IMPL(__imp__sub_822F5310) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5318;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30640
	ctx.r30.s64 = ctx.r11.s64 + -30640;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30640(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30640);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5368
	if (ctx.cr6.eq) goto loc_822F5368;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F533C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5348;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5374
	if (ctx.cr6.eq) goto loc_822F5374;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f533c
	if (!ctx.cr6.eq) goto loc_822F533C;
loc_822F5368:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5374:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5388"))) PPC_WEAK_FUNC(sub_822F5388);
PPC_FUNC_IMPL(__imp__sub_822F5388) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5390;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30608
	ctx.r30.s64 = ctx.r11.s64 + -30608;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30608(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30608);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f53e0
	if (ctx.cr6.eq) goto loc_822F53E0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F53B4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F53C0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f53ec
	if (ctx.cr6.eq) goto loc_822F53EC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f53b4
	if (!ctx.cr6.eq) goto loc_822F53B4;
loc_822F53E0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F53EC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5400"))) PPC_WEAK_FUNC(sub_822F5400);
PPC_FUNC_IMPL(__imp__sub_822F5400) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5408;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-20720
	ctx.r30.s64 = ctx.r11.s64 + -20720;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-20720(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -20720);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5460
	if (ctx.cr6.eq) goto loc_822F5460;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F542C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5438;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f546c
	if (ctx.cr6.eq) goto loc_822F546C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f542c
	if (!ctx.cr6.eq) goto loc_822F542C;
loc_822F5460:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F546C:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5488"))) PPC_WEAK_FUNC(sub_822F5488);
PPC_FUNC_IMPL(__imp__sub_822F5488) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5490;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30400
	ctx.r30.s64 = ctx.r11.s64 + -30400;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30400(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30400);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f54e0
	if (ctx.cr6.eq) goto loc_822F54E0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F54B4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F54C0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f54ec
	if (ctx.cr6.eq) goto loc_822F54EC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f54b4
	if (!ctx.cr6.eq) goto loc_822F54B4;
loc_822F54E0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F54EC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5500"))) PPC_WEAK_FUNC(sub_822F5500);
PPC_FUNC_IMPL(__imp__sub_822F5500) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5508;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-20624
	ctx.r30.s64 = ctx.r11.s64 + -20624;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-20624(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -20624);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5560
	if (ctx.cr6.eq) goto loc_822F5560;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F552C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5538;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f556c
	if (ctx.cr6.eq) goto loc_822F556C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f552c
	if (!ctx.cr6.eq) goto loc_822F552C;
loc_822F5560:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F556C:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5588"))) PPC_WEAK_FUNC(sub_822F5588);
PPC_FUNC_IMPL(__imp__sub_822F5588) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5590;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30240
	ctx.r30.s64 = ctx.r11.s64 + -30240;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30240(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30240);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f55e0
	if (ctx.cr6.eq) goto loc_822F55E0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F55B4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F55C0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f55ec
	if (ctx.cr6.eq) goto loc_822F55EC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f55b4
	if (!ctx.cr6.eq) goto loc_822F55B4;
loc_822F55E0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F55EC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5600"))) PPC_WEAK_FUNC(sub_822F5600);
PPC_FUNC_IMPL(__imp__sub_822F5600) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5608;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30200
	ctx.r30.s64 = ctx.r11.s64 + -30200;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30200(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30200);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5658
	if (ctx.cr6.eq) goto loc_822F5658;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F562C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5638;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5664
	if (ctx.cr6.eq) goto loc_822F5664;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f562c
	if (!ctx.cr6.eq) goto loc_822F562C;
loc_822F5658:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5664:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5678"))) PPC_WEAK_FUNC(sub_822F5678);
PPC_FUNC_IMPL(__imp__sub_822F5678) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5680;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30168
	ctx.r30.s64 = ctx.r11.s64 + -30168;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30168(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30168);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f56d0
	if (ctx.cr6.eq) goto loc_822F56D0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F56A4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F56B0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f56dc
	if (ctx.cr6.eq) goto loc_822F56DC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f56a4
	if (!ctx.cr6.eq) goto loc_822F56A4;
loc_822F56D0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F56DC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F56F0"))) PPC_WEAK_FUNC(sub_822F56F0);
PPC_FUNC_IMPL(__imp__sub_822F56F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F56F8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30080
	ctx.r30.s64 = ctx.r11.s64 + -30080;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30080(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30080);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5748
	if (ctx.cr6.eq) goto loc_822F5748;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F571C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5728;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5754
	if (ctx.cr6.eq) goto loc_822F5754;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f571c
	if (!ctx.cr6.eq) goto loc_822F571C;
loc_822F5748:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5754:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5768"))) PPC_WEAK_FUNC(sub_822F5768);
PPC_FUNC_IMPL(__imp__sub_822F5768) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5770;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30048
	ctx.r30.s64 = ctx.r11.s64 + -30048;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30048(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30048);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f57c0
	if (ctx.cr6.eq) goto loc_822F57C0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5794:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F57A0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f57cc
	if (ctx.cr6.eq) goto loc_822F57CC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5794
	if (!ctx.cr6.eq) goto loc_822F5794;
loc_822F57C0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F57CC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F57E0"))) PPC_WEAK_FUNC(sub_822F57E0);
PPC_FUNC_IMPL(__imp__sub_822F57E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F57E8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30032
	ctx.r30.s64 = ctx.r11.s64 + -30032;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30032(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30032);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5838
	if (ctx.cr6.eq) goto loc_822F5838;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F580C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5818;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5844
	if (ctx.cr6.eq) goto loc_822F5844;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f580c
	if (!ctx.cr6.eq) goto loc_822F580C;
loc_822F5838:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5844:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5858"))) PPC_WEAK_FUNC(sub_822F5858);
PPC_FUNC_IMPL(__imp__sub_822F5858) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5860;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-30000
	ctx.r30.s64 = ctx.r11.s64 + -30000;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-30000(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -30000);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f58b0
	if (ctx.cr6.eq) goto loc_822F58B0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5884:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5890;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f58bc
	if (ctx.cr6.eq) goto loc_822F58BC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5884
	if (!ctx.cr6.eq) goto loc_822F5884;
loc_822F58B0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F58BC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F58D0"))) PPC_WEAK_FUNC(sub_822F58D0);
PPC_FUNC_IMPL(__imp__sub_822F58D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F58D8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29984
	ctx.r30.s64 = ctx.r11.s64 + -29984;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29984(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29984);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5928
	if (ctx.cr6.eq) goto loc_822F5928;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F58FC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5908;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5934
	if (ctx.cr6.eq) goto loc_822F5934;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f58fc
	if (!ctx.cr6.eq) goto loc_822F58FC;
loc_822F5928:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5934:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5948"))) PPC_WEAK_FUNC(sub_822F5948);
PPC_FUNC_IMPL(__imp__sub_822F5948) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5950;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29944
	ctx.r30.s64 = ctx.r11.s64 + -29944;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29944(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29944);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f59a0
	if (ctx.cr6.eq) goto loc_822F59A0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5974:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5980;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f59ac
	if (ctx.cr6.eq) goto loc_822F59AC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5974
	if (!ctx.cr6.eq) goto loc_822F5974;
loc_822F59A0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F59AC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F59C0"))) PPC_WEAK_FUNC(sub_822F59C0);
PPC_FUNC_IMPL(__imp__sub_822F59C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F59C8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29824
	ctx.r30.s64 = ctx.r11.s64 + -29824;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29824(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29824);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5a18
	if (ctx.cr6.eq) goto loc_822F5A18;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F59EC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F59F8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5a24
	if (ctx.cr6.eq) goto loc_822F5A24;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f59ec
	if (!ctx.cr6.eq) goto loc_822F59EC;
loc_822F5A18:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5A24:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5A38"))) PPC_WEAK_FUNC(sub_822F5A38);
PPC_FUNC_IMPL(__imp__sub_822F5A38) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5A40;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29744
	ctx.r30.s64 = ctx.r11.s64 + -29744;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29744(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29744);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5a90
	if (ctx.cr6.eq) goto loc_822F5A90;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5A64:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5A70;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5a9c
	if (ctx.cr6.eq) goto loc_822F5A9C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5a64
	if (!ctx.cr6.eq) goto loc_822F5A64;
loc_822F5A90:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5A9C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5AB0"))) PPC_WEAK_FUNC(sub_822F5AB0);
PPC_FUNC_IMPL(__imp__sub_822F5AB0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5AB8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29712
	ctx.r30.s64 = ctx.r11.s64 + -29712;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29712(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29712);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5b08
	if (ctx.cr6.eq) goto loc_822F5B08;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5ADC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5AE8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5b14
	if (ctx.cr6.eq) goto loc_822F5B14;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5adc
	if (!ctx.cr6.eq) goto loc_822F5ADC;
loc_822F5B08:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5B14:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5B28"))) PPC_WEAK_FUNC(sub_822F5B28);
PPC_FUNC_IMPL(__imp__sub_822F5B28) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5B30;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29576
	ctx.r30.s64 = ctx.r11.s64 + -29576;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29576(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29576);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5b80
	if (ctx.cr6.eq) goto loc_822F5B80;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5B54:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5B60;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5b8c
	if (ctx.cr6.eq) goto loc_822F5B8C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5b54
	if (!ctx.cr6.eq) goto loc_822F5B54;
loc_822F5B80:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5B8C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5BA0"))) PPC_WEAK_FUNC(sub_822F5BA0);
PPC_FUNC_IMPL(__imp__sub_822F5BA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5BA8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29552
	ctx.r30.s64 = ctx.r11.s64 + -29552;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29552(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29552);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5bf8
	if (ctx.cr6.eq) goto loc_822F5BF8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5BCC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5BD8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5c04
	if (ctx.cr6.eq) goto loc_822F5C04;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5bcc
	if (!ctx.cr6.eq) goto loc_822F5BCC;
loc_822F5BF8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5C04:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5C18"))) PPC_WEAK_FUNC(sub_822F5C18);
PPC_FUNC_IMPL(__imp__sub_822F5C18) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5C20;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29488
	ctx.r30.s64 = ctx.r11.s64 + -29488;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29488(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29488);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5c70
	if (ctx.cr6.eq) goto loc_822F5C70;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5C44:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5C50;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5c7c
	if (ctx.cr6.eq) goto loc_822F5C7C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5c44
	if (!ctx.cr6.eq) goto loc_822F5C44;
loc_822F5C70:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5C7C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5C90"))) PPC_WEAK_FUNC(sub_822F5C90);
PPC_FUNC_IMPL(__imp__sub_822F5C90) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5C98;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29472
	ctx.r30.s64 = ctx.r11.s64 + -29472;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29472(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29472);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5ce8
	if (ctx.cr6.eq) goto loc_822F5CE8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5CBC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5CC8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5cf4
	if (ctx.cr6.eq) goto loc_822F5CF4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5cbc
	if (!ctx.cr6.eq) goto loc_822F5CBC;
loc_822F5CE8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5CF4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5D08"))) PPC_WEAK_FUNC(sub_822F5D08);
PPC_FUNC_IMPL(__imp__sub_822F5D08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5D10;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29456
	ctx.r30.s64 = ctx.r11.s64 + -29456;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29456(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29456);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5d60
	if (ctx.cr6.eq) goto loc_822F5D60;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5D34:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5D40;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5d6c
	if (ctx.cr6.eq) goto loc_822F5D6C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5d34
	if (!ctx.cr6.eq) goto loc_822F5D34;
loc_822F5D60:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5D6C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5D80"))) PPC_WEAK_FUNC(sub_822F5D80);
PPC_FUNC_IMPL(__imp__sub_822F5D80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5D88;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29432
	ctx.r30.s64 = ctx.r11.s64 + -29432;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29432(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29432);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5dd8
	if (ctx.cr6.eq) goto loc_822F5DD8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5DAC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5DB8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5de4
	if (ctx.cr6.eq) goto loc_822F5DE4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5dac
	if (!ctx.cr6.eq) goto loc_822F5DAC;
loc_822F5DD8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5DE4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5DF8"))) PPC_WEAK_FUNC(sub_822F5DF8);
PPC_FUNC_IMPL(__imp__sub_822F5DF8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5E00;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29352
	ctx.r30.s64 = ctx.r11.s64 + -29352;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29352(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29352);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5e50
	if (ctx.cr6.eq) goto loc_822F5E50;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5E24:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5E30;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5e5c
	if (ctx.cr6.eq) goto loc_822F5E5C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5e24
	if (!ctx.cr6.eq) goto loc_822F5E24;
loc_822F5E50:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5E5C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5E70"))) PPC_WEAK_FUNC(sub_822F5E70);
PPC_FUNC_IMPL(__imp__sub_822F5E70) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5E78;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29320
	ctx.r30.s64 = ctx.r11.s64 + -29320;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29320(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29320);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5ec8
	if (ctx.cr6.eq) goto loc_822F5EC8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5E9C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5EA8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5ed4
	if (ctx.cr6.eq) goto loc_822F5ED4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5e9c
	if (!ctx.cr6.eq) goto loc_822F5E9C;
loc_822F5EC8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5ED4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5EE8"))) PPC_WEAK_FUNC(sub_822F5EE8);
PPC_FUNC_IMPL(__imp__sub_822F5EE8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5EF0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29304
	ctx.r30.s64 = ctx.r11.s64 + -29304;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29304(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29304);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5f40
	if (ctx.cr6.eq) goto loc_822F5F40;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5F14:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5F20;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5f4c
	if (ctx.cr6.eq) goto loc_822F5F4C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5f14
	if (!ctx.cr6.eq) goto loc_822F5F14;
loc_822F5F40:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5F4C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5F60"))) PPC_WEAK_FUNC(sub_822F5F60);
PPC_FUNC_IMPL(__imp__sub_822F5F60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5F68;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29280
	ctx.r30.s64 = ctx.r11.s64 + -29280;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29280);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f5fb8
	if (ctx.cr6.eq) goto loc_822F5FB8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F5F8C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F5F98;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f5fc4
	if (ctx.cr6.eq) goto loc_822F5FC4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f5f8c
	if (!ctx.cr6.eq) goto loc_822F5F8C;
loc_822F5FB8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F5FC4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F5FD8"))) PPC_WEAK_FUNC(sub_822F5FD8);
PPC_FUNC_IMPL(__imp__sub_822F5FD8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F5FE0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29256
	ctx.r30.s64 = ctx.r11.s64 + -29256;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29256(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29256);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6030
	if (ctx.cr6.eq) goto loc_822F6030;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6004:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6010;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f603c
	if (ctx.cr6.eq) goto loc_822F603C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6004
	if (!ctx.cr6.eq) goto loc_822F6004;
loc_822F6030:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F603C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6050"))) PPC_WEAK_FUNC(sub_822F6050);
PPC_FUNC_IMPL(__imp__sub_822F6050) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6058;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29240
	ctx.r30.s64 = ctx.r11.s64 + -29240;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29240(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29240);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f60a8
	if (ctx.cr6.eq) goto loc_822F60A8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F607C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6088;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f60b4
	if (ctx.cr6.eq) goto loc_822F60B4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f607c
	if (!ctx.cr6.eq) goto loc_822F607C;
loc_822F60A8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F60B4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F60C8"))) PPC_WEAK_FUNC(sub_822F60C8);
PPC_FUNC_IMPL(__imp__sub_822F60C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F60D0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29216
	ctx.r30.s64 = ctx.r11.s64 + -29216;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29216(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29216);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6120
	if (ctx.cr6.eq) goto loc_822F6120;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F60F4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6100;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f612c
	if (ctx.cr6.eq) goto loc_822F612C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f60f4
	if (!ctx.cr6.eq) goto loc_822F60F4;
loc_822F6120:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F612C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6140"))) PPC_WEAK_FUNC(sub_822F6140);
PPC_FUNC_IMPL(__imp__sub_822F6140) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6148;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29192
	ctx.r30.s64 = ctx.r11.s64 + -29192;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29192(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29192);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6198
	if (ctx.cr6.eq) goto loc_822F6198;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F616C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6178;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f61a4
	if (ctx.cr6.eq) goto loc_822F61A4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f616c
	if (!ctx.cr6.eq) goto loc_822F616C;
loc_822F6198:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F61A4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F61B8"))) PPC_WEAK_FUNC(sub_822F61B8);
PPC_FUNC_IMPL(__imp__sub_822F61B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F61C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29176
	ctx.r30.s64 = ctx.r11.s64 + -29176;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29176(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29176);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6210
	if (ctx.cr6.eq) goto loc_822F6210;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F61E4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F61F0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f621c
	if (ctx.cr6.eq) goto loc_822F621C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f61e4
	if (!ctx.cr6.eq) goto loc_822F61E4;
loc_822F6210:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F621C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6230"))) PPC_WEAK_FUNC(sub_822F6230);
PPC_FUNC_IMPL(__imp__sub_822F6230) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6238;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29152
	ctx.r30.s64 = ctx.r11.s64 + -29152;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29152(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29152);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6288
	if (ctx.cr6.eq) goto loc_822F6288;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F625C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6268;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6294
	if (ctx.cr6.eq) goto loc_822F6294;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f625c
	if (!ctx.cr6.eq) goto loc_822F625C;
loc_822F6288:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6294:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F62A8"))) PPC_WEAK_FUNC(sub_822F62A8);
PPC_FUNC_IMPL(__imp__sub_822F62A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F62B0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29088
	ctx.r30.s64 = ctx.r11.s64 + -29088;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29088(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29088);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6300
	if (ctx.cr6.eq) goto loc_822F6300;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F62D4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F62E0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f630c
	if (ctx.cr6.eq) goto loc_822F630C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f62d4
	if (!ctx.cr6.eq) goto loc_822F62D4;
loc_822F6300:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F630C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6320"))) PPC_WEAK_FUNC(sub_822F6320);
PPC_FUNC_IMPL(__imp__sub_822F6320) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6328;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29072
	ctx.r30.s64 = ctx.r11.s64 + -29072;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29072(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29072);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6378
	if (ctx.cr6.eq) goto loc_822F6378;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F634C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6358;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6384
	if (ctx.cr6.eq) goto loc_822F6384;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f634c
	if (!ctx.cr6.eq) goto loc_822F634C;
loc_822F6378:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6384:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6398"))) PPC_WEAK_FUNC(sub_822F6398);
PPC_FUNC_IMPL(__imp__sub_822F6398) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F63A0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-29024
	ctx.r30.s64 = ctx.r11.s64 + -29024;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-29024(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29024);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f63f0
	if (ctx.cr6.eq) goto loc_822F63F0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F63C4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F63D0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f63fc
	if (ctx.cr6.eq) goto loc_822F63FC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f63c4
	if (!ctx.cr6.eq) goto loc_822F63C4;
loc_822F63F0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F63FC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6410"))) PPC_WEAK_FUNC(sub_822F6410);
PPC_FUNC_IMPL(__imp__sub_822F6410) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6418;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28768
	ctx.r30.s64 = ctx.r11.s64 + -28768;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28768(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28768);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6468
	if (ctx.cr6.eq) goto loc_822F6468;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F643C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6448;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6474
	if (ctx.cr6.eq) goto loc_822F6474;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f643c
	if (!ctx.cr6.eq) goto loc_822F643C;
loc_822F6468:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6474:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6488"))) PPC_WEAK_FUNC(sub_822F6488);
PPC_FUNC_IMPL(__imp__sub_822F6488) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6490;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28736
	ctx.r30.s64 = ctx.r11.s64 + -28736;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28736(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28736);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f64e0
	if (ctx.cr6.eq) goto loc_822F64E0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F64B4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F64C0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f64ec
	if (ctx.cr6.eq) goto loc_822F64EC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f64b4
	if (!ctx.cr6.eq) goto loc_822F64B4;
loc_822F64E0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F64EC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6500"))) PPC_WEAK_FUNC(sub_822F6500);
PPC_FUNC_IMPL(__imp__sub_822F6500) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6508;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28712
	ctx.r30.s64 = ctx.r11.s64 + -28712;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28712(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28712);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6558
	if (ctx.cr6.eq) goto loc_822F6558;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F652C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6538;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6564
	if (ctx.cr6.eq) goto loc_822F6564;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f652c
	if (!ctx.cr6.eq) goto loc_822F652C;
loc_822F6558:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6564:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6578"))) PPC_WEAK_FUNC(sub_822F6578);
PPC_FUNC_IMPL(__imp__sub_822F6578) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6580;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28696
	ctx.r30.s64 = ctx.r11.s64 + -28696;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28696(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28696);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f65d0
	if (ctx.cr6.eq) goto loc_822F65D0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F65A4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F65B0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f65dc
	if (ctx.cr6.eq) goto loc_822F65DC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f65a4
	if (!ctx.cr6.eq) goto loc_822F65A4;
loc_822F65D0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F65DC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F65F0"))) PPC_WEAK_FUNC(sub_822F65F0);
PPC_FUNC_IMPL(__imp__sub_822F65F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F65F8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28672
	ctx.r30.s64 = ctx.r11.s64 + -28672;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28672(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28672);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6648
	if (ctx.cr6.eq) goto loc_822F6648;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F661C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6628;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6654
	if (ctx.cr6.eq) goto loc_822F6654;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f661c
	if (!ctx.cr6.eq) goto loc_822F661C;
loc_822F6648:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6654:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6668"))) PPC_WEAK_FUNC(sub_822F6668);
PPC_FUNC_IMPL(__imp__sub_822F6668) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6670;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28656
	ctx.r30.s64 = ctx.r11.s64 + -28656;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28656(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28656);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f66c0
	if (ctx.cr6.eq) goto loc_822F66C0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6694:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F66A0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f66cc
	if (ctx.cr6.eq) goto loc_822F66CC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6694
	if (!ctx.cr6.eq) goto loc_822F6694;
loc_822F66C0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F66CC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F66E0"))) PPC_WEAK_FUNC(sub_822F66E0);
PPC_FUNC_IMPL(__imp__sub_822F66E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F66E8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28640
	ctx.r30.s64 = ctx.r11.s64 + -28640;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28640(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28640);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6738
	if (ctx.cr6.eq) goto loc_822F6738;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F670C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6718;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6744
	if (ctx.cr6.eq) goto loc_822F6744;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f670c
	if (!ctx.cr6.eq) goto loc_822F670C;
loc_822F6738:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6744:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6758"))) PPC_WEAK_FUNC(sub_822F6758);
PPC_FUNC_IMPL(__imp__sub_822F6758) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6760;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28600
	ctx.r30.s64 = ctx.r11.s64 + -28600;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28600(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28600);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f67b0
	if (ctx.cr6.eq) goto loc_822F67B0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6784:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6790;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f67bc
	if (ctx.cr6.eq) goto loc_822F67BC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6784
	if (!ctx.cr6.eq) goto loc_822F6784;
loc_822F67B0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F67BC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F67D0"))) PPC_WEAK_FUNC(sub_822F67D0);
PPC_FUNC_IMPL(__imp__sub_822F67D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F67D8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28568
	ctx.r30.s64 = ctx.r11.s64 + -28568;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28568(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28568);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6828
	if (ctx.cr6.eq) goto loc_822F6828;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F67FC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6808;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6834
	if (ctx.cr6.eq) goto loc_822F6834;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f67fc
	if (!ctx.cr6.eq) goto loc_822F67FC;
loc_822F6828:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6834:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6848"))) PPC_WEAK_FUNC(sub_822F6848);
PPC_FUNC_IMPL(__imp__sub_822F6848) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6850;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28488
	ctx.r30.s64 = ctx.r11.s64 + -28488;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28488(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28488);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f68a0
	if (ctx.cr6.eq) goto loc_822F68A0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6874:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6880;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f68ac
	if (ctx.cr6.eq) goto loc_822F68AC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6874
	if (!ctx.cr6.eq) goto loc_822F6874;
loc_822F68A0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F68AC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F68C0"))) PPC_WEAK_FUNC(sub_822F68C0);
PPC_FUNC_IMPL(__imp__sub_822F68C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F68C8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28408
	ctx.r30.s64 = ctx.r11.s64 + -28408;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28408(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28408);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6918
	if (ctx.cr6.eq) goto loc_822F6918;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F68EC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F68F8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6924
	if (ctx.cr6.eq) goto loc_822F6924;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f68ec
	if (!ctx.cr6.eq) goto loc_822F68EC;
loc_822F6918:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6924:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6938"))) PPC_WEAK_FUNC(sub_822F6938);
PPC_FUNC_IMPL(__imp__sub_822F6938) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6940;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28352
	ctx.r30.s64 = ctx.r11.s64 + -28352;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28352(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28352);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6990
	if (ctx.cr6.eq) goto loc_822F6990;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6964:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6970;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f699c
	if (ctx.cr6.eq) goto loc_822F699C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6964
	if (!ctx.cr6.eq) goto loc_822F6964;
loc_822F6990:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F699C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F69B0"))) PPC_WEAK_FUNC(sub_822F69B0);
PPC_FUNC_IMPL(__imp__sub_822F69B0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F69B8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28336
	ctx.r30.s64 = ctx.r11.s64 + -28336;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28336(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28336);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6a08
	if (ctx.cr6.eq) goto loc_822F6A08;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F69DC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F69E8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6a14
	if (ctx.cr6.eq) goto loc_822F6A14;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f69dc
	if (!ctx.cr6.eq) goto loc_822F69DC;
loc_822F6A08:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6A14:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6A28"))) PPC_WEAK_FUNC(sub_822F6A28);
PPC_FUNC_IMPL(__imp__sub_822F6A28) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6A30;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28256
	ctx.r30.s64 = ctx.r11.s64 + -28256;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28256(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28256);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6a80
	if (ctx.cr6.eq) goto loc_822F6A80;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6A54:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6A60;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6a8c
	if (ctx.cr6.eq) goto loc_822F6A8C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6a54
	if (!ctx.cr6.eq) goto loc_822F6A54;
loc_822F6A80:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6A8C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6AA0"))) PPC_WEAK_FUNC(sub_822F6AA0);
PPC_FUNC_IMPL(__imp__sub_822F6AA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6AA8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28240
	ctx.r30.s64 = ctx.r11.s64 + -28240;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28240(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28240);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6af8
	if (ctx.cr6.eq) goto loc_822F6AF8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6ACC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6AD8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6b04
	if (ctx.cr6.eq) goto loc_822F6B04;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6acc
	if (!ctx.cr6.eq) goto loc_822F6ACC;
loc_822F6AF8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6B04:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6B18"))) PPC_WEAK_FUNC(sub_822F6B18);
PPC_FUNC_IMPL(__imp__sub_822F6B18) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6B20;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28224
	ctx.r30.s64 = ctx.r11.s64 + -28224;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28224(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28224);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6b70
	if (ctx.cr6.eq) goto loc_822F6B70;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6B44:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6B50;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6b7c
	if (ctx.cr6.eq) goto loc_822F6B7C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6b44
	if (!ctx.cr6.eq) goto loc_822F6B44;
loc_822F6B70:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6B7C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6B90"))) PPC_WEAK_FUNC(sub_822F6B90);
PPC_FUNC_IMPL(__imp__sub_822F6B90) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6B98;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28208
	ctx.r30.s64 = ctx.r11.s64 + -28208;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28208(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28208);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6be8
	if (ctx.cr6.eq) goto loc_822F6BE8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6BBC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6BC8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6bf4
	if (ctx.cr6.eq) goto loc_822F6BF4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6bbc
	if (!ctx.cr6.eq) goto loc_822F6BBC;
loc_822F6BE8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6BF4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6C08"))) PPC_WEAK_FUNC(sub_822F6C08);
PPC_FUNC_IMPL(__imp__sub_822F6C08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6C10;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28184
	ctx.r30.s64 = ctx.r11.s64 + -28184;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28184(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28184);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6c60
	if (ctx.cr6.eq) goto loc_822F6C60;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6C34:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6C40;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6c6c
	if (ctx.cr6.eq) goto loc_822F6C6C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6c34
	if (!ctx.cr6.eq) goto loc_822F6C34;
loc_822F6C60:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6C6C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6C80"))) PPC_WEAK_FUNC(sub_822F6C80);
PPC_FUNC_IMPL(__imp__sub_822F6C80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6C88;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28160
	ctx.r30.s64 = ctx.r11.s64 + -28160;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28160(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28160);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6cd8
	if (ctx.cr6.eq) goto loc_822F6CD8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6CAC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6CB8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6ce4
	if (ctx.cr6.eq) goto loc_822F6CE4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6cac
	if (!ctx.cr6.eq) goto loc_822F6CAC;
loc_822F6CD8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6CE4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6CF8"))) PPC_WEAK_FUNC(sub_822F6CF8);
PPC_FUNC_IMPL(__imp__sub_822F6CF8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6D00;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28144
	ctx.r30.s64 = ctx.r11.s64 + -28144;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28144(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28144);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6d50
	if (ctx.cr6.eq) goto loc_822F6D50;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6D24:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6D30;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6d5c
	if (ctx.cr6.eq) goto loc_822F6D5C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6d24
	if (!ctx.cr6.eq) goto loc_822F6D24;
loc_822F6D50:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6D5C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6D70"))) PPC_WEAK_FUNC(sub_822F6D70);
PPC_FUNC_IMPL(__imp__sub_822F6D70) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6D78;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28104
	ctx.r30.s64 = ctx.r11.s64 + -28104;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28104(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28104);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6dc8
	if (ctx.cr6.eq) goto loc_822F6DC8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6D9C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6DA8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6dd4
	if (ctx.cr6.eq) goto loc_822F6DD4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6d9c
	if (!ctx.cr6.eq) goto loc_822F6D9C;
loc_822F6DC8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6DD4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6DE8"))) PPC_WEAK_FUNC(sub_822F6DE8);
PPC_FUNC_IMPL(__imp__sub_822F6DE8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6DF0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28072
	ctx.r30.s64 = ctx.r11.s64 + -28072;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28072(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28072);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6e40
	if (ctx.cr6.eq) goto loc_822F6E40;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6E14:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6E20;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6e4c
	if (ctx.cr6.eq) goto loc_822F6E4C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6e14
	if (!ctx.cr6.eq) goto loc_822F6E14;
loc_822F6E40:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6E4C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6E60"))) PPC_WEAK_FUNC(sub_822F6E60);
PPC_FUNC_IMPL(__imp__sub_822F6E60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6E68;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28048
	ctx.r30.s64 = ctx.r11.s64 + -28048;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28048(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28048);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6eb8
	if (ctx.cr6.eq) goto loc_822F6EB8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6E8C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6E98;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6ec4
	if (ctx.cr6.eq) goto loc_822F6EC4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6e8c
	if (!ctx.cr6.eq) goto loc_822F6E8C;
loc_822F6EB8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6EC4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6ED8"))) PPC_WEAK_FUNC(sub_822F6ED8);
PPC_FUNC_IMPL(__imp__sub_822F6ED8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6EE0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-28032
	ctx.r30.s64 = ctx.r11.s64 + -28032;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-28032(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28032);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6f30
	if (ctx.cr6.eq) goto loc_822F6F30;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6F04:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6F10;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6f3c
	if (ctx.cr6.eq) goto loc_822F6F3C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6f04
	if (!ctx.cr6.eq) goto loc_822F6F04;
loc_822F6F30:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6F3C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6F50"))) PPC_WEAK_FUNC(sub_822F6F50);
PPC_FUNC_IMPL(__imp__sub_822F6F50) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6F58;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-27976
	ctx.r30.s64 = ctx.r11.s64 + -27976;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-27976(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -27976);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f6fa8
	if (ctx.cr6.eq) goto loc_822F6FA8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6F7C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F6F88;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f6fb4
	if (ctx.cr6.eq) goto loc_822F6FB4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6f7c
	if (!ctx.cr6.eq) goto loc_822F6F7C;
loc_822F6FA8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F6FB4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F6FC8"))) PPC_WEAK_FUNC(sub_822F6FC8);
PPC_FUNC_IMPL(__imp__sub_822F6FC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F6FD0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-27936
	ctx.r30.s64 = ctx.r11.s64 + -27936;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-27936(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -27936);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7020
	if (ctx.cr6.eq) goto loc_822F7020;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F6FF4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7000;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f702c
	if (ctx.cr6.eq) goto loc_822F702C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f6ff4
	if (!ctx.cr6.eq) goto loc_822F6FF4;
loc_822F7020:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F702C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7040"))) PPC_WEAK_FUNC(sub_822F7040);
PPC_FUNC_IMPL(__imp__sub_822F7040) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7048;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-27912
	ctx.r30.s64 = ctx.r11.s64 + -27912;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-27912(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -27912);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7098
	if (ctx.cr6.eq) goto loc_822F7098;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F706C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7078;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f70a4
	if (ctx.cr6.eq) goto loc_822F70A4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f706c
	if (!ctx.cr6.eq) goto loc_822F706C;
loc_822F7098:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F70A4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F70B8"))) PPC_WEAK_FUNC(sub_822F70B8);
PPC_FUNC_IMPL(__imp__sub_822F70B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F70C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-20504
	ctx.r30.s64 = ctx.r11.s64 + -20504;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-20504(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -20504);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7118
	if (ctx.cr6.eq) goto loc_822F7118;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F70E4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F70F0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7124
	if (ctx.cr6.eq) goto loc_822F7124;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f70e4
	if (!ctx.cr6.eq) goto loc_822F70E4;
loc_822F7118:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7124:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7140"))) PPC_WEAK_FUNC(sub_822F7140);
PPC_FUNC_IMPL(__imp__sub_822F7140) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7148;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-27896
	ctx.r30.s64 = ctx.r11.s64 + -27896;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-27896(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -27896);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7198
	if (ctx.cr6.eq) goto loc_822F7198;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F716C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7178;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f71a4
	if (ctx.cr6.eq) goto loc_822F71A4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f716c
	if (!ctx.cr6.eq) goto loc_822F716C;
loc_822F7198:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F71A4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F71B8"))) PPC_WEAK_FUNC(sub_822F71B8);
PPC_FUNC_IMPL(__imp__sub_822F71B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F71C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-27712
	ctx.r30.s64 = ctx.r11.s64 + -27712;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-27712(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -27712);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7210
	if (ctx.cr6.eq) goto loc_822F7210;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F71E4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F71F0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f721c
	if (ctx.cr6.eq) goto loc_822F721C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f71e4
	if (!ctx.cr6.eq) goto loc_822F71E4;
loc_822F7210:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F721C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7230"))) PPC_WEAK_FUNC(sub_822F7230);
PPC_FUNC_IMPL(__imp__sub_822F7230) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7238;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-20408
	ctx.r30.s64 = ctx.r11.s64 + -20408;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-20408(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -20408);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7290
	if (ctx.cr6.eq) goto loc_822F7290;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F725C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7268;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f729c
	if (ctx.cr6.eq) goto loc_822F729C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f725c
	if (!ctx.cr6.eq) goto loc_822F725C;
loc_822F7290:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F729C:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F72B8"))) PPC_WEAK_FUNC(sub_822F72B8);
PPC_FUNC_IMPL(__imp__sub_822F72B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F72C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-20248
	ctx.r30.s64 = ctx.r11.s64 + -20248;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-20248(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -20248);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7318
	if (ctx.cr6.eq) goto loc_822F7318;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F72E4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F72F0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7324
	if (ctx.cr6.eq) goto loc_822F7324;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f72e4
	if (!ctx.cr6.eq) goto loc_822F72E4;
loc_822F7318:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7324:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7340"))) PPC_WEAK_FUNC(sub_822F7340);
PPC_FUNC_IMPL(__imp__sub_822F7340) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7348;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-27656
	ctx.r30.s64 = ctx.r11.s64 + -27656;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-27656(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -27656);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7398
	if (ctx.cr6.eq) goto loc_822F7398;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F736C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7378;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f73a4
	if (ctx.cr6.eq) goto loc_822F73A4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f736c
	if (!ctx.cr6.eq) goto loc_822F736C;
loc_822F7398:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F73A4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F73B8"))) PPC_WEAK_FUNC(sub_822F73B8);
PPC_FUNC_IMPL(__imp__sub_822F73B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F73C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-20136
	ctx.r30.s64 = ctx.r11.s64 + -20136;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-20136(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -20136);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7418
	if (ctx.cr6.eq) goto loc_822F7418;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F73E4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F73F0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7424
	if (ctx.cr6.eq) goto loc_822F7424;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f73e4
	if (!ctx.cr6.eq) goto loc_822F73E4;
loc_822F7418:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7424:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7440"))) PPC_WEAK_FUNC(sub_822F7440);
PPC_FUNC_IMPL(__imp__sub_822F7440) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7448;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-27120
	ctx.r30.s64 = ctx.r11.s64 + -27120;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-27120(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -27120);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7498
	if (ctx.cr6.eq) goto loc_822F7498;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F746C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7478;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f74a4
	if (ctx.cr6.eq) goto loc_822F74A4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f746c
	if (!ctx.cr6.eq) goto loc_822F746C;
loc_822F7498:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F74A4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F74B8"))) PPC_WEAK_FUNC(sub_822F74B8);
PPC_FUNC_IMPL(__imp__sub_822F74B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F74C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-27096
	ctx.r30.s64 = ctx.r11.s64 + -27096;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-27096(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -27096);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7510
	if (ctx.cr6.eq) goto loc_822F7510;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F74E4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F74F0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f751c
	if (ctx.cr6.eq) goto loc_822F751C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f74e4
	if (!ctx.cr6.eq) goto loc_822F74E4;
loc_822F7510:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F751C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7530"))) PPC_WEAK_FUNC(sub_822F7530);
PPC_FUNC_IMPL(__imp__sub_822F7530) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7538;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-20064
	ctx.r30.s64 = ctx.r11.s64 + -20064;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-20064(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -20064);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7590
	if (ctx.cr6.eq) goto loc_822F7590;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F755C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7568;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f759c
	if (ctx.cr6.eq) goto loc_822F759C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f755c
	if (!ctx.cr6.eq) goto loc_822F755C;
loc_822F7590:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F759C:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F75B8"))) PPC_WEAK_FUNC(sub_822F75B8);
PPC_FUNC_IMPL(__imp__sub_822F75B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F75C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-27072
	ctx.r30.s64 = ctx.r11.s64 + -27072;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-27072(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -27072);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7610
	if (ctx.cr6.eq) goto loc_822F7610;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F75E4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F75F0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f761c
	if (ctx.cr6.eq) goto loc_822F761C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f75e4
	if (!ctx.cr6.eq) goto loc_822F75E4;
loc_822F7610:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F761C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7630"))) PPC_WEAK_FUNC(sub_822F7630);
PPC_FUNC_IMPL(__imp__sub_822F7630) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7638;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-19848
	ctx.r30.s64 = ctx.r11.s64 + -19848;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-19848(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -19848);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7690
	if (ctx.cr6.eq) goto loc_822F7690;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F765C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7668;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f769c
	if (ctx.cr6.eq) goto loc_822F769C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f765c
	if (!ctx.cr6.eq) goto loc_822F765C;
loc_822F7690:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F769C:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F76B8"))) PPC_WEAK_FUNC(sub_822F76B8);
PPC_FUNC_IMPL(__imp__sub_822F76B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F76C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-27000
	ctx.r30.s64 = ctx.r11.s64 + -27000;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-27000(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -27000);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7710
	if (ctx.cr6.eq) goto loc_822F7710;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F76E4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F76F0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f771c
	if (ctx.cr6.eq) goto loc_822F771C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f76e4
	if (!ctx.cr6.eq) goto loc_822F76E4;
loc_822F7710:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F771C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7730"))) PPC_WEAK_FUNC(sub_822F7730);
PPC_FUNC_IMPL(__imp__sub_822F7730) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7738;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-19704
	ctx.r30.s64 = ctx.r11.s64 + -19704;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-19704(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -19704);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7790
	if (ctx.cr6.eq) goto loc_822F7790;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F775C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7768;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f779c
	if (ctx.cr6.eq) goto loc_822F779C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f775c
	if (!ctx.cr6.eq) goto loc_822F775C;
loc_822F7790:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F779C:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F77B8"))) PPC_WEAK_FUNC(sub_822F77B8);
PPC_FUNC_IMPL(__imp__sub_822F77B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F77C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-19608
	ctx.r30.s64 = ctx.r11.s64 + -19608;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-19608(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -19608);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7818
	if (ctx.cr6.eq) goto loc_822F7818;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F77E4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F77F0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7824
	if (ctx.cr6.eq) goto loc_822F7824;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f77e4
	if (!ctx.cr6.eq) goto loc_822F77E4;
loc_822F7818:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7824:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7840"))) PPC_WEAK_FUNC(sub_822F7840);
PPC_FUNC_IMPL(__imp__sub_822F7840) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7848;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26976
	ctx.r30.s64 = ctx.r11.s64 + -26976;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26976(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26976);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7898
	if (ctx.cr6.eq) goto loc_822F7898;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F786C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7878;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f78a4
	if (ctx.cr6.eq) goto loc_822F78A4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f786c
	if (!ctx.cr6.eq) goto loc_822F786C;
loc_822F7898:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F78A4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F78B8"))) PPC_WEAK_FUNC(sub_822F78B8);
PPC_FUNC_IMPL(__imp__sub_822F78B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F78C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-19536
	ctx.r30.s64 = ctx.r11.s64 + -19536;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-19536(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -19536);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7918
	if (ctx.cr6.eq) goto loc_822F7918;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F78E4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F78F0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7924
	if (ctx.cr6.eq) goto loc_822F7924;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f78e4
	if (!ctx.cr6.eq) goto loc_822F78E4;
loc_822F7918:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7924:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7940"))) PPC_WEAK_FUNC(sub_822F7940);
PPC_FUNC_IMPL(__imp__sub_822F7940) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7948;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-19352
	ctx.r30.s64 = ctx.r11.s64 + -19352;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-19352(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -19352);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f79a0
	if (ctx.cr6.eq) goto loc_822F79A0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F796C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7978;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f79ac
	if (ctx.cr6.eq) goto loc_822F79AC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f796c
	if (!ctx.cr6.eq) goto loc_822F796C;
loc_822F79A0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F79AC:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F79C8"))) PPC_WEAK_FUNC(sub_822F79C8);
PPC_FUNC_IMPL(__imp__sub_822F79C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F79D0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26944
	ctx.r30.s64 = ctx.r11.s64 + -26944;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26944(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26944);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7a20
	if (ctx.cr6.eq) goto loc_822F7A20;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F79F4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7A00;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7a2c
	if (ctx.cr6.eq) goto loc_822F7A2C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f79f4
	if (!ctx.cr6.eq) goto loc_822F79F4;
loc_822F7A20:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7A2C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7A40"))) PPC_WEAK_FUNC(sub_822F7A40);
PPC_FUNC_IMPL(__imp__sub_822F7A40) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7A48;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26912
	ctx.r30.s64 = ctx.r11.s64 + -26912;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26912(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26912);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7a98
	if (ctx.cr6.eq) goto loc_822F7A98;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F7A6C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7A78;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7aa4
	if (ctx.cr6.eq) goto loc_822F7AA4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f7a6c
	if (!ctx.cr6.eq) goto loc_822F7A6C;
loc_822F7A98:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7AA4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7AB8"))) PPC_WEAK_FUNC(sub_822F7AB8);
PPC_FUNC_IMPL(__imp__sub_822F7AB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7AC0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26864
	ctx.r30.s64 = ctx.r11.s64 + -26864;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26864(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26864);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7b10
	if (ctx.cr6.eq) goto loc_822F7B10;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F7AE4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7AF0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7b1c
	if (ctx.cr6.eq) goto loc_822F7B1C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f7ae4
	if (!ctx.cr6.eq) goto loc_822F7AE4;
loc_822F7B10:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7B1C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7B30"))) PPC_WEAK_FUNC(sub_822F7B30);
PPC_FUNC_IMPL(__imp__sub_822F7B30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7B38;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-19100
	ctx.r30.s64 = ctx.r11.s64 + -19100;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-19100(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -19100);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7b90
	if (ctx.cr6.eq) goto loc_822F7B90;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F7B5C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7B68;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7b9c
	if (ctx.cr6.eq) goto loc_822F7B9C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f7b5c
	if (!ctx.cr6.eq) goto loc_822F7B5C;
loc_822F7B90:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7B9C:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7BB8"))) PPC_WEAK_FUNC(sub_822F7BB8);
PPC_FUNC_IMPL(__imp__sub_822F7BB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7BC0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-19076
	ctx.r30.s64 = ctx.r11.s64 + -19076;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-19076(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -19076);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7c18
	if (ctx.cr6.eq) goto loc_822F7C18;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F7BE4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7BF0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7c24
	if (ctx.cr6.eq) goto loc_822F7C24;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f7be4
	if (!ctx.cr6.eq) goto loc_822F7BE4;
loc_822F7C18:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7C24:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7C40"))) PPC_WEAK_FUNC(sub_822F7C40);
PPC_FUNC_IMPL(__imp__sub_822F7C40) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7C48;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26848
	ctx.r30.s64 = ctx.r11.s64 + -26848;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26848(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26848);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7c98
	if (ctx.cr6.eq) goto loc_822F7C98;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F7C6C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7C78;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7ca4
	if (ctx.cr6.eq) goto loc_822F7CA4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f7c6c
	if (!ctx.cr6.eq) goto loc_822F7C6C;
loc_822F7C98:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7CA4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7CB8"))) PPC_WEAK_FUNC(sub_822F7CB8);
PPC_FUNC_IMPL(__imp__sub_822F7CB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7CC0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26832
	ctx.r30.s64 = ctx.r11.s64 + -26832;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26832(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26832);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7d10
	if (ctx.cr6.eq) goto loc_822F7D10;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F7CE4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7CF0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7d1c
	if (ctx.cr6.eq) goto loc_822F7D1C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f7ce4
	if (!ctx.cr6.eq) goto loc_822F7CE4;
loc_822F7D10:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7D1C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7D30"))) PPC_WEAK_FUNC(sub_822F7D30);
PPC_FUNC_IMPL(__imp__sub_822F7D30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7D38;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26808
	ctx.r30.s64 = ctx.r11.s64 + -26808;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26808(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26808);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7d88
	if (ctx.cr6.eq) goto loc_822F7D88;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F7D5C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7D68;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7d94
	if (ctx.cr6.eq) goto loc_822F7D94;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f7d5c
	if (!ctx.cr6.eq) goto loc_822F7D5C;
loc_822F7D88:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7D94:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7DA8"))) PPC_WEAK_FUNC(sub_822F7DA8);
PPC_FUNC_IMPL(__imp__sub_822F7DA8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7DB0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-19048
	ctx.r30.s64 = ctx.r11.s64 + -19048;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-19048(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -19048);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7e08
	if (ctx.cr6.eq) goto loc_822F7E08;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F7DD4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7DE0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7e14
	if (ctx.cr6.eq) goto loc_822F7E14;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f7dd4
	if (!ctx.cr6.eq) goto loc_822F7DD4;
loc_822F7E08:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7E14:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7E30"))) PPC_WEAK_FUNC(sub_822F7E30);
PPC_FUNC_IMPL(__imp__sub_822F7E30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7E38;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-18928
	ctx.r30.s64 = ctx.r11.s64 + -18928;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-18928(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -18928);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7e90
	if (ctx.cr6.eq) goto loc_822F7E90;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F7E5C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7E68;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7e9c
	if (ctx.cr6.eq) goto loc_822F7E9C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f7e5c
	if (!ctx.cr6.eq) goto loc_822F7E5C;
loc_822F7E90:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7E9C:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7EB8"))) PPC_WEAK_FUNC(sub_822F7EB8);
PPC_FUNC_IMPL(__imp__sub_822F7EB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7EC0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-18840
	ctx.r30.s64 = ctx.r11.s64 + -18840;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-18840(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -18840);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7f18
	if (ctx.cr6.eq) goto loc_822F7F18;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F7EE4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7EF0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7f24
	if (ctx.cr6.eq) goto loc_822F7F24;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f7ee4
	if (!ctx.cr6.eq) goto loc_822F7EE4;
loc_822F7F18:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7F24:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7F40"))) PPC_WEAK_FUNC(sub_822F7F40);
PPC_FUNC_IMPL(__imp__sub_822F7F40) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7F48;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-18704
	ctx.r30.s64 = ctx.r11.s64 + -18704;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-18704(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -18704);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f7fa0
	if (ctx.cr6.eq) goto loc_822F7FA0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F7F6C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F7F78;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f7fac
	if (ctx.cr6.eq) goto loc_822F7FAC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f7f6c
	if (!ctx.cr6.eq) goto loc_822F7F6C;
loc_822F7FA0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F7FAC:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F7FC8"))) PPC_WEAK_FUNC(sub_822F7FC8);
PPC_FUNC_IMPL(__imp__sub_822F7FC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F7FD0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-18592
	ctx.r30.s64 = ctx.r11.s64 + -18592;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-18592(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -18592);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f8028
	if (ctx.cr6.eq) goto loc_822F8028;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F7FF4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8000;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f8034
	if (ctx.cr6.eq) goto loc_822F8034;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f7ff4
	if (!ctx.cr6.eq) goto loc_822F7FF4;
loc_822F8028:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F8034:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F8050"))) PPC_WEAK_FUNC(sub_822F8050);
PPC_FUNC_IMPL(__imp__sub_822F8050) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F8058;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-18264
	ctx.r30.s64 = ctx.r11.s64 + -18264;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-18264(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -18264);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f80b0
	if (ctx.cr6.eq) goto loc_822F80B0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F807C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8088;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f80bc
	if (ctx.cr6.eq) goto loc_822F80BC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f807c
	if (!ctx.cr6.eq) goto loc_822F807C;
loc_822F80B0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F80BC:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F80D8"))) PPC_WEAK_FUNC(sub_822F80D8);
PPC_FUNC_IMPL(__imp__sub_822F80D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F80E0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26744
	ctx.r30.s64 = ctx.r11.s64 + -26744;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26744(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26744);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f8130
	if (ctx.cr6.eq) goto loc_822F8130;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F8104:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8110;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f813c
	if (ctx.cr6.eq) goto loc_822F813C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f8104
	if (!ctx.cr6.eq) goto loc_822F8104;
loc_822F8130:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F813C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F8150"))) PPC_WEAK_FUNC(sub_822F8150);
PPC_FUNC_IMPL(__imp__sub_822F8150) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F8158;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-18168
	ctx.r30.s64 = ctx.r11.s64 + -18168;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-18168(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -18168);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f81b0
	if (ctx.cr6.eq) goto loc_822F81B0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F817C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8188;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f81bc
	if (ctx.cr6.eq) goto loc_822F81BC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f817c
	if (!ctx.cr6.eq) goto loc_822F817C;
loc_822F81B0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F81BC:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F81D8"))) PPC_WEAK_FUNC(sub_822F81D8);
PPC_FUNC_IMPL(__imp__sub_822F81D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F81E0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26728
	ctx.r30.s64 = ctx.r11.s64 + -26728;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26728);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f8230
	if (ctx.cr6.eq) goto loc_822F8230;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F8204:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8210;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f823c
	if (ctx.cr6.eq) goto loc_822F823C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f8204
	if (!ctx.cr6.eq) goto loc_822F8204;
loc_822F8230:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F823C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F8250"))) PPC_WEAK_FUNC(sub_822F8250);
PPC_FUNC_IMPL(__imp__sub_822F8250) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F8258;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26616
	ctx.r30.s64 = ctx.r11.s64 + -26616;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26616(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26616);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f82a8
	if (ctx.cr6.eq) goto loc_822F82A8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F827C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8288;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f82b4
	if (ctx.cr6.eq) goto loc_822F82B4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f827c
	if (!ctx.cr6.eq) goto loc_822F827C;
loc_822F82A8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F82B4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F82C8"))) PPC_WEAK_FUNC(sub_822F82C8);
PPC_FUNC_IMPL(__imp__sub_822F82C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F82D0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26576
	ctx.r30.s64 = ctx.r11.s64 + -26576;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26576(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26576);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f8320
	if (ctx.cr6.eq) goto loc_822F8320;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F82F4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8300;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f832c
	if (ctx.cr6.eq) goto loc_822F832C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f82f4
	if (!ctx.cr6.eq) goto loc_822F82F4;
loc_822F8320:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F832C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F8340"))) PPC_WEAK_FUNC(sub_822F8340);
PPC_FUNC_IMPL(__imp__sub_822F8340) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F8348;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-18056
	ctx.r30.s64 = ctx.r11.s64 + -18056;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-18056(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -18056);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f83a0
	if (ctx.cr6.eq) goto loc_822F83A0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F836C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8378;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f83ac
	if (ctx.cr6.eq) goto loc_822F83AC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f836c
	if (!ctx.cr6.eq) goto loc_822F836C;
loc_822F83A0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F83AC:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F83C8"))) PPC_WEAK_FUNC(sub_822F83C8);
PPC_FUNC_IMPL(__imp__sub_822F83C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F83D0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-20660
	ctx.r30.s64 = ctx.r11.s64 + -20660;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-20660(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -20660);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f8428
	if (ctx.cr6.eq) goto loc_822F8428;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F83F4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8400;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f8434
	if (ctx.cr6.eq) goto loc_822F8434;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f83f4
	if (!ctx.cr6.eq) goto loc_822F83F4;
loc_822F8428:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F8434:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F8450"))) PPC_WEAK_FUNC(sub_822F8450);
PPC_FUNC_IMPL(__imp__sub_822F8450) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F8458;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26520
	ctx.r30.s64 = ctx.r11.s64 + -26520;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26520(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26520);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f84a8
	if (ctx.cr6.eq) goto loc_822F84A8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F847C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8488;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f84b4
	if (ctx.cr6.eq) goto loc_822F84B4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f847c
	if (!ctx.cr6.eq) goto loc_822F847C;
loc_822F84A8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F84B4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F84C8"))) PPC_WEAK_FUNC(sub_822F84C8);
PPC_FUNC_IMPL(__imp__sub_822F84C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F84D0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-17944
	ctx.r30.s64 = ctx.r11.s64 + -17944;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-17944(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -17944);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f8528
	if (ctx.cr6.eq) goto loc_822F8528;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F84F4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8500;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f8534
	if (ctx.cr6.eq) goto loc_822F8534;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f84f4
	if (!ctx.cr6.eq) goto loc_822F84F4;
loc_822F8528:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F8534:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F8550"))) PPC_WEAK_FUNC(sub_822F8550);
PPC_FUNC_IMPL(__imp__sub_822F8550) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F8558;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26472
	ctx.r30.s64 = ctx.r11.s64 + -26472;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26472(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26472);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f85a8
	if (ctx.cr6.eq) goto loc_822F85A8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F857C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8588;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f85b4
	if (ctx.cr6.eq) goto loc_822F85B4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f857c
	if (!ctx.cr6.eq) goto loc_822F857C;
loc_822F85A8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F85B4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F85C8"))) PPC_WEAK_FUNC(sub_822F85C8);
PPC_FUNC_IMPL(__imp__sub_822F85C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F85D0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-17856
	ctx.r30.s64 = ctx.r11.s64 + -17856;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-17856(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -17856);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f8628
	if (ctx.cr6.eq) goto loc_822F8628;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F85F4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8600;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f8634
	if (ctx.cr6.eq) goto loc_822F8634;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f85f4
	if (!ctx.cr6.eq) goto loc_822F85F4;
loc_822F8628:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F8634:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F8650"))) PPC_WEAK_FUNC(sub_822F8650);
PPC_FUNC_IMPL(__imp__sub_822F8650) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F8658;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26448
	ctx.r30.s64 = ctx.r11.s64 + -26448;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26448(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26448);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f86a8
	if (ctx.cr6.eq) goto loc_822F86A8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F867C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8688;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f86b4
	if (ctx.cr6.eq) goto loc_822F86B4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f867c
	if (!ctx.cr6.eq) goto loc_822F867C;
loc_822F86A8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F86B4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F86C8"))) PPC_WEAK_FUNC(sub_822F86C8);
PPC_FUNC_IMPL(__imp__sub_822F86C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F86D0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26424
	ctx.r30.s64 = ctx.r11.s64 + -26424;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26424(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26424);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f8720
	if (ctx.cr6.eq) goto loc_822F8720;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F86F4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8700;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f872c
	if (ctx.cr6.eq) goto loc_822F872C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f86f4
	if (!ctx.cr6.eq) goto loc_822F86F4;
loc_822F8720:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F872C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F8740"))) PPC_WEAK_FUNC(sub_822F8740);
PPC_FUNC_IMPL(__imp__sub_822F8740) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F8748;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-26408
	ctx.r30.s64 = ctx.r11.s64 + -26408;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-26408(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -26408);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f8798
	if (ctx.cr6.eq) goto loc_822F8798;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F876C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8778;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f87a4
	if (ctx.cr6.eq) goto loc_822F87A4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f876c
	if (!ctx.cr6.eq) goto loc_822F876C;
loc_822F8798:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F87A4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F87B8"))) PPC_WEAK_FUNC(sub_822F87B8);
PPC_FUNC_IMPL(__imp__sub_822F87B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F87C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-17768
	ctx.r30.s64 = ctx.r11.s64 + -17768;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-17768(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -17768);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f8818
	if (ctx.cr6.eq) goto loc_822F8818;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F87E4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F87F0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f8824
	if (ctx.cr6.eq) goto loc_822F8824;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f87e4
	if (!ctx.cr6.eq) goto loc_822F87E4;
loc_822F8818:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F8824:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F8840"))) PPC_WEAK_FUNC(sub_822F8840);
PPC_FUNC_IMPL(__imp__sub_822F8840) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x822F8848;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31904
	ctx.r11.s64 = -2090860544;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,-17696
	ctx.r30.s64 = ctx.r11.s64 + -17696;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-17696(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -17696);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x822f88a0
	if (ctx.cr6.eq) goto loc_822F88A0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_822F886C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x822F8878;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x822f88ac
	if (ctx.cr6.eq) goto loc_822F88AC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x822f886c
	if (!ctx.cr6.eq) goto loc_822F886C;
loc_822F88A0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_822F88AC:
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_822F88C8"))) PPC_WEAK_FUNC(sub_822F88C8);
PPC_FUNC_IMPL(__imp__sub_822F88C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10e8
	ctx.lr = 0x822F88D0;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31884
	ctx.r30.s64 = -2089549824;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r31,r11,14488
	ctx.r31.s64 = ctx.r11.s64 + 14488;
	// lwz r11,25356(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 25356);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8900
	if (!ctx.cr6.eq) goto loc_822F8900;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82306628
	ctx.lr = 0x822F88F8;
	sub_82306628(ctx, base);
	// stw r3,25356(r30)
	PPC_STORE_U32(ctx.r30.u32 + 25356, ctx.r3.u32);
	// bl 0x823066e8
	ctx.lr = 0x822F8900;
	sub_823066E8(ctx, base);
loc_822F8900:
	// lis r10,-31889
	ctx.r10.s64 = -2089877504;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31884
	ctx.r30.s64 = -2089549824;
	// addi r28,r10,29176
	ctx.r28.s64 = ctx.r10.s64 + 29176;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r10,11944
	ctx.r8.s64 = ctx.r10.s64 + 11944;
	// lwz r10,25360(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 25360);
	// addi r7,r11,1
	ctx.r7.s64 = ctx.r11.s64 + 1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// stw r7,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r7.u32);
	// stwx r8,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r8.u32);
	// bne cr6,0x822f8944
	if (!ctx.cr6.eq) goto loc_822F8944;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82306870
	ctx.lr = 0x822F893C;
	sub_82306870(ctx, base);
	// stw r3,25360(r30)
	PPC_STORE_U32(ctx.r30.u32 + 25360, ctx.r3.u32);
	// bl 0x82306930
	ctx.lr = 0x822F8944;
	sub_82306930(ctx, base);
loc_822F8944:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12080
	ctx.r7.s64 = ctx.r10.s64 + 12080;
	// lwz r11,-28808(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28808);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f8980
	if (!ctx.cr6.eq) goto loc_822F8980;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ff3d0
	ctx.lr = 0x822F8978;
	sub_825FF3D0(ctx, base);
	// stw r3,-28808(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28808, ctx.r3.u32);
	// bl 0x825ff490
	ctx.lr = 0x822F8980;
	sub_825FF490(ctx, base);
loc_822F8980:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12216
	ctx.r7.s64 = ctx.r10.s64 + 12216;
	// lwz r11,-28256(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28256);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f89bc
	if (!ctx.cr6.eq) goto loc_822F89BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82641c08
	ctx.lr = 0x822F89B4;
	sub_82641C08(ctx, base);
	// stw r3,-28256(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28256, ctx.r3.u32);
	// bl 0x82641cc8
	ctx.lr = 0x822F89BC;
	sub_82641CC8(ctx, base);
loc_822F89BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28180(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28180);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f89dc
	if (!ctx.cr6.eq) goto loc_822F89DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82659258
	ctx.lr = 0x822F89D4;
	sub_82659258(ctx, base);
	// stw r3,-28180(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28180, ctx.r3.u32);
	// bl 0x82659318
	ctx.lr = 0x822F89DC;
	sub_82659318(ctx, base);
loc_822F89DC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12336
	ctx.r7.s64 = ctx.r10.s64 + 12336;
	// lwz r11,-28052(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28052);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f8a18
	if (!ctx.cr6.eq) goto loc_822F8A18;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826771f8
	ctx.lr = 0x822F8A10;
	sub_826771F8(ctx, base);
	// stw r3,-28052(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28052, ctx.r3.u32);
	// bl 0x826772a8
	ctx.lr = 0x822F8A18;
	sub_826772A8(ctx, base);
loc_822F8A18:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28016(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28016);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8a38
	if (!ctx.cr6.eq) goto loc_822F8A38;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82678528
	ctx.lr = 0x822F8A30;
	sub_82678528(ctx, base);
	// stw r3,-28016(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28016, ctx.r3.u32);
	// bl 0x826785d8
	ctx.lr = 0x822F8A38;
	sub_826785D8(ctx, base);
loc_822F8A38:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27996(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27996);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8a58
	if (!ctx.cr6.eq) goto loc_822F8A58;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82678fc8
	ctx.lr = 0x822F8A50;
	sub_82678FC8(ctx, base);
	// stw r3,-27996(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27996, ctx.r3.u32);
	// bl 0x82679078
	ctx.lr = 0x822F8A58;
	sub_82679078(ctx, base);
loc_822F8A58:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27992(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27992);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8a78
	if (!ctx.cr6.eq) goto loc_822F8A78;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826791e8
	ctx.lr = 0x822F8A70;
	sub_826791E8(ctx, base);
	// stw r3,-27992(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27992, ctx.r3.u32);
	// bl 0x82679298
	ctx.lr = 0x822F8A78;
	sub_82679298(ctx, base);
loc_822F8A78:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27980(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27980);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8a98
	if (!ctx.cr6.eq) goto loc_822F8A98;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82679848
	ctx.lr = 0x822F8A90;
	sub_82679848(ctx, base);
	// stw r3,-27980(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27980, ctx.r3.u32);
	// bl 0x826798f8
	ctx.lr = 0x822F8A98;
	sub_826798F8(ctx, base);
loc_822F8A98:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27984(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27984);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8ab8
	if (!ctx.cr6.eq) goto loc_822F8AB8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82679628
	ctx.lr = 0x822F8AB0;
	sub_82679628(ctx, base);
	// stw r3,-27984(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27984, ctx.r3.u32);
	// bl 0x826796d8
	ctx.lr = 0x822F8AB8;
	sub_826796D8(ctx, base);
loc_822F8AB8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28000(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28000);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8ad8
	if (!ctx.cr6.eq) goto loc_822F8AD8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82678da8
	ctx.lr = 0x822F8AD0;
	sub_82678DA8(ctx, base);
	// stw r3,-28000(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28000, ctx.r3.u32);
	// bl 0x82678e58
	ctx.lr = 0x822F8AD8;
	sub_82678E58(ctx, base);
loc_822F8AD8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28020(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28020);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8af8
	if (!ctx.cr6.eq) goto loc_822F8AF8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82678308
	ctx.lr = 0x822F8AF0;
	sub_82678308(ctx, base);
	// stw r3,-28020(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28020, ctx.r3.u32);
	// bl 0x826783b8
	ctx.lr = 0x822F8AF8;
	sub_826783B8(ctx, base);
loc_822F8AF8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28044(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8b18
	if (!ctx.cr6.eq) goto loc_822F8B18;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82677648
	ctx.lr = 0x822F8B10;
	sub_82677648(ctx, base);
	// stw r3,-28044(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28044, ctx.r3.u32);
	// bl 0x826776f8
	ctx.lr = 0x822F8B18;
	sub_826776F8(ctx, base);
loc_822F8B18:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28024(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28024);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8b38
	if (!ctx.cr6.eq) goto loc_822F8B38;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826780e8
	ctx.lr = 0x822F8B30;
	sub_826780E8(ctx, base);
	// stw r3,-28024(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28024, ctx.r3.u32);
	// bl 0x82678198
	ctx.lr = 0x822F8B38;
	sub_82678198(ctx, base);
loc_822F8B38:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27976(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27976);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8b58
	if (!ctx.cr6.eq) goto loc_822F8B58;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82679a68
	ctx.lr = 0x822F8B50;
	sub_82679A68(ctx, base);
	// stw r3,-27976(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27976, ctx.r3.u32);
	// bl 0x82679b18
	ctx.lr = 0x822F8B58;
	sub_82679B18(ctx, base);
loc_822F8B58:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28036(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28036);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8b78
	if (!ctx.cr6.eq) goto loc_822F8B78;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82677a88
	ctx.lr = 0x822F8B70;
	sub_82677A88(ctx, base);
	// stw r3,-28036(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28036, ctx.r3.u32);
	// bl 0x82677b38
	ctx.lr = 0x822F8B78;
	sub_82677B38(ctx, base);
loc_822F8B78:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28032(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28032);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8b98
	if (!ctx.cr6.eq) goto loc_822F8B98;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82677ca8
	ctx.lr = 0x822F8B90;
	sub_82677CA8(ctx, base);
	// stw r3,-28032(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28032, ctx.r3.u32);
	// bl 0x82677d58
	ctx.lr = 0x822F8B98;
	sub_82677D58(ctx, base);
loc_822F8B98:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28004(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28004);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8bb8
	if (!ctx.cr6.eq) goto loc_822F8BB8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82678b88
	ctx.lr = 0x822F8BB0;
	sub_82678B88(ctx, base);
	// stw r3,-28004(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28004, ctx.r3.u32);
	// bl 0x82678c38
	ctx.lr = 0x822F8BB8;
	sub_82678C38(ctx, base);
loc_822F8BB8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28028(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28028);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8bd8
	if (!ctx.cr6.eq) goto loc_822F8BD8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82677ec8
	ctx.lr = 0x822F8BD0;
	sub_82677EC8(ctx, base);
	// stw r3,-28028(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28028, ctx.r3.u32);
	// bl 0x82677f78
	ctx.lr = 0x822F8BD8;
	sub_82677F78(ctx, base);
loc_822F8BD8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28008(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28008);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8bf8
	if (!ctx.cr6.eq) goto loc_822F8BF8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82678968
	ctx.lr = 0x822F8BF0;
	sub_82678968(ctx, base);
	// stw r3,-28008(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28008, ctx.r3.u32);
	// bl 0x82678a18
	ctx.lr = 0x822F8BF8;
	sub_82678A18(ctx, base);
loc_822F8BF8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28048(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28048);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8c18
	if (!ctx.cr6.eq) goto loc_822F8C18;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82677428
	ctx.lr = 0x822F8C10;
	sub_82677428(ctx, base);
	// stw r3,-28048(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28048, ctx.r3.u32);
	// bl 0x826774d8
	ctx.lr = 0x822F8C18;
	sub_826774D8(ctx, base);
loc_822F8C18:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28040(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28040);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8c38
	if (!ctx.cr6.eq) goto loc_822F8C38;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82677868
	ctx.lr = 0x822F8C30;
	sub_82677868(ctx, base);
	// stw r3,-28040(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28040, ctx.r3.u32);
	// bl 0x82677918
	ctx.lr = 0x822F8C38;
	sub_82677918(ctx, base);
loc_822F8C38:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28012(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28012);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8c58
	if (!ctx.cr6.eq) goto loc_822F8C58;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82678748
	ctx.lr = 0x822F8C50;
	sub_82678748(ctx, base);
	// stw r3,-28012(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28012, ctx.r3.u32);
	// bl 0x826787f8
	ctx.lr = 0x822F8C58;
	sub_826787F8(ctx, base);
loc_822F8C58:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28728(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28728);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8c78
	if (!ctx.cr6.eq) goto loc_822F8C78;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82601f90
	ctx.lr = 0x822F8C70;
	sub_82601F90(ctx, base);
	// stw r3,-28728(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28728, ctx.r3.u32);
	// bl 0x82602050
	ctx.lr = 0x822F8C78;
	sub_82602050(ctx, base);
loc_822F8C78:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12456
	ctx.r7.s64 = ctx.r10.s64 + 12456;
	// lwz r11,-27564(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27564);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f8cb4
	if (!ctx.cr6.eq) goto loc_822F8CB4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826f6be0
	ctx.lr = 0x822F8CAC;
	sub_826F6BE0(ctx, base);
	// stw r3,-27564(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27564, ctx.r3.u32);
	// bl 0x826f6ca0
	ctx.lr = 0x822F8CB4;
	sub_826F6CA0(ctx, base);
loc_822F8CB4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12576
	ctx.r7.s64 = ctx.r10.s64 + 12576;
	// lwz r11,-28216(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28216);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f8cf0
	if (!ctx.cr6.eq) goto loc_822F8CF0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264ce90
	ctx.lr = 0x822F8CE8;
	sub_8264CE90(ctx, base);
	// stw r3,-28216(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28216, ctx.r3.u32);
	// bl 0x8264cf50
	ctx.lr = 0x822F8CF0;
	sub_8264CF50(ctx, base);
loc_822F8CF0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28176(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28176);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8d10
	if (!ctx.cr6.eq) goto loc_822F8D10;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82659488
	ctx.lr = 0x822F8D08;
	sub_82659488(ctx, base);
	// stw r3,-28176(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28176, ctx.r3.u32);
	// bl 0x82659548
	ctx.lr = 0x822F8D10;
	sub_82659548(ctx, base);
loc_822F8D10:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12696
	ctx.r7.s64 = ctx.r10.s64 + 12696;
	// lwz r11,-28552(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28552);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f8d4c
	if (!ctx.cr6.eq) goto loc_822F8D4C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82607fb8
	ctx.lr = 0x822F8D44;
	sub_82607FB8(ctx, base);
	// stw r3,-28552(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28552, ctx.r3.u32);
	// bl 0x82608078
	ctx.lr = 0x822F8D4C;
	sub_82608078(ctx, base);
loc_822F8D4C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28556(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28556);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8d6c
	if (!ctx.cr6.eq) goto loc_822F8D6C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82607d88
	ctx.lr = 0x822F8D64;
	sub_82607D88(ctx, base);
	// stw r3,-28556(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28556, ctx.r3.u32);
	// bl 0x82607e48
	ctx.lr = 0x822F8D6C;
	sub_82607E48(ctx, base);
loc_822F8D6C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28104(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28104);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8d8c
	if (!ctx.cr6.eq) goto loc_822F8D8C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82664a70
	ctx.lr = 0x822F8D84;
	sub_82664A70(ctx, base);
	// stw r3,-28104(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28104, ctx.r3.u32);
	// bl 0x82664b30
	ctx.lr = 0x822F8D8C;
	sub_82664B30(ctx, base);
loc_822F8D8C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28520(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28520);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8dac
	if (!ctx.cr6.eq) goto loc_822F8DAC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82609128
	ctx.lr = 0x822F8DA4;
	sub_82609128(ctx, base);
	// stw r3,-28520(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28520, ctx.r3.u32);
	// bl 0x826091e8
	ctx.lr = 0x822F8DAC;
	sub_826091E8(ctx, base);
loc_822F8DAC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28584(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28584);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8dcc
	if (!ctx.cr6.eq) goto loc_822F8DCC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82606e38
	ctx.lr = 0x822F8DC4;
	sub_82606E38(ctx, base);
	// stw r3,-28584(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28584, ctx.r3.u32);
	// bl 0x82606ef8
	ctx.lr = 0x822F8DCC;
	sub_82606EF8(ctx, base);
loc_822F8DCC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27388(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27388);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8dec
	if (!ctx.cr6.eq) goto loc_822F8DEC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8274b3e8
	ctx.lr = 0x822F8DE4;
	sub_8274B3E8(ctx, base);
	// stw r3,-27388(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27388, ctx.r3.u32);
	// bl 0x8274b4a8
	ctx.lr = 0x822F8DEC;
	sub_8274B4A8(ctx, base);
loc_822F8DEC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27320(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27320);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8e0c
	if (!ctx.cr6.eq) goto loc_822F8E0C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82765978
	ctx.lr = 0x822F8E04;
	sub_82765978(ctx, base);
	// stw r3,-27320(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27320, ctx.r3.u32);
	// bl 0x82765a38
	ctx.lr = 0x822F8E0C;
	sub_82765A38(ctx, base);
loc_822F8E0C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27576(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27576);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8e2c
	if (!ctx.cr6.eq) goto loc_822F8E2C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826f6550
	ctx.lr = 0x822F8E24;
	sub_826F6550(ctx, base);
	// stw r3,-27576(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27576, ctx.r3.u32);
	// bl 0x826f6610
	ctx.lr = 0x822F8E2C;
	sub_826F6610(ctx, base);
loc_822F8E2C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12816
	ctx.r7.s64 = ctx.r10.s64 + 12816;
	// lwz r11,-27572(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27572);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f8e68
	if (!ctx.cr6.eq) goto loc_822F8E68;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826f6780
	ctx.lr = 0x822F8E60;
	sub_826F6780(ctx, base);
	// stw r3,-27572(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27572, ctx.r3.u32);
	// bl 0x826f6840
	ctx.lr = 0x822F8E68;
	sub_826F6840(ctx, base);
loc_822F8E68:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27560(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27560);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8e88
	if (!ctx.cr6.eq) goto loc_822F8E88;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826f6e10
	ctx.lr = 0x822F8E80;
	sub_826F6E10(ctx, base);
	// stw r3,-27560(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27560, ctx.r3.u32);
	// bl 0x826f6ed0
	ctx.lr = 0x822F8E88;
	sub_826F6ED0(ctx, base);
loc_822F8E88:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27556(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27556);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8ea8
	if (!ctx.cr6.eq) goto loc_822F8EA8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826f7038
	ctx.lr = 0x822F8EA0;
	sub_826F7038(ctx, base);
	// stw r3,-27556(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27556, ctx.r3.u32);
	// bl 0x826f70f8
	ctx.lr = 0x822F8EA8;
	sub_826F70F8(ctx, base);
loc_822F8EA8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12936
	ctx.r7.s64 = ctx.r10.s64 + 12936;
	// lwz r11,-28200(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28200);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f8ee4
	if (!ctx.cr6.eq) goto loc_822F8EE4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264d750
	ctx.lr = 0x822F8EDC;
	sub_8264D750(ctx, base);
	// stw r3,-28200(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28200, ctx.r3.u32);
	// bl 0x8264d810
	ctx.lr = 0x822F8EE4;
	sub_8264D810(ctx, base);
loc_822F8EE4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28768(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28768);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8f04
	if (!ctx.cr6.eq) goto loc_822F8F04;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826009a8
	ctx.lr = 0x822F8EFC;
	sub_826009A8(ctx, base);
	// stw r3,-28768(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28768, ctx.r3.u32);
	// bl 0x82600a68
	ctx.lr = 0x822F8F04;
	sub_82600A68(ctx, base);
loc_822F8F04:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27552(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27552);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8f24
	if (!ctx.cr6.eq) goto loc_822F8F24;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826f7260
	ctx.lr = 0x822F8F1C;
	sub_826F7260(ctx, base);
	// stw r3,-27552(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27552, ctx.r3.u32);
	// bl 0x826f7320
	ctx.lr = 0x822F8F24;
	sub_826F7320(ctx, base);
loc_822F8F24:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31240(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31240);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8f44
	if (!ctx.cr6.eq) goto loc_822F8F44;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8242a6e0
	ctx.lr = 0x822F8F3C;
	sub_8242A6E0(ctx, base);
	// stw r3,-31240(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31240, ctx.r3.u32);
	// bl 0x8242a7a0
	ctx.lr = 0x822F8F44;
	sub_8242A7A0(ctx, base);
loc_822F8F44:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13056
	ctx.r7.s64 = ctx.r10.s64 + 13056;
	// lwz r11,-28696(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28696);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f8f80
	if (!ctx.cr6.eq) goto loc_822F8F80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82603110
	ctx.lr = 0x822F8F78;
	sub_82603110(ctx, base);
	// stw r3,-28696(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28696, ctx.r3.u32);
	// bl 0x826031d0
	ctx.lr = 0x822F8F80;
	sub_826031D0(ctx, base);
loc_822F8F80:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13176
	ctx.r7.s64 = ctx.r10.s64 + 13176;
	// lwz r11,-28264(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28264);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f8fbc
	if (!ctx.cr6.eq) goto loc_822F8FBC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82640c58
	ctx.lr = 0x822F8FB4;
	sub_82640C58(ctx, base);
	// stw r3,-28264(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28264, ctx.r3.u32);
	// bl 0x82640d10
	ctx.lr = 0x822F8FBC;
	sub_82640D10(ctx, base);
loc_822F8FBC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26144(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26144);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8fdc
	if (!ctx.cr6.eq) goto loc_822F8FDC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827c68c0
	ctx.lr = 0x822F8FD4;
	sub_827C68C0(ctx, base);
	// stw r3,-26144(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26144, ctx.r3.u32);
	// bl 0x827c6980
	ctx.lr = 0x822F8FDC;
	sub_827C6980(ctx, base);
loc_822F8FDC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28248(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28248);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f8ffc
	if (!ctx.cr6.eq) goto loc_822F8FFC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82642bd8
	ctx.lr = 0x822F8FF4;
	sub_82642BD8(ctx, base);
	// stw r3,-28248(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28248, ctx.r3.u32);
	// bl 0x82642c98
	ctx.lr = 0x822F8FFC;
	sub_82642C98(ctx, base);
loc_822F8FFC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27256(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27256);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f901c
	if (!ctx.cr6.eq) goto loc_822F901C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827883f0
	ctx.lr = 0x822F9014;
	sub_827883F0(ctx, base);
	// stw r3,-27256(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27256, ctx.r3.u32);
	// bl 0x827884a8
	ctx.lr = 0x822F901C;
	sub_827884A8(ctx, base);
loc_822F901C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31280(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31280);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f903c
	if (!ctx.cr6.eq) goto loc_822F903C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82418550
	ctx.lr = 0x822F9034;
	sub_82418550(ctx, base);
	// stw r3,-31280(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31280, ctx.r3.u32);
	// bl 0x82418608
	ctx.lr = 0x822F903C;
	sub_82418608(ctx, base);
loc_822F903C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28764(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28764);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f905c
	if (!ctx.cr6.eq) goto loc_822F905C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82600bd0
	ctx.lr = 0x822F9054;
	sub_82600BD0(ctx, base);
	// stw r3,-28764(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28764, ctx.r3.u32);
	// bl 0x82600c90
	ctx.lr = 0x822F905C;
	sub_82600C90(ctx, base);
loc_822F905C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28516(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28516);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f907c
	if (!ctx.cr6.eq) goto loc_822F907C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82609350
	ctx.lr = 0x822F9074;
	sub_82609350(ctx, base);
	// stw r3,-28516(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28516, ctx.r3.u32);
	// bl 0x82609410
	ctx.lr = 0x822F907C;
	sub_82609410(ctx, base);
loc_822F907C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31328(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31328);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f909c
	if (!ctx.cr6.eq) goto loc_822F909C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8240cce8
	ctx.lr = 0x822F9094;
	sub_8240CCE8(ctx, base);
	// stw r3,-31328(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31328, ctx.r3.u32);
	// bl 0x8240cda8
	ctx.lr = 0x822F909C;
	sub_8240CDA8(ctx, base);
loc_822F909C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31320(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31320);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f90bc
	if (!ctx.cr6.eq) goto loc_822F90BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8240d140
	ctx.lr = 0x822F90B4;
	sub_8240D140(ctx, base);
	// stw r3,-31320(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31320, ctx.r3.u32);
	// bl 0x8240d1f8
	ctx.lr = 0x822F90BC;
	sub_8240D1F8(ctx, base);
loc_822F90BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31324(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31324);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f90dc
	if (!ctx.cr6.eq) goto loc_822F90DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8240cf10
	ctx.lr = 0x822F90D4;
	sub_8240CF10(ctx, base);
	// stw r3,-31324(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31324, ctx.r3.u32);
	// bl 0x8240cfd0
	ctx.lr = 0x822F90DC;
	sub_8240CFD0(ctx, base);
loc_822F90DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28260(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f90fc
	if (!ctx.cr6.eq) goto loc_822F90FC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82641448
	ctx.lr = 0x822F90F4;
	sub_82641448(ctx, base);
	// stw r3,-28260(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28260, ctx.r3.u32);
	// bl 0x82641508
	ctx.lr = 0x822F90FC;
	sub_82641508(ctx, base);
loc_822F90FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28616(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28616);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f911c
	if (!ctx.cr6.eq) goto loc_822F911C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82605cc8
	ctx.lr = 0x822F9114;
	sub_82605CC8(ctx, base);
	// stw r3,-28616(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28616, ctx.r3.u32);
	// bl 0x82605d88
	ctx.lr = 0x822F911C;
	sub_82605D88(ctx, base);
loc_822F911C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13296
	ctx.r7.s64 = ctx.r10.s64 + 13296;
	// lwz r11,-27800(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27800);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9158
	if (!ctx.cr6.eq) goto loc_822F9158;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826bb790
	ctx.lr = 0x822F9150;
	sub_826BB790(ctx, base);
	// stw r3,-27800(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27800, ctx.r3.u32);
	// bl 0x826bb850
	ctx.lr = 0x822F9158;
	sub_826BB850(ctx, base);
loc_822F9158:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13416
	ctx.r7.s64 = ctx.r10.s64 + 13416;
	// lwz r11,-27804(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27804);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9194
	if (!ctx.cr6.eq) goto loc_822F9194;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826bb560
	ctx.lr = 0x822F918C;
	sub_826BB560(ctx, base);
	// stw r3,-27804(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27804, ctx.r3.u32);
	// bl 0x826bb620
	ctx.lr = 0x822F9194;
	sub_826BB620(ctx, base);
loc_822F9194:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13536
	ctx.r7.s64 = ctx.r10.s64 + 13536;
	// lwz r11,-27808(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27808);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f91d0
	if (!ctx.cr6.eq) goto loc_822F91D0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826bb330
	ctx.lr = 0x822F91C8;
	sub_826BB330(ctx, base);
	// stw r3,-27808(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27808, ctx.r3.u32);
	// bl 0x826bb3f0
	ctx.lr = 0x822F91D0;
	sub_826BB3F0(ctx, base);
loc_822F91D0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28708(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28708);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f91f0
	if (!ctx.cr6.eq) goto loc_822F91F0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82602a80
	ctx.lr = 0x822F91E8;
	sub_82602A80(ctx, base);
	// stw r3,-28708(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28708, ctx.r3.u32);
	// bl 0x82602b40
	ctx.lr = 0x822F91F0;
	sub_82602B40(ctx, base);
loc_822F91F0:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13656
	ctx.r7.s64 = ctx.r10.s64 + 13656;
	// lwz r11,-27796(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27796);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f922c
	if (!ctx.cr6.eq) goto loc_822F922C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826bb9c0
	ctx.lr = 0x822F9224;
	sub_826BB9C0(ctx, base);
	// stw r3,-27796(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27796, ctx.r3.u32);
	// bl 0x826bba80
	ctx.lr = 0x822F922C;
	sub_826BBA80(ctx, base);
loc_822F922C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26072(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26072);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f924c
	if (!ctx.cr6.eq) goto loc_822F924C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827e7f18
	ctx.lr = 0x822F9244;
	sub_827E7F18(ctx, base);
	// stw r3,-26072(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26072, ctx.r3.u32);
	// bl 0x827e7fc8
	ctx.lr = 0x822F924C;
	sub_827E7FC8(ctx, base);
loc_822F924C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28908(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28908);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f926c
	if (!ctx.cr6.eq) goto loc_822F926C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ecf70
	ctx.lr = 0x822F9264;
	sub_825ECF70(ctx, base);
	// stw r3,-28908(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28908, ctx.r3.u32);
	// bl 0x825ed020
	ctx.lr = 0x822F926C;
	sub_825ED020(ctx, base);
loc_822F926C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27792(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27792);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f928c
	if (!ctx.cr6.eq) goto loc_822F928C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826ca230
	ctx.lr = 0x822F9284;
	sub_826CA230(ctx, base);
	// stw r3,-27792(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27792, ctx.r3.u32);
	// bl 0x826ca2e0
	ctx.lr = 0x822F928C;
	sub_826CA2E0(ctx, base);
loc_822F928C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27644(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27644);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f92ac
	if (!ctx.cr6.eq) goto loc_822F92AC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e51a0
	ctx.lr = 0x822F92A4;
	sub_826E51A0(ctx, base);
	// stw r3,-27644(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27644, ctx.r3.u32);
	// bl 0x826e5260
	ctx.lr = 0x822F92AC;
	sub_826E5260(ctx, base);
loc_822F92AC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27464(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27464);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f92cc
	if (!ctx.cr6.eq) goto loc_822F92CC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82732300
	ctx.lr = 0x822F92C4;
	sub_82732300(ctx, base);
	// stw r3,-27464(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27464, ctx.r3.u32);
	// bl 0x827323c0
	ctx.lr = 0x822F92CC;
	sub_827323C0(ctx, base);
loc_822F92CC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28900(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28900);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f92ec
	if (!ctx.cr6.eq) goto loc_822F92EC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825eef58
	ctx.lr = 0x822F92E4;
	sub_825EEF58(ctx, base);
	// stw r3,-28900(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28900, ctx.r3.u32);
	// bl 0x825ef018
	ctx.lr = 0x822F92EC;
	sub_825EF018(ctx, base);
loc_822F92EC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27784(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27784);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f930c
	if (!ctx.cr6.eq) goto loc_822F930C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826ca880
	ctx.lr = 0x822F9304;
	sub_826CA880(ctx, base);
	// stw r3,-27784(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27784, ctx.r3.u32);
	// bl 0x826ca940
	ctx.lr = 0x822F930C;
	sub_826CA940(ctx, base);
loc_822F930C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27324(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27324);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f932c
	if (!ctx.cr6.eq) goto loc_822F932C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82765748
	ctx.lr = 0x822F9324;
	sub_82765748(ctx, base);
	// stw r3,-27324(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27324, ctx.r3.u32);
	// bl 0x82765808
	ctx.lr = 0x822F932C;
	sub_82765808(ctx, base);
loc_822F932C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28904(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28904);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f934c
	if (!ctx.cr6.eq) goto loc_822F934C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ed190
	ctx.lr = 0x822F9344;
	sub_825ED190(ctx, base);
	// stw r3,-28904(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28904, ctx.r3.u32);
	// bl 0x825ed250
	ctx.lr = 0x822F934C;
	sub_825ED250(ctx, base);
loc_822F934C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27788(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27788);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f936c
	if (!ctx.cr6.eq) goto loc_822F936C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826ca450
	ctx.lr = 0x822F9364;
	sub_826CA450(ctx, base);
	// stw r3,-27788(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27788, ctx.r3.u32);
	// bl 0x826ca510
	ctx.lr = 0x822F936C;
	sub_826CA510(ctx, base);
loc_822F936C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31236(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31236);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f938c
	if (!ctx.cr6.eq) goto loc_822F938C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82430788
	ctx.lr = 0x822F9384;
	sub_82430788(ctx, base);
	// stw r3,-31236(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31236, ctx.r3.u32);
	// bl 0x82430848
	ctx.lr = 0x822F938C;
	sub_82430848(ctx, base);
loc_822F938C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13776
	ctx.r7.s64 = ctx.r10.s64 + 13776;
	// lwz r11,-27904(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27904);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f93c8
	if (!ctx.cr6.eq) goto loc_822F93C8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826ab610
	ctx.lr = 0x822F93C0;
	sub_826AB610(ctx, base);
	// stw r3,-27904(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27904, ctx.r3.u32);
	// bl 0x826ab6d0
	ctx.lr = 0x822F93C8;
	sub_826AB6D0(ctx, base);
loc_822F93C8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27660(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27660);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f93e8
	if (!ctx.cr6.eq) goto loc_822F93E8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e1640
	ctx.lr = 0x822F93E0;
	sub_826E1640(ctx, base);
	// stw r3,-27660(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27660, ctx.r3.u32);
	// bl 0x826e1700
	ctx.lr = 0x822F93E8;
	sub_826E1700(ctx, base);
loc_822F93E8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27656(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27656);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9408
	if (!ctx.cr6.eq) goto loc_822F9408;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e1868
	ctx.lr = 0x822F9400;
	sub_826E1868(ctx, base);
	// stw r3,-27656(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27656, ctx.r3.u32);
	// bl 0x826e1928
	ctx.lr = 0x822F9408;
	sub_826E1928(ctx, base);
loc_822F9408:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13896
	ctx.r7.s64 = ctx.r10.s64 + 13896;
	// lwz r11,-27356(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27356);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9444
	if (!ctx.cr6.eq) goto loc_822F9444;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82757558
	ctx.lr = 0x822F943C;
	sub_82757558(ctx, base);
	// stw r3,-27356(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27356, ctx.r3.u32);
	// bl 0x82757618
	ctx.lr = 0x822F9444;
	sub_82757618(ctx, base);
loc_822F9444:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28480(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28480);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9464
	if (!ctx.cr6.eq) goto loc_822F9464;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8260a6f0
	ctx.lr = 0x822F945C;
	sub_8260A6F0(ctx, base);
	// stw r3,-28480(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28480, ctx.r3.u32);
	// bl 0x8260a7b0
	ctx.lr = 0x822F9464;
	sub_8260A7B0(ctx, base);
loc_822F9464:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27232(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27232);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9484
	if (!ctx.cr6.eq) goto loc_822F9484;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8279c060
	ctx.lr = 0x822F947C;
	sub_8279C060(ctx, base);
	// stw r3,-27232(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27232, ctx.r3.u32);
	// bl 0x8279c120
	ctx.lr = 0x822F9484;
	sub_8279C120(ctx, base);
loc_822F9484:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29364(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29364);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f94a4
	if (!ctx.cr6.eq) goto loc_822F94A4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8255fbe8
	ctx.lr = 0x822F949C;
	sub_8255FBE8(ctx, base);
	// stw r3,-29364(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29364, ctx.r3.u32);
	// bl 0x8255fca8
	ctx.lr = 0x822F94A4;
	sub_8255FCA8(ctx, base);
loc_822F94A4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28220(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28220);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f94c4
	if (!ctx.cr6.eq) goto loc_822F94C4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264cc60
	ctx.lr = 0x822F94BC;
	sub_8264CC60(ctx, base);
	// stw r3,-28220(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28220, ctx.r3.u32);
	// bl 0x8264cd20
	ctx.lr = 0x822F94C4;
	sub_8264CD20(ctx, base);
loc_822F94C4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14016
	ctx.r7.s64 = ctx.r10.s64 + 14016;
	// lwz r11,-28592(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28592);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9500
	if (!ctx.cr6.eq) goto loc_822F9500;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826069e0
	ctx.lr = 0x822F94F8;
	sub_826069E0(ctx, base);
	// stw r3,-28592(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28592, ctx.r3.u32);
	// bl 0x82606aa0
	ctx.lr = 0x822F9500;
	sub_82606AA0(ctx, base);
loc_822F9500:
	// lis r30,-31884
	ctx.r30.s64 = -2089549824;
	// lwz r11,25364(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 25364);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9520
	if (!ctx.cr6.eq) goto loc_822F9520;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82306aa0
	ctx.lr = 0x822F9518;
	sub_82306AA0(ctx, base);
	// stw r3,25364(r30)
	PPC_STORE_U32(ctx.r30.u32 + 25364, ctx.r3.u32);
	// bl 0x82306b60
	ctx.lr = 0x822F9520;
	sub_82306B60(ctx, base);
loc_822F9520:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28568(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28568);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9540
	if (!ctx.cr6.eq) goto loc_822F9540;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826076f8
	ctx.lr = 0x822F9538;
	sub_826076F8(ctx, base);
	// stw r3,-28568(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28568, ctx.r3.u32);
	// bl 0x826077b8
	ctx.lr = 0x822F9540;
	sub_826077B8(ctx, base);
loc_822F9540:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28892(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28892);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9560
	if (!ctx.cr6.eq) goto loc_822F9560;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f0c18
	ctx.lr = 0x822F9558;
	sub_825F0C18(ctx, base);
	// stw r3,-28892(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28892, ctx.r3.u32);
	// bl 0x825f0cd8
	ctx.lr = 0x822F9560;
	sub_825F0CD8(ctx, base);
loc_822F9560:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28864(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28864);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9580
	if (!ctx.cr6.eq) goto loc_822F9580;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f1b68
	ctx.lr = 0x822F9578;
	sub_825F1B68(ctx, base);
	// stw r3,-28864(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28864, ctx.r3.u32);
	// bl 0x825f1c28
	ctx.lr = 0x822F9580;
	sub_825F1C28(ctx, base);
loc_822F9580:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14136
	ctx.r7.s64 = ctx.r10.s64 + 14136;
	// lwz r11,-28876(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28876);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f95bc
	if (!ctx.cr6.eq) goto loc_822F95BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f14d8
	ctx.lr = 0x822F95B4;
	sub_825F14D8(ctx, base);
	// stw r3,-28876(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28876, ctx.r3.u32);
	// bl 0x825f1598
	ctx.lr = 0x822F95BC;
	sub_825F1598(ctx, base);
loc_822F95BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28856(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28856);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f95dc
	if (!ctx.cr6.eq) goto loc_822F95DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f1fc8
	ctx.lr = 0x822F95D4;
	sub_825F1FC8(ctx, base);
	// stw r3,-28856(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28856, ctx.r3.u32);
	// bl 0x825f2088
	ctx.lr = 0x822F95DC;
	sub_825F2088(ctx, base);
loc_822F95DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28880(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28880);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f95fc
	if (!ctx.cr6.eq) goto loc_822F95FC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f12a8
	ctx.lr = 0x822F95F4;
	sub_825F12A8(ctx, base);
	// stw r3,-28880(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28880, ctx.r3.u32);
	// bl 0x825f1368
	ctx.lr = 0x822F95FC;
	sub_825F1368(ctx, base);
loc_822F95FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28884(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28884);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f961c
	if (!ctx.cr6.eq) goto loc_822F961C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f1078
	ctx.lr = 0x822F9614;
	sub_825F1078(ctx, base);
	// stw r3,-28884(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28884, ctx.r3.u32);
	// bl 0x825f1138
	ctx.lr = 0x822F961C;
	sub_825F1138(ctx, base);
loc_822F961C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28860(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28860);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f963c
	if (!ctx.cr6.eq) goto loc_822F963C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f1d98
	ctx.lr = 0x822F9634;
	sub_825F1D98(ctx, base);
	// stw r3,-28860(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28860, ctx.r3.u32);
	// bl 0x825f1e58
	ctx.lr = 0x822F963C;
	sub_825F1E58(ctx, base);
loc_822F963C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14256
	ctx.r7.s64 = ctx.r10.s64 + 14256;
	// lwz r11,-28868(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28868);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9678
	if (!ctx.cr6.eq) goto loc_822F9678;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f1938
	ctx.lr = 0x822F9670;
	sub_825F1938(ctx, base);
	// stw r3,-28868(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28868, ctx.r3.u32);
	// bl 0x825f19f8
	ctx.lr = 0x822F9678;
	sub_825F19F8(ctx, base);
loc_822F9678:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14376
	ctx.r7.s64 = ctx.r10.s64 + 14376;
	// lwz r11,-28888(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28888);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f96b4
	if (!ctx.cr6.eq) goto loc_822F96B4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f0e48
	ctx.lr = 0x822F96AC;
	sub_825F0E48(ctx, base);
	// stw r3,-28888(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28888, ctx.r3.u32);
	// bl 0x825f0f08
	ctx.lr = 0x822F96B4;
	sub_825F0F08(ctx, base);
loc_822F96B4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28872(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28872);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f96d4
	if (!ctx.cr6.eq) goto loc_822F96D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f1708
	ctx.lr = 0x822F96CC;
	sub_825F1708(ctx, base);
	// stw r3,-28872(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28872, ctx.r3.u32);
	// bl 0x825f17c8
	ctx.lr = 0x822F96D4;
	sub_825F17C8(ctx, base);
loc_822F96D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28896(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28896);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f96f4
	if (!ctx.cr6.eq) goto loc_822F96F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f09e8
	ctx.lr = 0x822F96EC;
	sub_825F09E8(ctx, base);
	// stw r3,-28896(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28896, ctx.r3.u32);
	// bl 0x825f0aa8
	ctx.lr = 0x822F96F4;
	sub_825F0AA8(ctx, base);
loc_822F96F4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14496
	ctx.r7.s64 = ctx.r10.s64 + 14496;
	// lwz r11,-28800(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28800);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9730
	if (!ctx.cr6.eq) goto loc_822F9730;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ff828
	ctx.lr = 0x822F9728;
	sub_825FF828(ctx, base);
	// stw r3,-28800(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28800, ctx.r3.u32);
	// bl 0x825ff8e8
	ctx.lr = 0x822F9730;
	sub_825FF8E8(ctx, base);
loc_822F9730:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27272(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27272);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9750
	if (!ctx.cr6.eq) goto loc_822F9750;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82775670
	ctx.lr = 0x822F9748;
	sub_82775670(ctx, base);
	// stw r3,-27272(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27272, ctx.r3.u32);
	// bl 0x82775730
	ctx.lr = 0x822F9750;
	sub_82775730(ctx, base);
loc_822F9750:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28796(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28796);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9770
	if (!ctx.cr6.eq) goto loc_822F9770;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ffa58
	ctx.lr = 0x822F9768;
	sub_825FFA58(ctx, base);
	// stw r3,-28796(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28796, ctx.r3.u32);
	// bl 0x825ffb18
	ctx.lr = 0x822F9770;
	sub_825FFB18(ctx, base);
loc_822F9770:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28852(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9790
	if (!ctx.cr6.eq) goto loc_822F9790;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f5908
	ctx.lr = 0x822F9788;
	sub_825F5908(ctx, base);
	// stw r3,-28852(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28852, ctx.r3.u32);
	// bl 0x825f59c8
	ctx.lr = 0x822F9790;
	sub_825F59C8(ctx, base);
loc_822F9790:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28848(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28848);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f97b0
	if (!ctx.cr6.eq) goto loc_822F97B0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f5b38
	ctx.lr = 0x822F97A8;
	sub_825F5B38(ctx, base);
	// stw r3,-28848(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28848, ctx.r3.u32);
	// bl 0x825f5bf8
	ctx.lr = 0x822F97B0;
	sub_825F5BF8(ctx, base);
loc_822F97B0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28836(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28836);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f97d0
	if (!ctx.cr6.eq) goto loc_822F97D0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f61c8
	ctx.lr = 0x822F97C8;
	sub_825F61C8(ctx, base);
	// stw r3,-28836(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28836, ctx.r3.u32);
	// bl 0x825f6288
	ctx.lr = 0x822F97D0;
	sub_825F6288(ctx, base);
loc_822F97D0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28844(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28844);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f97f0
	if (!ctx.cr6.eq) goto loc_822F97F0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f5d68
	ctx.lr = 0x822F97E8;
	sub_825F5D68(ctx, base);
	// stw r3,-28844(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28844, ctx.r3.u32);
	// bl 0x825f5e28
	ctx.lr = 0x822F97F0;
	sub_825F5E28(ctx, base);
loc_822F97F0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28840(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28840);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9810
	if (!ctx.cr6.eq) goto loc_822F9810;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f5f98
	ctx.lr = 0x822F9808;
	sub_825F5F98(ctx, base);
	// stw r3,-28840(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28840, ctx.r3.u32);
	// bl 0x825f6058
	ctx.lr = 0x822F9810;
	sub_825F6058(ctx, base);
loc_822F9810:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28832(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28832);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9830
	if (!ctx.cr6.eq) goto loc_822F9830;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f63f8
	ctx.lr = 0x822F9828;
	sub_825F63F8(ctx, base);
	// stw r3,-28832(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28832, ctx.r3.u32);
	// bl 0x825f64b8
	ctx.lr = 0x822F9830;
	sub_825F64B8(ctx, base);
loc_822F9830:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28828(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28828);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9850
	if (!ctx.cr6.eq) goto loc_822F9850;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f6628
	ctx.lr = 0x822F9848;
	sub_825F6628(ctx, base);
	// stw r3,-28828(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28828, ctx.r3.u32);
	// bl 0x825f66e8
	ctx.lr = 0x822F9850;
	sub_825F66E8(ctx, base);
loc_822F9850:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28816(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28816);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9870
	if (!ctx.cr6.eq) goto loc_822F9870;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f6cb8
	ctx.lr = 0x822F9868;
	sub_825F6CB8(ctx, base);
	// stw r3,-28816(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28816, ctx.r3.u32);
	// bl 0x825f6d78
	ctx.lr = 0x822F9870;
	sub_825F6D78(ctx, base);
loc_822F9870:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28824(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28824);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9890
	if (!ctx.cr6.eq) goto loc_822F9890;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f6858
	ctx.lr = 0x822F9888;
	sub_825F6858(ctx, base);
	// stw r3,-28824(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28824, ctx.r3.u32);
	// bl 0x825f6918
	ctx.lr = 0x822F9890;
	sub_825F6918(ctx, base);
loc_822F9890:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28820(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28820);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f98b0
	if (!ctx.cr6.eq) goto loc_822F98B0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825f6a88
	ctx.lr = 0x822F98A8;
	sub_825F6A88(ctx, base);
	// stw r3,-28820(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28820, ctx.r3.u32);
	// bl 0x825f6b48
	ctx.lr = 0x822F98B0;
	sub_825F6B48(ctx, base);
loc_822F98B0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26076(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26076);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f98d0
	if (!ctx.cr6.eq) goto loc_822F98D0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827e5ac0
	ctx.lr = 0x822F98C8;
	sub_827E5AC0(ctx, base);
	// stw r3,-26076(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26076, ctx.r3.u32);
	// bl 0x827e5b80
	ctx.lr = 0x822F98D0;
	sub_827E5B80(ctx, base);
loc_822F98D0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28812(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28812);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f98f0
	if (!ctx.cr6.eq) goto loc_822F98F0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825fd150
	ctx.lr = 0x822F98E8;
	sub_825FD150(ctx, base);
	// stw r3,-28812(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28812, ctx.r3.u32);
	// bl 0x825fd210
	ctx.lr = 0x822F98F0;
	sub_825FD210(ctx, base);
loc_822F98F0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28504(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28504);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9910
	if (!ctx.cr6.eq) goto loc_822F9910;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826099d8
	ctx.lr = 0x822F9908;
	sub_826099D8(ctx, base);
	// stw r3,-28504(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28504, ctx.r3.u32);
	// bl 0x82609a98
	ctx.lr = 0x822F9910;
	sub_82609A98(ctx, base);
loc_822F9910:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26148(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26148);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9930
	if (!ctx.cr6.eq) goto loc_822F9930;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827c62a8
	ctx.lr = 0x822F9928;
	sub_827C62A8(ctx, base);
	// stw r3,-26148(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26148, ctx.r3.u32);
	// bl 0x827c6360
	ctx.lr = 0x822F9930;
	sub_827C6360(ctx, base);
loc_822F9930:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28188(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28188);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9950
	if (!ctx.cr6.eq) goto loc_822F9950;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264dde0
	ctx.lr = 0x822F9948;
	sub_8264DDE0(ctx, base);
	// stw r3,-28188(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28188, ctx.r3.u32);
	// bl 0x8264dea0
	ctx.lr = 0x822F9950;
	sub_8264DEA0(ctx, base);
loc_822F9950:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28184(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28184);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9970
	if (!ctx.cr6.eq) goto loc_822F9970;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264e010
	ctx.lr = 0x822F9968;
	sub_8264E010(ctx, base);
	// stw r3,-28184(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28184, ctx.r3.u32);
	// bl 0x8264e0d0
	ctx.lr = 0x822F9970;
	sub_8264E0D0(ctx, base);
loc_822F9970:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28208(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28208);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9990
	if (!ctx.cr6.eq) goto loc_822F9990;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264d2f0
	ctx.lr = 0x822F9988;
	sub_8264D2F0(ctx, base);
	// stw r3,-28208(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28208, ctx.r3.u32);
	// bl 0x8264d3b0
	ctx.lr = 0x822F9990;
	sub_8264D3B0(ctx, base);
loc_822F9990:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28192(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28192);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f99b0
	if (!ctx.cr6.eq) goto loc_822F99B0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264dbb0
	ctx.lr = 0x822F99A8;
	sub_8264DBB0(ctx, base);
	// stw r3,-28192(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28192, ctx.r3.u32);
	// bl 0x8264dc70
	ctx.lr = 0x822F99B0;
	sub_8264DC70(ctx, base);
loc_822F99B0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27228);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f99d0
	if (!ctx.cr6.eq) goto loc_822F99D0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8279c650
	ctx.lr = 0x822F99C8;
	sub_8279C650(ctx, base);
	// stw r3,-27228(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27228, ctx.r3.u32);
	// bl 0x8279c710
	ctx.lr = 0x822F99D0;
	sub_8279C710(ctx, base);
loc_822F99D0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28204(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28204);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f99f0
	if (!ctx.cr6.eq) goto loc_822F99F0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264d520
	ctx.lr = 0x822F99E8;
	sub_8264D520(ctx, base);
	// stw r3,-28204(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28204, ctx.r3.u32);
	// bl 0x8264d5e0
	ctx.lr = 0x822F99F0;
	sub_8264D5E0(ctx, base);
loc_822F99F0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26084(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26084);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9a10
	if (!ctx.cr6.eq) goto loc_822F9A10;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827e3520
	ctx.lr = 0x822F9A08;
	sub_827E3520(ctx, base);
	// stw r3,-26084(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26084, ctx.r3.u32);
	// bl 0x827e35e0
	ctx.lr = 0x822F9A10;
	sub_827E35E0(ctx, base);
loc_822F9A10:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28196(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28196);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9a30
	if (!ctx.cr6.eq) goto loc_822F9A30;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264d980
	ctx.lr = 0x822F9A28;
	sub_8264D980(ctx, base);
	// stw r3,-28196(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28196, ctx.r3.u32);
	// bl 0x8264da40
	ctx.lr = 0x822F9A30;
	sub_8264DA40(ctx, base);
loc_822F9A30:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31284(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31284);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9a50
	if (!ctx.cr6.eq) goto loc_822F9A50;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82414a68
	ctx.lr = 0x822F9A48;
	sub_82414A68(ctx, base);
	// stw r3,-31284(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31284, ctx.r3.u32);
	// bl 0x82414b28
	ctx.lr = 0x822F9A50;
	sub_82414B28(ctx, base);
loc_822F9A50:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28212(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28212);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9a70
	if (!ctx.cr6.eq) goto loc_822F9A70;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264d0c0
	ctx.lr = 0x822F9A68;
	sub_8264D0C0(ctx, base);
	// stw r3,-28212(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28212, ctx.r3.u32);
	// bl 0x8264d180
	ctx.lr = 0x822F9A70;
	sub_8264D180(ctx, base);
loc_822F9A70:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28620(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28620);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9a90
	if (!ctx.cr6.eq) goto loc_822F9A90;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82605a98
	ctx.lr = 0x822F9A88;
	sub_82605A98(ctx, base);
	// stw r3,-28620(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28620, ctx.r3.u32);
	// bl 0x82605b58
	ctx.lr = 0x822F9A90;
	sub_82605B58(ctx, base);
loc_822F9A90:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14616
	ctx.r7.s64 = ctx.r10.s64 + 14616;
	// lwz r11,-27368(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27368);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9acc
	if (!ctx.cr6.eq) goto loc_822F9ACC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827502d8
	ctx.lr = 0x822F9AC4;
	sub_827502D8(ctx, base);
	// stw r3,-27368(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27368, ctx.r3.u32);
	// bl 0x82750398
	ctx.lr = 0x822F9ACC;
	sub_82750398(ctx, base);
loc_822F9ACC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28500(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28500);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9aec
	if (!ctx.cr6.eq) goto loc_822F9AEC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82609c08
	ctx.lr = 0x822F9AE4;
	sub_82609C08(ctx, base);
	// stw r3,-28500(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28500, ctx.r3.u32);
	// bl 0x82609cc8
	ctx.lr = 0x822F9AEC;
	sub_82609CC8(ctx, base);
loc_822F9AEC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27568(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27568);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9b0c
	if (!ctx.cr6.eq) goto loc_822F9B0C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826f69b0
	ctx.lr = 0x822F9B04;
	sub_826F69B0(ctx, base);
	// stw r3,-27568(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27568, ctx.r3.u32);
	// bl 0x826f6a70
	ctx.lr = 0x822F9B0C;
	sub_826F6A70(ctx, base);
loc_822F9B0C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26140(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26140);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9b2c
	if (!ctx.cr6.eq) goto loc_822F9B2C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827c70b0
	ctx.lr = 0x822F9B24;
	sub_827C70B0(ctx, base);
	// stw r3,-26140(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26140, ctx.r3.u32);
	// bl 0x827c7170
	ctx.lr = 0x822F9B2C;
	sub_827C7170(ctx, base);
loc_822F9B2C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27944(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27944);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9b4c
	if (!ctx.cr6.eq) goto loc_822F9B4C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826870d8
	ctx.lr = 0x822F9B44;
	sub_826870D8(ctx, base);
	// stw r3,-27944(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27944, ctx.r3.u32);
	// bl 0x82687198
	ctx.lr = 0x822F9B4C;
	sub_82687198(ctx, base);
loc_822F9B4C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14736
	ctx.r7.s64 = ctx.r10.s64 + 14736;
	// lwz r11,-28540(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28540);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9b88
	if (!ctx.cr6.eq) goto loc_822F9B88;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82608648
	ctx.lr = 0x822F9B80;
	sub_82608648(ctx, base);
	// stw r3,-28540(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28540, ctx.r3.u32);
	// bl 0x82608708
	ctx.lr = 0x822F9B88;
	sub_82608708(ctx, base);
loc_822F9B88:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28536(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28536);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9ba8
	if (!ctx.cr6.eq) goto loc_822F9BA8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82608870
	ctx.lr = 0x822F9BA0;
	sub_82608870(ctx, base);
	// stw r3,-28536(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28536, ctx.r3.u32);
	// bl 0x82608930
	ctx.lr = 0x822F9BA8;
	sub_82608930(ctx, base);
loc_822F9BA8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27716(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27716);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9bc8
	if (!ctx.cr6.eq) goto loc_822F9BC8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826dbe80
	ctx.lr = 0x822F9BC0;
	sub_826DBE80(ctx, base);
	// stw r3,-27716(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27716, ctx.r3.u32);
	// bl 0x826dbf40
	ctx.lr = 0x822F9BC8;
	sub_826DBF40(ctx, base);
loc_822F9BC8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27516(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27516);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9be8
	if (!ctx.cr6.eq) goto loc_822F9BE8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827013f0
	ctx.lr = 0x822F9BE0;
	sub_827013F0(ctx, base);
	// stw r3,-27516(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27516, ctx.r3.u32);
	// bl 0x827014b0
	ctx.lr = 0x822F9BE8;
	sub_827014B0(ctx, base);
loc_822F9BE8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14856
	ctx.r7.s64 = ctx.r10.s64 + 14856;
	// lwz r11,-28252(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28252);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9c24
	if (!ctx.cr6.eq) goto loc_822F9C24;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826425f0
	ctx.lr = 0x822F9C1C;
	sub_826425F0(ctx, base);
	// stw r3,-28252(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28252, ctx.r3.u32);
	// bl 0x826426b0
	ctx.lr = 0x822F9C24;
	sub_826426B0(ctx, base);
loc_822F9C24:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28056(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28056);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9c44
	if (!ctx.cr6.eq) goto loc_822F9C44;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82676b48
	ctx.lr = 0x822F9C3C;
	sub_82676B48(ctx, base);
	// stw r3,-28056(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28056, ctx.r3.u32);
	// bl 0x82676c08
	ctx.lr = 0x822F9C44;
	sub_82676C08(ctx, base);
loc_822F9C44:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28060(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28060);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9c64
	if (!ctx.cr6.eq) goto loc_822F9C64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82676918
	ctx.lr = 0x822F9C5C;
	sub_82676918(ctx, base);
	// stw r3,-28060(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28060, ctx.r3.u32);
	// bl 0x826769d8
	ctx.lr = 0x822F9C64;
	sub_826769D8(ctx, base);
loc_822F9C64:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14976
	ctx.r7.s64 = ctx.r10.s64 + 14976;
	// lwz r11,-28700(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28700);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9ca0
	if (!ctx.cr6.eq) goto loc_822F9CA0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82602ee0
	ctx.lr = 0x822F9C98;
	sub_82602EE0(ctx, base);
	// stw r3,-28700(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28700, ctx.r3.u32);
	// bl 0x82602fa0
	ctx.lr = 0x822F9CA0;
	sub_82602FA0(ctx, base);
loc_822F9CA0:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15096
	ctx.r7.s64 = ctx.r10.s64 + 15096;
	// lwz r11,-27240(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27240);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9cdc
	if (!ctx.cr6.eq) goto loc_822F9CDC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8278dd48
	ctx.lr = 0x822F9CD4;
	sub_8278DD48(ctx, base);
	// stw r3,-27240(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27240, ctx.r3.u32);
	// bl 0x8278de08
	ctx.lr = 0x822F9CDC;
	sub_8278DE08(ctx, base);
loc_822F9CDC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15216
	ctx.r7.s64 = ctx.r10.s64 + 15216;
	// lwz r11,-28732(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28732);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9d18
	if (!ctx.cr6.eq) goto loc_822F9D18;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82601d60
	ctx.lr = 0x822F9D10;
	sub_82601D60(ctx, base);
	// stw r3,-28732(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28732, ctx.r3.u32);
	// bl 0x82601e20
	ctx.lr = 0x822F9D18;
	sub_82601E20(ctx, base);
loc_822F9D18:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15336
	ctx.r7.s64 = ctx.r10.s64 + 15336;
	// lwz r11,-31336(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31336);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9d54
	if (!ctx.cr6.eq) goto loc_822F9D54;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8240b628
	ctx.lr = 0x822F9D4C;
	sub_8240B628(ctx, base);
	// stw r3,-31336(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31336, ctx.r3.u32);
	// bl 0x8240b6e8
	ctx.lr = 0x822F9D54;
	sub_8240B6E8(ctx, base);
loc_822F9D54:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15456
	ctx.r7.s64 = ctx.r10.s64 + 15456;
	// lwz r11,-31332(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31332);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9d90
	if (!ctx.cr6.eq) goto loc_822F9D90;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8240b858
	ctx.lr = 0x822F9D88;
	sub_8240B858(ctx, base);
	// stw r3,-31332(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31332, ctx.r3.u32);
	// bl 0x8240b918
	ctx.lr = 0x822F9D90;
	sub_8240B918(ctx, base);
loc_822F9D90:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15576
	ctx.r7.s64 = ctx.r10.s64 + 15576;
	// lwz r11,-28744(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28744);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9dcc
	if (!ctx.cr6.eq) goto loc_822F9DCC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826016d0
	ctx.lr = 0x822F9DC4;
	sub_826016D0(ctx, base);
	// stw r3,-28744(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28744, ctx.r3.u32);
	// bl 0x82601780
	ctx.lr = 0x822F9DCC;
	sub_82601780(ctx, base);
loc_822F9DCC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15696
	ctx.r7.s64 = ctx.r10.s64 + 15696;
	// lwz r11,-28624(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28624);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9e08
	if (!ctx.cr6.eq) goto loc_822F9E08;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82605860
	ctx.lr = 0x822F9E00;
	sub_82605860(ctx, base);
	// stw r3,-28624(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28624, ctx.r3.u32);
	// bl 0x82605910
	ctx.lr = 0x822F9E08;
	sub_82605910(ctx, base);
loc_822F9E08:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28440(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28440);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9e28
	if (!ctx.cr6.eq) goto loc_822F9E28;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8261c060
	ctx.lr = 0x822F9E20;
	sub_8261C060(ctx, base);
	// stw r3,-28440(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28440, ctx.r3.u32);
	// bl 0x8261c120
	ctx.lr = 0x822F9E28;
	sub_8261C120(ctx, base);
loc_822F9E28:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15816
	ctx.r7.s64 = ctx.r10.s64 + 15816;
	// lwz r11,-28572(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28572);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9e64
	if (!ctx.cr6.eq) goto loc_822F9E64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826074c8
	ctx.lr = 0x822F9E5C;
	sub_826074C8(ctx, base);
	// stw r3,-28572(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28572, ctx.r3.u32);
	// bl 0x82607588
	ctx.lr = 0x822F9E64;
	sub_82607588(ctx, base);
loc_822F9E64:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27252(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27252);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9e84
	if (!ctx.cr6.eq) goto loc_822F9E84;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8278a358
	ctx.lr = 0x822F9E7C;
	sub_8278A358(ctx, base);
	// stw r3,-27252(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27252, ctx.r3.u32);
	// bl 0x8278a418
	ctx.lr = 0x822F9E84;
	sub_8278A418(ctx, base);
loc_822F9E84:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15952
	ctx.r7.s64 = ctx.r10.s64 + 15952;
	// lwz r11,-28648(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28648);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9ec0
	if (!ctx.cr6.eq) goto loc_822F9EC0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82604b40
	ctx.lr = 0x822F9EB8;
	sub_82604B40(ctx, base);
	// stw r3,-28648(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28648, ctx.r3.u32);
	// bl 0x82604bf0
	ctx.lr = 0x822F9EC0;
	sub_82604BF0(ctx, base);
loc_822F9EC0:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,16072
	ctx.r7.s64 = ctx.r10.s64 + 16072;
	// lwz r11,-28640(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28640);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9efc
	if (!ctx.cr6.eq) goto loc_822F9EFC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82604fa0
	ctx.lr = 0x822F9EF4;
	sub_82604FA0(ctx, base);
	// stw r3,-28640(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28640, ctx.r3.u32);
	// bl 0x82605060
	ctx.lr = 0x822F9EFC;
	sub_82605060(ctx, base);
loc_822F9EFC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28628(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28628);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9f1c
	if (!ctx.cr6.eq) goto loc_822F9F1C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82605630
	ctx.lr = 0x822F9F14;
	sub_82605630(ctx, base);
	// stw r3,-28628(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28628, ctx.r3.u32);
	// bl 0x826056f0
	ctx.lr = 0x822F9F1C;
	sub_826056F0(ctx, base);
loc_822F9F1C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30380(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30380);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9f3c
	if (!ctx.cr6.eq) goto loc_822F9F3C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824caa70
	ctx.lr = 0x822F9F34;
	sub_824CAA70(ctx, base);
	// stw r3,-30380(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30380, ctx.r3.u32);
	// bl 0x824cab30
	ctx.lr = 0x822F9F3C;
	sub_824CAB30(ctx, base);
loc_822F9F3C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27752(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27752);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9f5c
	if (!ctx.cr6.eq) goto loc_822F9F5C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826d1ed0
	ctx.lr = 0x822F9F54;
	sub_826D1ED0(ctx, base);
	// stw r3,-27752(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27752, ctx.r3.u32);
	// bl 0x826d1f90
	ctx.lr = 0x822F9F5C;
	sub_826D1F90(ctx, base);
loc_822F9F5C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30348(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30348);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9f7c
	if (!ctx.cr6.eq) goto loc_822F9F7C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cbbe0
	ctx.lr = 0x822F9F74;
	sub_824CBBE0(ctx, base);
	// stw r3,-30348(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30348, ctx.r3.u32);
	// bl 0x824cbca0
	ctx.lr = 0x822F9F7C;
	sub_824CBCA0(ctx, base);
loc_822F9F7C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28664(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28664);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9f9c
	if (!ctx.cr6.eq) goto loc_822F9F9C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82604280
	ctx.lr = 0x822F9F94;
	sub_82604280(ctx, base);
	// stw r3,-28664(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28664, ctx.r3.u32);
	// bl 0x82604340
	ctx.lr = 0x822F9F9C;
	sub_82604340(ctx, base);
loc_822F9F9C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28660(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28660);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822f9fbc
	if (!ctx.cr6.eq) goto loc_822F9FBC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826044b0
	ctx.lr = 0x822F9FB4;
	sub_826044B0(ctx, base);
	// stw r3,-28660(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28660, ctx.r3.u32);
	// bl 0x82604570
	ctx.lr = 0x822F9FBC;
	sub_82604570(ctx, base);
loc_822F9FBC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,16192
	ctx.r7.s64 = ctx.r10.s64 + 16192;
	// lwz r11,-28668(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28668);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822f9ff8
	if (!ctx.cr6.eq) goto loc_822F9FF8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82604050
	ctx.lr = 0x822F9FF0;
	sub_82604050(ctx, base);
	// stw r3,-28668(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28668, ctx.r3.u32);
	// bl 0x82604110
	ctx.lr = 0x822F9FF8;
	sub_82604110(ctx, base);
loc_822F9FF8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28588(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28588);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa018
	if (!ctx.cr6.eq) goto loc_822FA018;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82606c08
	ctx.lr = 0x822FA010;
	sub_82606C08(ctx, base);
	// stw r3,-28588(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28588, ctx.r3.u32);
	// bl 0x82606cc8
	ctx.lr = 0x822FA018;
	sub_82606CC8(ctx, base);
loc_822FA018:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31760(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31760);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa038
	if (!ctx.cr6.eq) goto loc_822FA038;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82376f30
	ctx.lr = 0x822FA030;
	sub_82376F30(ctx, base);
	// stw r3,-31760(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31760, ctx.r3.u32);
	// bl 0x82376ff0
	ctx.lr = 0x822FA038;
	sub_82376FF0(ctx, base);
loc_822FA038:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28596(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28596);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa058
	if (!ctx.cr6.eq) goto loc_822FA058;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826067b0
	ctx.lr = 0x822FA050;
	sub_826067B0(ctx, base);
	// stw r3,-28596(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28596, ctx.r3.u32);
	// bl 0x82606870
	ctx.lr = 0x822FA058;
	sub_82606870(ctx, base);
loc_822FA058:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28724(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28724);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa078
	if (!ctx.cr6.eq) goto loc_822FA078;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826021c0
	ctx.lr = 0x822FA070;
	sub_826021C0(ctx, base);
	// stw r3,-28724(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28724, ctx.r3.u32);
	// bl 0x82602280
	ctx.lr = 0x822FA078;
	sub_82602280(ctx, base);
loc_822FA078:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,16312
	ctx.r7.s64 = ctx.r10.s64 + 16312;
	// lwz r11,-28564(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28564);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa0b4
	if (!ctx.cr6.eq) goto loc_822FA0B4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82607928
	ctx.lr = 0x822FA0AC;
	sub_82607928(ctx, base);
	// stw r3,-28564(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28564, ctx.r3.u32);
	// bl 0x826079e8
	ctx.lr = 0x822FA0B4;
	sub_826079E8(ctx, base);
loc_822FA0B4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27600(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27600);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa0d4
	if (!ctx.cr6.eq) goto loc_822FA0D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e9158
	ctx.lr = 0x822FA0CC;
	sub_826E9158(ctx, base);
	// stw r3,-27600(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27600, ctx.r3.u32);
	// bl 0x826e9218
	ctx.lr = 0x822FA0D4;
	sub_826E9218(ctx, base);
loc_822FA0D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27604(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27604);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa0f4
	if (!ctx.cr6.eq) goto loc_822FA0F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e8d00
	ctx.lr = 0x822FA0EC;
	sub_826E8D00(ctx, base);
	// stw r3,-27604(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27604, ctx.r3.u32);
	// bl 0x826e8db8
	ctx.lr = 0x822FA0F4;
	sub_826E8DB8(ctx, base);
loc_822FA0F4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31256(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31256);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa114
	if (!ctx.cr6.eq) goto loc_822FA114;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82424878
	ctx.lr = 0x822FA10C;
	sub_82424878(ctx, base);
	// stw r3,-31256(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31256, ctx.r3.u32);
	// bl 0x82424938
	ctx.lr = 0x822FA114;
	sub_82424938(ctx, base);
loc_822FA114:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31248(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31248);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa134
	if (!ctx.cr6.eq) goto loc_822FA134;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82424cd0
	ctx.lr = 0x822FA12C;
	sub_82424CD0(ctx, base);
	// stw r3,-31248(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31248, ctx.r3.u32);
	// bl 0x82424d90
	ctx.lr = 0x822FA134;
	sub_82424D90(ctx, base);
loc_822FA134:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31252(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31252);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa154
	if (!ctx.cr6.eq) goto loc_822FA154;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82424aa0
	ctx.lr = 0x822FA14C;
	sub_82424AA0(ctx, base);
	// stw r3,-31252(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31252, ctx.r3.u32);
	// bl 0x82424b60
	ctx.lr = 0x822FA154;
	sub_82424B60(ctx, base);
loc_822FA154:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31244(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa174
	if (!ctx.cr6.eq) goto loc_822FA174;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82424f00
	ctx.lr = 0x822FA16C;
	sub_82424F00(ctx, base);
	// stw r3,-31244(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31244, ctx.r3.u32);
	// bl 0x82424fc0
	ctx.lr = 0x822FA174;
	sub_82424FC0(ctx, base);
loc_822FA174:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28488(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28488);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa194
	if (!ctx.cr6.eq) goto loc_822FA194;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8260a298
	ctx.lr = 0x822FA18C;
	sub_8260A298(ctx, base);
	// stw r3,-28488(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28488, ctx.r3.u32);
	// bl 0x8260a358
	ctx.lr = 0x822FA194;
	sub_8260A358(ctx, base);
loc_822FA194:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28528(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28528);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa1b4
	if (!ctx.cr6.eq) goto loc_822FA1B4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82608cc8
	ctx.lr = 0x822FA1AC;
	sub_82608CC8(ctx, base);
	// stw r3,-28528(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28528, ctx.r3.u32);
	// bl 0x82608d88
	ctx.lr = 0x822FA1B4;
	sub_82608D88(ctx, base);
loc_822FA1B4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28524(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28524);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa1d4
	if (!ctx.cr6.eq) goto loc_822FA1D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82608ef8
	ctx.lr = 0x822FA1CC;
	sub_82608EF8(ctx, base);
	// stw r3,-28524(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28524, ctx.r3.u32);
	// bl 0x82608fb8
	ctx.lr = 0x822FA1D4;
	sub_82608FB8(ctx, base);
loc_822FA1D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28804(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28804);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa1f4
	if (!ctx.cr6.eq) goto loc_822FA1F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ff5f8
	ctx.lr = 0x822FA1EC;
	sub_825FF5F8(ctx, base);
	// stw r3,-28804(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28804, ctx.r3.u32);
	// bl 0x825ff6b8
	ctx.lr = 0x822FA1F4;
	sub_825FF6B8(ctx, base);
loc_822FA1F4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27760(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27760);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa214
	if (!ctx.cr6.eq) goto loc_822FA214;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826cf6f8
	ctx.lr = 0x822FA20C;
	sub_826CF6F8(ctx, base);
	// stw r3,-27760(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27760, ctx.r3.u32);
	// bl 0x826cf7b8
	ctx.lr = 0x822FA214;
	sub_826CF7B8(ctx, base);
loc_822FA214:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,16432
	ctx.r7.s64 = ctx.r10.s64 + 16432;
	// lwz r11,-28172(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28172);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa250
	if (!ctx.cr6.eq) goto loc_822FA250;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826596b8
	ctx.lr = 0x822FA248;
	sub_826596B8(ctx, base);
	// stw r3,-28172(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28172, ctx.r3.u32);
	// bl 0x82659778
	ctx.lr = 0x822FA250;
	sub_82659778(ctx, base);
loc_822FA250:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,16552
	ctx.r7.s64 = ctx.r10.s64 + 16552;
	// lwz r11,-27756(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27756);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa28c
	if (!ctx.cr6.eq) goto loc_822FA28C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826cf928
	ctx.lr = 0x822FA284;
	sub_826CF928(ctx, base);
	// stw r3,-27756(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27756, ctx.r3.u32);
	// bl 0x826cf9e8
	ctx.lr = 0x822FA28C;
	sub_826CF9E8(ctx, base);
loc_822FA28C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26168(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26168);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa2ac
	if (!ctx.cr6.eq) goto loc_822FA2AC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827bdaa0
	ctx.lr = 0x822FA2A4;
	sub_827BDAA0(ctx, base);
	// stw r3,-26168(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26168, ctx.r3.u32);
	// bl 0x827bdb60
	ctx.lr = 0x822FA2AC;
	sub_827BDB60(ctx, base);
loc_822FA2AC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26116(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26116);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa2cc
	if (!ctx.cr6.eq) goto loc_822FA2CC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827d24e0
	ctx.lr = 0x822FA2C4;
	sub_827D24E0(ctx, base);
	// stw r3,-26116(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26116, ctx.r3.u32);
	// bl 0x827d25a0
	ctx.lr = 0x822FA2CC;
	sub_827D25A0(ctx, base);
loc_822FA2CC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27608(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27608);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa2ec
	if (!ctx.cr6.eq) goto loc_822FA2EC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e8298
	ctx.lr = 0x822FA2E4;
	sub_826E8298(ctx, base);
	// stw r3,-27608(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27608, ctx.r3.u32);
	// bl 0x826e8358
	ctx.lr = 0x822FA2EC;
	sub_826E8358(ctx, base);
loc_822FA2EC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28464(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28464);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa30c
	if (!ctx.cr6.eq) goto loc_822FA30C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8261bc00
	ctx.lr = 0x822FA304;
	sub_8261BC00(ctx, base);
	// stw r3,-28464(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28464, ctx.r3.u32);
	// bl 0x8261bcc0
	ctx.lr = 0x822FA30C;
	sub_8261BCC0(ctx, base);
loc_822FA30C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,16672
	ctx.r7.s64 = ctx.r10.s64 + 16672;
	// lwz r11,-28716(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28716);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa348
	if (!ctx.cr6.eq) goto loc_822FA348;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82602620
	ctx.lr = 0x822FA340;
	sub_82602620(ctx, base);
	// stw r3,-28716(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28716, ctx.r3.u32);
	// bl 0x826026e0
	ctx.lr = 0x822FA348;
	sub_826026E0(ctx, base);
loc_822FA348:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,16808
	ctx.r7.s64 = ctx.r10.s64 + 16808;
	// lwz r11,-28484(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28484);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa384
	if (!ctx.cr6.eq) goto loc_822FA384;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8260a4c8
	ctx.lr = 0x822FA37C;
	sub_8260A4C8(ctx, base);
	// stw r3,-28484(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28484, ctx.r3.u32);
	// bl 0x8260a588
	ctx.lr = 0x822FA384;
	sub_8260A588(ctx, base);
loc_822FA384:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27480(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27480);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa3a4
	if (!ctx.cr6.eq) goto loc_822FA3A4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8270f910
	ctx.lr = 0x822FA39C;
	sub_8270F910(ctx, base);
	// stw r3,-27480(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27480, ctx.r3.u32);
	// bl 0x8270f9d0
	ctx.lr = 0x822FA3A4;
	sub_8270F9D0(ctx, base);
loc_822FA3A4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27352(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27352);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa3c4
	if (!ctx.cr6.eq) goto loc_822FA3C4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827579b0
	ctx.lr = 0x822FA3BC;
	sub_827579B0(ctx, base);
	// stw r3,-27352(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27352, ctx.r3.u32);
	// bl 0x82757a70
	ctx.lr = 0x822FA3C4;
	sub_82757A70(ctx, base);
loc_822FA3C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31200(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31200);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa3e4
	if (!ctx.cr6.eq) goto loc_822FA3E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243d968
	ctx.lr = 0x822FA3DC;
	sub_8243D968(ctx, base);
	// stw r3,-31200(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31200, ctx.r3.u32);
	// bl 0x8243da28
	ctx.lr = 0x822FA3E4;
	sub_8243DA28(ctx, base);
loc_822FA3E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27220(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27220);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa404
	if (!ctx.cr6.eq) goto loc_822FA404;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8279d7e8
	ctx.lr = 0x822FA3FC;
	sub_8279D7E8(ctx, base);
	// stw r3,-27220(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27220, ctx.r3.u32);
	// bl 0x8279d8a8
	ctx.lr = 0x822FA404;
	sub_8279D8A8(ctx, base);
loc_822FA404:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27216(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27216);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa424
	if (!ctx.cr6.eq) goto loc_822FA424;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8279da18
	ctx.lr = 0x822FA41C;
	sub_8279DA18(ctx, base);
	// stw r3,-27216(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27216, ctx.r3.u32);
	// bl 0x8279dad8
	ctx.lr = 0x822FA424;
	sub_8279DAD8(ctx, base);
loc_822FA424:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27224(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27224);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa444
	if (!ctx.cr6.eq) goto loc_822FA444;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8279d5b8
	ctx.lr = 0x822FA43C;
	sub_8279D5B8(ctx, base);
	// stw r3,-27224(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27224, ctx.r3.u32);
	// bl 0x8279d678
	ctx.lr = 0x822FA444;
	sub_8279D678(ctx, base);
loc_822FA444:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,16928
	ctx.r7.s64 = ctx.r10.s64 + 16928;
	// lwz r11,-30376(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30376);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa480
	if (!ctx.cr6.eq) goto loc_822FA480;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824caca0
	ctx.lr = 0x822FA478;
	sub_824CACA0(ctx, base);
	// stw r3,-30376(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30376, ctx.r3.u32);
	// bl 0x824cad60
	ctx.lr = 0x822FA480;
	sub_824CAD60(ctx, base);
loc_822FA480:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28228);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa4a0
	if (!ctx.cr6.eq) goto loc_822FA4A0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264c800
	ctx.lr = 0x822FA498;
	sub_8264C800(ctx, base);
	// stw r3,-28228(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28228, ctx.r3.u32);
	// bl 0x8264c8c0
	ctx.lr = 0x822FA4A0;
	sub_8264C8C0(ctx, base);
loc_822FA4A0:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,17048
	ctx.r7.s64 = ctx.r10.s64 + 17048;
	// lwz r11,-28160(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28160);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa4dc
	if (!ctx.cr6.eq) goto loc_822FA4DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82659d40
	ctx.lr = 0x822FA4D4;
	sub_82659D40(ctx, base);
	// stw r3,-28160(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28160, ctx.r3.u32);
	// bl 0x82659e00
	ctx.lr = 0x822FA4DC;
	sub_82659E00(ctx, base);
loc_822FA4DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27504(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27504);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa4fc
	if (!ctx.cr6.eq) goto loc_822FA4FC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82706178
	ctx.lr = 0x822FA4F4;
	sub_82706178(ctx, base);
	// stw r3,-27504(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27504, ctx.r3.u32);
	// bl 0x82706238
	ctx.lr = 0x822FA4FC;
	sub_82706238(ctx, base);
loc_822FA4FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27360(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27360);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa51c
	if (!ctx.cr6.eq) goto loc_822FA51C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82754de0
	ctx.lr = 0x822FA514;
	sub_82754DE0(ctx, base);
	// stw r3,-27360(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27360, ctx.r3.u32);
	// bl 0x82754ea0
	ctx.lr = 0x822FA51C;
	sub_82754EA0(ctx, base);
loc_822FA51C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27284(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27284);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa53c
	if (!ctx.cr6.eq) goto loc_822FA53C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8276bb30
	ctx.lr = 0x822FA534;
	sub_8276BB30(ctx, base);
	// stw r3,-27284(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27284, ctx.r3.u32);
	// bl 0x8276bbf0
	ctx.lr = 0x822FA53C;
	sub_8276BBF0(ctx, base);
loc_822FA53C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27236(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27236);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa55c
	if (!ctx.cr6.eq) goto loc_822FA55C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8278df70
	ctx.lr = 0x822FA554;
	sub_8278DF70(ctx, base);
	// stw r3,-27236(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27236, ctx.r3.u32);
	// bl 0x8278e030
	ctx.lr = 0x822FA55C;
	sub_8278E030(ctx, base);
loc_822FA55C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,17168
	ctx.r7.s64 = ctx.r10.s64 + 17168;
	// lwz r11,-27408(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27408);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa598
	if (!ctx.cr6.eq) goto loc_822FA598;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827490d0
	ctx.lr = 0x822FA590;
	sub_827490D0(ctx, base);
	// stw r3,-27408(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27408, ctx.r3.u32);
	// bl 0x82749190
	ctx.lr = 0x822FA598;
	sub_82749190(ctx, base);
loc_822FA598:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28604(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28604);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa5b8
	if (!ctx.cr6.eq) goto loc_822FA5B8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82606360
	ctx.lr = 0x822FA5B0;
	sub_82606360(ctx, base);
	// stw r3,-28604(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28604, ctx.r3.u32);
	// bl 0x82606420
	ctx.lr = 0x822FA5B8;
	sub_82606420(ctx, base);
loc_822FA5B8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28688(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28688);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa5d8
	if (!ctx.cr6.eq) goto loc_822FA5D8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82603570
	ctx.lr = 0x822FA5D0;
	sub_82603570(ctx, base);
	// stw r3,-28688(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28688, ctx.r3.u32);
	// bl 0x82603630
	ctx.lr = 0x822FA5D8;
	sub_82603630(ctx, base);
loc_822FA5D8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,17288
	ctx.r7.s64 = ctx.r10.s64 + 17288;
	// lwz r11,-27260(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27260);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa614
	if (!ctx.cr6.eq) goto loc_822FA614;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827881c8
	ctx.lr = 0x822FA60C;
	sub_827881C8(ctx, base);
	// stw r3,-27260(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27260, ctx.r3.u32);
	// bl 0x82788280
	ctx.lr = 0x822FA614;
	sub_82788280(ctx, base);
loc_822FA614:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27580(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27580);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa634
	if (!ctx.cr6.eq) goto loc_822FA634;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826f58a8
	ctx.lr = 0x822FA62C;
	sub_826F58A8(ctx, base);
	// stw r3,-27580(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27580, ctx.r3.u32);
	// bl 0x826f5960
	ctx.lr = 0x822FA634;
	sub_826F5960(ctx, base);
loc_822FA634:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27648(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27648);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa654
	if (!ctx.cr6.eq) goto loc_822FA654;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e4a88
	ctx.lr = 0x822FA64C;
	sub_826E4A88(ctx, base);
	// stw r3,-27648(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27648, ctx.r3.u32);
	// bl 0x826e4b48
	ctx.lr = 0x822FA654;
	sub_826E4B48(ctx, base);
loc_822FA654:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28752(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28752);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa674
	if (!ctx.cr6.eq) goto loc_822FA674;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82601268
	ctx.lr = 0x822FA66C;
	sub_82601268(ctx, base);
	// stw r3,-28752(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28752, ctx.r3.u32);
	// bl 0x82601328
	ctx.lr = 0x822FA674;
	sub_82601328(ctx, base);
loc_822FA674:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28476(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28476);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa694
	if (!ctx.cr6.eq) goto loc_822FA694;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8260a920
	ctx.lr = 0x822FA68C;
	sub_8260A920(ctx, base);
	// stw r3,-28476(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28476, ctx.r3.u32);
	// bl 0x8260a9e0
	ctx.lr = 0x822FA694;
	sub_8260A9E0(ctx, base);
loc_822FA694:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28544(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28544);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa6b4
	if (!ctx.cr6.eq) goto loc_822FA6B4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82608418
	ctx.lr = 0x822FA6AC;
	sub_82608418(ctx, base);
	// stw r3,-28544(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28544, ctx.r3.u32);
	// bl 0x826084d8
	ctx.lr = 0x822FA6B4;
	sub_826084D8(ctx, base);
loc_822FA6B4:
	// lis r30,-31884
	ctx.r30.s64 = -2089549824;
	// lwz r11,25372(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 25372);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa6d4
	if (!ctx.cr6.eq) goto loc_822FA6D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82306ef0
	ctx.lr = 0x822FA6CC;
	sub_82306EF0(ctx, base);
	// stw r3,25372(r30)
	PPC_STORE_U32(ctx.r30.u32 + 25372, ctx.r3.u32);
	// bl 0x82306fb0
	ctx.lr = 0x822FA6D4;
	sub_82306FB0(ctx, base);
loc_822FA6D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27532(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27532);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa6f4
	if (!ctx.cr6.eq) goto loc_822FA6F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826fb000
	ctx.lr = 0x822FA6EC;
	sub_826FB000(ctx, base);
	// stw r3,-27532(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27532, ctx.r3.u32);
	// bl 0x826fb0c0
	ctx.lr = 0x822FA6F4;
	sub_826FB0C0(ctx, base);
loc_822FA6F4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27620(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27620);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa714
	if (!ctx.cr6.eq) goto loc_822FA714;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e5d20
	ctx.lr = 0x822FA70C;
	sub_826E5D20(ctx, base);
	// stw r3,-27620(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27620, ctx.r3.u32);
	// bl 0x826e5de0
	ctx.lr = 0x822FA714;
	sub_826E5DE0(ctx, base);
loc_822FA714:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27624(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27624);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa734
	if (!ctx.cr6.eq) goto loc_822FA734;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e5af0
	ctx.lr = 0x822FA72C;
	sub_826E5AF0(ctx, base);
	// stw r3,-27624(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27624, ctx.r3.u32);
	// bl 0x826e5bb0
	ctx.lr = 0x822FA734;
	sub_826E5BB0(ctx, base);
loc_822FA734:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26108(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26108);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa754
	if (!ctx.cr6.eq) goto loc_822FA754;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827d59f0
	ctx.lr = 0x822FA74C;
	sub_827D59F0(ctx, base);
	// stw r3,-26108(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26108, ctx.r3.u32);
	// bl 0x827d5ab0
	ctx.lr = 0x822FA754;
	sub_827D5AB0(ctx, base);
loc_822FA754:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,17408
	ctx.r7.s64 = ctx.r10.s64 + 17408;
	// lwz r11,-28412(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28412);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa790
	if (!ctx.cr6.eq) goto loc_822FA790;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826280b0
	ctx.lr = 0x822FA788;
	sub_826280B0(ctx, base);
	// stw r3,-28412(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28412, ctx.r3.u32);
	// bl 0x82628170
	ctx.lr = 0x822FA790;
	sub_82628170(ctx, base);
loc_822FA790:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,17528
	ctx.r7.s64 = ctx.r10.s64 + 17528;
	// lwz r11,-28408(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28408);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa7cc
	if (!ctx.cr6.eq) goto loc_822FA7CC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826282d8
	ctx.lr = 0x822FA7C4;
	sub_826282D8(ctx, base);
	// stw r3,-28408(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28408, ctx.r3.u32);
	// bl 0x82628398
	ctx.lr = 0x822FA7CC;
	sub_82628398(ctx, base);
loc_822FA7CC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28404(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28404);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa7ec
	if (!ctx.cr6.eq) goto loc_822FA7EC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82628508
	ctx.lr = 0x822FA7E4;
	sub_82628508(ctx, base);
	// stw r3,-28404(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28404, ctx.r3.u32);
	// bl 0x826285c8
	ctx.lr = 0x822FA7EC;
	sub_826285C8(ctx, base);
loc_822FA7EC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,17648
	ctx.r7.s64 = ctx.r10.s64 + 17648;
	// lwz r11,-27628(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27628);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa828
	if (!ctx.cr6.eq) goto loc_822FA828;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e58c8
	ctx.lr = 0x822FA820;
	sub_826E58C8(ctx, base);
	// stw r3,-27628(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27628, ctx.r3.u32);
	// bl 0x826e5988
	ctx.lr = 0x822FA828;
	sub_826E5988(ctx, base);
loc_822FA828:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27588(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27588);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa848
	if (!ctx.cr6.eq) goto loc_822FA848;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826f38d8
	ctx.lr = 0x822FA840;
	sub_826F38D8(ctx, base);
	// stw r3,-27588(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27588, ctx.r3.u32);
	// bl 0x826f3998
	ctx.lr = 0x822FA848;
	sub_826F3998(ctx, base);
loc_822FA848:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27584(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27584);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa868
	if (!ctx.cr6.eq) goto loc_822FA868;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826f3ea8
	ctx.lr = 0x822FA860;
	sub_826F3EA8(ctx, base);
	// stw r3,-27584(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27584, ctx.r3.u32);
	// bl 0x826f3f68
	ctx.lr = 0x822FA868;
	sub_826F3F68(ctx, base);
loc_822FA868:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28692(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28692);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa888
	if (!ctx.cr6.eq) goto loc_822FA888;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82603340
	ctx.lr = 0x822FA880;
	sub_82603340(ctx, base);
	// stw r3,-28692(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28692, ctx.r3.u32);
	// bl 0x82603400
	ctx.lr = 0x822FA888;
	sub_82603400(ctx, base);
loc_822FA888:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27340(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27340);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa8a8
	if (!ctx.cr6.eq) goto loc_822FA8A8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82759ad0
	ctx.lr = 0x822FA8A0;
	sub_82759AD0(ctx, base);
	// stw r3,-27340(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27340, ctx.r3.u32);
	// bl 0x82759b80
	ctx.lr = 0x822FA8A8;
	sub_82759B80(ctx, base);
loc_822FA8A8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,17768
	ctx.r7.s64 = ctx.r10.s64 + 17768;
	// lwz r11,-27652(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27652);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa8e4
	if (!ctx.cr6.eq) goto loc_822FA8E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e3b70
	ctx.lr = 0x822FA8DC;
	sub_826E3B70(ctx, base);
	// stw r3,-27652(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27652, ctx.r3.u32);
	// bl 0x826e3c30
	ctx.lr = 0x822FA8E4;
	sub_826E3C30(ctx, base);
loc_822FA8E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28576(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28576);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa904
	if (!ctx.cr6.eq) goto loc_822FA904;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82607298
	ctx.lr = 0x822FA8FC;
	sub_82607298(ctx, base);
	// stw r3,-28576(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28576, ctx.r3.u32);
	// bl 0x82607358
	ctx.lr = 0x822FA904;
	sub_82607358(ctx, base);
loc_822FA904:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,17888
	ctx.r7.s64 = ctx.r10.s64 + 17888;
	// lwz r11,-28656(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28656);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa940
	if (!ctx.cr6.eq) goto loc_822FA940;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826046e0
	ctx.lr = 0x822FA938;
	sub_826046E0(ctx, base);
	// stw r3,-28656(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28656, ctx.r3.u32);
	// bl 0x826047a0
	ctx.lr = 0x822FA940;
	sub_826047A0(ctx, base);
loc_822FA940:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28468(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28468);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa960
	if (!ctx.cr6.eq) goto loc_822FA960;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8261b9c0
	ctx.lr = 0x822FA958;
	sub_8261B9C0(ctx, base);
	// stw r3,-28468(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28468, ctx.r3.u32);
	// bl 0x8261ba80
	ctx.lr = 0x822FA960;
	sub_8261BA80(ctx, base);
loc_822FA960:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28608(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28608);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fa980
	if (!ctx.cr6.eq) goto loc_822FA980;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82606128
	ctx.lr = 0x822FA978;
	sub_82606128(ctx, base);
	// stw r3,-28608(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28608, ctx.r3.u32);
	// bl 0x826061d8
	ctx.lr = 0x822FA980;
	sub_826061D8(ctx, base);
loc_822FA980:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,18008
	ctx.r7.s64 = ctx.r10.s64 + 18008;
	// lwz r11,-28632(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28632);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa9bc
	if (!ctx.cr6.eq) goto loc_822FA9BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82605400
	ctx.lr = 0x822FA9B4;
	sub_82605400(ctx, base);
	// stw r3,-28632(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28632, ctx.r3.u32);
	// bl 0x826054c0
	ctx.lr = 0x822FA9BC;
	sub_826054C0(ctx, base);
loc_822FA9BC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,18128
	ctx.r7.s64 = ctx.r10.s64 + 18128;
	// lwz r11,-28672(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28672);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fa9f8
	if (!ctx.cr6.eq) goto loc_822FA9F8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82603e20
	ctx.lr = 0x822FA9F0;
	sub_82603E20(ctx, base);
	// stw r3,-28672(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28672, ctx.r3.u32);
	// bl 0x82603ee0
	ctx.lr = 0x822FA9F8;
	sub_82603EE0(ctx, base);
loc_822FA9F8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28792(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28792);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faa18
	if (!ctx.cr6.eq) goto loc_822FAA18;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ffc88
	ctx.lr = 0x822FAA10;
	sub_825FFC88(ctx, base);
	// stw r3,-28792(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28792, ctx.r3.u32);
	// bl 0x825ffd48
	ctx.lr = 0x822FAA18;
	sub_825FFD48(ctx, base);
loc_822FAA18:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27476(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27476);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faa38
	if (!ctx.cr6.eq) goto loc_822FAA38;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82714128
	ctx.lr = 0x822FAA30;
	sub_82714128(ctx, base);
	// stw r3,-27476(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27476, ctx.r3.u32);
	// bl 0x827141e8
	ctx.lr = 0x822FAA38;
	sub_827141E8(ctx, base);
loc_822FAA38:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,18248
	ctx.r7.s64 = ctx.r10.s64 + 18248;
	// lwz r11,-28788(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28788);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822faa74
	if (!ctx.cr6.eq) goto loc_822FAA74;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ffeb8
	ctx.lr = 0x822FAA6C;
	sub_825FFEB8(ctx, base);
	// stw r3,-28788(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28788, ctx.r3.u32);
	// bl 0x825fff78
	ctx.lr = 0x822FAA74;
	sub_825FFF78(ctx, base);
loc_822FAA74:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28784(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28784);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faa94
	if (!ctx.cr6.eq) goto loc_822FAA94;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826000e8
	ctx.lr = 0x822FAA8C;
	sub_826000E8(ctx, base);
	// stw r3,-28784(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28784, ctx.r3.u32);
	// bl 0x826001a8
	ctx.lr = 0x822FAA94;
	sub_826001A8(ctx, base);
loc_822FAA94:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28760(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28760);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faab4
	if (!ctx.cr6.eq) goto loc_822FAAB4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82600e00
	ctx.lr = 0x822FAAAC;
	sub_82600E00(ctx, base);
	// stw r3,-28760(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28760, ctx.r3.u32);
	// bl 0x82600ec0
	ctx.lr = 0x822FAAB4;
	sub_82600EC0(ctx, base);
loc_822FAAB4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26120(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26120);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faad4
	if (!ctx.cr6.eq) goto loc_822FAAD4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827d04c8
	ctx.lr = 0x822FAACC;
	sub_827D04C8(ctx, base);
	// stw r3,-26120(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26120, ctx.r3.u32);
	// bl 0x827d0588
	ctx.lr = 0x822FAAD4;
	sub_827D0588(ctx, base);
loc_822FAAD4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28496(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28496);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faaf4
	if (!ctx.cr6.eq) goto loc_822FAAF4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82609e38
	ctx.lr = 0x822FAAEC;
	sub_82609E38(ctx, base);
	// stw r3,-28496(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28496, ctx.r3.u32);
	// bl 0x82609ef8
	ctx.lr = 0x822FAAF4;
	sub_82609EF8(ctx, base);
loc_822FAAF4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,18368
	ctx.r7.s64 = ctx.r10.s64 + 18368;
	// lwz r11,-28916(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28916);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fab30
	if (!ctx.cr6.eq) goto loc_822FAB30;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825d7710
	ctx.lr = 0x822FAB28;
	sub_825D7710(ctx, base);
	// stw r3,-28916(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28916, ctx.r3.u32);
	// bl 0x825d77d0
	ctx.lr = 0x822FAB30;
	sub_825D77D0(ctx, base);
loc_822FAB30:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,18488
	ctx.r7.s64 = ctx.r10.s64 + 18488;
	// lwz r11,-27952(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27952);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fab6c
	if (!ctx.cr6.eq) goto loc_822FAB6C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826865e8
	ctx.lr = 0x822FAB64;
	sub_826865E8(ctx, base);
	// stw r3,-27952(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27952, ctx.r3.u32);
	// bl 0x826866a8
	ctx.lr = 0x822FAB6C;
	sub_826866A8(ctx, base);
loc_822FAB6C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27668(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27668);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fab8c
	if (!ctx.cr6.eq) goto loc_822FAB8C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e09d0
	ctx.lr = 0x822FAB84;
	sub_826E09D0(ctx, base);
	// stw r3,-27668(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27668, ctx.r3.u32);
	// bl 0x826e0a90
	ctx.lr = 0x822FAB8C;
	sub_826E0A90(ctx, base);
loc_822FAB8C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,18608
	ctx.r7.s64 = ctx.r10.s64 + 18608;
	// lwz r11,-27672(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27672);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fabc8
	if (!ctx.cr6.eq) goto loc_822FABC8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e07a8
	ctx.lr = 0x822FABC0;
	sub_826E07A8(ctx, base);
	// stw r3,-27672(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27672, ctx.r3.u32);
	// bl 0x826e0868
	ctx.lr = 0x822FABC8;
	sub_826E0868(ctx, base);
loc_822FABC8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27664(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27664);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fabe8
	if (!ctx.cr6.eq) goto loc_822FABE8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e0bf8
	ctx.lr = 0x822FABE0;
	sub_826E0BF8(ctx, base);
	// stw r3,-27664(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27664, ctx.r3.u32);
	// bl 0x826e0cb8
	ctx.lr = 0x822FABE8;
	sub_826E0CB8(ctx, base);
loc_822FABE8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28560(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28560);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fac08
	if (!ctx.cr6.eq) goto loc_822FAC08;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82607b58
	ctx.lr = 0x822FAC00;
	sub_82607B58(ctx, base);
	// stw r3,-28560(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28560, ctx.r3.u32);
	// bl 0x82607c18
	ctx.lr = 0x822FAC08;
	sub_82607C18(ctx, base);
loc_822FAC08:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28232(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28232);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fac28
	if (!ctx.cr6.eq) goto loc_822FAC28;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264c5d0
	ctx.lr = 0x822FAC20;
	sub_8264C5D0(ctx, base);
	// stw r3,-28232(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28232, ctx.r3.u32);
	// bl 0x8264c690
	ctx.lr = 0x822FAC28;
	sub_8264C690(ctx, base);
loc_822FAC28:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,18728
	ctx.r7.s64 = ctx.r10.s64 + 18728;
	// lwz r11,-28164(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28164);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fac64
	if (!ctx.cr6.eq) goto loc_822FAC64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82659b18
	ctx.lr = 0x822FAC5C;
	sub_82659B18(ctx, base);
	// stw r3,-28164(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28164, ctx.r3.u32);
	// bl 0x82659bd8
	ctx.lr = 0x822FAC64;
	sub_82659BD8(ctx, base);
loc_822FAC64:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28680(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28680);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fac84
	if (!ctx.cr6.eq) goto loc_822FAC84;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826039c0
	ctx.lr = 0x822FAC7C;
	sub_826039C0(ctx, base);
	// stw r3,-28680(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28680, ctx.r3.u32);
	// bl 0x82603a80
	ctx.lr = 0x822FAC84;
	sub_82603A80(ctx, base);
loc_822FAC84:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28720(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28720);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faca4
	if (!ctx.cr6.eq) goto loc_822FACA4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826023f0
	ctx.lr = 0x822FAC9C;
	sub_826023F0(ctx, base);
	// stw r3,-28720(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28720, ctx.r3.u32);
	// bl 0x826024b0
	ctx.lr = 0x822FACA4;
	sub_826024B0(ctx, base);
loc_822FACA4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,18848
	ctx.r7.s64 = ctx.r10.s64 + 18848;
	// lwz r11,-28736(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28736);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822face0
	if (!ctx.cr6.eq) goto loc_822FACE0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82601b38
	ctx.lr = 0x822FACD8;
	sub_82601B38(ctx, base);
	// stw r3,-28736(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28736, ctx.r3.u32);
	// bl 0x82601bf8
	ctx.lr = 0x822FACE0;
	sub_82601BF8(ctx, base);
loc_822FACE0:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,18968
	ctx.r7.s64 = ctx.r10.s64 + 18968;
	// lwz r11,-28636(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28636);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fad1c
	if (!ctx.cr6.eq) goto loc_822FAD1C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826051d0
	ctx.lr = 0x822FAD14;
	sub_826051D0(ctx, base);
	// stw r3,-28636(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28636, ctx.r3.u32);
	// bl 0x82605290
	ctx.lr = 0x822FAD1C;
	sub_82605290(ctx, base);
loc_822FAD1C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27512(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27512);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fad3c
	if (!ctx.cr6.eq) goto loc_822FAD3C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82703c40
	ctx.lr = 0x822FAD34;
	sub_82703C40(ctx, base);
	// stw r3,-27512(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27512, ctx.r3.u32);
	// bl 0x82703d00
	ctx.lr = 0x822FAD3C;
	sub_82703D00(ctx, base);
loc_822FAD3C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28532(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28532);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fad5c
	if (!ctx.cr6.eq) goto loc_822FAD5C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82608a98
	ctx.lr = 0x822FAD54;
	sub_82608A98(ctx, base);
	// stw r3,-28532(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28532, ctx.r3.u32);
	// bl 0x82608b58
	ctx.lr = 0x822FAD5C;
	sub_82608B58(ctx, base);
loc_822FAD5C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28644(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28644);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fad7c
	if (!ctx.cr6.eq) goto loc_822FAD7C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82604d78
	ctx.lr = 0x822FAD74;
	sub_82604D78(ctx, base);
	// stw r3,-28644(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28644, ctx.r3.u32);
	// bl 0x82604e38
	ctx.lr = 0x822FAD7C;
	sub_82604E38(ctx, base);
loc_822FAD7C:
	// lis r30,-31884
	ctx.r30.s64 = -2089549824;
	// lwz r11,25368(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 25368);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fad9c
	if (!ctx.cr6.eq) goto loc_822FAD9C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82306cc8
	ctx.lr = 0x822FAD94;
	sub_82306CC8(ctx, base);
	// stw r3,25368(r30)
	PPC_STORE_U32(ctx.r30.u32 + 25368, ctx.r3.u32);
	// bl 0x82306d88
	ctx.lr = 0x822FAD9C;
	sub_82306D88(ctx, base);
loc_822FAD9C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28932(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28932);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fadbc
	if (!ctx.cr6.eq) goto loc_822FADBC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825d6e50
	ctx.lr = 0x822FADB4;
	sub_825D6E50(ctx, base);
	// stw r3,-28932(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28932, ctx.r3.u32);
	// bl 0x825d6f10
	ctx.lr = 0x822FADBC;
	sub_825D6F10(ctx, base);
loc_822FADBC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28956(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28956);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faddc
	if (!ctx.cr6.eq) goto loc_822FADDC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825d6130
	ctx.lr = 0x822FADD4;
	sub_825D6130(ctx, base);
	// stw r3,-28956(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28956, ctx.r3.u32);
	// bl 0x825d61f0
	ctx.lr = 0x822FADDC;
	sub_825D61F0(ctx, base);
loc_822FADDC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28936(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28936);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fadfc
	if (!ctx.cr6.eq) goto loc_822FADFC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825d6c20
	ctx.lr = 0x822FADF4;
	sub_825D6C20(ctx, base);
	// stw r3,-28936(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28936, ctx.r3.u32);
	// bl 0x825d6ce0
	ctx.lr = 0x822FADFC;
	sub_825D6CE0(ctx, base);
loc_822FADFC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28960(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28960);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fae1c
	if (!ctx.cr6.eq) goto loc_822FAE1C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825d5f00
	ctx.lr = 0x822FAE14;
	sub_825D5F00(ctx, base);
	// stw r3,-28960(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28960, ctx.r3.u32);
	// bl 0x825d5fc0
	ctx.lr = 0x822FAE1C;
	sub_825D5FC0(ctx, base);
loc_822FAE1C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28928(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28928);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fae3c
	if (!ctx.cr6.eq) goto loc_822FAE3C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825d7080
	ctx.lr = 0x822FAE34;
	sub_825D7080(ctx, base);
	// stw r3,-28928(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28928, ctx.r3.u32);
	// bl 0x825d7140
	ctx.lr = 0x822FAE3C;
	sub_825D7140(ctx, base);
loc_822FAE3C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28952(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28952);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fae5c
	if (!ctx.cr6.eq) goto loc_822FAE5C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825d6360
	ctx.lr = 0x822FAE54;
	sub_825D6360(ctx, base);
	// stw r3,-28952(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28952, ctx.r3.u32);
	// bl 0x825d6420
	ctx.lr = 0x822FAE5C;
	sub_825D6420(ctx, base);
loc_822FAE5C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28948(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28948);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fae7c
	if (!ctx.cr6.eq) goto loc_822FAE7C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825d6590
	ctx.lr = 0x822FAE74;
	sub_825D6590(ctx, base);
	// stw r3,-28948(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28948, ctx.r3.u32);
	// bl 0x825d6650
	ctx.lr = 0x822FAE7C;
	sub_825D6650(ctx, base);
loc_822FAE7C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28920(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28920);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fae9c
	if (!ctx.cr6.eq) goto loc_822FAE9C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825d74e0
	ctx.lr = 0x822FAE94;
	sub_825D74E0(ctx, base);
	// stw r3,-28920(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28920, ctx.r3.u32);
	// bl 0x825d75a0
	ctx.lr = 0x822FAE9C;
	sub_825D75A0(ctx, base);
loc_822FAE9C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28940(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28940);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faebc
	if (!ctx.cr6.eq) goto loc_822FAEBC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825d69f0
	ctx.lr = 0x822FAEB4;
	sub_825D69F0(ctx, base);
	// stw r3,-28940(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28940, ctx.r3.u32);
	// bl 0x825d6ab0
	ctx.lr = 0x822FAEBC;
	sub_825D6AB0(ctx, base);
loc_822FAEBC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,19088
	ctx.r7.s64 = ctx.r10.s64 + 19088;
	// lwz r11,-28924(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28924);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822faef8
	if (!ctx.cr6.eq) goto loc_822FAEF8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825d72b0
	ctx.lr = 0x822FAEF0;
	sub_825D72B0(ctx, base);
	// stw r3,-28924(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28924, ctx.r3.u32);
	// bl 0x825d7370
	ctx.lr = 0x822FAEF8;
	sub_825D7370(ctx, base);
loc_822FAEF8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28944(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28944);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faf18
	if (!ctx.cr6.eq) goto loc_822FAF18;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825d67c0
	ctx.lr = 0x822FAF10;
	sub_825D67C0(ctx, base);
	// stw r3,-28944(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28944, ctx.r3.u32);
	// bl 0x825d6880
	ctx.lr = 0x822FAF18;
	sub_825D6880(ctx, base);
loc_822FAF18:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28684(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28684);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faf38
	if (!ctx.cr6.eq) goto loc_822FAF38;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826037a0
	ctx.lr = 0x822FAF30;
	sub_826037A0(ctx, base);
	// stw r3,-28684(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28684, ctx.r3.u32);
	// bl 0x82603850
	ctx.lr = 0x822FAF38;
	sub_82603850(ctx, base);
loc_822FAF38:
	// lis r30,-31884
	ctx.r30.s64 = -2089549824;
	// lwz r11,25376(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 25376);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faf58
	if (!ctx.cr6.eq) goto loc_822FAF58;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8230d278
	ctx.lr = 0x822FAF50;
	sub_8230D278(ctx, base);
	// stw r3,25376(r30)
	PPC_STORE_U32(ctx.r30.u32 + 25376, ctx.r3.u32);
	// bl 0x8230d330
	ctx.lr = 0x822FAF58;
	sub_8230D330(ctx, base);
loc_822FAF58:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28100);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faf78
	if (!ctx.cr6.eq) goto loc_822FAF78;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82666978
	ctx.lr = 0x822FAF70;
	sub_82666978(ctx, base);
	// stw r3,-28100(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28100, ctx.r3.u32);
	// bl 0x82666a38
	ctx.lr = 0x822FAF78;
	sub_82666A38(ctx, base);
loc_822FAF78:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,19208
	ctx.r7.s64 = ctx.r10.s64 + 19208;
	// lwz r11,-31720(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31720);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fafb4
	if (!ctx.cr6.eq) goto loc_822FAFB4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82384198
	ctx.lr = 0x822FAFAC;
	sub_82384198(ctx, base);
	// stw r3,-31720(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31720, ctx.r3.u32);
	// bl 0x82384258
	ctx.lr = 0x822FAFB4;
	sub_82384258(ctx, base);
loc_822FAFB4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27528(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27528);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fafd4
	if (!ctx.cr6.eq) goto loc_822FAFD4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826fb230
	ctx.lr = 0x822FAFCC;
	sub_826FB230(ctx, base);
	// stw r3,-27528(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27528, ctx.r3.u32);
	// bl 0x826fb2f0
	ctx.lr = 0x822FAFD4;
	sub_826FB2F0(ctx, base);
loc_822FAFD4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27536(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27536);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822faff4
	if (!ctx.cr6.eq) goto loc_822FAFF4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826fadd8
	ctx.lr = 0x822FAFEC;
	sub_826FADD8(ctx, base);
	// stw r3,-27536(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27536, ctx.r3.u32);
	// bl 0x826fae98
	ctx.lr = 0x822FAFF4;
	sub_826FAE98(ctx, base);
loc_822FAFF4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27540(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27540);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb014
	if (!ctx.cr6.eq) goto loc_822FB014;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826faba8
	ctx.lr = 0x822FB00C;
	sub_826FABA8(ctx, base);
	// stw r3,-27540(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27540, ctx.r3.u32);
	// bl 0x826fac68
	ctx.lr = 0x822FB014;
	sub_826FAC68(ctx, base);
loc_822FB014:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27936(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27936);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb034
	if (!ctx.cr6.eq) goto loc_822FB034;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82697a30
	ctx.lr = 0x822FB02C;
	sub_82697A30(ctx, base);
	// stw r3,-27936(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27936, ctx.r3.u32);
	// bl 0x82697af0
	ctx.lr = 0x822FB034;
	sub_82697AF0(ctx, base);
loc_822FB034:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28912(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28912);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb054
	if (!ctx.cr6.eq) goto loc_822FB054;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ddb88
	ctx.lr = 0x822FB04C;
	sub_825DDB88(ctx, base);
	// stw r3,-28912(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28912, ctx.r3.u32);
	// bl 0x825ddc48
	ctx.lr = 0x822FB054;
	sub_825DDC48(ctx, base);
loc_822FB054:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,19328
	ctx.r7.s64 = ctx.r10.s64 + 19328;
	// lwz r11,-27932(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27932);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb090
	if (!ctx.cr6.eq) goto loc_822FB090;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82697c58
	ctx.lr = 0x822FB088;
	sub_82697C58(ctx, base);
	// stw r3,-27932(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27932, ctx.r3.u32);
	// bl 0x82697d18
	ctx.lr = 0x822FB090;
	sub_82697D18(ctx, base);
loc_822FB090:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26068(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26068);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb0b0
	if (!ctx.cr6.eq) goto loc_822FB0B0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827e82b8
	ctx.lr = 0x822FB0A8;
	sub_827E82B8(ctx, base);
	// stw r3,-26068(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26068, ctx.r3.u32);
	// bl 0x827e8378
	ctx.lr = 0x822FB0B0;
	sub_827E8378(ctx, base);
loc_822FB0B0:
	// lis r30,-31884
	ctx.r30.s64 = -2089549824;
	// lwz r11,25380(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 25380);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb0d0
	if (!ctx.cr6.eq) goto loc_822FB0D0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8230d548
	ctx.lr = 0x822FB0C8;
	sub_8230D548(ctx, base);
	// stw r3,25380(r30)
	PPC_STORE_U32(ctx.r30.u32 + 25380, ctx.r3.u32);
	// bl 0x8230d600
	ctx.lr = 0x822FB0D0;
	sub_8230D600(ctx, base);
loc_822FB0D0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28340(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28340);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb0f0
	if (!ctx.cr6.eq) goto loc_822FB0F0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82632db8
	ctx.lr = 0x822FB0E8;
	sub_82632DB8(ctx, base);
	// stw r3,-28340(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28340, ctx.r3.u32);
	// bl 0x82632e78
	ctx.lr = 0x822FB0F0;
	sub_82632E78(ctx, base);
loc_822FB0F0:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,19448
	ctx.r7.s64 = ctx.r10.s64 + 19448;
	// lwz r11,-28400(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28400);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb12c
	if (!ctx.cr6.eq) goto loc_822FB12C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8262c8e8
	ctx.lr = 0x822FB124;
	sub_8262C8E8(ctx, base);
	// stw r3,-28400(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28400, ctx.r3.u32);
	// bl 0x8262c9a8
	ctx.lr = 0x822FB12C;
	sub_8262C9A8(ctx, base);
loc_822FB12C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28356(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28356);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb14c
	if (!ctx.cr6.eq) goto loc_822FB14C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82631328
	ctx.lr = 0x822FB144;
	sub_82631328(ctx, base);
	// stw r3,-28356(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28356, ctx.r3.u32);
	// bl 0x826313e8
	ctx.lr = 0x822FB14C;
	sub_826313E8(ctx, base);
loc_822FB14C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27348(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27348);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb16c
	if (!ctx.cr6.eq) goto loc_822FB16C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82758878
	ctx.lr = 0x822FB164;
	sub_82758878(ctx, base);
	// stw r3,-27348(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27348, ctx.r3.u32);
	// bl 0x82758938
	ctx.lr = 0x822FB16C;
	sub_82758938(ctx, base);
loc_822FB16C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28780(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28780);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb18c
	if (!ctx.cr6.eq) goto loc_822FB18C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82600318
	ctx.lr = 0x822FB184;
	sub_82600318(ctx, base);
	// stw r3,-28780(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28780, ctx.r3.u32);
	// bl 0x826003d8
	ctx.lr = 0x822FB18C;
	sub_826003D8(ctx, base);
loc_822FB18C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26172(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26172);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb1ac
	if (!ctx.cr6.eq) goto loc_822FB1AC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827ad688
	ctx.lr = 0x822FB1A4;
	sub_827AD688(ctx, base);
	// stw r3,-26172(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26172, ctx.r3.u32);
	// bl 0x827ad748
	ctx.lr = 0x822FB1AC;
	sub_827AD748(ctx, base);
loc_822FB1AC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,19568
	ctx.r7.s64 = ctx.r10.s64 + 19568;
	// lwz r11,-28776(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28776);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb1e8
	if (!ctx.cr6.eq) goto loc_822FB1E8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82600548
	ctx.lr = 0x822FB1E0;
	sub_82600548(ctx, base);
	// stw r3,-28776(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28776, ctx.r3.u32);
	// bl 0x82600608
	ctx.lr = 0x822FB1E8;
	sub_82600608(ctx, base);
loc_822FB1E8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28772(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28772);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb208
	if (!ctx.cr6.eq) goto loc_822FB208;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82600778
	ctx.lr = 0x822FB200;
	sub_82600778(ctx, base);
	// stw r3,-28772(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28772, ctx.r3.u32);
	// bl 0x82600838
	ctx.lr = 0x822FB208;
	sub_82600838(ctx, base);
loc_822FB208:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26060(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26060);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb228
	if (!ctx.cr6.eq) goto loc_822FB228;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827e9958
	ctx.lr = 0x822FB220;
	sub_827E9958(ctx, base);
	// stw r3,-26060(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26060, ctx.r3.u32);
	// bl 0x827e9a18
	ctx.lr = 0x822FB228;
	sub_827E9A18(ctx, base);
loc_822FB228:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27940(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27940);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb248
	if (!ctx.cr6.eq) goto loc_822FB248;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82687308
	ctx.lr = 0x822FB240;
	sub_82687308(ctx, base);
	// stw r3,-27940(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27940, ctx.r3.u32);
	// bl 0x826873c0
	ctx.lr = 0x822FB248;
	sub_826873C0(ctx, base);
loc_822FB248:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27948(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27948);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb268
	if (!ctx.cr6.eq) goto loc_822FB268;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82686ea8
	ctx.lr = 0x822FB260;
	sub_82686EA8(ctx, base);
	// stw r3,-27948(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27948, ctx.r3.u32);
	// bl 0x82686f68
	ctx.lr = 0x822FB268;
	sub_82686F68(ctx, base);
loc_822FB268:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,19688
	ctx.r7.s64 = ctx.r10.s64 + 19688;
	// lwz r11,-28224(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28224);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb2a4
	if (!ctx.cr6.eq) goto loc_822FB2A4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264ca30
	ctx.lr = 0x822FB29C;
	sub_8264CA30(ctx, base);
	// stw r3,-28224(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28224, ctx.r3.u32);
	// bl 0x8264caf0
	ctx.lr = 0x822FB2A4;
	sub_8264CAF0(ctx, base);
loc_822FB2A4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,19808
	ctx.r7.s64 = ctx.r10.s64 + 19808;
	// lwz r11,-28156(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28156);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb2e0
	if (!ctx.cr6.eq) goto loc_822FB2E0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82659f70
	ctx.lr = 0x822FB2D8;
	sub_82659F70(ctx, base);
	// stw r3,-28156(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28156, ctx.r3.u32);
	// bl 0x8265a030
	ctx.lr = 0x822FB2E0;
	sub_8265A030(ctx, base);
loc_822FB2E0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28240(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28240);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb300
	if (!ctx.cr6.eq) goto loc_822FB300;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264a718
	ctx.lr = 0x822FB2F8;
	sub_8264A718(ctx, base);
	// stw r3,-28240(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28240, ctx.r3.u32);
	// bl 0x8264a7d8
	ctx.lr = 0x822FB300;
	sub_8264A7D8(ctx, base);
loc_822FB300:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,19928
	ctx.r7.s64 = ctx.r10.s64 + 19928;
	// lwz r11,-28712(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28712);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb33c
	if (!ctx.cr6.eq) goto loc_822FB33C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82602850
	ctx.lr = 0x822FB334;
	sub_82602850(ctx, base);
	// stw r3,-28712(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28712, ctx.r3.u32);
	// bl 0x82602910
	ctx.lr = 0x822FB33C;
	sub_82602910(ctx, base);
loc_822FB33C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,20048
	ctx.r7.s64 = ctx.r10.s64 + 20048;
	// lwz r11,-28548(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28548);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb378
	if (!ctx.cr6.eq) goto loc_822FB378;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826081e8
	ctx.lr = 0x822FB370;
	sub_826081E8(ctx, base);
	// stw r3,-28548(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28548, ctx.r3.u32);
	// bl 0x826082a8
	ctx.lr = 0x822FB378;
	sub_826082A8(ctx, base);
loc_822FB378:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28676(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28676);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb398
	if (!ctx.cr6.eq) goto loc_822FB398;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82603bf0
	ctx.lr = 0x822FB390;
	sub_82603BF0(ctx, base);
	// stw r3,-28676(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28676, ctx.r3.u32);
	// bl 0x82603cb0
	ctx.lr = 0x822FB398;
	sub_82603CB0(ctx, base);
loc_822FB398:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,20168
	ctx.r7.s64 = ctx.r10.s64 + 20168;
	// lwz r11,-28492(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28492);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb3d4
	if (!ctx.cr6.eq) goto loc_822FB3D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8260a068
	ctx.lr = 0x822FB3CC;
	sub_8260A068(ctx, base);
	// stw r3,-28492(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28492, ctx.r3.u32);
	// bl 0x8260a128
	ctx.lr = 0x822FB3D4;
	sub_8260A128(ctx, base);
loc_822FB3D4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,20288
	ctx.r7.s64 = ctx.r10.s64 + 20288;
	// lwz r11,-27972(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27972);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb410
	if (!ctx.cr6.eq) goto loc_822FB410;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8267d920
	ctx.lr = 0x822FB408;
	sub_8267D920(ctx, base);
	// stw r3,-27972(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27972, ctx.r3.u32);
	// bl 0x8267d9e0
	ctx.lr = 0x822FB410;
	sub_8267D9E0(ctx, base);
loc_822FB410:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27712(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27712);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb430
	if (!ctx.cr6.eq) goto loc_822FB430;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826dd5e8
	ctx.lr = 0x822FB428;
	sub_826DD5E8(ctx, base);
	// stw r3,-27712(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27712, ctx.r3.u32);
	// bl 0x826dd6a8
	ctx.lr = 0x822FB430;
	sub_826DD6A8(ctx, base);
loc_822FB430:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27508(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27508);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb450
	if (!ctx.cr6.eq) goto loc_822FB450;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82704180
	ctx.lr = 0x822FB448;
	sub_82704180(ctx, base);
	// stw r3,-27508(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27508, ctx.r3.u32);
	// bl 0x82704240
	ctx.lr = 0x822FB450;
	sub_82704240(ctx, base);
loc_822FB450:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,20408
	ctx.r7.s64 = ctx.r10.s64 + 20408;
	// lwz r11,-28236(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28236);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb48c
	if (!ctx.cr6.eq) goto loc_822FB48C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8264aac8
	ctx.lr = 0x822FB484;
	sub_8264AAC8(ctx, base);
	// stw r3,-28236(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28236, ctx.r3.u32);
	// bl 0x8264ab88
	ctx.lr = 0x822FB48C;
	sub_8264AB88(ctx, base);
loc_822FB48C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,20528
	ctx.r7.s64 = ctx.r10.s64 + 20528;
	// lwz r11,-27296(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27296);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb4c8
	if (!ctx.cr6.eq) goto loc_822FB4C8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82768248
	ctx.lr = 0x822FB4C0;
	sub_82768248(ctx, base);
	// stw r3,-27296(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27296, ctx.r3.u32);
	// bl 0x82768308
	ctx.lr = 0x822FB4C8;
	sub_82768308(ctx, base);
loc_822FB4C8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27244(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb4e8
	if (!ctx.cr6.eq) goto loc_822FB4E8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8278cdd8
	ctx.lr = 0x822FB4E0;
	sub_8278CDD8(ctx, base);
	// stw r3,-27244(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27244, ctx.r3.u32);
	// bl 0x8278ce98
	ctx.lr = 0x822FB4E8;
	sub_8278CE98(ctx, base);
loc_822FB4E8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,20648
	ctx.r7.s64 = ctx.r10.s64 + 20648;
	// lwz r11,-26160(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26160);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb524
	if (!ctx.cr6.eq) goto loc_822FB524;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827c1518
	ctx.lr = 0x822FB51C;
	sub_827C1518(ctx, base);
	// stw r3,-26160(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26160, ctx.r3.u32);
	// bl 0x827c15d8
	ctx.lr = 0x822FB524;
	sub_827C15D8(ctx, base);
loc_822FB524:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,20784
	ctx.r7.s64 = ctx.r10.s64 + 20784;
	// lwz r11,-26092(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26092);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb560
	if (!ctx.cr6.eq) goto loc_822FB560;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827e2b68
	ctx.lr = 0x822FB558;
	sub_827E2B68(ctx, base);
	// stw r3,-26092(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26092, ctx.r3.u32);
	// bl 0x827e2c28
	ctx.lr = 0x822FB560;
	sub_827E2C28(ctx, base);
loc_822FB560:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26064(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26064);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb580
	if (!ctx.cr6.eq) goto loc_822FB580;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827e8c30
	ctx.lr = 0x822FB578;
	sub_827E8C30(ctx, base);
	// stw r3,-26064(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26064, ctx.r3.u32);
	// bl 0x827e8cf0
	ctx.lr = 0x822FB580;
	sub_827E8CF0(ctx, base);
loc_822FB580:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28096(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28096);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb5a0
	if (!ctx.cr6.eq) goto loc_822FB5A0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82669dd8
	ctx.lr = 0x822FB598;
	sub_82669DD8(ctx, base);
	// stw r3,-28096(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28096, ctx.r3.u32);
	// bl 0x82669e98
	ctx.lr = 0x822FB5A0;
	sub_82669E98(ctx, base);
loc_822FB5A0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28652(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28652);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb5c0
	if (!ctx.cr6.eq) goto loc_822FB5C0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82604910
	ctx.lr = 0x822FB5B8;
	sub_82604910(ctx, base);
	// stw r3,-28652(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28652, ctx.r3.u32);
	// bl 0x826049d0
	ctx.lr = 0x822FB5C0;
	sub_826049D0(ctx, base);
loc_822FB5C0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28512(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28512);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb5e0
	if (!ctx.cr6.eq) goto loc_822FB5E0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82609578
	ctx.lr = 0x822FB5D8;
	sub_82609578(ctx, base);
	// stw r3,-28512(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28512, ctx.r3.u32);
	// bl 0x82609638
	ctx.lr = 0x822FB5E0;
	sub_82609638(ctx, base);
loc_822FB5E0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27384(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27384);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb600
	if (!ctx.cr6.eq) goto loc_822FB600;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8274dc40
	ctx.lr = 0x822FB5F8;
	sub_8274DC40(ctx, base);
	// stw r3,-27384(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27384, ctx.r3.u32);
	// bl 0x8274dd00
	ctx.lr = 0x822FB600;
	sub_8274DD00(ctx, base);
loc_822FB600:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28600(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28600);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb620
	if (!ctx.cr6.eq) goto loc_822FB620;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82606590
	ctx.lr = 0x822FB618;
	sub_82606590(ctx, base);
	// stw r3,-28600(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28600, ctx.r3.u32);
	// bl 0x82606640
	ctx.lr = 0x822FB620;
	sub_82606640(ctx, base);
loc_822FB620:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,20904
	ctx.r7.s64 = ctx.r10.s64 + 20904;
	// lwz r11,-28580(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28580);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb65c
	if (!ctx.cr6.eq) goto loc_822FB65C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82607068
	ctx.lr = 0x822FB654;
	sub_82607068(ctx, base);
	// stw r3,-28580(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28580, ctx.r3.u32);
	// bl 0x82607128
	ctx.lr = 0x822FB65C;
	sub_82607128(ctx, base);
loc_822FB65C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,21024
	ctx.r7.s64 = ctx.r10.s64 + 21024;
	// lwz r11,-28508(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28508);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb698
	if (!ctx.cr6.eq) goto loc_822FB698;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826097a8
	ctx.lr = 0x822FB690;
	sub_826097A8(ctx, base);
	// stw r3,-28508(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28508, ctx.r3.u32);
	// bl 0x82609868
	ctx.lr = 0x822FB698;
	sub_82609868(ctx, base);
loc_822FB698:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28704(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28704);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb6b8
	if (!ctx.cr6.eq) goto loc_822FB6B8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82602cb0
	ctx.lr = 0x822FB6B0;
	sub_82602CB0(ctx, base);
	// stw r3,-28704(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28704, ctx.r3.u32);
	// bl 0x82602d70
	ctx.lr = 0x822FB6B8;
	sub_82602D70(ctx, base);
loc_822FB6B8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,21144
	ctx.r7.s64 = ctx.r10.s64 + 21144;
	// lwz r11,-28756(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28756);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb6f4
	if (!ctx.cr6.eq) goto loc_822FB6F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82601030
	ctx.lr = 0x822FB6EC;
	sub_82601030(ctx, base);
	// stw r3,-28756(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28756, ctx.r3.u32);
	// bl 0x826010e0
	ctx.lr = 0x822FB6F4;
	sub_826010E0(ctx, base);
loc_822FB6F4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28168(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28168);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb714
	if (!ctx.cr6.eq) goto loc_822FB714;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826598e8
	ctx.lr = 0x822FB70C;
	sub_826598E8(ctx, base);
	// stw r3,-28168(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28168, ctx.r3.u32);
	// bl 0x826599a8
	ctx.lr = 0x822FB714;
	sub_826599A8(ctx, base);
loc_822FB714:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27748(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27748);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb734
	if (!ctx.cr6.eq) goto loc_822FB734;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826d3710
	ctx.lr = 0x822FB72C;
	sub_826D3710(ctx, base);
	// stw r3,-27748(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27748, ctx.r3.u32);
	// bl 0x826d37d0
	ctx.lr = 0x822FB734;
	sub_826D37D0(ctx, base);
loc_822FB734:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,21264
	ctx.r7.s64 = ctx.r10.s64 + 21264;
	// lwz r11,-31268(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31268);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb770
	if (!ctx.cr6.eq) goto loc_822FB770;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8241c0c8
	ctx.lr = 0x822FB768;
	sub_8241C0C8(ctx, base);
	// stw r3,-31268(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31268, ctx.r3.u32);
	// bl 0x8241c188
	ctx.lr = 0x822FB770;
	sub_8241C188(ctx, base);
loc_822FB770:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28748(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28748);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb790
	if (!ctx.cr6.eq) goto loc_822FB790;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82601498
	ctx.lr = 0x822FB788;
	sub_82601498(ctx, base);
	// stw r3,-28748(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28748, ctx.r3.u32);
	// bl 0x82601548
	ctx.lr = 0x822FB790;
	sub_82601548(ctx, base);
loc_822FB790:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,21384
	ctx.r7.s64 = ctx.r10.s64 + 21384;
	// lwz r11,-28740(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28740);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb7cc
	if (!ctx.cr6.eq) goto loc_822FB7CC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82601908
	ctx.lr = 0x822FB7C4;
	sub_82601908(ctx, base);
	// stw r3,-28740(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28740, ctx.r3.u32);
	// bl 0x826019c8
	ctx.lr = 0x822FB7CC;
	sub_826019C8(ctx, base);
loc_822FB7CC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27268(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27268);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb7ec
	if (!ctx.cr6.eq) goto loc_822FB7EC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82783fa8
	ctx.lr = 0x822FB7E4;
	sub_82783FA8(ctx, base);
	// stw r3,-27268(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27268, ctx.r3.u32);
	// bl 0x82784068
	ctx.lr = 0x822FB7EC;
	sub_82784068(ctx, base);
loc_822FB7EC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26156(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26156);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb80c
	if (!ctx.cr6.eq) goto loc_822FB80C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827c2ec8
	ctx.lr = 0x822FB804;
	sub_827C2EC8(ctx, base);
	// stw r3,-26156(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26156, ctx.r3.u32);
	// bl 0x827c2f88
	ctx.lr = 0x822FB80C;
	sub_827C2F88(ctx, base);
loc_822FB80C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31912(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31912);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb82c
	if (!ctx.cr6.eq) goto loc_822FB82C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82351250
	ctx.lr = 0x822FB824;
	sub_82351250(ctx, base);
	// stw r3,-31912(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31912, ctx.r3.u32);
	// bl 0x82351310
	ctx.lr = 0x822FB82C;
	sub_82351310(ctx, base);
loc_822FB82C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,21504
	ctx.r7.s64 = ctx.r10.s64 + 21504;
	// lwz r11,-27548(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27548);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb868
	if (!ctx.cr6.eq) goto loc_822FB868;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826f9a38
	ctx.lr = 0x822FB860;
	sub_826F9A38(ctx, base);
	// stw r3,-27548(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27548, ctx.r3.u32);
	// bl 0x826f9af8
	ctx.lr = 0x822FB868;
	sub_826F9AF8(ctx, base);
loc_822FB868:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,21640
	ctx.r7.s64 = ctx.r10.s64 + 21640;
	// lwz r11,-26100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26100);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb8a4
	if (!ctx.cr6.eq) goto loc_822FB8A4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827e0fb8
	ctx.lr = 0x822FB89C;
	sub_827E0FB8(ctx, base);
	// stw r3,-26100(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26100, ctx.r3.u32);
	// bl 0x827e1078
	ctx.lr = 0x822FB8A4;
	sub_827E1078(ctx, base);
loc_822FB8A4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31604(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31604);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb8c4
	if (!ctx.cr6.eq) goto loc_822FB8C4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x823a5940
	ctx.lr = 0x822FB8BC;
	sub_823A5940(ctx, base);
	// stw r3,-31604(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31604, ctx.r3.u32);
	// bl 0x823a5a00
	ctx.lr = 0x822FB8C4;
	sub_823A5A00(ctx, base);
loc_822FB8C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31600(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31600);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb8e4
	if (!ctx.cr6.eq) goto loc_822FB8E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x823a5b68
	ctx.lr = 0x822FB8DC;
	sub_823A5B68(ctx, base);
	// stw r3,-31600(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31600, ctx.r3.u32);
	// bl 0x823a5c28
	ctx.lr = 0x822FB8E4;
	sub_823A5C28(ctx, base);
loc_822FB8E4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,21760
	ctx.r7.s64 = ctx.r10.s64 + 21760;
	// lwz r11,-27524(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27524);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb920
	if (!ctx.cr6.eq) goto loc_822FB920;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826ff8f8
	ctx.lr = 0x822FB918;
	sub_826FF8F8(ctx, base);
	// stw r3,-27524(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27524, ctx.r3.u32);
	// bl 0x826ff9b8
	ctx.lr = 0x822FB920;
	sub_826FF9B8(ctx, base);
loc_822FB920:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,21896
	ctx.r7.s64 = ctx.r10.s64 + 21896;
	// lwz r11,-27696(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27696);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb95c
	if (!ctx.cr6.eq) goto loc_822FB95C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826dfee0
	ctx.lr = 0x822FB954;
	sub_826DFEE0(ctx, base);
	// stw r3,-27696(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27696, ctx.r3.u32);
	// bl 0x826dffa0
	ctx.lr = 0x822FB95C;
	sub_826DFFA0(ctx, base);
loc_822FB95C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,22016
	ctx.r7.s64 = ctx.r10.s64 + 22016;
	// lwz r11,-28612(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28612);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fb998
	if (!ctx.cr6.eq) goto loc_822FB998;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82605ef8
	ctx.lr = 0x822FB990;
	sub_82605EF8(ctx, base);
	// stw r3,-28612(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28612, ctx.r3.u32);
	// bl 0x82605fb8
	ctx.lr = 0x822FB998;
	sub_82605FB8(ctx, base);
loc_822FB998:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27332(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27332);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb9b8
	if (!ctx.cr6.eq) goto loc_822FB9B8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827647e0
	ctx.lr = 0x822FB9B0;
	sub_827647E0(ctx, base);
	// stw r3,-27332(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27332, ctx.r3.u32);
	// bl 0x827648a0
	ctx.lr = 0x822FB9B8;
	sub_827648A0(ctx, base);
loc_822FB9B8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27248(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27248);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb9d8
	if (!ctx.cr6.eq) goto loc_822FB9D8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8278a9b0
	ctx.lr = 0x822FB9D0;
	sub_8278A9B0(ctx, base);
	// stw r3,-27248(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27248, ctx.r3.u32);
	// bl 0x8278aa70
	ctx.lr = 0x822FB9D8;
	sub_8278AA70(ctx, base);
loc_822FB9D8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27336(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27336);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fb9f8
	if (!ctx.cr6.eq) goto loc_822FB9F8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827645b0
	ctx.lr = 0x822FB9F0;
	sub_827645B0(ctx, base);
	// stw r3,-27336(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27336, ctx.r3.u32);
	// bl 0x82764670
	ctx.lr = 0x822FB9F8;
	sub_82764670(ctx, base);
loc_822FB9F8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27724(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27724);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fba18
	if (!ctx.cr6.eq) goto loc_822FBA18;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826d9790
	ctx.lr = 0x822FBA10;
	sub_826D9790(ctx, base);
	// stw r3,-27724(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27724, ctx.r3.u32);
	// bl 0x826d9850
	ctx.lr = 0x822FBA18;
	sub_826D9850(ctx, base);
loc_822FBA18:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27596(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27596);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fba38
	if (!ctx.cr6.eq) goto loc_822FBA38;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826f15e0
	ctx.lr = 0x822FBA30;
	sub_826F15E0(ctx, base);
	// stw r3,-27596(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27596, ctx.r3.u32);
	// bl 0x826f16a0
	ctx.lr = 0x822FBA38;
	sub_826F16A0(ctx, base);
loc_822FBA38:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27720(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27720);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fba58
	if (!ctx.cr6.eq) goto loc_822FBA58;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826da848
	ctx.lr = 0x822FBA50;
	sub_826DA848(ctx, base);
	// stw r3,-27720(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27720, ctx.r3.u32);
	// bl 0x826da908
	ctx.lr = 0x822FBA58;
	sub_826DA908(ctx, base);
loc_822FBA58:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27592(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27592);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fba78
	if (!ctx.cr6.eq) goto loc_822FBA78;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826f2308
	ctx.lr = 0x822FBA70;
	sub_826F2308(ctx, base);
	// stw r3,-27592(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27592, ctx.r3.u32);
	// bl 0x826f23c8
	ctx.lr = 0x822FBA78;
	sub_826F23C8(ctx, base);
loc_822FBA78:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27468(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27468);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fba98
	if (!ctx.cr6.eq) goto loc_822FBA98;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827318f8
	ctx.lr = 0x822FBA90;
	sub_827318F8(ctx, base);
	// stw r3,-27468(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27468, ctx.r3.u32);
	// bl 0x827319b8
	ctx.lr = 0x822FBA98;
	sub_827319B8(ctx, base);
loc_822FBA98:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27372(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27372);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbab8
	if (!ctx.cr6.eq) goto loc_822FBAB8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8274fd70
	ctx.lr = 0x822FBAB0;
	sub_8274FD70(ctx, base);
	// stw r3,-27372(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27372, ctx.r3.u32);
	// bl 0x8274fe30
	ctx.lr = 0x822FBAB8;
	sub_8274FE30(ctx, base);
loc_822FBAB8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27328(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27328);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbad8
	if (!ctx.cr6.eq) goto loc_822FBAD8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82765480
	ctx.lr = 0x822FBAD0;
	sub_82765480(ctx, base);
	// stw r3,-27328(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27328, ctx.r3.u32);
	// bl 0x82765540
	ctx.lr = 0x822FBAD8;
	sub_82765540(ctx, base);
loc_822FBAD8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29812(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29812);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbaf8
	if (!ctx.cr6.eq) goto loc_822FBAF8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82522ef0
	ctx.lr = 0x822FBAF0;
	sub_82522EF0(ctx, base);
	// stw r3,-29812(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29812, ctx.r3.u32);
	// bl 0x82522fb0
	ctx.lr = 0x822FBAF8;
	sub_82522FB0(ctx, base);
loc_822FBAF8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,25616
	ctx.r7.s64 = ctx.r10.s64 + 25616;
	// lwz r11,-29756(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29756);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fbb34
	if (!ctx.cr6.eq) goto loc_822FBB34;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82524d88
	ctx.lr = 0x822FBB2C;
	sub_82524D88(ctx, base);
	// stw r3,-29756(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29756, ctx.r3.u32);
	// bl 0x82524e48
	ctx.lr = 0x822FBB34;
	sub_82524E48(ctx, base);
loc_822FBB34:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,25736
	ctx.r7.s64 = ctx.r10.s64 + 25736;
	// lwz r11,-29804(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29804);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fbb70
	if (!ctx.cr6.eq) goto loc_822FBB70;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82523348
	ctx.lr = 0x822FBB68;
	sub_82523348(ctx, base);
	// stw r3,-29804(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29804, ctx.r3.u32);
	// bl 0x82523408
	ctx.lr = 0x822FBB70;
	sub_82523408(ctx, base);
loc_822FBB70:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,25856
	ctx.r7.s64 = ctx.r10.s64 + 25856;
	// lwz r11,-29808(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29808);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fbbac
	if (!ctx.cr6.eq) goto loc_822FBBAC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82523118
	ctx.lr = 0x822FBBA4;
	sub_82523118(ctx, base);
	// stw r3,-29808(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29808, ctx.r3.u32);
	// bl 0x825231d8
	ctx.lr = 0x822FBBAC;
	sub_825231D8(ctx, base);
loc_822FBBAC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,25976
	ctx.r7.s64 = ctx.r10.s64 + 25976;
	// lwz r11,-29752(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29752);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fbbe8
	if (!ctx.cr6.eq) goto loc_822FBBE8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82524fb8
	ctx.lr = 0x822FBBE0;
	sub_82524FB8(ctx, base);
	// stw r3,-29752(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29752, ctx.r3.u32);
	// bl 0x82525078
	ctx.lr = 0x822FBBE8;
	sub_82525078(ctx, base);
loc_822FBBE8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29768(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29768);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbc08
	if (!ctx.cr6.eq) goto loc_822FBC08;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825246f8
	ctx.lr = 0x822FBC00;
	sub_825246F8(ctx, base);
	// stw r3,-29768(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29768, ctx.r3.u32);
	// bl 0x825247b8
	ctx.lr = 0x822FBC08;
	sub_825247B8(ctx, base);
loc_822FBC08:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29776(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29776);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbc28
	if (!ctx.cr6.eq) goto loc_822FBC28;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82524298
	ctx.lr = 0x822FBC20;
	sub_82524298(ctx, base);
	// stw r3,-29776(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29776, ctx.r3.u32);
	// bl 0x82524358
	ctx.lr = 0x822FBC28;
	sub_82524358(ctx, base);
loc_822FBC28:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29780(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29780);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbc48
	if (!ctx.cr6.eq) goto loc_822FBC48;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82524068
	ctx.lr = 0x822FBC40;
	sub_82524068(ctx, base);
	// stw r3,-29780(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29780, ctx.r3.u32);
	// bl 0x82524128
	ctx.lr = 0x822FBC48;
	sub_82524128(ctx, base);
loc_822FBC48:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29772(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29772);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbc68
	if (!ctx.cr6.eq) goto loc_822FBC68;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825244c8
	ctx.lr = 0x822FBC60;
	sub_825244C8(ctx, base);
	// stw r3,-29772(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29772, ctx.r3.u32);
	// bl 0x82524588
	ctx.lr = 0x822FBC68;
	sub_82524588(ctx, base);
loc_822FBC68:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29784(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29784);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbc88
	if (!ctx.cr6.eq) goto loc_822FBC88;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82523e38
	ctx.lr = 0x822FBC80;
	sub_82523E38(ctx, base);
	// stw r3,-29784(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29784, ctx.r3.u32);
	// bl 0x82523ef8
	ctx.lr = 0x822FBC88;
	sub_82523EF8(ctx, base);
loc_822FBC88:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29792(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29792);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbca8
	if (!ctx.cr6.eq) goto loc_822FBCA8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825239d8
	ctx.lr = 0x822FBCA0;
	sub_825239D8(ctx, base);
	// stw r3,-29792(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29792, ctx.r3.u32);
	// bl 0x82523a98
	ctx.lr = 0x822FBCA8;
	sub_82523A98(ctx, base);
loc_822FBCA8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,26096
	ctx.r7.s64 = ctx.r10.s64 + 26096;
	// lwz r11,-29760(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29760);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fbce4
	if (!ctx.cr6.eq) goto loc_822FBCE4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82524b58
	ctx.lr = 0x822FBCDC;
	sub_82524B58(ctx, base);
	// stw r3,-29760(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29760, ctx.r3.u32);
	// bl 0x82524c18
	ctx.lr = 0x822FBCE4;
	sub_82524C18(ctx, base);
loc_822FBCE4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,26216
	ctx.r7.s64 = ctx.r10.s64 + 26216;
	// lwz r11,-29796(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29796);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fbd20
	if (!ctx.cr6.eq) goto loc_822FBD20;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825237a8
	ctx.lr = 0x822FBD18;
	sub_825237A8(ctx, base);
	// stw r3,-29796(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29796, ctx.r3.u32);
	// bl 0x82523868
	ctx.lr = 0x822FBD20;
	sub_82523868(ctx, base);
loc_822FBD20:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29800(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29800);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbd40
	if (!ctx.cr6.eq) goto loc_822FBD40;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82523578
	ctx.lr = 0x822FBD38;
	sub_82523578(ctx, base);
	// stw r3,-29800(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29800, ctx.r3.u32);
	// bl 0x82523638
	ctx.lr = 0x822FBD40;
	sub_82523638(ctx, base);
loc_822FBD40:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,26336
	ctx.r7.s64 = ctx.r10.s64 + 26336;
	// lwz r11,-29764(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29764);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fbd7c
	if (!ctx.cr6.eq) goto loc_822FBD7C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82524928
	ctx.lr = 0x822FBD74;
	sub_82524928(ctx, base);
	// stw r3,-29764(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29764, ctx.r3.u32);
	// bl 0x825249e8
	ctx.lr = 0x822FBD7C;
	sub_825249E8(ctx, base);
loc_822FBD7C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29736(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29736);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbd9c
	if (!ctx.cr6.eq) goto loc_822FBD9C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82525878
	ctx.lr = 0x822FBD94;
	sub_82525878(ctx, base);
	// stw r3,-29736(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29736, ctx.r3.u32);
	// bl 0x82525938
	ctx.lr = 0x822FBD9C;
	sub_82525938(ctx, base);
loc_822FBD9C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,26456
	ctx.r7.s64 = ctx.r10.s64 + 26456;
	// lwz r11,-29788(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29788);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fbdd8
	if (!ctx.cr6.eq) goto loc_822FBDD8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82523c08
	ctx.lr = 0x822FBDD0;
	sub_82523C08(ctx, base);
	// stw r3,-29788(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29788, ctx.r3.u32);
	// bl 0x82523cc8
	ctx.lr = 0x822FBDD8;
	sub_82523CC8(ctx, base);
loc_822FBDD8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29744(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29744);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbdf8
	if (!ctx.cr6.eq) goto loc_822FBDF8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82525418
	ctx.lr = 0x822FBDF0;
	sub_82525418(ctx, base);
	// stw r3,-29744(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29744, ctx.r3.u32);
	// bl 0x825254d8
	ctx.lr = 0x822FBDF8;
	sub_825254D8(ctx, base);
loc_822FBDF8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29740(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29740);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbe18
	if (!ctx.cr6.eq) goto loc_822FBE18;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82525648
	ctx.lr = 0x822FBE10;
	sub_82525648(ctx, base);
	// stw r3,-29740(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29740, ctx.r3.u32);
	// bl 0x82525708
	ctx.lr = 0x822FBE18;
	sub_82525708(ctx, base);
loc_822FBE18:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27964(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27964);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbe38
	if (!ctx.cr6.eq) goto loc_822FBE38;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82682c70
	ctx.lr = 0x822FBE30;
	sub_82682C70(ctx, base);
	// stw r3,-27964(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27964, ctx.r3.u32);
	// bl 0x82682d30
	ctx.lr = 0x822FBE38;
	sub_82682D30(ctx, base);
loc_822FBE38:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,26576
	ctx.r7.s64 = ctx.r10.s64 + 26576;
	// lwz r11,-27960(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27960);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fbe74
	if (!ctx.cr6.eq) goto loc_822FBE74;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82682ea0
	ctx.lr = 0x822FBE6C;
	sub_82682EA0(ctx, base);
	// stw r3,-27960(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27960, ctx.r3.u32);
	// bl 0x82682f60
	ctx.lr = 0x822FBE74;
	sub_82682F60(ctx, base);
loc_822FBE74:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27956(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27956);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbe94
	if (!ctx.cr6.eq) goto loc_822FBE94;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826830d0
	ctx.lr = 0x822FBE8C;
	sub_826830D0(ctx, base);
	// stw r3,-27956(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27956, ctx.r3.u32);
	// bl 0x82683190
	ctx.lr = 0x822FBE94;
	sub_82683190(ctx, base);
loc_822FBE94:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29732(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29732);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbeb4
	if (!ctx.cr6.eq) goto loc_822FBEB4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82525aa8
	ctx.lr = 0x822FBEAC;
	sub_82525AA8(ctx, base);
	// stw r3,-29732(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29732, ctx.r3.u32);
	// bl 0x82525b68
	ctx.lr = 0x822FBEB4;
	sub_82525B68(ctx, base);
loc_822FBEB4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,26696
	ctx.r7.s64 = ctx.r10.s64 + 26696;
	// lwz r11,-29748(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29748);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fbef0
	if (!ctx.cr6.eq) goto loc_822FBEF0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825251e8
	ctx.lr = 0x822FBEE8;
	sub_825251E8(ctx, base);
	// stw r3,-29748(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29748, ctx.r3.u32);
	// bl 0x825252a8
	ctx.lr = 0x822FBEF0;
	sub_825252A8(ctx, base);
loc_822FBEF0:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,26816
	ctx.r7.s64 = ctx.r10.s64 + 26816;
	// lwz r11,-28320(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28320);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fbf2c
	if (!ctx.cr6.eq) goto loc_822FBF2C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82636c30
	ctx.lr = 0x822FBF24;
	sub_82636C30(ctx, base);
	// stw r3,-28320(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28320, ctx.r3.u32);
	// bl 0x82636cf0
	ctx.lr = 0x822FBF2C;
	sub_82636CF0(ctx, base);
loc_822FBF2C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28316(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28316);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbf4c
	if (!ctx.cr6.eq) goto loc_822FBF4C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8263b108
	ctx.lr = 0x822FBF44;
	sub_8263B108(ctx, base);
	// stw r3,-28316(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28316, ctx.r3.u32);
	// bl 0x8263b1c8
	ctx.lr = 0x822FBF4C;
	sub_8263B1C8(ctx, base);
loc_822FBF4C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28300(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28300);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbf6c
	if (!ctx.cr6.eq) goto loc_822FBF6C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8263bd30
	ctx.lr = 0x822FBF64;
	sub_8263BD30(ctx, base);
	// stw r3,-28300(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28300, ctx.r3.u32);
	// bl 0x8263bdf0
	ctx.lr = 0x822FBF6C;
	sub_8263BDF0(ctx, base);
loc_822FBF6C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28308(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28308);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbf8c
	if (!ctx.cr6.eq) goto loc_822FBF8C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8263b7d8
	ctx.lr = 0x822FBF84;
	sub_8263B7D8(ctx, base);
	// stw r3,-28308(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28308, ctx.r3.u32);
	// bl 0x8263b898
	ctx.lr = 0x822FBF8C;
	sub_8263B898(ctx, base);
loc_822FBF8C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28304(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28304);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbfac
	if (!ctx.cr6.eq) goto loc_822FBFAC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8263ba68
	ctx.lr = 0x822FBFA4;
	sub_8263BA68(ctx, base);
	// stw r3,-28304(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28304, ctx.r3.u32);
	// bl 0x8263bb28
	ctx.lr = 0x822FBFAC;
	sub_8263BB28(ctx, base);
loc_822FBFAC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28312(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28312);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbfcc
	if (!ctx.cr6.eq) goto loc_822FBFCC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8263b470
	ctx.lr = 0x822FBFC4;
	sub_8263B470(ctx, base);
	// stw r3,-28312(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28312, ctx.r3.u32);
	// bl 0x8263b530
	ctx.lr = 0x822FBFCC;
	sub_8263B530(ctx, base);
loc_822FBFCC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28328(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28328);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fbfec
	if (!ctx.cr6.eq) goto loc_822FBFEC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826367e0
	ctx.lr = 0x822FBFE4;
	sub_826367E0(ctx, base);
	// stw r3,-28328(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28328, ctx.r3.u32);
	// bl 0x826368a0
	ctx.lr = 0x822FBFEC;
	sub_826368A0(ctx, base);
loc_822FBFEC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28324(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28324);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc00c
	if (!ctx.cr6.eq) goto loc_822FC00C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82636a08
	ctx.lr = 0x822FC004;
	sub_82636A08(ctx, base);
	// stw r3,-28324(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28324, ctx.r3.u32);
	// bl 0x82636ac8
	ctx.lr = 0x822FC00C;
	sub_82636AC8(ctx, base);
loc_822FC00C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,26936
	ctx.r7.s64 = ctx.r10.s64 + 26936;
	// lwz r11,-29728(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29728);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fc048
	if (!ctx.cr6.eq) goto loc_822FC048;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82525cd8
	ctx.lr = 0x822FC040;
	sub_82525CD8(ctx, base);
	// stw r3,-29728(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29728, ctx.r3.u32);
	// bl 0x82525d98
	ctx.lr = 0x822FC048;
	sub_82525D98(ctx, base);
loc_822FC048:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,27056
	ctx.r7.s64 = ctx.r10.s64 + 27056;
	// lwz r11,-27448(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27448);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fc084
	if (!ctx.cr6.eq) goto loc_822FC084;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82733520
	ctx.lr = 0x822FC07C;
	sub_82733520(ctx, base);
	// stw r3,-27448(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27448, ctx.r3.u32);
	// bl 0x827335e0
	ctx.lr = 0x822FC084;
	sub_827335E0(ctx, base);
loc_822FC084:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27436(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27436);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc0a4
	if (!ctx.cr6.eq) goto loc_822FC0A4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82733ba8
	ctx.lr = 0x822FC09C;
	sub_82733BA8(ctx, base);
	// stw r3,-27436(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27436, ctx.r3.u32);
	// bl 0x82733c68
	ctx.lr = 0x822FC0A4;
	sub_82733C68(ctx, base);
loc_822FC0A4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,27176
	ctx.r7.s64 = ctx.r10.s64 + 27176;
	// lwz r11,-27440(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27440);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fc0e0
	if (!ctx.cr6.eq) goto loc_822FC0E0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82733978
	ctx.lr = 0x822FC0D8;
	sub_82733978(ctx, base);
	// stw r3,-27440(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27440, ctx.r3.u32);
	// bl 0x82733a38
	ctx.lr = 0x822FC0E0;
	sub_82733A38(ctx, base);
loc_822FC0E0:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,27296
	ctx.r7.s64 = ctx.r10.s64 + 27296;
	// lwz r11,-27444(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27444);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fc11c
	if (!ctx.cr6.eq) goto loc_822FC11C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82733748
	ctx.lr = 0x822FC114;
	sub_82733748(ctx, base);
	// stw r3,-27444(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27444, ctx.r3.u32);
	// bl 0x82733808
	ctx.lr = 0x822FC11C;
	sub_82733808(ctx, base);
loc_822FC11C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27460(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27460);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc13c
	if (!ctx.cr6.eq) goto loc_822FC13C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82732ea8
	ctx.lr = 0x822FC134;
	sub_82732EA8(ctx, base);
	// stw r3,-27460(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27460, ctx.r3.u32);
	// bl 0x82732f68
	ctx.lr = 0x822FC13C;
	sub_82732F68(ctx, base);
loc_822FC13C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27456(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27456);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc15c
	if (!ctx.cr6.eq) goto loc_822FC15C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827330d0
	ctx.lr = 0x822FC154;
	sub_827330D0(ctx, base);
	// stw r3,-27456(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27456, ctx.r3.u32);
	// bl 0x82733190
	ctx.lr = 0x822FC15C;
	sub_82733190(ctx, base);
loc_822FC15C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,27416
	ctx.r7.s64 = ctx.r10.s64 + 27416;
	// lwz r11,-27452(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27452);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fc198
	if (!ctx.cr6.eq) goto loc_822FC198;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827332f8
	ctx.lr = 0x822FC190;
	sub_827332F8(ctx, base);
	// stw r3,-27452(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27452, ctx.r3.u32);
	// bl 0x827333b8
	ctx.lr = 0x822FC198;
	sub_827333B8(ctx, base);
loc_822FC198:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27888(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27888);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc1b8
	if (!ctx.cr6.eq) goto loc_822FC1B8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826ac918
	ctx.lr = 0x822FC1B0;
	sub_826AC918(ctx, base);
	// stw r3,-27888(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27888, ctx.r3.u32);
	// bl 0x826ac9d8
	ctx.lr = 0x822FC1B8;
	sub_826AC9D8(ctx, base);
loc_822FC1B8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,27536
	ctx.r7.s64 = ctx.r10.s64 + 27536;
	// lwz r11,-27868(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27868);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fc1f4
	if (!ctx.cr6.eq) goto loc_822FC1F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826ad400
	ctx.lr = 0x822FC1EC;
	sub_826AD400(ctx, base);
	// stw r3,-27868(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27868, ctx.r3.u32);
	// bl 0x826ad4c0
	ctx.lr = 0x822FC1F4;
	sub_826AD4C0(ctx, base);
loc_822FC1F4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27872(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27872);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc214
	if (!ctx.cr6.eq) goto loc_822FC214;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826ad1d0
	ctx.lr = 0x822FC20C;
	sub_826AD1D0(ctx, base);
	// stw r3,-27872(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27872, ctx.r3.u32);
	// bl 0x826ad290
	ctx.lr = 0x822FC214;
	sub_826AD290(ctx, base);
loc_822FC214:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27880(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27880);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc234
	if (!ctx.cr6.eq) goto loc_822FC234;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826acd70
	ctx.lr = 0x822FC22C;
	sub_826ACD70(ctx, base);
	// stw r3,-27880(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27880, ctx.r3.u32);
	// bl 0x826ace30
	ctx.lr = 0x822FC234;
	sub_826ACE30(ctx, base);
loc_822FC234:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,27656
	ctx.r7.s64 = ctx.r10.s64 + 27656;
	// lwz r11,-27884(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27884);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fc270
	if (!ctx.cr6.eq) goto loc_822FC270;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826acb40
	ctx.lr = 0x822FC268;
	sub_826ACB40(ctx, base);
	// stw r3,-27884(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27884, ctx.r3.u32);
	// bl 0x826acc00
	ctx.lr = 0x822FC270;
	sub_826ACC00(ctx, base);
loc_822FC270:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27876(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27876);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc290
	if (!ctx.cr6.eq) goto loc_822FC290;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826acfa0
	ctx.lr = 0x822FC288;
	sub_826ACFA0(ctx, base);
	// stw r3,-27876(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27876, ctx.r3.u32);
	// bl 0x826ad060
	ctx.lr = 0x822FC290;
	sub_826AD060(ctx, base);
loc_822FC290:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27860(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27860);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc2b0
	if (!ctx.cr6.eq) goto loc_822FC2B0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826ad860
	ctx.lr = 0x822FC2A8;
	sub_826AD860(ctx, base);
	// stw r3,-27860(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27860, ctx.r3.u32);
	// bl 0x826ad920
	ctx.lr = 0x822FC2B0;
	sub_826AD920(ctx, base);
loc_822FC2B0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27864(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27864);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc2d0
	if (!ctx.cr6.eq) goto loc_822FC2D0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826ad630
	ctx.lr = 0x822FC2C8;
	sub_826AD630(ctx, base);
	// stw r3,-27864(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27864, ctx.r3.u32);
	// bl 0x826ad6f0
	ctx.lr = 0x822FC2D0;
	sub_826AD6F0(ctx, base);
loc_822FC2D0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27928(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27928);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc2f0
	if (!ctx.cr6.eq) goto loc_822FC2F0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82697e80
	ctx.lr = 0x822FC2E8;
	sub_82697E80(ctx, base);
	// stw r3,-27928(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27928, ctx.r3.u32);
	// bl 0x82697f40
	ctx.lr = 0x822FC2F0;
	sub_82697F40(ctx, base);
loc_822FC2F0:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,27776
	ctx.r7.s64 = ctx.r10.s64 + 27776;
	// lwz r11,-27924(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27924);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fc32c
	if (!ctx.cr6.eq) goto loc_822FC32C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826980b0
	ctx.lr = 0x822FC324;
	sub_826980B0(ctx, base);
	// stw r3,-27924(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27924, ctx.r3.u32);
	// bl 0x82698170
	ctx.lr = 0x822FC32C;
	sub_82698170(ctx, base);
loc_822FC32C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,27896
	ctx.r7.s64 = ctx.r10.s64 + 27896;
	// lwz r11,-27988(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27988);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fc368
	if (!ctx.cr6.eq) goto loc_822FC368;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82679408
	ctx.lr = 0x822FC360;
	sub_82679408(ctx, base);
	// stw r3,-27988(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27988, ctx.r3.u32);
	// bl 0x826794b8
	ctx.lr = 0x822FC368;
	sub_826794B8(ctx, base);
loc_822FC368:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26164(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26164);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc388
	if (!ctx.cr6.eq) goto loc_822FC388;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827c0ee0
	ctx.lr = 0x822FC380;
	sub_827C0EE0(ctx, base);
	// stw r3,-26164(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26164, ctx.r3.u32);
	// bl 0x827c0fa0
	ctx.lr = 0x822FC388;
	sub_827C0FA0(ctx, base);
loc_822FC388:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27488(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27488);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc3a8
	if (!ctx.cr6.eq) goto loc_822FC3A8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8270ba88
	ctx.lr = 0x822FC3A0;
	sub_8270BA88(ctx, base);
	// stw r3,-27488(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27488, ctx.r3.u32);
	// bl 0x8270bb48
	ctx.lr = 0x822FC3A8;
	sub_8270BB48(ctx, base);
loc_822FC3A8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,28016
	ctx.r7.s64 = ctx.r10.s64 + 28016;
	// lwz r11,-29712(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29712);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fc3e4
	if (!ctx.cr6.eq) goto loc_822FC3E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82536f88
	ctx.lr = 0x822FC3DC;
	sub_82536F88(ctx, base);
	// stw r3,-29712(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29712, ctx.r3.u32);
	// bl 0x82537048
	ctx.lr = 0x822FC3E4;
	sub_82537048(ctx, base);
loc_822FC3E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29708(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29708);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc404
	if (!ctx.cr6.eq) goto loc_822FC404;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825371b0
	ctx.lr = 0x822FC3FC;
	sub_825371B0(ctx, base);
	// stw r3,-29708(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29708, ctx.r3.u32);
	// bl 0x82537270
	ctx.lr = 0x822FC404;
	sub_82537270(ctx, base);
loc_822FC404:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29704(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29704);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc424
	if (!ctx.cr6.eq) goto loc_822FC424;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825373e0
	ctx.lr = 0x822FC41C;
	sub_825373E0(ctx, base);
	// stw r3,-29704(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29704, ctx.r3.u32);
	// bl 0x825374a0
	ctx.lr = 0x822FC424;
	sub_825374A0(ctx, base);
loc_822FC424:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29700(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29700);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc444
	if (!ctx.cr6.eq) goto loc_822FC444;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82537608
	ctx.lr = 0x822FC43C;
	sub_82537608(ctx, base);
	// stw r3,-29700(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29700, ctx.r3.u32);
	// bl 0x825376c8
	ctx.lr = 0x822FC444;
	sub_825376C8(ctx, base);
loc_822FC444:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29716(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29716);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc464
	if (!ctx.cr6.eq) goto loc_822FC464;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82536d60
	ctx.lr = 0x822FC45C;
	sub_82536D60(ctx, base);
	// stw r3,-29716(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29716, ctx.r3.u32);
	// bl 0x82536e20
	ctx.lr = 0x822FC464;
	sub_82536E20(ctx, base);
loc_822FC464:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,28136
	ctx.r7.s64 = ctx.r10.s64 + 28136;
	// lwz r11,-27920(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27920);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fc4a0
	if (!ctx.cr6.eq) goto loc_822FC4A0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a19d8
	ctx.lr = 0x822FC498;
	sub_826A19D8(ctx, base);
	// stw r3,-27920(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27920, ctx.r3.u32);
	// bl 0x826a1a98
	ctx.lr = 0x822FC4A0;
	sub_826A1A98(ctx, base);
loc_822FC4A0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27812(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27812);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc4c0
	if (!ctx.cr6.eq) goto loc_822FC4C0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b7488
	ctx.lr = 0x822FC4B8;
	sub_826B7488(ctx, base);
	// stw r3,-27812(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27812, ctx.r3.u32);
	// bl 0x826b7548
	ctx.lr = 0x822FC4C0;
	sub_826B7548(ctx, base);
loc_822FC4C0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27816(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27816);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc4e0
	if (!ctx.cr6.eq) goto loc_822FC4E0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b70a0
	ctx.lr = 0x822FC4D8;
	sub_826B70A0(ctx, base);
	// stw r3,-27816(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27816, ctx.r3.u32);
	// bl 0x826b7160
	ctx.lr = 0x822FC4E0;
	sub_826B7160(ctx, base);
loc_822FC4E0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27844(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27844);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc500
	if (!ctx.cr6.eq) goto loc_822FC500;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b5d48
	ctx.lr = 0x822FC4F8;
	sub_826B5D48(ctx, base);
	// stw r3,-27844(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27844, ctx.r3.u32);
	// bl 0x826b5e08
	ctx.lr = 0x822FC500;
	sub_826B5E08(ctx, base);
loc_822FC500:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27848(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27848);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc520
	if (!ctx.cr6.eq) goto loc_822FC520;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b5b18
	ctx.lr = 0x822FC518;
	sub_826B5B18(ctx, base);
	// stw r3,-27848(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27848, ctx.r3.u32);
	// bl 0x826b5bd8
	ctx.lr = 0x822FC520;
	sub_826B5BD8(ctx, base);
loc_822FC520:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27836(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27836);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc540
	if (!ctx.cr6.eq) goto loc_822FC540;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b6210
	ctx.lr = 0x822FC538;
	sub_826B6210(ctx, base);
	// stw r3,-27836(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27836, ctx.r3.u32);
	// bl 0x826b62d0
	ctx.lr = 0x822FC540;
	sub_826B62D0(ctx, base);
loc_822FC540:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27840(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27840);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc560
	if (!ctx.cr6.eq) goto loc_822FC560;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b5fe0
	ctx.lr = 0x822FC558;
	sub_826B5FE0(ctx, base);
	// stw r3,-27840(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27840, ctx.r3.u32);
	// bl 0x826b60a0
	ctx.lr = 0x822FC560;
	sub_826B60A0(ctx, base);
loc_822FC560:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27852(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc580
	if (!ctx.cr6.eq) goto loc_822FC580;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b5120
	ctx.lr = 0x822FC578;
	sub_826B5120(ctx, base);
	// stw r3,-27852(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27852, ctx.r3.u32);
	// bl 0x826b51e0
	ctx.lr = 0x822FC580;
	sub_826B51E0(ctx, base);
loc_822FC580:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,28256
	ctx.r7.s64 = ctx.r10.s64 + 28256;
	// lwz r11,-27856(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27856);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fc5bc
	if (!ctx.cr6.eq) goto loc_822FC5BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b4ef0
	ctx.lr = 0x822FC5B4;
	sub_826B4EF0(ctx, base);
	// stw r3,-27856(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27856, ctx.r3.u32);
	// bl 0x826b4fb0
	ctx.lr = 0x822FC5BC;
	sub_826B4FB0(ctx, base);
loc_822FC5BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27828(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27828);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc5dc
	if (!ctx.cr6.eq) goto loc_822FC5DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b66e8
	ctx.lr = 0x822FC5D4;
	sub_826B66E8(ctx, base);
	// stw r3,-27828(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27828, ctx.r3.u32);
	// bl 0x826b67a8
	ctx.lr = 0x822FC5DC;
	sub_826B67A8(ctx, base);
loc_822FC5DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27832(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27832);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc5fc
	if (!ctx.cr6.eq) goto loc_822FC5FC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b64b8
	ctx.lr = 0x822FC5F4;
	sub_826B64B8(ctx, base);
	// stw r3,-27832(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27832, ctx.r3.u32);
	// bl 0x826b6578
	ctx.lr = 0x822FC5FC;
	sub_826B6578(ctx, base);
loc_822FC5FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27820(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27820);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc61c
	if (!ctx.cr6.eq) goto loc_822FC61C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b6d90
	ctx.lr = 0x822FC614;
	sub_826B6D90(ctx, base);
	// stw r3,-27820(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27820, ctx.r3.u32);
	// bl 0x826b6e50
	ctx.lr = 0x822FC61C;
	sub_826B6E50(ctx, base);
loc_822FC61C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27824(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27824);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc63c
	if (!ctx.cr6.eq) goto loc_822FC63C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b6a70
	ctx.lr = 0x822FC634;
	sub_826B6A70(ctx, base);
	// stw r3,-27824(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27824, ctx.r3.u32);
	// bl 0x826b6b30
	ctx.lr = 0x822FC63C;
	sub_826B6B30(ctx, base);
loc_822FC63C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30200(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30200);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc65c
	if (!ctx.cr6.eq) goto loc_822FC65C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824d4970
	ctx.lr = 0x822FC654;
	sub_824D4970(ctx, base);
	// stw r3,-30200(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30200, ctx.r3.u32);
	// bl 0x824d4a30
	ctx.lr = 0x822FC65C;
	sub_824D4A30(ctx, base);
loc_822FC65C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30196(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30196);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc67c
	if (!ctx.cr6.eq) goto loc_822FC67C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824d4ba8
	ctx.lr = 0x822FC674;
	sub_824D4BA8(ctx, base);
	// stw r3,-30196(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30196, ctx.r3.u32);
	// bl 0x824d4c68
	ctx.lr = 0x822FC67C;
	sub_824D4C68(ctx, base);
loc_822FC67C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30192(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30192);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc69c
	if (!ctx.cr6.eq) goto loc_822FC69C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824d4f68
	ctx.lr = 0x822FC694;
	sub_824D4F68(ctx, base);
	// stw r3,-30192(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30192, ctx.r3.u32);
	// bl 0x824d5028
	ctx.lr = 0x822FC69C;
	sub_824D5028(ctx, base);
loc_822FC69C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30364(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30364);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc6bc
	if (!ctx.cr6.eq) goto loc_822FC6BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cb330
	ctx.lr = 0x822FC6B4;
	sub_824CB330(ctx, base);
	// stw r3,-30364(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30364, ctx.r3.u32);
	// bl 0x824cb3f0
	ctx.lr = 0x822FC6BC;
	sub_824CB3F0(ctx, base);
loc_822FC6BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30356(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30356);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc6dc
	if (!ctx.cr6.eq) goto loc_822FC6DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cb780
	ctx.lr = 0x822FC6D4;
	sub_824CB780(ctx, base);
	// stw r3,-30356(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30356, ctx.r3.u32);
	// bl 0x824cb840
	ctx.lr = 0x822FC6DC;
	sub_824CB840(ctx, base);
loc_822FC6DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30360(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30360);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc6fc
	if (!ctx.cr6.eq) goto loc_822FC6FC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cb558
	ctx.lr = 0x822FC6F4;
	sub_824CB558(ctx, base);
	// stw r3,-30360(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30360, ctx.r3.u32);
	// bl 0x824cb618
	ctx.lr = 0x822FC6FC;
	sub_824CB618(ctx, base);
loc_822FC6FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30352(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30352);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc71c
	if (!ctx.cr6.eq) goto loc_822FC71C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cb9b0
	ctx.lr = 0x822FC714;
	sub_824CB9B0(ctx, base);
	// stw r3,-30352(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30352, ctx.r3.u32);
	// bl 0x824cba70
	ctx.lr = 0x822FC71C;
	sub_824CBA70(ctx, base);
loc_822FC71C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30260(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc73c
	if (!ctx.cr6.eq) goto loc_822FC73C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cebf0
	ctx.lr = 0x822FC734;
	sub_824CEBF0(ctx, base);
	// stw r3,-30260(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30260, ctx.r3.u32);
	// bl 0x824cecb0
	ctx.lr = 0x822FC73C;
	sub_824CECB0(ctx, base);
loc_822FC73C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30204(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30204);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc75c
	if (!ctx.cr6.eq) goto loc_822FC75C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824d0a90
	ctx.lr = 0x822FC754;
	sub_824D0A90(ctx, base);
	// stw r3,-30204(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30204, ctx.r3.u32);
	// bl 0x824d0b50
	ctx.lr = 0x822FC75C;
	sub_824D0B50(ctx, base);
loc_822FC75C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30300(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30300);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc77c
	if (!ctx.cr6.eq) goto loc_822FC77C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cd610
	ctx.lr = 0x822FC774;
	sub_824CD610(ctx, base);
	// stw r3,-30300(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30300, ctx.r3.u32);
	// bl 0x824cd6d0
	ctx.lr = 0x822FC77C;
	sub_824CD6D0(ctx, base);
loc_822FC77C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30220(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30220);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc79c
	if (!ctx.cr6.eq) goto loc_822FC79C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824d01d0
	ctx.lr = 0x822FC794;
	sub_824D01D0(ctx, base);
	// stw r3,-30220(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30220, ctx.r3.u32);
	// bl 0x824d0290
	ctx.lr = 0x822FC79C;
	sub_824D0290(ctx, base);
loc_822FC79C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30284(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30284);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc7bc
	if (!ctx.cr6.eq) goto loc_822FC7BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cded0
	ctx.lr = 0x822FC7B4;
	sub_824CDED0(ctx, base);
	// stw r3,-30284(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30284, ctx.r3.u32);
	// bl 0x824cdf90
	ctx.lr = 0x822FC7BC;
	sub_824CDF90(ctx, base);
loc_822FC7BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30292(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30292);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc7dc
	if (!ctx.cr6.eq) goto loc_822FC7DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cda70
	ctx.lr = 0x822FC7D4;
	sub_824CDA70(ctx, base);
	// stw r3,-30292(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30292, ctx.r3.u32);
	// bl 0x824cdb30
	ctx.lr = 0x822FC7DC;
	sub_824CDB30(ctx, base);
loc_822FC7DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30212(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30212);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc7fc
	if (!ctx.cr6.eq) goto loc_822FC7FC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824d0630
	ctx.lr = 0x822FC7F4;
	sub_824D0630(ctx, base);
	// stw r3,-30212(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30212, ctx.r3.u32);
	// bl 0x824d06f0
	ctx.lr = 0x822FC7FC;
	sub_824D06F0(ctx, base);
loc_822FC7FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30276(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30276);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc81c
	if (!ctx.cr6.eq) goto loc_822FC81C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ce330
	ctx.lr = 0x822FC814;
	sub_824CE330(ctx, base);
	// stw r3,-30276(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30276, ctx.r3.u32);
	// bl 0x824ce3f0
	ctx.lr = 0x822FC81C;
	sub_824CE3F0(ctx, base);
loc_822FC81C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30324(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30324);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc83c
	if (!ctx.cr6.eq) goto loc_822FC83C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cc8f0
	ctx.lr = 0x822FC834;
	sub_824CC8F0(ctx, base);
	// stw r3,-30324(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30324, ctx.r3.u32);
	// bl 0x824cc9b0
	ctx.lr = 0x822FC83C;
	sub_824CC9B0(ctx, base);
loc_822FC83C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30236(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30236);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc85c
	if (!ctx.cr6.eq) goto loc_822FC85C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cf910
	ctx.lr = 0x822FC854;
	sub_824CF910(ctx, base);
	// stw r3,-30236(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30236, ctx.r3.u32);
	// bl 0x824cf9d0
	ctx.lr = 0x822FC85C;
	sub_824CF9D0(ctx, base);
loc_822FC85C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30244(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc87c
	if (!ctx.cr6.eq) goto loc_822FC87C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cf4b0
	ctx.lr = 0x822FC874;
	sub_824CF4B0(ctx, base);
	// stw r3,-30244(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30244, ctx.r3.u32);
	// bl 0x824cf570
	ctx.lr = 0x822FC87C;
	sub_824CF570(ctx, base);
loc_822FC87C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30316(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30316);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc89c
	if (!ctx.cr6.eq) goto loc_822FC89C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ccd50
	ctx.lr = 0x822FC894;
	sub_824CCD50(ctx, base);
	// stw r3,-30316(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30316, ctx.r3.u32);
	// bl 0x824cce10
	ctx.lr = 0x822FC89C;
	sub_824CCE10(ctx, base);
loc_822FC89C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30344(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc8bc
	if (!ctx.cr6.eq) goto loc_822FC8BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cbe08
	ctx.lr = 0x822FC8B4;
	sub_824CBE08(ctx, base);
	// stw r3,-30344(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30344, ctx.r3.u32);
	// bl 0x824cbec8
	ctx.lr = 0x822FC8BC;
	sub_824CBEC8(ctx, base);
loc_822FC8BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30256(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30256);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc8dc
	if (!ctx.cr6.eq) goto loc_822FC8DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cee20
	ctx.lr = 0x822FC8D4;
	sub_824CEE20(ctx, base);
	// stw r3,-30256(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30256, ctx.r3.u32);
	// bl 0x824ceee0
	ctx.lr = 0x822FC8DC;
	sub_824CEEE0(ctx, base);
loc_822FC8DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30296(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30296);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc8fc
	if (!ctx.cr6.eq) goto loc_822FC8FC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cd840
	ctx.lr = 0x822FC8F4;
	sub_824CD840(ctx, base);
	// stw r3,-30296(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30296, ctx.r3.u32);
	// bl 0x824cd900
	ctx.lr = 0x822FC8FC;
	sub_824CD900(ctx, base);
loc_822FC8FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30216(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30216);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc91c
	if (!ctx.cr6.eq) goto loc_822FC91C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824d0400
	ctx.lr = 0x822FC914;
	sub_824D0400(ctx, base);
	// stw r3,-30216(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30216, ctx.r3.u32);
	// bl 0x824d04c0
	ctx.lr = 0x822FC91C;
	sub_824D04C0(ctx, base);
loc_822FC91C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30280(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30280);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc93c
	if (!ctx.cr6.eq) goto loc_822FC93C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ce100
	ctx.lr = 0x822FC934;
	sub_824CE100(ctx, base);
	// stw r3,-30280(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30280, ctx.r3.u32);
	// bl 0x824ce1c0
	ctx.lr = 0x822FC93C;
	sub_824CE1C0(ctx, base);
loc_822FC93C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30288(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30288);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc95c
	if (!ctx.cr6.eq) goto loc_822FC95C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cdca0
	ctx.lr = 0x822FC954;
	sub_824CDCA0(ctx, base);
	// stw r3,-30288(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30288, ctx.r3.u32);
	// bl 0x824cdd60
	ctx.lr = 0x822FC95C;
	sub_824CDD60(ctx, base);
loc_822FC95C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30208(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30208);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc97c
	if (!ctx.cr6.eq) goto loc_822FC97C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824d0860
	ctx.lr = 0x822FC974;
	sub_824D0860(ctx, base);
	// stw r3,-30208(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30208, ctx.r3.u32);
	// bl 0x824d0920
	ctx.lr = 0x822FC97C;
	sub_824D0920(ctx, base);
loc_822FC97C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30272(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30272);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc99c
	if (!ctx.cr6.eq) goto loc_822FC99C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ce560
	ctx.lr = 0x822FC994;
	sub_824CE560(ctx, base);
	// stw r3,-30272(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30272, ctx.r3.u32);
	// bl 0x824ce620
	ctx.lr = 0x822FC99C;
	sub_824CE620(ctx, base);
loc_822FC99C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30232(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30232);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc9bc
	if (!ctx.cr6.eq) goto loc_822FC9BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cfb40
	ctx.lr = 0x822FC9B4;
	sub_824CFB40(ctx, base);
	// stw r3,-30232(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30232, ctx.r3.u32);
	// bl 0x824cfc00
	ctx.lr = 0x822FC9BC;
	sub_824CFC00(ctx, base);
loc_822FC9BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30240(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30240);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc9dc
	if (!ctx.cr6.eq) goto loc_822FC9DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cf6e0
	ctx.lr = 0x822FC9D4;
	sub_824CF6E0(ctx, base);
	// stw r3,-30240(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30240, ctx.r3.u32);
	// bl 0x824cf7a0
	ctx.lr = 0x822FC9DC;
	sub_824CF7A0(ctx, base);
loc_822FC9DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30312(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30312);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fc9fc
	if (!ctx.cr6.eq) goto loc_822FC9FC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ccf80
	ctx.lr = 0x822FC9F4;
	sub_824CCF80(ctx, base);
	// stw r3,-30312(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30312, ctx.r3.u32);
	// bl 0x824cd040
	ctx.lr = 0x822FC9FC;
	sub_824CD040(ctx, base);
loc_822FC9FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30336(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30336);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fca1c
	if (!ctx.cr6.eq) goto loc_822FCA1C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cc260
	ctx.lr = 0x822FCA14;
	sub_824CC260(ctx, base);
	// stw r3,-30336(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30336, ctx.r3.u32);
	// bl 0x824cc320
	ctx.lr = 0x822FCA1C;
	sub_824CC320(ctx, base);
loc_822FCA1C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30264(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30264);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fca3c
	if (!ctx.cr6.eq) goto loc_822FCA3C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ce9c0
	ctx.lr = 0x822FCA34;
	sub_824CE9C0(ctx, base);
	// stw r3,-30264(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30264, ctx.r3.u32);
	// bl 0x824cea80
	ctx.lr = 0x822FCA3C;
	sub_824CEA80(ctx, base);
loc_822FCA3C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30248(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30248);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fca5c
	if (!ctx.cr6.eq) goto loc_822FCA5C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cf280
	ctx.lr = 0x822FCA54;
	sub_824CF280(ctx, base);
	// stw r3,-30248(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30248, ctx.r3.u32);
	// bl 0x824cf340
	ctx.lr = 0x822FCA5C;
	sub_824CF340(ctx, base);
loc_822FCA5C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30328(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30328);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fca7c
	if (!ctx.cr6.eq) goto loc_822FCA7C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cc6c0
	ctx.lr = 0x822FCA74;
	sub_824CC6C0(ctx, base);
	// stw r3,-30328(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30328, ctx.r3.u32);
	// bl 0x824cc780
	ctx.lr = 0x822FCA7C;
	sub_824CC780(ctx, base);
loc_822FCA7C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30224(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30224);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fca9c
	if (!ctx.cr6.eq) goto loc_822FCA9C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cffa0
	ctx.lr = 0x822FCA94;
	sub_824CFFA0(ctx, base);
	// stw r3,-30224(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30224, ctx.r3.u32);
	// bl 0x824d0060
	ctx.lr = 0x822FCA9C;
	sub_824D0060(ctx, base);
loc_822FCA9C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30304(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30304);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcabc
	if (!ctx.cr6.eq) goto loc_822FCABC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cd3e0
	ctx.lr = 0x822FCAB4;
	sub_824CD3E0(ctx, base);
	// stw r3,-30304(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30304, ctx.r3.u32);
	// bl 0x824cd4a0
	ctx.lr = 0x822FCABC;
	sub_824CD4A0(ctx, base);
loc_822FCABC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30340(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30340);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcadc
	if (!ctx.cr6.eq) goto loc_822FCADC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cc030
	ctx.lr = 0x822FCAD4;
	sub_824CC030(ctx, base);
	// stw r3,-30340(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30340, ctx.r3.u32);
	// bl 0x824cc0f0
	ctx.lr = 0x822FCADC;
	sub_824CC0F0(ctx, base);
loc_822FCADC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30268(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30268);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcafc
	if (!ctx.cr6.eq) goto loc_822FCAFC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ce790
	ctx.lr = 0x822FCAF4;
	sub_824CE790(ctx, base);
	// stw r3,-30268(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30268, ctx.r3.u32);
	// bl 0x824ce850
	ctx.lr = 0x822FCAFC;
	sub_824CE850(ctx, base);
loc_822FCAFC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30252(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30252);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcb1c
	if (!ctx.cr6.eq) goto loc_822FCB1C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cf050
	ctx.lr = 0x822FCB14;
	sub_824CF050(ctx, base);
	// stw r3,-30252(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30252, ctx.r3.u32);
	// bl 0x824cf110
	ctx.lr = 0x822FCB1C;
	sub_824CF110(ctx, base);
loc_822FCB1C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30332(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30332);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcb3c
	if (!ctx.cr6.eq) goto loc_822FCB3C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cc490
	ctx.lr = 0x822FCB34;
	sub_824CC490(ctx, base);
	// stw r3,-30332(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30332, ctx.r3.u32);
	// bl 0x824cc550
	ctx.lr = 0x822FCB3C;
	sub_824CC550(ctx, base);
loc_822FCB3C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30320(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30320);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcb5c
	if (!ctx.cr6.eq) goto loc_822FCB5C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ccb20
	ctx.lr = 0x822FCB54;
	sub_824CCB20(ctx, base);
	// stw r3,-30320(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30320, ctx.r3.u32);
	// bl 0x824ccbe0
	ctx.lr = 0x822FCB5C;
	sub_824CCBE0(ctx, base);
loc_822FCB5C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30228);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcb7c
	if (!ctx.cr6.eq) goto loc_822FCB7C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cfd70
	ctx.lr = 0x822FCB74;
	sub_824CFD70(ctx, base);
	// stw r3,-30228(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30228, ctx.r3.u32);
	// bl 0x824cfe30
	ctx.lr = 0x822FCB7C;
	sub_824CFE30(ctx, base);
loc_822FCB7C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30308(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30308);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcb9c
	if (!ctx.cr6.eq) goto loc_822FCB9C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cd1b0
	ctx.lr = 0x822FCB94;
	sub_824CD1B0(ctx, base);
	// stw r3,-30308(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30308, ctx.r3.u32);
	// bl 0x824cd270
	ctx.lr = 0x822FCB9C;
	sub_824CD270(ctx, base);
loc_822FCB9C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31076(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31076);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcbbc
	if (!ctx.cr6.eq) goto loc_822FCBBC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82441d38
	ctx.lr = 0x822FCBB4;
	sub_82441D38(ctx, base);
	// stw r3,-31076(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31076, ctx.r3.u32);
	// bl 0x82441df8
	ctx.lr = 0x822FCBBC;
	sub_82441DF8(ctx, base);
loc_822FCBBC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31172(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31172);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcbdc
	if (!ctx.cr6.eq) goto loc_822FCBDC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243e8b8
	ctx.lr = 0x822FCBD4;
	sub_8243E8B8(ctx, base);
	// stw r3,-31172(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31172, ctx.r3.u32);
	// bl 0x8243e978
	ctx.lr = 0x822FCBDC;
	sub_8243E978(ctx, base);
loc_822FCBDC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31092(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31092);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcbfc
	if (!ctx.cr6.eq) goto loc_822FCBFC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82441478
	ctx.lr = 0x822FCBF4;
	sub_82441478(ctx, base);
	// stw r3,-31092(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31092, ctx.r3.u32);
	// bl 0x82441538
	ctx.lr = 0x822FCBFC;
	sub_82441538(ctx, base);
loc_822FCBFC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31096(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31096);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcc1c
	if (!ctx.cr6.eq) goto loc_822FCC1C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82441248
	ctx.lr = 0x822FCC14;
	sub_82441248(ctx, base);
	// stw r3,-31096(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31096, ctx.r3.u32);
	// bl 0x82441308
	ctx.lr = 0x822FCC1C;
	sub_82441308(ctx, base);
loc_822FCC1C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31120(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31120);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcc3c
	if (!ctx.cr6.eq) goto loc_822FCC3C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82440528
	ctx.lr = 0x822FCC34;
	sub_82440528(ctx, base);
	// stw r3,-31120(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31120, ctx.r3.u32);
	// bl 0x824405e8
	ctx.lr = 0x822FCC3C;
	sub_824405E8(ctx, base);
loc_822FCC3C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31084(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31084);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcc5c
	if (!ctx.cr6.eq) goto loc_822FCC5C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824418d8
	ctx.lr = 0x822FCC54;
	sub_824418D8(ctx, base);
	// stw r3,-31084(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31084, ctx.r3.u32);
	// bl 0x82441998
	ctx.lr = 0x822FCC5C;
	sub_82441998(ctx, base);
loc_822FCC5C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31144(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31144);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcc7c
	if (!ctx.cr6.eq) goto loc_822FCC7C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243f808
	ctx.lr = 0x822FCC74;
	sub_8243F808(ctx, base);
	// stw r3,-31144(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31144, ctx.r3.u32);
	// bl 0x8243f8c8
	ctx.lr = 0x822FCC7C;
	sub_8243F8C8(ctx, base);
loc_822FCC7C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30936(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30936);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcc9c
	if (!ctx.cr6.eq) goto loc_822FCC9C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824469c8
	ctx.lr = 0x822FCC94;
	sub_824469C8(ctx, base);
	// stw r3,-30936(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30936, ctx.r3.u32);
	// bl 0x82446a88
	ctx.lr = 0x822FCC9C;
	sub_82446A88(ctx, base);
loc_822FCC9C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30924(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30924);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fccbc
	if (!ctx.cr6.eq) goto loc_822FCCBC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82447058
	ctx.lr = 0x822FCCB4;
	sub_82447058(ctx, base);
	// stw r3,-30924(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30924, ctx.r3.u32);
	// bl 0x82447118
	ctx.lr = 0x822FCCBC;
	sub_82447118(ctx, base);
loc_822FCCBC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30916(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30916);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fccdc
	if (!ctx.cr6.eq) goto loc_822FCCDC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824474b8
	ctx.lr = 0x822FCCD4;
	sub_824474B8(ctx, base);
	// stw r3,-30916(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30916, ctx.r3.u32);
	// bl 0x82447578
	ctx.lr = 0x822FCCDC;
	sub_82447578(ctx, base);
loc_822FCCDC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30956(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30956);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fccfc
	if (!ctx.cr6.eq) goto loc_822FCCFC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82445ed8
	ctx.lr = 0x822FCCF4;
	sub_82445ED8(ctx, base);
	// stw r3,-30956(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30956, ctx.r3.u32);
	// bl 0x82445f98
	ctx.lr = 0x822FCCFC;
	sub_82445F98(ctx, base);
loc_822FCCFC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31160(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31160);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcd1c
	if (!ctx.cr6.eq) goto loc_822FCD1C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243ef48
	ctx.lr = 0x822FCD14;
	sub_8243EF48(ctx, base);
	// stw r3,-31160(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31160, ctx.r3.u32);
	// bl 0x8243f008
	ctx.lr = 0x822FCD1C;
	sub_8243F008(ctx, base);
loc_822FCD1C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30952(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30952);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcd3c
	if (!ctx.cr6.eq) goto loc_822FCD3C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82446108
	ctx.lr = 0x822FCD34;
	sub_82446108(ctx, base);
	// stw r3,-30952(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30952, ctx.r3.u32);
	// bl 0x824461c8
	ctx.lr = 0x822FCD3C;
	sub_824461C8(ctx, base);
loc_822FCD3C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31140(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31140);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcd5c
	if (!ctx.cr6.eq) goto loc_822FCD5C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243fa38
	ctx.lr = 0x822FCD54;
	sub_8243FA38(ctx, base);
	// stw r3,-31140(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31140, ctx.r3.u32);
	// bl 0x8243faf8
	ctx.lr = 0x822FCD5C;
	sub_8243FAF8(ctx, base);
loc_822FCD5C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31136(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31136);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcd7c
	if (!ctx.cr6.eq) goto loc_822FCD7C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243fc68
	ctx.lr = 0x822FCD74;
	sub_8243FC68(ctx, base);
	// stw r3,-31136(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31136, ctx.r3.u32);
	// bl 0x8243fd28
	ctx.lr = 0x822FCD7C;
	sub_8243FD28(ctx, base);
loc_822FCD7C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31132(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31132);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcd9c
	if (!ctx.cr6.eq) goto loc_822FCD9C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243fe98
	ctx.lr = 0x822FCD94;
	sub_8243FE98(ctx, base);
	// stw r3,-31132(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31132, ctx.r3.u32);
	// bl 0x8243ff58
	ctx.lr = 0x822FCD9C;
	sub_8243FF58(ctx, base);
loc_822FCD9C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31128(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31128);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcdbc
	if (!ctx.cr6.eq) goto loc_822FCDBC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824400c8
	ctx.lr = 0x822FCDB4;
	sub_824400C8(ctx, base);
	// stw r3,-31128(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31128, ctx.r3.u32);
	// bl 0x82440188
	ctx.lr = 0x822FCDBC;
	sub_82440188(ctx, base);
loc_822FCDBC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31148(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31148);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcddc
	if (!ctx.cr6.eq) goto loc_822FCDDC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243f5d8
	ctx.lr = 0x822FCDD4;
	sub_8243F5D8(ctx, base);
	// stw r3,-31148(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31148, ctx.r3.u32);
	// bl 0x8243f698
	ctx.lr = 0x822FCDDC;
	sub_8243F698(ctx, base);
loc_822FCDDC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31100);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcdfc
	if (!ctx.cr6.eq) goto loc_822FCDFC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82441018
	ctx.lr = 0x822FCDF4;
	sub_82441018(ctx, base);
	// stw r3,-31100(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31100, ctx.r3.u32);
	// bl 0x824410d8
	ctx.lr = 0x822FCDFC;
	sub_824410D8(ctx, base);
loc_822FCDFC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31152(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31152);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fce1c
	if (!ctx.cr6.eq) goto loc_822FCE1C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243f3a8
	ctx.lr = 0x822FCE14;
	sub_8243F3A8(ctx, base);
	// stw r3,-31152(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31152, ctx.r3.u32);
	// bl 0x8243f468
	ctx.lr = 0x822FCE1C;
	sub_8243F468(ctx, base);
loc_822FCE1C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30920(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30920);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fce3c
	if (!ctx.cr6.eq) goto loc_822FCE3C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82447288
	ctx.lr = 0x822FCE34;
	sub_82447288(ctx, base);
	// stw r3,-30920(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30920, ctx.r3.u32);
	// bl 0x82447348
	ctx.lr = 0x822FCE3C;
	sub_82447348(ctx, base);
loc_822FCE3C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31072(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31072);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fce5c
	if (!ctx.cr6.eq) goto loc_822FCE5C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82441f68
	ctx.lr = 0x822FCE54;
	sub_82441F68(ctx, base);
	// stw r3,-31072(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31072, ctx.r3.u32);
	// bl 0x82442028
	ctx.lr = 0x822FCE5C;
	sub_82442028(ctx, base);
loc_822FCE5C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31068(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31068);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fce7c
	if (!ctx.cr6.eq) goto loc_822FCE7C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82442198
	ctx.lr = 0x822FCE74;
	sub_82442198(ctx, base);
	// stw r3,-31068(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31068, ctx.r3.u32);
	// bl 0x82442258
	ctx.lr = 0x822FCE7C;
	sub_82442258(ctx, base);
loc_822FCE7C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31064(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31064);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fce9c
	if (!ctx.cr6.eq) goto loc_822FCE9C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824423c8
	ctx.lr = 0x822FCE94;
	sub_824423C8(ctx, base);
	// stw r3,-31064(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31064, ctx.r3.u32);
	// bl 0x82442488
	ctx.lr = 0x822FCE9C;
	sub_82442488(ctx, base);
loc_822FCE9C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31060(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31060);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcebc
	if (!ctx.cr6.eq) goto loc_822FCEBC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824425f8
	ctx.lr = 0x822FCEB4;
	sub_824425F8(ctx, base);
	// stw r3,-31060(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31060, ctx.r3.u32);
	// bl 0x824426b8
	ctx.lr = 0x822FCEBC;
	sub_824426B8(ctx, base);
loc_822FCEBC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30992(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30992);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcedc
	if (!ctx.cr6.eq) goto loc_822FCEDC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82444b28
	ctx.lr = 0x822FCED4;
	sub_82444B28(ctx, base);
	// stw r3,-30992(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30992, ctx.r3.u32);
	// bl 0x82444be8
	ctx.lr = 0x822FCEDC;
	sub_82444BE8(ctx, base);
loc_822FCEDC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30988(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30988);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcefc
	if (!ctx.cr6.eq) goto loc_822FCEFC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82444d58
	ctx.lr = 0x822FCEF4;
	sub_82444D58(ctx, base);
	// stw r3,-30988(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30988, ctx.r3.u32);
	// bl 0x82444e18
	ctx.lr = 0x822FCEFC;
	sub_82444E18(ctx, base);
loc_822FCEFC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31184(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31184);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcf1c
	if (!ctx.cr6.eq) goto loc_822FCF1C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243e228
	ctx.lr = 0x822FCF14;
	sub_8243E228(ctx, base);
	// stw r3,-31184(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31184, ctx.r3.u32);
	// bl 0x8243e2e8
	ctx.lr = 0x822FCF1C;
	sub_8243E2E8(ctx, base);
loc_822FCF1C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31156(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31156);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcf3c
	if (!ctx.cr6.eq) goto loc_822FCF3C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243f178
	ctx.lr = 0x822FCF34;
	sub_8243F178(ctx, base);
	// stw r3,-31156(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31156, ctx.r3.u32);
	// bl 0x8243f238
	ctx.lr = 0x822FCF3C;
	sub_8243F238(ctx, base);
loc_822FCF3C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31008(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31008);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcf5c
	if (!ctx.cr6.eq) goto loc_822FCF5C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82444268
	ctx.lr = 0x822FCF54;
	sub_82444268(ctx, base);
	// stw r3,-31008(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31008, ctx.r3.u32);
	// bl 0x82444328
	ctx.lr = 0x822FCF5C;
	sub_82444328(ctx, base);
loc_822FCF5C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31088(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31088);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcf7c
	if (!ctx.cr6.eq) goto loc_822FCF7C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824416a8
	ctx.lr = 0x822FCF74;
	sub_824416A8(ctx, base);
	// stw r3,-31088(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31088, ctx.r3.u32);
	// bl 0x82441768
	ctx.lr = 0x822FCF7C;
	sub_82441768(ctx, base);
loc_822FCF7C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30944(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30944);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcf9c
	if (!ctx.cr6.eq) goto loc_822FCF9C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82446568
	ctx.lr = 0x822FCF94;
	sub_82446568(ctx, base);
	// stw r3,-30944(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30944, ctx.r3.u32);
	// bl 0x82446628
	ctx.lr = 0x822FCF9C;
	sub_82446628(ctx, base);
loc_822FCF9C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30940(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30940);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcfbc
	if (!ctx.cr6.eq) goto loc_822FCFBC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82446798
	ctx.lr = 0x822FCFB4;
	sub_82446798(ctx, base);
	// stw r3,-30940(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30940, ctx.r3.u32);
	// bl 0x82446858
	ctx.lr = 0x822FCFBC;
	sub_82446858(ctx, base);
loc_822FCFBC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31080(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31080);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcfdc
	if (!ctx.cr6.eq) goto loc_822FCFDC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82441b08
	ctx.lr = 0x822FCFD4;
	sub_82441B08(ctx, base);
	// stw r3,-31080(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31080, ctx.r3.u32);
	// bl 0x82441bc8
	ctx.lr = 0x822FCFDC;
	sub_82441BC8(ctx, base);
loc_822FCFDC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30948(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30948);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fcffc
	if (!ctx.cr6.eq) goto loc_822FCFFC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82446338
	ctx.lr = 0x822FCFF4;
	sub_82446338(ctx, base);
	// stw r3,-30948(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30948, ctx.r3.u32);
	// bl 0x824463f8
	ctx.lr = 0x822FCFFC;
	sub_824463F8(ctx, base);
loc_822FCFFC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30976(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30976);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd01c
	if (!ctx.cr6.eq) goto loc_822FD01C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824453e8
	ctx.lr = 0x822FD014;
	sub_824453E8(ctx, base);
	// stw r3,-30976(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30976, ctx.r3.u32);
	// bl 0x824454a8
	ctx.lr = 0x822FD01C;
	sub_824454A8(ctx, base);
loc_822FD01C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31004(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31004);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd03c
	if (!ctx.cr6.eq) goto loc_822FD03C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82444498
	ctx.lr = 0x822FD034;
	sub_82444498(ctx, base);
	// stw r3,-31004(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31004, ctx.r3.u32);
	// bl 0x82444558
	ctx.lr = 0x822FD03C;
	sub_82444558(ctx, base);
loc_822FD03C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31176(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31176);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd05c
	if (!ctx.cr6.eq) goto loc_822FD05C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243e688
	ctx.lr = 0x822FD054;
	sub_8243E688(ctx, base);
	// stw r3,-31176(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31176, ctx.r3.u32);
	// bl 0x8243e748
	ctx.lr = 0x822FD05C;
	sub_8243E748(ctx, base);
loc_822FD05C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31192(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31192);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd07c
	if (!ctx.cr6.eq) goto loc_822FD07C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243ddc8
	ctx.lr = 0x822FD074;
	sub_8243DDC8(ctx, base);
	// stw r3,-31192(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31192, ctx.r3.u32);
	// bl 0x8243de88
	ctx.lr = 0x822FD07C;
	sub_8243DE88(ctx, base);
loc_822FD07C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31028(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31028);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd09c
	if (!ctx.cr6.eq) goto loc_822FD09C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82443778
	ctx.lr = 0x822FD094;
	sub_82443778(ctx, base);
	// stw r3,-31028(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31028, ctx.r3.u32);
	// bl 0x82443838
	ctx.lr = 0x822FD09C;
	sub_82443838(ctx, base);
loc_822FD09C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31188(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31188);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd0bc
	if (!ctx.cr6.eq) goto loc_822FD0BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243dff8
	ctx.lr = 0x822FD0B4;
	sub_8243DFF8(ctx, base);
	// stw r3,-31188(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31188, ctx.r3.u32);
	// bl 0x8243e0b8
	ctx.lr = 0x822FD0BC;
	sub_8243E0B8(ctx, base);
loc_822FD0BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31040(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31040);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd0dc
	if (!ctx.cr6.eq) goto loc_822FD0DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824430e8
	ctx.lr = 0x822FD0D4;
	sub_824430E8(ctx, base);
	// stw r3,-31040(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31040, ctx.r3.u32);
	// bl 0x824431a8
	ctx.lr = 0x822FD0DC;
	sub_824431A8(ctx, base);
loc_822FD0DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30972(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30972);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd0fc
	if (!ctx.cr6.eq) goto loc_822FD0FC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82445618
	ctx.lr = 0x822FD0F4;
	sub_82445618(ctx, base);
	// stw r3,-30972(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30972, ctx.r3.u32);
	// bl 0x824456d8
	ctx.lr = 0x822FD0FC;
	sub_824456D8(ctx, base);
loc_822FD0FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31112(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31112);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd11c
	if (!ctx.cr6.eq) goto loc_822FD11C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82440988
	ctx.lr = 0x822FD114;
	sub_82440988(ctx, base);
	// stw r3,-31112(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31112, ctx.r3.u32);
	// bl 0x82440a48
	ctx.lr = 0x822FD11C;
	sub_82440A48(ctx, base);
loc_822FD11C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31056(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31056);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd13c
	if (!ctx.cr6.eq) goto loc_822FD13C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82442828
	ctx.lr = 0x822FD134;
	sub_82442828(ctx, base);
	// stw r3,-31056(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31056, ctx.r3.u32);
	// bl 0x824428e8
	ctx.lr = 0x822FD13C;
	sub_824428E8(ctx, base);
loc_822FD13C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31032(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31032);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd15c
	if (!ctx.cr6.eq) goto loc_822FD15C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82443548
	ctx.lr = 0x822FD154;
	sub_82443548(ctx, base);
	// stw r3,-31032(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31032, ctx.r3.u32);
	// bl 0x82443608
	ctx.lr = 0x822FD15C;
	sub_82443608(ctx, base);
loc_822FD15C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30996(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30996);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd17c
	if (!ctx.cr6.eq) goto loc_822FD17C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824448f8
	ctx.lr = 0x822FD174;
	sub_824448F8(ctx, base);
	// stw r3,-30996(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30996, ctx.r3.u32);
	// bl 0x824449b8
	ctx.lr = 0x822FD17C;
	sub_824449B8(ctx, base);
loc_822FD17C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30984(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30984);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd19c
	if (!ctx.cr6.eq) goto loc_822FD19C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82444f88
	ctx.lr = 0x822FD194;
	sub_82444F88(ctx, base);
	// stw r3,-30984(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30984, ctx.r3.u32);
	// bl 0x82445048
	ctx.lr = 0x822FD19C;
	sub_82445048(ctx, base);
loc_822FD19C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31116(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31116);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd1bc
	if (!ctx.cr6.eq) goto loc_822FD1BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82440758
	ctx.lr = 0x822FD1B4;
	sub_82440758(ctx, base);
	// stw r3,-31116(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31116, ctx.r3.u32);
	// bl 0x82440818
	ctx.lr = 0x822FD1BC;
	sub_82440818(ctx, base);
loc_822FD1BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31108(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31108);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd1dc
	if (!ctx.cr6.eq) goto loc_822FD1DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82440bb8
	ctx.lr = 0x822FD1D4;
	sub_82440BB8(ctx, base);
	// stw r3,-31108(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31108, ctx.r3.u32);
	// bl 0x82440c78
	ctx.lr = 0x822FD1DC;
	sub_82440C78(ctx, base);
loc_822FD1DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31048(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31048);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd1fc
	if (!ctx.cr6.eq) goto loc_822FD1FC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82442c88
	ctx.lr = 0x822FD1F4;
	sub_82442C88(ctx, base);
	// stw r3,-31048(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31048, ctx.r3.u32);
	// bl 0x82442d48
	ctx.lr = 0x822FD1FC;
	sub_82442D48(ctx, base);
loc_822FD1FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30932(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30932);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd21c
	if (!ctx.cr6.eq) goto loc_822FD21C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82446bf8
	ctx.lr = 0x822FD214;
	sub_82446BF8(ctx, base);
	// stw r3,-30932(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30932, ctx.r3.u32);
	// bl 0x82446cb8
	ctx.lr = 0x822FD21C;
	sub_82446CB8(ctx, base);
loc_822FD21C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30964(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30964);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd23c
	if (!ctx.cr6.eq) goto loc_822FD23C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82445a78
	ctx.lr = 0x822FD234;
	sub_82445A78(ctx, base);
	// stw r3,-30964(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30964, ctx.r3.u32);
	// bl 0x82445b38
	ctx.lr = 0x822FD23C;
	sub_82445B38(ctx, base);
loc_822FD23C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30968(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30968);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd25c
	if (!ctx.cr6.eq) goto loc_822FD25C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82445848
	ctx.lr = 0x822FD254;
	sub_82445848(ctx, base);
	// stw r3,-30968(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30968, ctx.r3.u32);
	// bl 0x82445908
	ctx.lr = 0x822FD25C;
	sub_82445908(ctx, base);
loc_822FD25C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31000(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31000);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd27c
	if (!ctx.cr6.eq) goto loc_822FD27C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824446c8
	ctx.lr = 0x822FD274;
	sub_824446C8(ctx, base);
	// stw r3,-31000(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31000, ctx.r3.u32);
	// bl 0x82444788
	ctx.lr = 0x822FD27C;
	sub_82444788(ctx, base);
loc_822FD27C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31104(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31104);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd29c
	if (!ctx.cr6.eq) goto loc_822FD29C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82440de8
	ctx.lr = 0x822FD294;
	sub_82440DE8(ctx, base);
	// stw r3,-31104(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31104, ctx.r3.u32);
	// bl 0x82440ea8
	ctx.lr = 0x822FD29C;
	sub_82440EA8(ctx, base);
loc_822FD29C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30928(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30928);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd2bc
	if (!ctx.cr6.eq) goto loc_822FD2BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82446e28
	ctx.lr = 0x822FD2B4;
	sub_82446E28(ctx, base);
	// stw r3,-30928(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30928, ctx.r3.u32);
	// bl 0x82446ee8
	ctx.lr = 0x822FD2BC;
	sub_82446EE8(ctx, base);
loc_822FD2BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30980(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30980);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd2dc
	if (!ctx.cr6.eq) goto loc_822FD2DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824451b8
	ctx.lr = 0x822FD2D4;
	sub_824451B8(ctx, base);
	// stw r3,-30980(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30980, ctx.r3.u32);
	// bl 0x82445278
	ctx.lr = 0x822FD2DC;
	sub_82445278(ctx, base);
loc_822FD2DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31164(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31164);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd2fc
	if (!ctx.cr6.eq) goto loc_822FD2FC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243ed18
	ctx.lr = 0x822FD2F4;
	sub_8243ED18(ctx, base);
	// stw r3,-31164(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31164, ctx.r3.u32);
	// bl 0x8243edd8
	ctx.lr = 0x822FD2FC;
	sub_8243EDD8(ctx, base);
loc_822FD2FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31044(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd31c
	if (!ctx.cr6.eq) goto loc_822FD31C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82442eb8
	ctx.lr = 0x822FD314;
	sub_82442EB8(ctx, base);
	// stw r3,-31044(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31044, ctx.r3.u32);
	// bl 0x82442f78
	ctx.lr = 0x822FD31C;
	sub_82442F78(ctx, base);
loc_822FD31C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31180(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31180);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd33c
	if (!ctx.cr6.eq) goto loc_822FD33C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243e458
	ctx.lr = 0x822FD334;
	sub_8243E458(ctx, base);
	// stw r3,-31180(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31180, ctx.r3.u32);
	// bl 0x8243e518
	ctx.lr = 0x822FD33C;
	sub_8243E518(ctx, base);
loc_822FD33C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31168(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31168);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd35c
	if (!ctx.cr6.eq) goto loc_822FD35C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243eae8
	ctx.lr = 0x822FD354;
	sub_8243EAE8(ctx, base);
	// stw r3,-31168(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31168, ctx.r3.u32);
	// bl 0x8243eba8
	ctx.lr = 0x822FD35C;
	sub_8243EBA8(ctx, base);
loc_822FD35C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31196(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31196);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd37c
	if (!ctx.cr6.eq) goto loc_822FD37C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8243db98
	ctx.lr = 0x822FD374;
	sub_8243DB98(ctx, base);
	// stw r3,-31196(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31196, ctx.r3.u32);
	// bl 0x8243dc58
	ctx.lr = 0x822FD37C;
	sub_8243DC58(ctx, base);
loc_822FD37C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31024(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31024);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd39c
	if (!ctx.cr6.eq) goto loc_822FD39C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824439a8
	ctx.lr = 0x822FD394;
	sub_824439A8(ctx, base);
	// stw r3,-31024(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31024, ctx.r3.u32);
	// bl 0x82443a68
	ctx.lr = 0x822FD39C;
	sub_82443A68(ctx, base);
loc_822FD39C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31020(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31020);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd3bc
	if (!ctx.cr6.eq) goto loc_822FD3BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82443bd8
	ctx.lr = 0x822FD3B4;
	sub_82443BD8(ctx, base);
	// stw r3,-31020(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31020, ctx.r3.u32);
	// bl 0x82443c98
	ctx.lr = 0x822FD3BC;
	sub_82443C98(ctx, base);
loc_822FD3BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31016(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31016);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd3dc
	if (!ctx.cr6.eq) goto loc_822FD3DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82443e08
	ctx.lr = 0x822FD3D4;
	sub_82443E08(ctx, base);
	// stw r3,-31016(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31016, ctx.r3.u32);
	// bl 0x82443ec8
	ctx.lr = 0x822FD3DC;
	sub_82443EC8(ctx, base);
loc_822FD3DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31012(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31012);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd3fc
	if (!ctx.cr6.eq) goto loc_822FD3FC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82444038
	ctx.lr = 0x822FD3F4;
	sub_82444038(ctx, base);
	// stw r3,-31012(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31012, ctx.r3.u32);
	// bl 0x824440f8
	ctx.lr = 0x822FD3FC;
	sub_824440F8(ctx, base);
loc_822FD3FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31124(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31124);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd41c
	if (!ctx.cr6.eq) goto loc_822FD41C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824402f8
	ctx.lr = 0x822FD414;
	sub_824402F8(ctx, base);
	// stw r3,-31124(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31124, ctx.r3.u32);
	// bl 0x824403b8
	ctx.lr = 0x822FD41C;
	sub_824403B8(ctx, base);
loc_822FD41C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30960(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30960);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd43c
	if (!ctx.cr6.eq) goto loc_822FD43C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82445ca8
	ctx.lr = 0x822FD434;
	sub_82445CA8(ctx, base);
	// stw r3,-30960(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30960, ctx.r3.u32);
	// bl 0x82445d68
	ctx.lr = 0x822FD43C;
	sub_82445D68(ctx, base);
loc_822FD43C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31052(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31052);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd45c
	if (!ctx.cr6.eq) goto loc_822FD45C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82442a58
	ctx.lr = 0x822FD454;
	sub_82442A58(ctx, base);
	// stw r3,-31052(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31052, ctx.r3.u32);
	// bl 0x82442b18
	ctx.lr = 0x822FD45C;
	sub_82442B18(ctx, base);
loc_822FD45C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31036(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31036);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd47c
	if (!ctx.cr6.eq) goto loc_822FD47C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82443318
	ctx.lr = 0x822FD474;
	sub_82443318(ctx, base);
	// stw r3,-31036(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31036, ctx.r3.u32);
	// bl 0x824433d8
	ctx.lr = 0x822FD47C;
	sub_824433D8(ctx, base);
loc_822FD47C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30904(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30904);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd49c
	if (!ctx.cr6.eq) goto loc_822FD49C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8244eb60
	ctx.lr = 0x822FD494;
	sub_8244EB60(ctx, base);
	// stw r3,-30904(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30904, ctx.r3.u32);
	// bl 0x8244ec20
	ctx.lr = 0x822FD49C;
	sub_8244EC20(ctx, base);
loc_822FD49C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,22136
	ctx.r7.s64 = ctx.r10.s64 + 22136;
	// lwz r11,-30128(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30128);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fd4d8
	if (!ctx.cr6.eq) goto loc_822FD4D8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824eb1b0
	ctx.lr = 0x822FD4D0;
	sub_824EB1B0(ctx, base);
	// stw r3,-30128(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30128, ctx.r3.u32);
	// bl 0x824eb270
	ctx.lr = 0x822FD4D8;
	sub_824EB270(ctx, base);
loc_822FD4D8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30124(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30124);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd4f8
	if (!ctx.cr6.eq) goto loc_822FD4F8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824eb3e0
	ctx.lr = 0x822FD4F0;
	sub_824EB3E0(ctx, base);
	// stw r3,-30124(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30124, ctx.r3.u32);
	// bl 0x824eb4a0
	ctx.lr = 0x822FD4F8;
	sub_824EB4A0(ctx, base);
loc_822FD4F8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29908(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29908);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd518
	if (!ctx.cr6.eq) goto loc_822FD518;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8250fb80
	ctx.lr = 0x822FD510;
	sub_8250FB80(ctx, base);
	// stw r3,-29908(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29908, ctx.r3.u32);
	// bl 0x8250fc40
	ctx.lr = 0x822FD518;
	sub_8250FC40(ctx, base);
loc_822FD518:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,25256
	ctx.r7.s64 = ctx.r10.s64 + 25256;
	// lwz r11,-29904(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29904);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fd554
	if (!ctx.cr6.eq) goto loc_822FD554;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8250fdb0
	ctx.lr = 0x822FD54C;
	sub_8250FDB0(ctx, base);
	// stw r3,-29904(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29904, ctx.r3.u32);
	// bl 0x8250fe70
	ctx.lr = 0x822FD554;
	sub_8250FE70(ctx, base);
loc_822FD554:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27264(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27264);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd574
	if (!ctx.cr6.eq) goto loc_822FD574;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82786400
	ctx.lr = 0x822FD56C;
	sub_82786400(ctx, base);
	// stw r3,-27264(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27264, ctx.r3.u32);
	// bl 0x827864c0
	ctx.lr = 0x822FD574;
	sub_827864C0(ctx, base);
loc_822FD574:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29844(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29844);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd594
	if (!ctx.cr6.eq) goto loc_822FD594;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825193d0
	ctx.lr = 0x822FD58C;
	sub_825193D0(ctx, base);
	// stw r3,-29844(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29844, ctx.r3.u32);
	// bl 0x82519490
	ctx.lr = 0x822FD594;
	sub_82519490(ctx, base);
loc_822FD594:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27344(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd5b4
	if (!ctx.cr6.eq) goto loc_822FD5B4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82758f70
	ctx.lr = 0x822FD5AC;
	sub_82758F70(ctx, base);
	// stw r3,-27344(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27344, ctx.r3.u32);
	// bl 0x82759030
	ctx.lr = 0x822FD5B4;
	sub_82759030(ctx, base);
loc_822FD5B4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29896(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29896);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd5d4
	if (!ctx.cr6.eq) goto loc_822FD5D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82510208
	ctx.lr = 0x822FD5CC;
	sub_82510208(ctx, base);
	// stw r3,-29896(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29896, ctx.r3.u32);
	// bl 0x825102c8
	ctx.lr = 0x822FD5D4;
	sub_825102C8(ctx, base);
loc_822FD5D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29868(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29868);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd5f4
	if (!ctx.cr6.eq) goto loc_822FD5F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825186b8
	ctx.lr = 0x822FD5EC;
	sub_825186B8(ctx, base);
	// stw r3,-29868(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29868, ctx.r3.u32);
	// bl 0x82518778
	ctx.lr = 0x822FD5F4;
	sub_82518778(ctx, base);
loc_822FD5F4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29876(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29876);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd614
	if (!ctx.cr6.eq) goto loc_822FD614;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82510cf0
	ctx.lr = 0x822FD60C;
	sub_82510CF0(ctx, base);
	// stw r3,-29876(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29876, ctx.r3.u32);
	// bl 0x82510db0
	ctx.lr = 0x822FD614;
	sub_82510DB0(ctx, base);
loc_822FD614:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29884(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29884);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd634
	if (!ctx.cr6.eq) goto loc_822FD634;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82510890
	ctx.lr = 0x822FD62C;
	sub_82510890(ctx, base);
	// stw r3,-29884(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29884, ctx.r3.u32);
	// bl 0x82510950
	ctx.lr = 0x822FD634;
	sub_82510950(ctx, base);
loc_822FD634:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29856(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29856);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd654
	if (!ctx.cr6.eq) goto loc_822FD654;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82518d40
	ctx.lr = 0x822FD64C;
	sub_82518D40(ctx, base);
	// stw r3,-29856(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29856, ctx.r3.u32);
	// bl 0x82518e00
	ctx.lr = 0x822FD654;
	sub_82518E00(ctx, base);
loc_822FD654:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29852(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd674
	if (!ctx.cr6.eq) goto loc_822FD674;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82518f70
	ctx.lr = 0x822FD66C;
	sub_82518F70(ctx, base);
	// stw r3,-29852(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29852, ctx.r3.u32);
	// bl 0x82519030
	ctx.lr = 0x822FD674;
	sub_82519030(ctx, base);
loc_822FD674:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30120(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30120);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd694
	if (!ctx.cr6.eq) goto loc_822FD694;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824eb630
	ctx.lr = 0x822FD68C;
	sub_824EB630(ctx, base);
	// stw r3,-30120(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30120, ctx.r3.u32);
	// bl 0x824eb6f0
	ctx.lr = 0x822FD694;
	sub_824EB6F0(ctx, base);
loc_822FD694:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30020(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30020);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd6b4
	if (!ctx.cr6.eq) goto loc_822FD6B4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f8520
	ctx.lr = 0x822FD6AC;
	sub_824F8520(ctx, base);
	// stw r3,-30020(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30020, ctx.r3.u32);
	// bl 0x824f85e0
	ctx.lr = 0x822FD6B4;
	sub_824F85E0(ctx, base);
loc_822FD6B4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30188(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30188);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd6d4
	if (!ctx.cr6.eq) goto loc_822FD6D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824e90e0
	ctx.lr = 0x822FD6CC;
	sub_824E90E0(ctx, base);
	// stw r3,-30188(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30188, ctx.r3.u32);
	// bl 0x824e91a0
	ctx.lr = 0x822FD6D4;
	sub_824E91A0(ctx, base);
loc_822FD6D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30016(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30016);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd6f4
	if (!ctx.cr6.eq) goto loc_822FD6F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f8d98
	ctx.lr = 0x822FD6EC;
	sub_824F8D98(ctx, base);
	// stw r3,-30016(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30016, ctx.r3.u32);
	// bl 0x824f8e58
	ctx.lr = 0x822FD6F4;
	sub_824F8E58(ctx, base);
loc_822FD6F4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30184(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30184);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd714
	if (!ctx.cr6.eq) goto loc_822FD714;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824e9310
	ctx.lr = 0x822FD70C;
	sub_824E9310(ctx, base);
	// stw r3,-30184(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30184, ctx.r3.u32);
	// bl 0x824e93d0
	ctx.lr = 0x822FD714;
	sub_824E93D0(ctx, base);
loc_822FD714:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29920(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29920);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd734
	if (!ctx.cr6.eq) goto loc_822FD734;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82509170
	ctx.lr = 0x822FD72C;
	sub_82509170(ctx, base);
	// stw r3,-29920(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29920, ctx.r3.u32);
	// bl 0x82509230
	ctx.lr = 0x822FD734;
	sub_82509230(ctx, base);
loc_822FD734:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29916(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29916);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd754
	if (!ctx.cr6.eq) goto loc_822FD754;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82509af8
	ctx.lr = 0x822FD74C;
	sub_82509AF8(ctx, base);
	// stw r3,-29916(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29916, ctx.r3.u32);
	// bl 0x82509bb8
	ctx.lr = 0x822FD754;
	sub_82509BB8(ctx, base);
loc_822FD754:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29912(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29912);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd774
	if (!ctx.cr6.eq) goto loc_822FD774;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8250a930
	ctx.lr = 0x822FD76C;
	sub_8250A930(ctx, base);
	// stw r3,-29912(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29912, ctx.r3.u32);
	// bl 0x8250a9f0
	ctx.lr = 0x822FD774;
	sub_8250A9F0(ctx, base);
loc_822FD774:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29836(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29836);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd794
	if (!ctx.cr6.eq) goto loc_822FD794;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8251b728
	ctx.lr = 0x822FD78C;
	sub_8251B728(ctx, base);
	// stw r3,-29836(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29836, ctx.r3.u32);
	// bl 0x8251b7e8
	ctx.lr = 0x822FD794;
	sub_8251B7E8(ctx, base);
loc_822FD794:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29828(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29828);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd7b4
	if (!ctx.cr6.eq) goto loc_822FD7B4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8251ded8
	ctx.lr = 0x822FD7AC;
	sub_8251DED8(ctx, base);
	// stw r3,-29828(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29828, ctx.r3.u32);
	// bl 0x8251df98
	ctx.lr = 0x822FD7B4;
	sub_8251DF98(ctx, base);
loc_822FD7B4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29824(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29824);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd7d4
	if (!ctx.cr6.eq) goto loc_822FD7D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8251e8e0
	ctx.lr = 0x822FD7CC;
	sub_8251E8E0(ctx, base);
	// stw r3,-29824(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29824, ctx.r3.u32);
	// bl 0x8251e9a0
	ctx.lr = 0x822FD7D4;
	sub_8251E9A0(ctx, base);
loc_822FD7D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29820(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29820);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd7f4
	if (!ctx.cr6.eq) goto loc_822FD7F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8251f398
	ctx.lr = 0x822FD7EC;
	sub_8251F398(ctx, base);
	// stw r3,-29820(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29820, ctx.r3.u32);
	// bl 0x8251f458
	ctx.lr = 0x822FD7F4;
	sub_8251F458(ctx, base);
loc_822FD7F4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29816(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29816);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd814
	if (!ctx.cr6.eq) goto loc_822FD814;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825201b8
	ctx.lr = 0x822FD80C;
	sub_825201B8(ctx, base);
	// stw r3,-29816(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29816, ctx.r3.u32);
	// bl 0x82520278
	ctx.lr = 0x822FD814;
	sub_82520278(ctx, base);
loc_822FD814:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26124(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26124);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd834
	if (!ctx.cr6.eq) goto loc_822FD834;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827cc8b0
	ctx.lr = 0x822FD82C;
	sub_827CC8B0(ctx, base);
	// stw r3,-26124(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26124, ctx.r3.u32);
	// bl 0x827cc970
	ctx.lr = 0x822FD834;
	sub_827CC970(ctx, base);
loc_822FD834:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26128(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26128);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd854
	if (!ctx.cr6.eq) goto loc_822FD854;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827cc680
	ctx.lr = 0x822FD84C;
	sub_827CC680(ctx, base);
	// stw r3,-26128(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26128, ctx.r3.u32);
	// bl 0x827cc740
	ctx.lr = 0x822FD854;
	sub_827CC740(ctx, base);
loc_822FD854:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29948(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29948);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd874
	if (!ctx.cr6.eq) goto loc_822FD874;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825054b0
	ctx.lr = 0x822FD86C;
	sub_825054B0(ctx, base);
	// stw r3,-29948(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29948, ctx.r3.u32);
	// bl 0x82505570
	ctx.lr = 0x822FD874;
	sub_82505570(ctx, base);
loc_822FD874:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30180(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30180);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd894
	if (!ctx.cr6.eq) goto loc_822FD894;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824e9540
	ctx.lr = 0x822FD88C;
	sub_824E9540(ctx, base);
	// stw r3,-30180(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30180, ctx.r3.u32);
	// bl 0x824e9600
	ctx.lr = 0x822FD894;
	sub_824E9600(ctx, base);
loc_822FD894:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29944(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29944);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd8b4
	if (!ctx.cr6.eq) goto loc_822FD8B4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82505da0
	ctx.lr = 0x822FD8AC;
	sub_82505DA0(ctx, base);
	// stw r3,-29944(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29944, ctx.r3.u32);
	// bl 0x82505e60
	ctx.lr = 0x822FD8B4;
	sub_82505E60(ctx, base);
loc_822FD8B4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29940(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29940);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd8d4
	if (!ctx.cr6.eq) goto loc_822FD8D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825062e8
	ctx.lr = 0x822FD8CC;
	sub_825062E8(ctx, base);
	// stw r3,-29940(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29940, ctx.r3.u32);
	// bl 0x825063a8
	ctx.lr = 0x822FD8D4;
	sub_825063A8(ctx, base);
loc_822FD8D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29936(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29936);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd8f4
	if (!ctx.cr6.eq) goto loc_822FD8F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82507068
	ctx.lr = 0x822FD8EC;
	sub_82507068(ctx, base);
	// stw r3,-29936(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29936, ctx.r3.u32);
	// bl 0x82507128
	ctx.lr = 0x822FD8F4;
	sub_82507128(ctx, base);
loc_822FD8F4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30176(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30176);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd914
	if (!ctx.cr6.eq) goto loc_822FD914;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824e9770
	ctx.lr = 0x822FD90C;
	sub_824E9770(ctx, base);
	// stw r3,-30176(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30176, ctx.r3.u32);
	// bl 0x824e9830
	ctx.lr = 0x822FD914;
	sub_824E9830(ctx, base);
loc_822FD914:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29932(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29932);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd934
	if (!ctx.cr6.eq) goto loc_822FD934;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82507ba8
	ctx.lr = 0x822FD92C;
	sub_82507BA8(ctx, base);
	// stw r3,-29932(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29932, ctx.r3.u32);
	// bl 0x82507c68
	ctx.lr = 0x822FD934;
	sub_82507C68(ctx, base);
loc_822FD934:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29928(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29928);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd954
	if (!ctx.cr6.eq) goto loc_822FD954;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82508540
	ctx.lr = 0x822FD94C;
	sub_82508540(ctx, base);
	// stw r3,-29928(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29928, ctx.r3.u32);
	// bl 0x82508600
	ctx.lr = 0x822FD954;
	sub_82508600(ctx, base);
loc_822FD954:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29924(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29924);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd974
	if (!ctx.cr6.eq) goto loc_822FD974;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82508cd0
	ctx.lr = 0x822FD96C;
	sub_82508CD0(ctx, base);
	// stw r3,-29924(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29924, ctx.r3.u32);
	// bl 0x82508d90
	ctx.lr = 0x822FD974;
	sub_82508D90(ctx, base);
loc_822FD974:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30172(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30172);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd994
	if (!ctx.cr6.eq) goto loc_822FD994;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824e99a0
	ctx.lr = 0x822FD98C;
	sub_824E99A0(ctx, base);
	// stw r3,-30172(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30172, ctx.r3.u32);
	// bl 0x824e9a60
	ctx.lr = 0x822FD994;
	sub_824E9A60(ctx, base);
loc_822FD994:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30116(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30116);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd9b4
	if (!ctx.cr6.eq) goto loc_822FD9B4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ece48
	ctx.lr = 0x822FD9AC;
	sub_824ECE48(ctx, base);
	// stw r3,-30116(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30116, ctx.r3.u32);
	// bl 0x824ecf08
	ctx.lr = 0x822FD9B4;
	sub_824ECF08(ctx, base);
loc_822FD9B4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30168(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30168);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd9d4
	if (!ctx.cr6.eq) goto loc_822FD9D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824e9bd0
	ctx.lr = 0x822FD9CC;
	sub_824E9BD0(ctx, base);
	// stw r3,-30168(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30168, ctx.r3.u32);
	// bl 0x824e9c90
	ctx.lr = 0x822FD9D4;
	sub_824E9C90(ctx, base);
loc_822FD9D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30112(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30112);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fd9f4
	if (!ctx.cr6.eq) goto loc_822FD9F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ed6c8
	ctx.lr = 0x822FD9EC;
	sub_824ED6C8(ctx, base);
	// stw r3,-30112(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30112, ctx.r3.u32);
	// bl 0x824ed788
	ctx.lr = 0x822FD9F4;
	sub_824ED788(ctx, base);
loc_822FD9F4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30108(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30108);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fda14
	if (!ctx.cr6.eq) goto loc_822FDA14;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ee4f0
	ctx.lr = 0x822FDA0C;
	sub_824EE4F0(ctx, base);
	// stw r3,-30108(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30108, ctx.r3.u32);
	// bl 0x824ee5b0
	ctx.lr = 0x822FDA14;
	sub_824EE5B0(ctx, base);
loc_822FDA14:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30104(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30104);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fda34
	if (!ctx.cr6.eq) goto loc_822FDA34;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824eea38
	ctx.lr = 0x822FDA2C;
	sub_824EEA38(ctx, base);
	// stw r3,-30104(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30104, ctx.r3.u32);
	// bl 0x824eeaf8
	ctx.lr = 0x822FDA34;
	sub_824EEAF8(ctx, base);
loc_822FDA34:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30100);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fda54
	if (!ctx.cr6.eq) goto loc_822FDA54;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824eef08
	ctx.lr = 0x822FDA4C;
	sub_824EEF08(ctx, base);
	// stw r3,-30100(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30100, ctx.r3.u32);
	// bl 0x824eefc8
	ctx.lr = 0x822FDA54;
	sub_824EEFC8(ctx, base);
loc_822FDA54:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30096(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30096);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fda74
	if (!ctx.cr6.eq) goto loc_822FDA74;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ef340
	ctx.lr = 0x822FDA6C;
	sub_824EF340(ctx, base);
	// stw r3,-30096(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30096, ctx.r3.u32);
	// bl 0x824ef400
	ctx.lr = 0x822FDA74;
	sub_824EF400(ctx, base);
loc_822FDA74:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30092(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30092);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fda94
	if (!ctx.cr6.eq) goto loc_822FDA94;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f0f98
	ctx.lr = 0x822FDA8C;
	sub_824F0F98(ctx, base);
	// stw r3,-30092(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30092, ctx.r3.u32);
	// bl 0x824f1058
	ctx.lr = 0x822FDA94;
	sub_824F1058(ctx, base);
loc_822FDA94:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27500(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27500);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdab4
	if (!ctx.cr6.eq) goto loc_822FDAB4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8270aec0
	ctx.lr = 0x822FDAAC;
	sub_8270AEC0(ctx, base);
	// stw r3,-27500(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27500, ctx.r3.u32);
	// bl 0x8270af80
	ctx.lr = 0x822FDAB4;
	sub_8270AF80(ctx, base);
loc_822FDAB4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27492(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27492);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdad4
	if (!ctx.cr6.eq) goto loc_822FDAD4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8270b408
	ctx.lr = 0x822FDACC;
	sub_8270B408(ctx, base);
	// stw r3,-27492(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27492, ctx.r3.u32);
	// bl 0x8270b4c8
	ctx.lr = 0x822FDAD4;
	sub_8270B4C8(ctx, base);
loc_822FDAD4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27496(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27496);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdaf4
	if (!ctx.cr6.eq) goto loc_822FDAF4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8270b0f0
	ctx.lr = 0x822FDAEC;
	sub_8270B0F0(ctx, base);
	// stw r3,-27496(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27496, ctx.r3.u32);
	// bl 0x8270b1b0
	ctx.lr = 0x822FDAF4;
	sub_8270B1B0(ctx, base);
loc_822FDAF4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30080(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30080);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdb14
	if (!ctx.cr6.eq) goto loc_822FDB14;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f2528
	ctx.lr = 0x822FDB0C;
	sub_824F2528(ctx, base);
	// stw r3,-30080(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30080, ctx.r3.u32);
	// bl 0x824f25e8
	ctx.lr = 0x822FDB14;
	sub_824F25E8(ctx, base);
loc_822FDB14:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30076(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30076);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdb34
	if (!ctx.cr6.eq) goto loc_822FDB34;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f2a78
	ctx.lr = 0x822FDB2C;
	sub_824F2A78(ctx, base);
	// stw r3,-30076(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30076, ctx.r3.u32);
	// bl 0x824f2b38
	ctx.lr = 0x822FDB34;
	sub_824F2B38(ctx, base);
loc_822FDB34:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30072(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30072);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdb54
	if (!ctx.cr6.eq) goto loc_822FDB54;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f2f80
	ctx.lr = 0x822FDB4C;
	sub_824F2F80(ctx, base);
	// stw r3,-30072(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30072, ctx.r3.u32);
	// bl 0x824f3040
	ctx.lr = 0x822FDB54;
	sub_824F3040(ctx, base);
loc_822FDB54:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27276(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27276);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdb74
	if (!ctx.cr6.eq) goto loc_822FDB74;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8276d948
	ctx.lr = 0x822FDB6C;
	sub_8276D948(ctx, base);
	// stw r3,-27276(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27276, ctx.r3.u32);
	// bl 0x8276da08
	ctx.lr = 0x822FDB74;
	sub_8276DA08(ctx, base);
loc_822FDB74:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27280(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27280);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdb94
	if (!ctx.cr6.eq) goto loc_822FDB94;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8276d718
	ctx.lr = 0x822FDB8C;
	sub_8276D718(ctx, base);
	// stw r3,-27280(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27280, ctx.r3.u32);
	// bl 0x8276d7d8
	ctx.lr = 0x822FDB94;
	sub_8276D7D8(ctx, base);
loc_822FDB94:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30088(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30088);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdbb4
	if (!ctx.cr6.eq) goto loc_822FDBB4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f1c98
	ctx.lr = 0x822FDBAC;
	sub_824F1C98(ctx, base);
	// stw r3,-30088(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30088, ctx.r3.u32);
	// bl 0x824f1d58
	ctx.lr = 0x822FDBB4;
	sub_824F1D58(ctx, base);
loc_822FDBB4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30164(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30164);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdbd4
	if (!ctx.cr6.eq) goto loc_822FDBD4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824e9e00
	ctx.lr = 0x822FDBCC;
	sub_824E9E00(ctx, base);
	// stw r3,-30164(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30164, ctx.r3.u32);
	// bl 0x824e9ec0
	ctx.lr = 0x822FDBD4;
	sub_824E9EC0(ctx, base);
loc_822FDBD4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30084(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30084);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdbf4
	if (!ctx.cr6.eq) goto loc_822FDBF4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f1fe8
	ctx.lr = 0x822FDBEC;
	sub_824F1FE8(ctx, base);
	// stw r3,-30084(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30084, ctx.r3.u32);
	// bl 0x824f20a8
	ctx.lr = 0x822FDBF4;
	sub_824F20A8(ctx, base);
loc_822FDBF4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30068(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30068);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdc14
	if (!ctx.cr6.eq) goto loc_822FDC14;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f3630
	ctx.lr = 0x822FDC0C;
	sub_824F3630(ctx, base);
	// stw r3,-30068(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30068, ctx.r3.u32);
	// bl 0x824f36f0
	ctx.lr = 0x822FDC14;
	sub_824F36F0(ctx, base);
loc_822FDC14:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30160(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30160);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdc34
	if (!ctx.cr6.eq) goto loc_822FDC34;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ea030
	ctx.lr = 0x822FDC2C;
	sub_824EA030(ctx, base);
	// stw r3,-30160(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30160, ctx.r3.u32);
	// bl 0x824ea0f0
	ctx.lr = 0x822FDC34;
	sub_824EA0F0(ctx, base);
loc_822FDC34:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30060(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30060);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdc54
	if (!ctx.cr6.eq) goto loc_822FDC54;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f3dd0
	ctx.lr = 0x822FDC4C;
	sub_824F3DD0(ctx, base);
	// stw r3,-30060(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30060, ctx.r3.u32);
	// bl 0x824f3e90
	ctx.lr = 0x822FDC54;
	sub_824F3E90(ctx, base);
loc_822FDC54:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30064(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30064);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdc74
	if (!ctx.cr6.eq) goto loc_822FDC74;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f3998
	ctx.lr = 0x822FDC6C;
	sub_824F3998(ctx, base);
	// stw r3,-30064(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30064, ctx.r3.u32);
	// bl 0x824f3a58
	ctx.lr = 0x822FDC74;
	sub_824F3A58(ctx, base);
loc_822FDC74:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30156(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30156);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdc94
	if (!ctx.cr6.eq) goto loc_822FDC94;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ea260
	ctx.lr = 0x822FDC8C;
	sub_824EA260(ctx, base);
	// stw r3,-30156(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30156, ctx.r3.u32);
	// bl 0x824ea320
	ctx.lr = 0x822FDC94;
	sub_824EA320(ctx, base);
loc_822FDC94:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30024(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30024);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdcb4
	if (!ctx.cr6.eq) goto loc_822FDCB4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f7ec0
	ctx.lr = 0x822FDCAC;
	sub_824F7EC0(ctx, base);
	// stw r3,-30024(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30024, ctx.r3.u32);
	// bl 0x824f7f80
	ctx.lr = 0x822FDCB4;
	sub_824F7F80(ctx, base);
loc_822FDCB4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30056(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30056);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdcd4
	if (!ctx.cr6.eq) goto loc_822FDCD4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f4270
	ctx.lr = 0x822FDCCC;
	sub_824F4270(ctx, base);
	// stw r3,-30056(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30056, ctx.r3.u32);
	// bl 0x824f4330
	ctx.lr = 0x822FDCD4;
	sub_824F4330(ctx, base);
loc_822FDCD4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30152(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30152);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdcf4
	if (!ctx.cr6.eq) goto loc_822FDCF4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ea490
	ctx.lr = 0x822FDCEC;
	sub_824EA490(ctx, base);
	// stw r3,-30152(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30152, ctx.r3.u32);
	// bl 0x824ea550
	ctx.lr = 0x822FDCF4;
	sub_824EA550(ctx, base);
loc_822FDCF4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30048(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30048);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdd14
	if (!ctx.cr6.eq) goto loc_822FDD14;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f4e48
	ctx.lr = 0x822FDD0C;
	sub_824F4E48(ctx, base);
	// stw r3,-30048(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30048, ctx.r3.u32);
	// bl 0x824f4f08
	ctx.lr = 0x822FDD14;
	sub_824F4F08(ctx, base);
loc_822FDD14:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30052(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30052);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdd34
	if (!ctx.cr6.eq) goto loc_822FDD34;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f46a0
	ctx.lr = 0x822FDD2C;
	sub_824F46A0(ctx, base);
	// stw r3,-30052(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30052, ctx.r3.u32);
	// bl 0x824f4760
	ctx.lr = 0x822FDD34;
	sub_824F4760(ctx, base);
loc_822FDD34:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30044(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdd54
	if (!ctx.cr6.eq) goto loc_822FDD54;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f55f0
	ctx.lr = 0x822FDD4C;
	sub_824F55F0(ctx, base);
	// stw r3,-30044(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30044, ctx.r3.u32);
	// bl 0x824f56b0
	ctx.lr = 0x822FDD54;
	sub_824F56B0(ctx, base);
loc_822FDD54:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30148(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30148);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdd74
	if (!ctx.cr6.eq) goto loc_822FDD74;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ea6c0
	ctx.lr = 0x822FDD6C;
	sub_824EA6C0(ctx, base);
	// stw r3,-30148(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30148, ctx.r3.u32);
	// bl 0x824ea780
	ctx.lr = 0x822FDD74;
	sub_824EA780(ctx, base);
loc_822FDD74:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30040(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30040);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdd94
	if (!ctx.cr6.eq) goto loc_822FDD94;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f5aa8
	ctx.lr = 0x822FDD8C;
	sub_824F5AA8(ctx, base);
	// stw r3,-30040(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30040, ctx.r3.u32);
	// bl 0x824f5b68
	ctx.lr = 0x822FDD94;
	sub_824F5B68(ctx, base);
loc_822FDD94:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30036(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30036);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fddb4
	if (!ctx.cr6.eq) goto loc_822FDDB4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f6080
	ctx.lr = 0x822FDDAC;
	sub_824F6080(ctx, base);
	// stw r3,-30036(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30036, ctx.r3.u32);
	// bl 0x824f6140
	ctx.lr = 0x822FDDB4;
	sub_824F6140(ctx, base);
loc_822FDDB4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30144(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30144);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fddd4
	if (!ctx.cr6.eq) goto loc_822FDDD4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ea8f0
	ctx.lr = 0x822FDDCC;
	sub_824EA8F0(ctx, base);
	// stw r3,-30144(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30144, ctx.r3.u32);
	// bl 0x824ea9b0
	ctx.lr = 0x822FDDD4;
	sub_824EA9B0(ctx, base);
loc_822FDDD4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30028(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30028);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fddf4
	if (!ctx.cr6.eq) goto loc_822FDDF4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f78c0
	ctx.lr = 0x822FDDEC;
	sub_824F78C0(ctx, base);
	// stw r3,-30028(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30028, ctx.r3.u32);
	// bl 0x824f7980
	ctx.lr = 0x822FDDF4;
	sub_824F7980(ctx, base);
loc_822FDDF4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30032(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30032);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fde14
	if (!ctx.cr6.eq) goto loc_822FDE14;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f7000
	ctx.lr = 0x822FDE0C;
	sub_824F7000(ctx, base);
	// stw r3,-30032(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30032, ctx.r3.u32);
	// bl 0x824f70c0
	ctx.lr = 0x822FDE14;
	sub_824F70C0(ctx, base);
loc_822FDE14:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27316(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27316);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fde34
	if (!ctx.cr6.eq) goto loc_822FDE34;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827666e8
	ctx.lr = 0x822FDE2C;
	sub_827666E8(ctx, base);
	// stw r3,-27316(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27316, ctx.r3.u32);
	// bl 0x827667a8
	ctx.lr = 0x822FDE34;
	sub_827667A8(ctx, base);
loc_822FDE34:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27312(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27312);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fde54
	if (!ctx.cr6.eq) goto loc_822FDE54;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82766918
	ctx.lr = 0x822FDE4C;
	sub_82766918(ctx, base);
	// stw r3,-27312(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27312, ctx.r3.u32);
	// bl 0x827669d8
	ctx.lr = 0x822FDE54;
	sub_827669D8(ctx, base);
loc_822FDE54:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27308(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27308);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fde74
	if (!ctx.cr6.eq) goto loc_822FDE74;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82767768
	ctx.lr = 0x822FDE6C;
	sub_82767768(ctx, base);
	// stw r3,-27308(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27308, ctx.r3.u32);
	// bl 0x82767828
	ctx.lr = 0x822FDE74;
	sub_82767828(ctx, base);
loc_822FDE74:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27304(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27304);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fde94
	if (!ctx.cr6.eq) goto loc_822FDE94;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82767ae8
	ctx.lr = 0x822FDE8C;
	sub_82767AE8(ctx, base);
	// stw r3,-27304(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27304, ctx.r3.u32);
	// bl 0x82767ba8
	ctx.lr = 0x822FDE94;
	sub_82767BA8(ctx, base);
loc_822FDE94:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30140(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30140);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdeb4
	if (!ctx.cr6.eq) goto loc_822FDEB4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824eab20
	ctx.lr = 0x822FDEAC;
	sub_824EAB20(ctx, base);
	// stw r3,-30140(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30140, ctx.r3.u32);
	// bl 0x824eabe0
	ctx.lr = 0x822FDEB4;
	sub_824EABE0(ctx, base);
loc_822FDEB4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29992(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29992);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fded4
	if (!ctx.cr6.eq) goto loc_822FDED4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824fa900
	ctx.lr = 0x822FDECC;
	sub_824FA900(ctx, base);
	// stw r3,-29992(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29992, ctx.r3.u32);
	// bl 0x824fa9c0
	ctx.lr = 0x822FDED4;
	sub_824FA9C0(ctx, base);
loc_822FDED4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29832(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29832);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdef4
	if (!ctx.cr6.eq) goto loc_822FDEF4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8251b958
	ctx.lr = 0x822FDEEC;
	sub_8251B958(ctx, base);
	// stw r3,-29832(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29832, ctx.r3.u32);
	// bl 0x8251ba18
	ctx.lr = 0x822FDEF4;
	sub_8251BA18(ctx, base);
loc_822FDEF4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30008(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30008);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdf14
	if (!ctx.cr6.eq) goto loc_822FDF14;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f9588
	ctx.lr = 0x822FDF0C;
	sub_824F9588(ctx, base);
	// stw r3,-30008(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30008, ctx.r3.u32);
	// bl 0x824f9648
	ctx.lr = 0x822FDF14;
	sub_824F9648(ctx, base);
loc_822FDF14:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30004(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30004);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdf34
	if (!ctx.cr6.eq) goto loc_822FDF34;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f9c60
	ctx.lr = 0x822FDF2C;
	sub_824F9C60(ctx, base);
	// stw r3,-30004(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30004, ctx.r3.u32);
	// bl 0x824f9d20
	ctx.lr = 0x822FDF34;
	sub_824F9D20(ctx, base);
loc_822FDF34:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30000(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30000);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdf54
	if (!ctx.cr6.eq) goto loc_822FDF54;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824fa250
	ctx.lr = 0x822FDF4C;
	sub_824FA250(ctx, base);
	// stw r3,-30000(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30000, ctx.r3.u32);
	// bl 0x824fa310
	ctx.lr = 0x822FDF54;
	sub_824FA310(ctx, base);
loc_822FDF54:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30012(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30012);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdf74
	if (!ctx.cr6.eq) goto loc_822FDF74;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f9260
	ctx.lr = 0x822FDF6C;
	sub_824F9260(ctx, base);
	// stw r3,-30012(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30012, ctx.r3.u32);
	// bl 0x824f9320
	ctx.lr = 0x822FDF74;
	sub_824F9320(ctx, base);
loc_822FDF74:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29996(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29996);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdf94
	if (!ctx.cr6.eq) goto loc_822FDF94;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824fa598
	ctx.lr = 0x822FDF8C;
	sub_824FA598(ctx, base);
	// stw r3,-29996(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29996, ctx.r3.u32);
	// bl 0x824fa658
	ctx.lr = 0x822FDF94;
	sub_824FA658(ctx, base);
loc_822FDF94:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27300(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27300);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdfb4
	if (!ctx.cr6.eq) goto loc_822FDFB4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82767de0
	ctx.lr = 0x822FDFAC;
	sub_82767DE0(ctx, base);
	// stw r3,-27300(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27300, ctx.r3.u32);
	// bl 0x82767ea0
	ctx.lr = 0x822FDFB4;
	sub_82767EA0(ctx, base);
loc_822FDFB4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30136(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30136);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdfd4
	if (!ctx.cr6.eq) goto loc_822FDFD4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824ead50
	ctx.lr = 0x822FDFCC;
	sub_824EAD50(ctx, base);
	// stw r3,-30136(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30136, ctx.r3.u32);
	// bl 0x824eae10
	ctx.lr = 0x822FDFD4;
	sub_824EAE10(ctx, base);
loc_822FDFD4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29988(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29988);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fdff4
	if (!ctx.cr6.eq) goto loc_822FDFF4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824fb060
	ctx.lr = 0x822FDFEC;
	sub_824FB060(ctx, base);
	// stw r3,-29988(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29988, ctx.r3.u32);
	// bl 0x824fb120
	ctx.lr = 0x822FDFF4;
	sub_824FB120(ctx, base);
loc_822FDFF4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29984(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29984);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe014
	if (!ctx.cr6.eq) goto loc_822FE014;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824fb830
	ctx.lr = 0x822FE00C;
	sub_824FB830(ctx, base);
	// stw r3,-29984(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29984, ctx.r3.u32);
	// bl 0x824fb8f0
	ctx.lr = 0x822FE014;
	sub_824FB8F0(ctx, base);
loc_822FE014:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29980(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29980);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe034
	if (!ctx.cr6.eq) goto loc_822FE034;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824fc128
	ctx.lr = 0x822FE02C;
	sub_824FC128(ctx, base);
	// stw r3,-29980(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29980, ctx.r3.u32);
	// bl 0x824fc1e8
	ctx.lr = 0x822FE034;
	sub_824FC1E8(ctx, base);
loc_822FE034:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29976(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29976);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe054
	if (!ctx.cr6.eq) goto loc_822FE054;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824fcb68
	ctx.lr = 0x822FE04C;
	sub_824FCB68(ctx, base);
	// stw r3,-29976(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29976, ctx.r3.u32);
	// bl 0x824fcc28
	ctx.lr = 0x822FE054;
	sub_824FCC28(ctx, base);
loc_822FE054:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29972(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29972);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe074
	if (!ctx.cr6.eq) goto loc_822FE074;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824fead8
	ctx.lr = 0x822FE06C;
	sub_824FEAD8(ctx, base);
	// stw r3,-29972(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29972, ctx.r3.u32);
	// bl 0x824feb98
	ctx.lr = 0x822FE074;
	sub_824FEB98(ctx, base);
loc_822FE074:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29968(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29968);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe094
	if (!ctx.cr6.eq) goto loc_822FE094;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82501868
	ctx.lr = 0x822FE08C;
	sub_82501868(ctx, base);
	// stw r3,-29968(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29968, ctx.r3.u32);
	// bl 0x82501928
	ctx.lr = 0x822FE094;
	sub_82501928(ctx, base);
loc_822FE094:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29964(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29964);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe0b4
	if (!ctx.cr6.eq) goto loc_822FE0B4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82502c70
	ctx.lr = 0x822FE0AC;
	sub_82502C70(ctx, base);
	// stw r3,-29964(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29964, ctx.r3.u32);
	// bl 0x82502d30
	ctx.lr = 0x822FE0B4;
	sub_82502D30(ctx, base);
loc_822FE0B4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29960(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29960);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe0d4
	if (!ctx.cr6.eq) goto loc_822FE0D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82503e08
	ctx.lr = 0x822FE0CC;
	sub_82503E08(ctx, base);
	// stw r3,-29960(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29960, ctx.r3.u32);
	// bl 0x82503ec8
	ctx.lr = 0x822FE0D4;
	sub_82503EC8(ctx, base);
loc_822FE0D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30132(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30132);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe0f4
	if (!ctx.cr6.eq) goto loc_822FE0F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824eaf80
	ctx.lr = 0x822FE0EC;
	sub_824EAF80(ctx, base);
	// stw r3,-30132(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30132, ctx.r3.u32);
	// bl 0x824eb040
	ctx.lr = 0x822FE0F4;
	sub_824EB040(ctx, base);
loc_822FE0F4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29956(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29956);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe114
	if (!ctx.cr6.eq) goto loc_822FE114;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82504718
	ctx.lr = 0x822FE10C;
	sub_82504718(ctx, base);
	// stw r3,-29956(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29956, ctx.r3.u32);
	// bl 0x825047d8
	ctx.lr = 0x822FE114;
	sub_825047D8(ctx, base);
loc_822FE114:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29952(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29952);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe134
	if (!ctx.cr6.eq) goto loc_822FE134;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82504cd8
	ctx.lr = 0x822FE12C;
	sub_82504CD8(ctx, base);
	// stw r3,-29952(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29952, ctx.r3.u32);
	// bl 0x82504d98
	ctx.lr = 0x822FE134;
	sub_82504D98(ctx, base);
loc_822FE134:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29892(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29892);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe154
	if (!ctx.cr6.eq) goto loc_822FE154;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82510430
	ctx.lr = 0x822FE14C;
	sub_82510430(ctx, base);
	// stw r3,-29892(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29892, ctx.r3.u32);
	// bl 0x825104f0
	ctx.lr = 0x822FE154;
	sub_825104F0(ctx, base);
loc_822FE154:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29864(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29864);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe174
	if (!ctx.cr6.eq) goto loc_822FE174;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825188e0
	ctx.lr = 0x822FE16C;
	sub_825188E0(ctx, base);
	// stw r3,-29864(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29864, ctx.r3.u32);
	// bl 0x825189a0
	ctx.lr = 0x822FE174;
	sub_825189A0(ctx, base);
loc_822FE174:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29840(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29840);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe194
	if (!ctx.cr6.eq) goto loc_822FE194;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82519600
	ctx.lr = 0x822FE18C;
	sub_82519600(ctx, base);
	// stw r3,-29840(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29840, ctx.r3.u32);
	// bl 0x825196c0
	ctx.lr = 0x822FE194;
	sub_825196C0(ctx, base);
loc_822FE194:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29880(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29880);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe1b4
	if (!ctx.cr6.eq) goto loc_822FE1B4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82510ac0
	ctx.lr = 0x822FE1AC;
	sub_82510AC0(ctx, base);
	// stw r3,-29880(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29880, ctx.r3.u32);
	// bl 0x82510b80
	ctx.lr = 0x822FE1B4;
	sub_82510B80(ctx, base);
loc_822FE1B4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29860(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29860);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe1d4
	if (!ctx.cr6.eq) goto loc_822FE1D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82518b10
	ctx.lr = 0x822FE1CC;
	sub_82518B10(ctx, base);
	// stw r3,-29860(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29860, ctx.r3.u32);
	// bl 0x82518bd0
	ctx.lr = 0x822FE1D4;
	sub_82518BD0(ctx, base);
loc_822FE1D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29900(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29900);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe1f4
	if (!ctx.cr6.eq) goto loc_822FE1F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8250ffe0
	ctx.lr = 0x822FE1EC;
	sub_8250FFE0(ctx, base);
	// stw r3,-29900(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29900, ctx.r3.u32);
	// bl 0x825100a0
	ctx.lr = 0x822FE1F4;
	sub_825100A0(ctx, base);
loc_822FE1F4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,25376
	ctx.r7.s64 = ctx.r10.s64 + 25376;
	// lwz r11,-29888(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29888);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe230
	if (!ctx.cr6.eq) goto loc_822FE230;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82510660
	ctx.lr = 0x822FE228;
	sub_82510660(ctx, base);
	// stw r3,-29888(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29888, ctx.r3.u32);
	// bl 0x82510720
	ctx.lr = 0x822FE230;
	sub_82510720(ctx, base);
loc_822FE230:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,25496
	ctx.r7.s64 = ctx.r10.s64 + 25496;
	// lwz r11,-27780(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27780);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe26c
	if (!ctx.cr6.eq) goto loc_822FE26C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826cb760
	ctx.lr = 0x822FE264;
	sub_826CB760(ctx, base);
	// stw r3,-27780(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27780, ctx.r3.u32);
	// bl 0x826cb820
	ctx.lr = 0x822FE26C;
	sub_826CB820(ctx, base);
loc_822FE26C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29848(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29848);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe28c
	if (!ctx.cr6.eq) goto loc_822FE28C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825191a0
	ctx.lr = 0x822FE284;
	sub_825191A0(ctx, base);
	// stw r3,-29848(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29848, ctx.r3.u32);
	// bl 0x82519260
	ctx.lr = 0x822FE28C;
	sub_82519260(ctx, base);
loc_822FE28C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31756(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31756);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe2ac
	if (!ctx.cr6.eq) goto loc_822FE2AC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82377158
	ctx.lr = 0x822FE2A4;
	sub_82377158(ctx, base);
	// stw r3,-31756(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31756, ctx.r3.u32);
	// bl 0x82377218
	ctx.lr = 0x822FE2AC;
	sub_82377218(ctx, base);
loc_822FE2AC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,22496
	ctx.r7.s64 = ctx.r10.s64 + 22496;
	// lwz r11,-31752(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31752);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe2e8
	if (!ctx.cr6.eq) goto loc_822FE2E8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82377388
	ctx.lr = 0x822FE2E0;
	sub_82377388(ctx, base);
	// stw r3,-31752(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31752, ctx.r3.u32);
	// bl 0x82377448
	ctx.lr = 0x822FE2E8;
	sub_82377448(ctx, base);
loc_822FE2E8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,22616
	ctx.r7.s64 = ctx.r10.s64 + 22616;
	// lwz r11,-31748(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31748);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe324
	if (!ctx.cr6.eq) goto loc_822FE324;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x823775b8
	ctx.lr = 0x822FE31C;
	sub_823775B8(ctx, base);
	// stw r3,-31748(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31748, ctx.r3.u32);
	// bl 0x82377678
	ctx.lr = 0x822FE324;
	sub_82377678(ctx, base);
loc_822FE324:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,22736
	ctx.r7.s64 = ctx.r10.s64 + 22736;
	// lwz r11,-30848(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30848);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe360
	if (!ctx.cr6.eq) goto loc_822FE360;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82486c78
	ctx.lr = 0x822FE358;
	sub_82486C78(ctx, base);
	// stw r3,-30848(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30848, ctx.r3.u32);
	// bl 0x82486d38
	ctx.lr = 0x822FE360;
	sub_82486D38(ctx, base);
loc_822FE360:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30844(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30844);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe380
	if (!ctx.cr6.eq) goto loc_822FE380;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82486ea0
	ctx.lr = 0x822FE378;
	sub_82486EA0(ctx, base);
	// stw r3,-30844(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30844, ctx.r3.u32);
	// bl 0x82486f60
	ctx.lr = 0x822FE380;
	sub_82486F60(ctx, base);
loc_822FE380:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30864(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30864);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe3a0
	if (!ctx.cr6.eq) goto loc_822FE3A0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824863d0
	ctx.lr = 0x822FE398;
	sub_824863D0(ctx, base);
	// stw r3,-30864(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30864, ctx.r3.u32);
	// bl 0x82486490
	ctx.lr = 0x822FE3A0;
	sub_82486490(ctx, base);
loc_822FE3A0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30856(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30856);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe3c0
	if (!ctx.cr6.eq) goto loc_822FE3C0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82486828
	ctx.lr = 0x822FE3B8;
	sub_82486828(ctx, base);
	// stw r3,-30856(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30856, ctx.r3.u32);
	// bl 0x824868e8
	ctx.lr = 0x822FE3C0;
	sub_824868E8(ctx, base);
loc_822FE3C0:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,22856
	ctx.r7.s64 = ctx.r10.s64 + 22856;
	// lwz r11,-30852(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30852);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe3fc
	if (!ctx.cr6.eq) goto loc_822FE3FC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82486a50
	ctx.lr = 0x822FE3F4;
	sub_82486A50(ctx, base);
	// stw r3,-30852(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30852, ctx.r3.u32);
	// bl 0x82486b10
	ctx.lr = 0x822FE3FC;
	sub_82486B10(ctx, base);
loc_822FE3FC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,22976
	ctx.r7.s64 = ctx.r10.s64 + 22976;
	// lwz r11,-30860(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30860);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe438
	if (!ctx.cr6.eq) goto loc_822FE438;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824865f8
	ctx.lr = 0x822FE430;
	sub_824865F8(ctx, base);
	// stw r3,-30860(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30860, ctx.r3.u32);
	// bl 0x824866b8
	ctx.lr = 0x822FE438;
	sub_824866B8(ctx, base);
loc_822FE438:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28148(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28148);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe458
	if (!ctx.cr6.eq) goto loc_822FE458;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8265ec10
	ctx.lr = 0x822FE450;
	sub_8265EC10(ctx, base);
	// stw r3,-28148(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28148, ctx.r3.u32);
	// bl 0x8265ecd0
	ctx.lr = 0x822FE458;
	sub_8265ECD0(ctx, base);
loc_822FE458:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28140(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28140);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe478
	if (!ctx.cr6.eq) goto loc_822FE478;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8265f068
	ctx.lr = 0x822FE470;
	sub_8265F068(ctx, base);
	// stw r3,-28140(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28140, ctx.r3.u32);
	// bl 0x8265f128
	ctx.lr = 0x822FE478;
	sub_8265F128(ctx, base);
loc_822FE478:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28152(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28152);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe498
	if (!ctx.cr6.eq) goto loc_822FE498;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8265e9e0
	ctx.lr = 0x822FE490;
	sub_8265E9E0(ctx, base);
	// stw r3,-28152(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28152, ctx.r3.u32);
	// bl 0x8265eaa0
	ctx.lr = 0x822FE498;
	sub_8265EAA0(ctx, base);
loc_822FE498:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,23096
	ctx.r7.s64 = ctx.r10.s64 + 23096;
	// lwz r11,-28108(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28108);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe4d4
	if (!ctx.cr6.eq) goto loc_822FE4D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826601e0
	ctx.lr = 0x822FE4CC;
	sub_826601E0(ctx, base);
	// stw r3,-28108(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28108, ctx.r3.u32);
	// bl 0x826602a0
	ctx.lr = 0x822FE4D4;
	sub_826602A0(ctx, base);
loc_822FE4D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28112(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28112);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe4f4
	if (!ctx.cr6.eq) goto loc_822FE4F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8265ffb8
	ctx.lr = 0x822FE4EC;
	sub_8265FFB8(ctx, base);
	// stw r3,-28112(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28112, ctx.r3.u32);
	// bl 0x82660078
	ctx.lr = 0x822FE4F4;
	sub_82660078(ctx, base);
loc_822FE4F4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,23216
	ctx.r7.s64 = ctx.r10.s64 + 23216;
	// lwz r11,-28144(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28144);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe530
	if (!ctx.cr6.eq) goto loc_822FE530;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8265ee40
	ctx.lr = 0x822FE528;
	sub_8265EE40(ctx, base);
	// stw r3,-28144(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28144, ctx.r3.u32);
	// bl 0x8265ef00
	ctx.lr = 0x822FE530;
	sub_8265EF00(ctx, base);
loc_822FE530:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30868(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30868);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe550
	if (!ctx.cr6.eq) goto loc_822FE550;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82479f00
	ctx.lr = 0x822FE548;
	sub_82479F00(ctx, base);
	// stw r3,-30868(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30868, ctx.r3.u32);
	// bl 0x82479fc0
	ctx.lr = 0x822FE550;
	sub_82479FC0(ctx, base);
loc_822FE550:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,23336
	ctx.r7.s64 = ctx.r10.s64 + 23336;
	// lwz r11,-31728(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31728);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe58c
	if (!ctx.cr6.eq) goto loc_822FE58C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x823780a8
	ctx.lr = 0x822FE584;
	sub_823780A8(ctx, base);
	// stw r3,-31728(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31728, ctx.r3.u32);
	// bl 0x82378168
	ctx.lr = 0x822FE58C;
	sub_82378168(ctx, base);
loc_822FE58C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28116(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28116);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe5ac
	if (!ctx.cr6.eq) goto loc_822FE5AC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8265fd88
	ctx.lr = 0x822FE5A4;
	sub_8265FD88(ctx, base);
	// stw r3,-28116(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28116, ctx.r3.u32);
	// bl 0x8265fe48
	ctx.lr = 0x822FE5AC;
	sub_8265FE48(ctx, base);
loc_822FE5AC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31724(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31724);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe5cc
	if (!ctx.cr6.eq) goto loc_822FE5CC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x823782d8
	ctx.lr = 0x822FE5C4;
	sub_823782D8(ctx, base);
	// stw r3,-31724(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31724, ctx.r3.u32);
	// bl 0x82378398
	ctx.lr = 0x822FE5CC;
	sub_82378398(ctx, base);
loc_822FE5CC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30876(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30876);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe5ec
	if (!ctx.cr6.eq) goto loc_822FE5EC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82479aa0
	ctx.lr = 0x822FE5E4;
	sub_82479AA0(ctx, base);
	// stw r3,-30876(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30876, ctx.r3.u32);
	// bl 0x82479b60
	ctx.lr = 0x822FE5EC;
	sub_82479B60(ctx, base);
loc_822FE5EC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,23456
	ctx.r7.s64 = ctx.r10.s64 + 23456;
	// lwz r11,-28136(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28136);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe628
	if (!ctx.cr6.eq) goto loc_822FE628;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8265f298
	ctx.lr = 0x822FE620;
	sub_8265F298(ctx, base);
	// stw r3,-28136(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28136, ctx.r3.u32);
	// bl 0x8265f358
	ctx.lr = 0x822FE628;
	sub_8265F358(ctx, base);
loc_822FE628:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31740(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31740);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe648
	if (!ctx.cr6.eq) goto loc_822FE648;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82377a18
	ctx.lr = 0x822FE640;
	sub_82377A18(ctx, base);
	// stw r3,-31740(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31740, ctx.r3.u32);
	// bl 0x82377ad8
	ctx.lr = 0x822FE648;
	sub_82377AD8(ctx, base);
loc_822FE648:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,23576
	ctx.r7.s64 = ctx.r10.s64 + 23576;
	// lwz r11,-28132(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28132);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe684
	if (!ctx.cr6.eq) goto loc_822FE684;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8265f4c8
	ctx.lr = 0x822FE67C;
	sub_8265F4C8(ctx, base);
	// stw r3,-28132(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28132, ctx.r3.u32);
	// bl 0x8265f588
	ctx.lr = 0x822FE684;
	sub_8265F588(ctx, base);
loc_822FE684:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28124(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28124);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe6a4
	if (!ctx.cr6.eq) goto loc_822FE6A4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8265f928
	ctx.lr = 0x822FE69C;
	sub_8265F928(ctx, base);
	// stw r3,-28124(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28124, ctx.r3.u32);
	// bl 0x8265f9e8
	ctx.lr = 0x822FE6A4;
	sub_8265F9E8(ctx, base);
loc_822FE6A4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31732(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31732);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe6c4
	if (!ctx.cr6.eq) goto loc_822FE6C4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82377e78
	ctx.lr = 0x822FE6BC;
	sub_82377E78(ctx, base);
	// stw r3,-31732(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31732, ctx.r3.u32);
	// bl 0x82377f38
	ctx.lr = 0x822FE6C4;
	sub_82377F38(ctx, base);
loc_822FE6C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31736(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31736);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe6e4
	if (!ctx.cr6.eq) goto loc_822FE6E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82377c48
	ctx.lr = 0x822FE6DC;
	sub_82377C48(ctx, base);
	// stw r3,-31736(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31736, ctx.r3.u32);
	// bl 0x82377d08
	ctx.lr = 0x822FE6E4;
	sub_82377D08(ctx, base);
loc_822FE6E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30880(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30880);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe704
	if (!ctx.cr6.eq) goto loc_822FE704;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82479870
	ctx.lr = 0x822FE6FC;
	sub_82479870(ctx, base);
	// stw r3,-30880(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30880, ctx.r3.u32);
	// bl 0x82479930
	ctx.lr = 0x822FE704;
	sub_82479930(ctx, base);
loc_822FE704:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,23696
	ctx.r7.s64 = ctx.r10.s64 + 23696;
	// lwz r11,-28128(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28128);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe740
	if (!ctx.cr6.eq) goto loc_822FE740;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8265f6f8
	ctx.lr = 0x822FE738;
	sub_8265F6F8(ctx, base);
	// stw r3,-28128(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28128, ctx.r3.u32);
	// bl 0x8265f7b8
	ctx.lr = 0x822FE740;
	sub_8265F7B8(ctx, base);
loc_822FE740:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30872(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30872);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe760
	if (!ctx.cr6.eq) goto loc_822FE760;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82479cd0
	ctx.lr = 0x822FE758;
	sub_82479CD0(ctx, base);
	// stw r3,-30872(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30872, ctx.r3.u32);
	// bl 0x82479d90
	ctx.lr = 0x822FE760;
	sub_82479D90(ctx, base);
loc_822FE760:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,23816
	ctx.r7.s64 = ctx.r10.s64 + 23816;
	// lwz r11,-28120(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28120);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe79c
	if (!ctx.cr6.eq) goto loc_822FE79C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8265fb58
	ctx.lr = 0x822FE794;
	sub_8265FB58(ctx, base);
	// stw r3,-28120(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28120, ctx.r3.u32);
	// bl 0x8265fc18
	ctx.lr = 0x822FE79C;
	sub_8265FC18(ctx, base);
loc_822FE79C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31744(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31744);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe7bc
	if (!ctx.cr6.eq) goto loc_822FE7BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x823777e8
	ctx.lr = 0x822FE7B4;
	sub_823777E8(ctx, base);
	// stw r3,-31744(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31744, ctx.r3.u32);
	// bl 0x823778a8
	ctx.lr = 0x822FE7BC;
	sub_823778A8(ctx, base);
loc_822FE7BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27744(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27744);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe7dc
	if (!ctx.cr6.eq) goto loc_822FE7DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826d4ea8
	ctx.lr = 0x822FE7D4;
	sub_826D4EA8(ctx, base);
	// stw r3,-27744(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27744, ctx.r3.u32);
	// bl 0x826d4f58
	ctx.lr = 0x822FE7DC;
	sub_826D4F58(ctx, base);
loc_822FE7DC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,23936
	ctx.r7.s64 = ctx.r10.s64 + 23936;
	// lwz r11,-27736(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27736);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe818
	if (!ctx.cr6.eq) goto loc_822FE818;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826d52f8
	ctx.lr = 0x822FE810;
	sub_826D52F8(ctx, base);
	// stw r3,-27736(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27736, ctx.r3.u32);
	// bl 0x826d53b8
	ctx.lr = 0x822FE818;
	sub_826D53B8(ctx, base);
loc_822FE818:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,24056
	ctx.r7.s64 = ctx.r10.s64 + 24056;
	// lwz r11,-27616(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27616);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fe854
	if (!ctx.cr6.eq) goto loc_822FE854;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e79b8
	ctx.lr = 0x822FE84C;
	sub_826E79B8(ctx, base);
	// stw r3,-27616(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27616, ctx.r3.u32);
	// bl 0x826e7a78
	ctx.lr = 0x822FE854;
	sub_826E7A78(ctx, base);
loc_822FE854:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27612(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27612);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe874
	if (!ctx.cr6.eq) goto loc_822FE874;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826e7be8
	ctx.lr = 0x822FE86C;
	sub_826E7BE8(ctx, base);
	// stw r3,-27612(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27612, ctx.r3.u32);
	// bl 0x826e7ca8
	ctx.lr = 0x822FE874;
	sub_826E7CA8(ctx, base);
loc_822FE874:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27380(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27380);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe894
	if (!ctx.cr6.eq) goto loc_822FE894;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8274f230
	ctx.lr = 0x822FE88C;
	sub_8274F230(ctx, base);
	// stw r3,-27380(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27380, ctx.r3.u32);
	// bl 0x8274f2f0
	ctx.lr = 0x822FE894;
	sub_8274F2F0(ctx, base);
loc_822FE894:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27740(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27740);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe8b4
	if (!ctx.cr6.eq) goto loc_822FE8B4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826d50c8
	ctx.lr = 0x822FE8AC;
	sub_826D50C8(ctx, base);
	// stw r3,-27740(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27740, ctx.r3.u32);
	// bl 0x826d5188
	ctx.lr = 0x822FE8B4;
	sub_826D5188(ctx, base);
loc_822FE8B4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31440(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31440);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe8d4
	if (!ctx.cr6.eq) goto loc_822FE8D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x823f2a98
	ctx.lr = 0x822FE8CC;
	sub_823F2A98(ctx, base);
	// stw r3,-31440(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31440, ctx.r3.u32);
	// bl 0x823f2b58
	ctx.lr = 0x822FE8D4;
	sub_823F2B58(ctx, base);
loc_822FE8D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31436(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31436);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe8f4
	if (!ctx.cr6.eq) goto loc_822FE8F4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x823f2cc0
	ctx.lr = 0x822FE8EC;
	sub_823F2CC0(ctx, base);
	// stw r3,-31436(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31436, ctx.r3.u32);
	// bl 0x823f2d80
	ctx.lr = 0x822FE8F4;
	sub_823F2D80(ctx, base);
loc_822FE8F4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28976(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28976);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe914
	if (!ctx.cr6.eq) goto loc_822FE914;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825c9918
	ctx.lr = 0x822FE90C;
	sub_825C9918(ctx, base);
	// stw r3,-28976(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28976, ctx.r3.u32);
	// bl 0x825c99d8
	ctx.lr = 0x822FE914;
	sub_825C99D8(ctx, base);
loc_822FE914:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28964(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28964);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe934
	if (!ctx.cr6.eq) goto loc_822FE934;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825c9fa8
	ctx.lr = 0x822FE92C;
	sub_825C9FA8(ctx, base);
	// stw r3,-28964(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28964, ctx.r3.u32);
	// bl 0x825ca068
	ctx.lr = 0x822FE934;
	sub_825CA068(ctx, base);
loc_822FE934:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28968(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28968);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe954
	if (!ctx.cr6.eq) goto loc_822FE954;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825c9d78
	ctx.lr = 0x822FE94C;
	sub_825C9D78(ctx, base);
	// stw r3,-28968(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28968, ctx.r3.u32);
	// bl 0x825c9e38
	ctx.lr = 0x822FE954;
	sub_825C9E38(ctx, base);
loc_822FE954:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28984(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28984);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe974
	if (!ctx.cr6.eq) goto loc_822FE974;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825c94b8
	ctx.lr = 0x822FE96C;
	sub_825C94B8(ctx, base);
	// stw r3,-28984(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28984, ctx.r3.u32);
	// bl 0x825c9578
	ctx.lr = 0x822FE974;
	sub_825C9578(ctx, base);
loc_822FE974:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28980(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28980);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe994
	if (!ctx.cr6.eq) goto loc_822FE994;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825c96e8
	ctx.lr = 0x822FE98C;
	sub_825C96E8(ctx, base);
	// stw r3,-28980(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28980, ctx.r3.u32);
	// bl 0x825c97a8
	ctx.lr = 0x822FE994;
	sub_825C97A8(ctx, base);
loc_822FE994:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30616(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30616);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe9b4
	if (!ctx.cr6.eq) goto loc_822FE9B4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a12d8
	ctx.lr = 0x822FE9AC;
	sub_824A12D8(ctx, base);
	// stw r3,-30616(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30616, ctx.r3.u32);
	// bl 0x824a1398
	ctx.lr = 0x822FE9B4;
	sub_824A1398(ctx, base);
loc_822FE9B4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-26132(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -26132);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fe9d4
	if (!ctx.cr6.eq) goto loc_822FE9D4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827cbaf0
	ctx.lr = 0x822FE9CC;
	sub_827CBAF0(ctx, base);
	// stw r3,-26132(r30)
	PPC_STORE_U32(ctx.r30.u32 + -26132, ctx.r3.u32);
	// bl 0x827cbbb0
	ctx.lr = 0x822FE9D4;
	sub_827CBBB0(ctx, base);
loc_822FE9D4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,24176
	ctx.r7.s64 = ctx.r10.s64 + 24176;
	// lwz r11,-27472(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27472);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fea10
	if (!ctx.cr6.eq) goto loc_822FEA10;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82730ff0
	ctx.lr = 0x822FEA08;
	sub_82730FF0(ctx, base);
	// stw r3,-27472(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27472, ctx.r3.u32);
	// bl 0x827310b0
	ctx.lr = 0x822FEA10;
	sub_827310B0(ctx, base);
loc_822FEA10:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30368(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30368);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fea30
	if (!ctx.cr6.eq) goto loc_822FEA30;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824cb100
	ctx.lr = 0x822FEA28;
	sub_824CB100(ctx, base);
	// stw r3,-30368(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30368, ctx.r3.u32);
	// bl 0x824cb1c0
	ctx.lr = 0x822FEA30;
	sub_824CB1C0(ctx, base);
loc_822FEA30:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30612(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30612);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fea50
	if (!ctx.cr6.eq) goto loc_822FEA50;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a1508
	ctx.lr = 0x822FEA48;
	sub_824A1508(ctx, base);
	// stw r3,-30612(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30612, ctx.r3.u32);
	// bl 0x824a15c8
	ctx.lr = 0x822FEA50;
	sub_824A15C8(ctx, base);
loc_822FEA50:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30608(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30608);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fea70
	if (!ctx.cr6.eq) goto loc_822FEA70;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a1738
	ctx.lr = 0x822FEA68;
	sub_824A1738(ctx, base);
	// stw r3,-30608(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30608, ctx.r3.u32);
	// bl 0x824a17f8
	ctx.lr = 0x822FEA70;
	sub_824A17F8(ctx, base);
loc_822FEA70:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30604(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30604);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fea90
	if (!ctx.cr6.eq) goto loc_822FEA90;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a1968
	ctx.lr = 0x822FEA88;
	sub_824A1968(ctx, base);
	// stw r3,-30604(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30604, ctx.r3.u32);
	// bl 0x824a1a28
	ctx.lr = 0x822FEA90;
	sub_824A1A28(ctx, base);
loc_822FEA90:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30600(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30600);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822feab0
	if (!ctx.cr6.eq) goto loc_822FEAB0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a1b98
	ctx.lr = 0x822FEAA8;
	sub_824A1B98(ctx, base);
	// stw r3,-30600(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30600, ctx.r3.u32);
	// bl 0x824a1c58
	ctx.lr = 0x822FEAB0;
	sub_824A1C58(ctx, base);
loc_822FEAB0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30592(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30592);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fead0
	if (!ctx.cr6.eq) goto loc_822FEAD0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a1ff8
	ctx.lr = 0x822FEAC8;
	sub_824A1FF8(ctx, base);
	// stw r3,-30592(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30592, ctx.r3.u32);
	// bl 0x824a20b8
	ctx.lr = 0x822FEAD0;
	sub_824A20B8(ctx, base);
loc_822FEAD0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30588(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30588);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822feaf0
	if (!ctx.cr6.eq) goto loc_822FEAF0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a2228
	ctx.lr = 0x822FEAE8;
	sub_824A2228(ctx, base);
	// stw r3,-30588(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30588, ctx.r3.u32);
	// bl 0x824a22e8
	ctx.lr = 0x822FEAF0;
	sub_824A22E8(ctx, base);
loc_822FEAF0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30576(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30576);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822feb10
	if (!ctx.cr6.eq) goto loc_822FEB10;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a28b8
	ctx.lr = 0x822FEB08;
	sub_824A28B8(ctx, base);
	// stw r3,-30576(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30576, ctx.r3.u32);
	// bl 0x824a2978
	ctx.lr = 0x822FEB10;
	sub_824A2978(ctx, base);
loc_822FEB10:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30584(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30584);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822feb30
	if (!ctx.cr6.eq) goto loc_822FEB30;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a2458
	ctx.lr = 0x822FEB28;
	sub_824A2458(ctx, base);
	// stw r3,-30584(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30584, ctx.r3.u32);
	// bl 0x824a2518
	ctx.lr = 0x822FEB30;
	sub_824A2518(ctx, base);
loc_822FEB30:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30580(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30580);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822feb50
	if (!ctx.cr6.eq) goto loc_822FEB50;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a2688
	ctx.lr = 0x822FEB48;
	sub_824A2688(ctx, base);
	// stw r3,-30580(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30580, ctx.r3.u32);
	// bl 0x824a2748
	ctx.lr = 0x822FEB50;
	sub_824A2748(ctx, base);
loc_822FEB50:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30572(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30572);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822feb70
	if (!ctx.cr6.eq) goto loc_822FEB70;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a2ae8
	ctx.lr = 0x822FEB68;
	sub_824A2AE8(ctx, base);
	// stw r3,-30572(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30572, ctx.r3.u32);
	// bl 0x824a2ba8
	ctx.lr = 0x822FEB70;
	sub_824A2BA8(ctx, base);
loc_822FEB70:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27396(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27396);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822feb90
	if (!ctx.cr6.eq) goto loc_822FEB90;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82749758
	ctx.lr = 0x822FEB88;
	sub_82749758(ctx, base);
	// stw r3,-27396(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27396, ctx.r3.u32);
	// bl 0x82749818
	ctx.lr = 0x822FEB90;
	sub_82749818(ctx, base);
loc_822FEB90:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,24296
	ctx.r7.s64 = ctx.r10.s64 + 24296;
	// lwz r11,-30568(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30568);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822febcc
	if (!ctx.cr6.eq) goto loc_822FEBCC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a2d18
	ctx.lr = 0x822FEBC4;
	sub_824A2D18(ctx, base);
	// stw r3,-30568(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30568, ctx.r3.u32);
	// bl 0x824a2dd8
	ctx.lr = 0x822FEBCC;
	sub_824A2DD8(ctx, base);
loc_822FEBCC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30564(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30564);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822febec
	if (!ctx.cr6.eq) goto loc_822FEBEC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a2f48
	ctx.lr = 0x822FEBE4;
	sub_824A2F48(ctx, base);
	// stw r3,-30564(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30564, ctx.r3.u32);
	// bl 0x824a3008
	ctx.lr = 0x822FEBEC;
	sub_824A3008(ctx, base);
loc_822FEBEC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30560(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30560);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fec0c
	if (!ctx.cr6.eq) goto loc_822FEC0C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a3178
	ctx.lr = 0x822FEC04;
	sub_824A3178(ctx, base);
	// stw r3,-30560(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30560, ctx.r3.u32);
	// bl 0x824a3238
	ctx.lr = 0x822FEC0C;
	sub_824A3238(ctx, base);
loc_822FEC0C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30556(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30556);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fec2c
	if (!ctx.cr6.eq) goto loc_822FEC2C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a33a8
	ctx.lr = 0x822FEC24;
	sub_824A33A8(ctx, base);
	// stw r3,-30556(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30556, ctx.r3.u32);
	// bl 0x824a3468
	ctx.lr = 0x822FEC2C;
	sub_824A3468(ctx, base);
loc_822FEC2C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30552(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30552);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fec4c
	if (!ctx.cr6.eq) goto loc_822FEC4C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a35d8
	ctx.lr = 0x822FEC44;
	sub_824A35D8(ctx, base);
	// stw r3,-30552(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30552, ctx.r3.u32);
	// bl 0x824a3698
	ctx.lr = 0x822FEC4C;
	sub_824A3698(ctx, base);
loc_822FEC4C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30548(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30548);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fec6c
	if (!ctx.cr6.eq) goto loc_822FEC6C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a3808
	ctx.lr = 0x822FEC64;
	sub_824A3808(ctx, base);
	// stw r3,-30548(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30548, ctx.r3.u32);
	// bl 0x824a38c8
	ctx.lr = 0x822FEC6C;
	sub_824A38C8(ctx, base);
loc_822FEC6C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30544(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30544);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fec8c
	if (!ctx.cr6.eq) goto loc_822FEC8C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a3a38
	ctx.lr = 0x822FEC84;
	sub_824A3A38(ctx, base);
	// stw r3,-30544(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30544, ctx.r3.u32);
	// bl 0x824a3af8
	ctx.lr = 0x822FEC8C;
	sub_824A3AF8(ctx, base);
loc_822FEC8C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30540(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30540);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fecac
	if (!ctx.cr6.eq) goto loc_822FECAC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a3c68
	ctx.lr = 0x822FECA4;
	sub_824A3C68(ctx, base);
	// stw r3,-30540(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30540, ctx.r3.u32);
	// bl 0x824a3d28
	ctx.lr = 0x822FECAC;
	sub_824A3D28(ctx, base);
loc_822FECAC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30536(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30536);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822feccc
	if (!ctx.cr6.eq) goto loc_822FECCC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a3e98
	ctx.lr = 0x822FECC4;
	sub_824A3E98(ctx, base);
	// stw r3,-30536(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30536, ctx.r3.u32);
	// bl 0x824a3f58
	ctx.lr = 0x822FECCC;
	sub_824A3F58(ctx, base);
loc_822FECCC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30372(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30372);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fecec
	if (!ctx.cr6.eq) goto loc_822FECEC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824caed0
	ctx.lr = 0x822FECE4;
	sub_824CAED0(ctx, base);
	// stw r3,-30372(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30372, ctx.r3.u32);
	// bl 0x824caf90
	ctx.lr = 0x822FECEC;
	sub_824CAF90(ctx, base);
loc_822FECEC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,24416
	ctx.r7.s64 = ctx.r10.s64 + 24416;
	// lwz r11,-30532(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30532);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fed28
	if (!ctx.cr6.eq) goto loc_822FED28;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a40c8
	ctx.lr = 0x822FED20;
	sub_824A40C8(ctx, base);
	// stw r3,-30532(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30532, ctx.r3.u32);
	// bl 0x824a4188
	ctx.lr = 0x822FED28;
	sub_824A4188(ctx, base);
loc_822FED28:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30528(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30528);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fed48
	if (!ctx.cr6.eq) goto loc_822FED48;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a42f8
	ctx.lr = 0x822FED40;
	sub_824A42F8(ctx, base);
	// stw r3,-30528(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30528, ctx.r3.u32);
	// bl 0x824a43b8
	ctx.lr = 0x822FED48;
	sub_824A43B8(ctx, base);
loc_822FED48:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,24536
	ctx.r7.s64 = ctx.r10.s64 + 24536;
	// lwz r11,-30524(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30524);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fed84
	if (!ctx.cr6.eq) goto loc_822FED84;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a4528
	ctx.lr = 0x822FED7C;
	sub_824A4528(ctx, base);
	// stw r3,-30524(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30524, ctx.r3.u32);
	// bl 0x824a45e8
	ctx.lr = 0x822FED84;
	sub_824A45E8(ctx, base);
loc_822FED84:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30520(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30520);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822feda4
	if (!ctx.cr6.eq) goto loc_822FEDA4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a4758
	ctx.lr = 0x822FED9C;
	sub_824A4758(ctx, base);
	// stw r3,-30520(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30520, ctx.r3.u32);
	// bl 0x824a4818
	ctx.lr = 0x822FEDA4;
	sub_824A4818(ctx, base);
loc_822FEDA4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30516(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30516);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fedc4
	if (!ctx.cr6.eq) goto loc_822FEDC4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a4988
	ctx.lr = 0x822FEDBC;
	sub_824A4988(ctx, base);
	// stw r3,-30516(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30516, ctx.r3.u32);
	// bl 0x824a4a48
	ctx.lr = 0x822FEDC4;
	sub_824A4A48(ctx, base);
loc_822FEDC4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30512(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30512);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fede4
	if (!ctx.cr6.eq) goto loc_822FEDE4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a4bb8
	ctx.lr = 0x822FEDDC;
	sub_824A4BB8(ctx, base);
	// stw r3,-30512(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30512, ctx.r3.u32);
	// bl 0x824a4c78
	ctx.lr = 0x822FEDE4;
	sub_824A4C78(ctx, base);
loc_822FEDE4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30508(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30508);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fee04
	if (!ctx.cr6.eq) goto loc_822FEE04;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a4de8
	ctx.lr = 0x822FEDFC;
	sub_824A4DE8(ctx, base);
	// stw r3,-30508(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30508, ctx.r3.u32);
	// bl 0x824a4ea8
	ctx.lr = 0x822FEE04;
	sub_824A4EA8(ctx, base);
loc_822FEE04:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30596(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30596);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fee24
	if (!ctx.cr6.eq) goto loc_822FEE24;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a1dc8
	ctx.lr = 0x822FEE1C;
	sub_824A1DC8(ctx, base);
	// stw r3,-30596(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30596, ctx.r3.u32);
	// bl 0x824a1e88
	ctx.lr = 0x822FEE24;
	sub_824A1E88(ctx, base);
loc_822FEE24:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30504(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30504);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fee44
	if (!ctx.cr6.eq) goto loc_822FEE44;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a5018
	ctx.lr = 0x822FEE3C;
	sub_824A5018(ctx, base);
	// stw r3,-30504(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30504, ctx.r3.u32);
	// bl 0x824a50d8
	ctx.lr = 0x822FEE44;
	sub_824A50D8(ctx, base);
loc_822FEE44:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30500(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30500);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fee64
	if (!ctx.cr6.eq) goto loc_822FEE64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a5248
	ctx.lr = 0x822FEE5C;
	sub_824A5248(ctx, base);
	// stw r3,-30500(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30500, ctx.r3.u32);
	// bl 0x824a5308
	ctx.lr = 0x822FEE64;
	sub_824A5308(ctx, base);
loc_822FEE64:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30496(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30496);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fee84
	if (!ctx.cr6.eq) goto loc_822FEE84;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a5478
	ctx.lr = 0x822FEE7C;
	sub_824A5478(ctx, base);
	// stw r3,-30496(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30496, ctx.r3.u32);
	// bl 0x824a5538
	ctx.lr = 0x822FEE84;
	sub_824A5538(ctx, base);
loc_822FEE84:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30492(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30492);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822feea4
	if (!ctx.cr6.eq) goto loc_822FEEA4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a56a8
	ctx.lr = 0x822FEE9C;
	sub_824A56A8(ctx, base);
	// stw r3,-30492(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30492, ctx.r3.u32);
	// bl 0x824a5768
	ctx.lr = 0x822FEEA4;
	sub_824A5768(ctx, base);
loc_822FEEA4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30488(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30488);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822feec4
	if (!ctx.cr6.eq) goto loc_822FEEC4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a58d8
	ctx.lr = 0x822FEEBC;
	sub_824A58D8(ctx, base);
	// stw r3,-30488(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30488, ctx.r3.u32);
	// bl 0x824a5998
	ctx.lr = 0x822FEEC4;
	sub_824A5998(ctx, base);
loc_822FEEC4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30484(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30484);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822feee4
	if (!ctx.cr6.eq) goto loc_822FEEE4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a5b08
	ctx.lr = 0x822FEEDC;
	sub_824A5B08(ctx, base);
	// stw r3,-30484(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30484, ctx.r3.u32);
	// bl 0x824a5bc8
	ctx.lr = 0x822FEEE4;
	sub_824A5BC8(ctx, base);
loc_822FEEE4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30480(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30480);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fef04
	if (!ctx.cr6.eq) goto loc_822FEF04;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a5d38
	ctx.lr = 0x822FEEFC;
	sub_824A5D38(ctx, base);
	// stw r3,-30480(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30480, ctx.r3.u32);
	// bl 0x824a5df8
	ctx.lr = 0x822FEF04;
	sub_824A5DF8(ctx, base);
loc_822FEF04:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30476(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30476);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fef24
	if (!ctx.cr6.eq) goto loc_822FEF24;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a5f68
	ctx.lr = 0x822FEF1C;
	sub_824A5F68(ctx, base);
	// stw r3,-30476(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30476, ctx.r3.u32);
	// bl 0x824a6028
	ctx.lr = 0x822FEF24;
	sub_824A6028(ctx, base);
loc_822FEF24:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30472(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30472);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fef44
	if (!ctx.cr6.eq) goto loc_822FEF44;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a6198
	ctx.lr = 0x822FEF3C;
	sub_824A6198(ctx, base);
	// stw r3,-30472(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30472, ctx.r3.u32);
	// bl 0x824a6258
	ctx.lr = 0x822FEF44;
	sub_824A6258(ctx, base);
loc_822FEF44:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30468(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30468);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fef64
	if (!ctx.cr6.eq) goto loc_822FEF64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a63c8
	ctx.lr = 0x822FEF5C;
	sub_824A63C8(ctx, base);
	// stw r3,-30468(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30468, ctx.r3.u32);
	// bl 0x824a6488
	ctx.lr = 0x822FEF64;
	sub_824A6488(ctx, base);
loc_822FEF64:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30456(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30456);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fef84
	if (!ctx.cr6.eq) goto loc_822FEF84;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a6a58
	ctx.lr = 0x822FEF7C;
	sub_824A6A58(ctx, base);
	// stw r3,-30456(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30456, ctx.r3.u32);
	// bl 0x824a6b18
	ctx.lr = 0x822FEF84;
	sub_824A6B18(ctx, base);
loc_822FEF84:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30464(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30464);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fefa4
	if (!ctx.cr6.eq) goto loc_822FEFA4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a65f8
	ctx.lr = 0x822FEF9C;
	sub_824A65F8(ctx, base);
	// stw r3,-30464(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30464, ctx.r3.u32);
	// bl 0x824a66b8
	ctx.lr = 0x822FEFA4;
	sub_824A66B8(ctx, base);
loc_822FEFA4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30452(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30452);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fefc4
	if (!ctx.cr6.eq) goto loc_822FEFC4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a6c88
	ctx.lr = 0x822FEFBC;
	sub_824A6C88(ctx, base);
	// stw r3,-30452(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30452, ctx.r3.u32);
	// bl 0x824a6d48
	ctx.lr = 0x822FEFC4;
	sub_824A6D48(ctx, base);
loc_822FEFC4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30444(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30444);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fefe4
	if (!ctx.cr6.eq) goto loc_822FEFE4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a70e8
	ctx.lr = 0x822FEFDC;
	sub_824A70E8(ctx, base);
	// stw r3,-30444(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30444, ctx.r3.u32);
	// bl 0x824a71a8
	ctx.lr = 0x822FEFE4;
	sub_824A71A8(ctx, base);
loc_822FEFE4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30440(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30440);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff004
	if (!ctx.cr6.eq) goto loc_822FF004;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a7318
	ctx.lr = 0x822FEFFC;
	sub_824A7318(ctx, base);
	// stw r3,-30440(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30440, ctx.r3.u32);
	// bl 0x824a73d8
	ctx.lr = 0x822FF004;
	sub_824A73D8(ctx, base);
loc_822FF004:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30436(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30436);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff024
	if (!ctx.cr6.eq) goto loc_822FF024;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a7548
	ctx.lr = 0x822FF01C;
	sub_824A7548(ctx, base);
	// stw r3,-30436(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30436, ctx.r3.u32);
	// bl 0x824a7608
	ctx.lr = 0x822FF024;
	sub_824A7608(ctx, base);
loc_822FF024:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30432(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30432);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff044
	if (!ctx.cr6.eq) goto loc_822FF044;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a7778
	ctx.lr = 0x822FF03C;
	sub_824A7778(ctx, base);
	// stw r3,-30432(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30432, ctx.r3.u32);
	// bl 0x824a7838
	ctx.lr = 0x822FF044;
	sub_824A7838(ctx, base);
loc_822FF044:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30428(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30428);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff064
	if (!ctx.cr6.eq) goto loc_822FF064;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a79a8
	ctx.lr = 0x822FF05C;
	sub_824A79A8(ctx, base);
	// stw r3,-30428(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30428, ctx.r3.u32);
	// bl 0x824a7a68
	ctx.lr = 0x822FF064;
	sub_824A7A68(ctx, base);
loc_822FF064:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30424(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30424);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff084
	if (!ctx.cr6.eq) goto loc_822FF084;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a7bd8
	ctx.lr = 0x822FF07C;
	sub_824A7BD8(ctx, base);
	// stw r3,-30424(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30424, ctx.r3.u32);
	// bl 0x824a7c98
	ctx.lr = 0x822FF084;
	sub_824A7C98(ctx, base);
loc_822FF084:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30448(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30448);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff0a4
	if (!ctx.cr6.eq) goto loc_822FF0A4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a6eb8
	ctx.lr = 0x822FF09C;
	sub_824A6EB8(ctx, base);
	// stw r3,-30448(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30448, ctx.r3.u32);
	// bl 0x824a6f78
	ctx.lr = 0x822FF0A4;
	sub_824A6F78(ctx, base);
loc_822FF0A4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27392(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27392);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff0c4
	if (!ctx.cr6.eq) goto loc_822FF0C4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82749988
	ctx.lr = 0x822FF0BC;
	sub_82749988(ctx, base);
	// stw r3,-27392(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27392, ctx.r3.u32);
	// bl 0x82749a48
	ctx.lr = 0x822FF0C4;
	sub_82749A48(ctx, base);
loc_822FF0C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30420(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30420);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff0e4
	if (!ctx.cr6.eq) goto loc_822FF0E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a7e08
	ctx.lr = 0x822FF0DC;
	sub_824A7E08(ctx, base);
	// stw r3,-30420(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30420, ctx.r3.u32);
	// bl 0x824a7ec8
	ctx.lr = 0x822FF0E4;
	sub_824A7EC8(ctx, base);
loc_822FF0E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30416(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30416);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff104
	if (!ctx.cr6.eq) goto loc_822FF104;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a8038
	ctx.lr = 0x822FF0FC;
	sub_824A8038(ctx, base);
	// stw r3,-30416(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30416, ctx.r3.u32);
	// bl 0x824a80f8
	ctx.lr = 0x822FF104;
	sub_824A80F8(ctx, base);
loc_822FF104:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30412(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30412);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff124
	if (!ctx.cr6.eq) goto loc_822FF124;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a8268
	ctx.lr = 0x822FF11C;
	sub_824A8268(ctx, base);
	// stw r3,-30412(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30412, ctx.r3.u32);
	// bl 0x824a8328
	ctx.lr = 0x822FF124;
	sub_824A8328(ctx, base);
loc_822FF124:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30460(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30460);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff144
	if (!ctx.cr6.eq) goto loc_822FF144;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a6828
	ctx.lr = 0x822FF13C;
	sub_824A6828(ctx, base);
	// stw r3,-30460(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30460, ctx.r3.u32);
	// bl 0x824a68e8
	ctx.lr = 0x822FF144;
	sub_824A68E8(ctx, base);
loc_822FF144:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30408(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30408);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff164
	if (!ctx.cr6.eq) goto loc_822FF164;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a8498
	ctx.lr = 0x822FF15C;
	sub_824A8498(ctx, base);
	// stw r3,-30408(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30408, ctx.r3.u32);
	// bl 0x824a8558
	ctx.lr = 0x822FF164;
	sub_824A8558(ctx, base);
loc_822FF164:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30404(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30404);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff184
	if (!ctx.cr6.eq) goto loc_822FF184;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a86c8
	ctx.lr = 0x822FF17C;
	sub_824A86C8(ctx, base);
	// stw r3,-30404(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30404, ctx.r3.u32);
	// bl 0x824a8788
	ctx.lr = 0x822FF184;
	sub_824A8788(ctx, base);
loc_822FF184:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30400(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30400);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff1a4
	if (!ctx.cr6.eq) goto loc_822FF1A4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a88f8
	ctx.lr = 0x822FF19C;
	sub_824A88F8(ctx, base);
	// stw r3,-30400(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30400, ctx.r3.u32);
	// bl 0x824a89b8
	ctx.lr = 0x822FF1A4;
	sub_824A89B8(ctx, base);
loc_822FF1A4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30396(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30396);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff1c4
	if (!ctx.cr6.eq) goto loc_822FF1C4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a8b28
	ctx.lr = 0x822FF1BC;
	sub_824A8B28(ctx, base);
	// stw r3,-30396(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30396, ctx.r3.u32);
	// bl 0x824a8be8
	ctx.lr = 0x822FF1C4;
	sub_824A8BE8(ctx, base);
loc_822FF1C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30392(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30392);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff1e4
	if (!ctx.cr6.eq) goto loc_822FF1E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a8d58
	ctx.lr = 0x822FF1DC;
	sub_824A8D58(ctx, base);
	// stw r3,-30392(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30392, ctx.r3.u32);
	// bl 0x824a8e18
	ctx.lr = 0x822FF1E4;
	sub_824A8E18(ctx, base);
loc_822FF1E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30388(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30388);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff204
	if (!ctx.cr6.eq) goto loc_822FF204;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a8f88
	ctx.lr = 0x822FF1FC;
	sub_824A8F88(ctx, base);
	// stw r3,-30388(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30388, ctx.r3.u32);
	// bl 0x824a9048
	ctx.lr = 0x822FF204;
	sub_824A9048(ctx, base);
loc_822FF204:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30384(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30384);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff224
	if (!ctx.cr6.eq) goto loc_822FF224;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a91b8
	ctx.lr = 0x822FF21C;
	sub_824A91B8(ctx, base);
	// stw r3,-30384(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30384, ctx.r3.u32);
	// bl 0x824a9278
	ctx.lr = 0x822FF224;
	sub_824A9278(ctx, base);
loc_822FF224:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30744(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30744);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff244
	if (!ctx.cr6.eq) goto loc_822FF244;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249ccd8
	ctx.lr = 0x822FF23C;
	sub_8249CCD8(ctx, base);
	// stw r3,-30744(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30744, ctx.r3.u32);
	// bl 0x8249cd98
	ctx.lr = 0x822FF244;
	sub_8249CD98(ctx, base);
loc_822FF244:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30736(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30736);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff264
	if (!ctx.cr6.eq) goto loc_822FF264;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249d138
	ctx.lr = 0x822FF25C;
	sub_8249D138(ctx, base);
	// stw r3,-30736(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30736, ctx.r3.u32);
	// bl 0x8249d1f8
	ctx.lr = 0x822FF264;
	sub_8249D1F8(ctx, base);
loc_822FF264:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30732(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30732);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff284
	if (!ctx.cr6.eq) goto loc_822FF284;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249d368
	ctx.lr = 0x822FF27C;
	sub_8249D368(ctx, base);
	// stw r3,-30732(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30732, ctx.r3.u32);
	// bl 0x8249d428
	ctx.lr = 0x822FF284;
	sub_8249D428(ctx, base);
loc_822FF284:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30728(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30728);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff2a4
	if (!ctx.cr6.eq) goto loc_822FF2A4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249d598
	ctx.lr = 0x822FF29C;
	sub_8249D598(ctx, base);
	// stw r3,-30728(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30728, ctx.r3.u32);
	// bl 0x8249d658
	ctx.lr = 0x822FF2A4;
	sub_8249D658(ctx, base);
loc_822FF2A4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30740(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30740);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff2c4
	if (!ctx.cr6.eq) goto loc_822FF2C4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249cf08
	ctx.lr = 0x822FF2BC;
	sub_8249CF08(ctx, base);
	// stw r3,-30740(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30740, ctx.r3.u32);
	// bl 0x8249cfc8
	ctx.lr = 0x822FF2C4;
	sub_8249CFC8(ctx, base);
loc_822FF2C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30724(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30724);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff2e4
	if (!ctx.cr6.eq) goto loc_822FF2E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249d7c8
	ctx.lr = 0x822FF2DC;
	sub_8249D7C8(ctx, base);
	// stw r3,-30724(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30724, ctx.r3.u32);
	// bl 0x8249d888
	ctx.lr = 0x822FF2E4;
	sub_8249D888(ctx, base);
loc_822FF2E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30720(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30720);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff304
	if (!ctx.cr6.eq) goto loc_822FF304;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249d9f8
	ctx.lr = 0x822FF2FC;
	sub_8249D9F8(ctx, base);
	// stw r3,-30720(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30720, ctx.r3.u32);
	// bl 0x8249dab8
	ctx.lr = 0x822FF304;
	sub_8249DAB8(ctx, base);
loc_822FF304:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30716(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30716);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff324
	if (!ctx.cr6.eq) goto loc_822FF324;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249dc28
	ctx.lr = 0x822FF31C;
	sub_8249DC28(ctx, base);
	// stw r3,-30716(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30716, ctx.r3.u32);
	// bl 0x8249dce8
	ctx.lr = 0x822FF324;
	sub_8249DCE8(ctx, base);
loc_822FF324:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30704(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30704);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff344
	if (!ctx.cr6.eq) goto loc_822FF344;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249e2b8
	ctx.lr = 0x822FF33C;
	sub_8249E2B8(ctx, base);
	// stw r3,-30704(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30704, ctx.r3.u32);
	// bl 0x8249e378
	ctx.lr = 0x822FF344;
	sub_8249E378(ctx, base);
loc_822FF344:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30700(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30700);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff364
	if (!ctx.cr6.eq) goto loc_822FF364;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249e4e8
	ctx.lr = 0x822FF35C;
	sub_8249E4E8(ctx, base);
	// stw r3,-30700(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30700, ctx.r3.u32);
	// bl 0x8249e5a8
	ctx.lr = 0x822FF364;
	sub_8249E5A8(ctx, base);
loc_822FF364:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30712(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30712);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff384
	if (!ctx.cr6.eq) goto loc_822FF384;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249de58
	ctx.lr = 0x822FF37C;
	sub_8249DE58(ctx, base);
	// stw r3,-30712(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30712, ctx.r3.u32);
	// bl 0x8249df18
	ctx.lr = 0x822FF384;
	sub_8249DF18(ctx, base);
loc_822FF384:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30696(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30696);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff3a4
	if (!ctx.cr6.eq) goto loc_822FF3A4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249e718
	ctx.lr = 0x822FF39C;
	sub_8249E718(ctx, base);
	// stw r3,-30696(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30696, ctx.r3.u32);
	// bl 0x8249e7d8
	ctx.lr = 0x822FF3A4;
	sub_8249E7D8(ctx, base);
loc_822FF3A4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30708(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30708);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff3c4
	if (!ctx.cr6.eq) goto loc_822FF3C4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249e088
	ctx.lr = 0x822FF3BC;
	sub_8249E088(ctx, base);
	// stw r3,-30708(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30708, ctx.r3.u32);
	// bl 0x8249e148
	ctx.lr = 0x822FF3C4;
	sub_8249E148(ctx, base);
loc_822FF3C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30692(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30692);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff3e4
	if (!ctx.cr6.eq) goto loc_822FF3E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249e948
	ctx.lr = 0x822FF3DC;
	sub_8249E948(ctx, base);
	// stw r3,-30692(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30692, ctx.r3.u32);
	// bl 0x8249ea08
	ctx.lr = 0x822FF3E4;
	sub_8249EA08(ctx, base);
loc_822FF3E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30688(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30688);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff404
	if (!ctx.cr6.eq) goto loc_822FF404;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249eb78
	ctx.lr = 0x822FF3FC;
	sub_8249EB78(ctx, base);
	// stw r3,-30688(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30688, ctx.r3.u32);
	// bl 0x8249ec38
	ctx.lr = 0x822FF404;
	sub_8249EC38(ctx, base);
loc_822FF404:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30684(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30684);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff424
	if (!ctx.cr6.eq) goto loc_822FF424;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249eda8
	ctx.lr = 0x822FF41C;
	sub_8249EDA8(ctx, base);
	// stw r3,-30684(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30684, ctx.r3.u32);
	// bl 0x8249ee68
	ctx.lr = 0x822FF424;
	sub_8249EE68(ctx, base);
loc_822FF424:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30680(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30680);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff444
	if (!ctx.cr6.eq) goto loc_822FF444;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249efd8
	ctx.lr = 0x822FF43C;
	sub_8249EFD8(ctx, base);
	// stw r3,-30680(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30680, ctx.r3.u32);
	// bl 0x8249f098
	ctx.lr = 0x822FF444;
	sub_8249F098(ctx, base);
loc_822FF444:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30676(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30676);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff464
	if (!ctx.cr6.eq) goto loc_822FF464;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249f208
	ctx.lr = 0x822FF45C;
	sub_8249F208(ctx, base);
	// stw r3,-30676(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30676, ctx.r3.u32);
	// bl 0x8249f2c8
	ctx.lr = 0x822FF464;
	sub_8249F2C8(ctx, base);
loc_822FF464:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30620(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30620);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff484
	if (!ctx.cr6.eq) goto loc_822FF484;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a10a8
	ctx.lr = 0x822FF47C;
	sub_824A10A8(ctx, base);
	// stw r3,-30620(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30620, ctx.r3.u32);
	// bl 0x824a1168
	ctx.lr = 0x822FF484;
	sub_824A1168(ctx, base);
loc_822FF484:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30672(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30672);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff4a4
	if (!ctx.cr6.eq) goto loc_822FF4A4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249f438
	ctx.lr = 0x822FF49C;
	sub_8249F438(ctx, base);
	// stw r3,-30672(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30672, ctx.r3.u32);
	// bl 0x8249f4f8
	ctx.lr = 0x822FF4A4;
	sub_8249F4F8(ctx, base);
loc_822FF4A4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30668(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30668);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff4c4
	if (!ctx.cr6.eq) goto loc_822FF4C4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249f668
	ctx.lr = 0x822FF4BC;
	sub_8249F668(ctx, base);
	// stw r3,-30668(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30668, ctx.r3.u32);
	// bl 0x8249f728
	ctx.lr = 0x822FF4C4;
	sub_8249F728(ctx, base);
loc_822FF4C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30656(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30656);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff4e4
	if (!ctx.cr6.eq) goto loc_822FF4E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249fcf8
	ctx.lr = 0x822FF4DC;
	sub_8249FCF8(ctx, base);
	// stw r3,-30656(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30656, ctx.r3.u32);
	// bl 0x8249fdb8
	ctx.lr = 0x822FF4E4;
	sub_8249FDB8(ctx, base);
loc_822FF4E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30664(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30664);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff504
	if (!ctx.cr6.eq) goto loc_822FF504;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249f898
	ctx.lr = 0x822FF4FC;
	sub_8249F898(ctx, base);
	// stw r3,-30664(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30664, ctx.r3.u32);
	// bl 0x8249f958
	ctx.lr = 0x822FF504;
	sub_8249F958(ctx, base);
loc_822FF504:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30660(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30660);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff524
	if (!ctx.cr6.eq) goto loc_822FF524;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249fac8
	ctx.lr = 0x822FF51C;
	sub_8249FAC8(ctx, base);
	// stw r3,-30660(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30660, ctx.r3.u32);
	// bl 0x8249fb88
	ctx.lr = 0x822FF524;
	sub_8249FB88(ctx, base);
loc_822FF524:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30652(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30652);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff544
	if (!ctx.cr6.eq) goto loc_822FF544;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249ff28
	ctx.lr = 0x822FF53C;
	sub_8249FF28(ctx, base);
	// stw r3,-30652(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30652, ctx.r3.u32);
	// bl 0x8249ffe8
	ctx.lr = 0x822FF544;
	sub_8249FFE8(ctx, base);
loc_822FF544:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30648(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30648);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff564
	if (!ctx.cr6.eq) goto loc_822FF564;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a0158
	ctx.lr = 0x822FF55C;
	sub_824A0158(ctx, base);
	// stw r3,-30648(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30648, ctx.r3.u32);
	// bl 0x824a0218
	ctx.lr = 0x822FF564;
	sub_824A0218(ctx, base);
loc_822FF564:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30644(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30644);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff584
	if (!ctx.cr6.eq) goto loc_822FF584;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a0388
	ctx.lr = 0x822FF57C;
	sub_824A0388(ctx, base);
	// stw r3,-30644(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30644, ctx.r3.u32);
	// bl 0x824a0448
	ctx.lr = 0x822FF584;
	sub_824A0448(ctx, base);
loc_822FF584:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30640(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30640);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff5a4
	if (!ctx.cr6.eq) goto loc_822FF5A4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a05b8
	ctx.lr = 0x822FF59C;
	sub_824A05B8(ctx, base);
	// stw r3,-30640(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30640, ctx.r3.u32);
	// bl 0x824a0678
	ctx.lr = 0x822FF5A4;
	sub_824A0678(ctx, base);
loc_822FF5A4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30636(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30636);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff5c4
	if (!ctx.cr6.eq) goto loc_822FF5C4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a07e8
	ctx.lr = 0x822FF5BC;
	sub_824A07E8(ctx, base);
	// stw r3,-30636(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30636, ctx.r3.u32);
	// bl 0x824a08a8
	ctx.lr = 0x822FF5C4;
	sub_824A08A8(ctx, base);
loc_822FF5C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30632(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30632);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff5e4
	if (!ctx.cr6.eq) goto loc_822FF5E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a0a18
	ctx.lr = 0x822FF5DC;
	sub_824A0A18(ctx, base);
	// stw r3,-30632(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30632, ctx.r3.u32);
	// bl 0x824a0ad8
	ctx.lr = 0x822FF5E4;
	sub_824A0AD8(ctx, base);
loc_822FF5E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30628(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30628);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff604
	if (!ctx.cr6.eq) goto loc_822FF604;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a0c48
	ctx.lr = 0x822FF5FC;
	sub_824A0C48(ctx, base);
	// stw r3,-30628(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30628, ctx.r3.u32);
	// bl 0x824a0d08
	ctx.lr = 0x822FF604;
	sub_824A0D08(ctx, base);
loc_822FF604:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,24656
	ctx.r7.s64 = ctx.r10.s64 + 24656;
	// lwz r11,-30624(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30624);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822ff640
	if (!ctx.cr6.eq) goto loc_822FF640;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824a0e78
	ctx.lr = 0x822FF638;
	sub_824A0E78(ctx, base);
	// stw r3,-30624(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30624, ctx.r3.u32);
	// bl 0x824a0f38
	ctx.lr = 0x822FF640;
	sub_824A0F38(ctx, base);
loc_822FF640:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30840(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30840);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff660
	if (!ctx.cr6.eq) goto loc_822FF660;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82499860
	ctx.lr = 0x822FF658;
	sub_82499860(ctx, base);
	// stw r3,-30840(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30840, ctx.r3.u32);
	// bl 0x82499920
	ctx.lr = 0x822FF660;
	sub_82499920(ctx, base);
loc_822FF660:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,24776
	ctx.r7.s64 = ctx.r10.s64 + 24776;
	// lwz r11,-30836(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30836);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822ff69c
	if (!ctx.cr6.eq) goto loc_822FF69C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82499a90
	ctx.lr = 0x822FF694;
	sub_82499A90(ctx, base);
	// stw r3,-30836(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30836, ctx.r3.u32);
	// bl 0x82499b50
	ctx.lr = 0x822FF69C;
	sub_82499B50(ctx, base);
loc_822FF69C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30832(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30832);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff6bc
	if (!ctx.cr6.eq) goto loc_822FF6BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82499cc0
	ctx.lr = 0x822FF6B4;
	sub_82499CC0(ctx, base);
	// stw r3,-30832(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30832, ctx.r3.u32);
	// bl 0x82499d80
	ctx.lr = 0x822FF6BC;
	sub_82499D80(ctx, base);
loc_822FF6BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30828(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30828);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff6dc
	if (!ctx.cr6.eq) goto loc_822FF6DC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82499ef0
	ctx.lr = 0x822FF6D4;
	sub_82499EF0(ctx, base);
	// stw r3,-30828(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30828, ctx.r3.u32);
	// bl 0x82499fb0
	ctx.lr = 0x822FF6DC;
	sub_82499FB0(ctx, base);
loc_822FF6DC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,24896
	ctx.r7.s64 = ctx.r10.s64 + 24896;
	// lwz r11,-30824(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30824);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822ff718
	if (!ctx.cr6.eq) goto loc_822FF718;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249a120
	ctx.lr = 0x822FF710;
	sub_8249A120(ctx, base);
	// stw r3,-30824(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30824, ctx.r3.u32);
	// bl 0x8249a1e0
	ctx.lr = 0x822FF718;
	sub_8249A1E0(ctx, base);
loc_822FF718:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30820(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30820);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff738
	if (!ctx.cr6.eq) goto loc_822FF738;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249a350
	ctx.lr = 0x822FF730;
	sub_8249A350(ctx, base);
	// stw r3,-30820(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30820, ctx.r3.u32);
	// bl 0x8249a410
	ctx.lr = 0x822FF738;
	sub_8249A410(ctx, base);
loc_822FF738:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30816(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30816);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff758
	if (!ctx.cr6.eq) goto loc_822FF758;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249a580
	ctx.lr = 0x822FF750;
	sub_8249A580(ctx, base);
	// stw r3,-30816(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30816, ctx.r3.u32);
	// bl 0x8249a640
	ctx.lr = 0x822FF758;
	sub_8249A640(ctx, base);
loc_822FF758:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,25016
	ctx.r7.s64 = ctx.r10.s64 + 25016;
	// lwz r11,-30812(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30812);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822ff794
	if (!ctx.cr6.eq) goto loc_822FF794;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249a7a8
	ctx.lr = 0x822FF78C;
	sub_8249A7A8(ctx, base);
	// stw r3,-30812(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30812, ctx.r3.u32);
	// bl 0x8249a868
	ctx.lr = 0x822FF794;
	sub_8249A868(ctx, base);
loc_822FF794:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,25136
	ctx.r7.s64 = ctx.r10.s64 + 25136;
	// lwz r11,-30808(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30808);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822ff7d0
	if (!ctx.cr6.eq) goto loc_822FF7D0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249a9d8
	ctx.lr = 0x822FF7C8;
	sub_8249A9D8(ctx, base);
	// stw r3,-30808(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30808, ctx.r3.u32);
	// bl 0x8249aa98
	ctx.lr = 0x822FF7D0;
	sub_8249AA98(ctx, base);
loc_822FF7D0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30804(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30804);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff7f0
	if (!ctx.cr6.eq) goto loc_822FF7F0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249ac08
	ctx.lr = 0x822FF7E8;
	sub_8249AC08(ctx, base);
	// stw r3,-30804(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30804, ctx.r3.u32);
	// bl 0x8249acc8
	ctx.lr = 0x822FF7F0;
	sub_8249ACC8(ctx, base);
loc_822FF7F0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30800(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30800);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff810
	if (!ctx.cr6.eq) goto loc_822FF810;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249ae38
	ctx.lr = 0x822FF808;
	sub_8249AE38(ctx, base);
	// stw r3,-30800(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30800, ctx.r3.u32);
	// bl 0x8249aef8
	ctx.lr = 0x822FF810;
	sub_8249AEF8(ctx, base);
loc_822FF810:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30796(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30796);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff830
	if (!ctx.cr6.eq) goto loc_822FF830;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249b068
	ctx.lr = 0x822FF828;
	sub_8249B068(ctx, base);
	// stw r3,-30796(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30796, ctx.r3.u32);
	// bl 0x8249b128
	ctx.lr = 0x822FF830;
	sub_8249B128(ctx, base);
loc_822FF830:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30792(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30792);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff850
	if (!ctx.cr6.eq) goto loc_822FF850;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249b298
	ctx.lr = 0x822FF848;
	sub_8249B298(ctx, base);
	// stw r3,-30792(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30792, ctx.r3.u32);
	// bl 0x8249b358
	ctx.lr = 0x822FF850;
	sub_8249B358(ctx, base);
loc_822FF850:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27404(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27404);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff870
	if (!ctx.cr6.eq) goto loc_822FF870;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827492f8
	ctx.lr = 0x822FF868;
	sub_827492F8(ctx, base);
	// stw r3,-27404(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27404, ctx.r3.u32);
	// bl 0x827493b8
	ctx.lr = 0x822FF870;
	sub_827493B8(ctx, base);
loc_822FF870:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27400(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27400);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff890
	if (!ctx.cr6.eq) goto loc_822FF890;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82749528
	ctx.lr = 0x822FF888;
	sub_82749528(ctx, base);
	// stw r3,-27400(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27400, ctx.r3.u32);
	// bl 0x827495e8
	ctx.lr = 0x822FF890;
	sub_827495E8(ctx, base);
loc_822FF890:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30788(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30788);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff8b0
	if (!ctx.cr6.eq) goto loc_822FF8B0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249b4c8
	ctx.lr = 0x822FF8A8;
	sub_8249B4C8(ctx, base);
	// stw r3,-30788(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30788, ctx.r3.u32);
	// bl 0x8249b588
	ctx.lr = 0x822FF8B0;
	sub_8249B588(ctx, base);
loc_822FF8B0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30784(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30784);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff8d0
	if (!ctx.cr6.eq) goto loc_822FF8D0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249b6f8
	ctx.lr = 0x822FF8C8;
	sub_8249B6F8(ctx, base);
	// stw r3,-30784(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30784, ctx.r3.u32);
	// bl 0x8249b7b8
	ctx.lr = 0x822FF8D0;
	sub_8249B7B8(ctx, base);
loc_822FF8D0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30780(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30780);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff8f0
	if (!ctx.cr6.eq) goto loc_822FF8F0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249b928
	ctx.lr = 0x822FF8E8;
	sub_8249B928(ctx, base);
	// stw r3,-30780(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30780, ctx.r3.u32);
	// bl 0x8249b9e8
	ctx.lr = 0x822FF8F0;
	sub_8249B9E8(ctx, base);
loc_822FF8F0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30776(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30776);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff910
	if (!ctx.cr6.eq) goto loc_822FF910;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249bb58
	ctx.lr = 0x822FF908;
	sub_8249BB58(ctx, base);
	// stw r3,-30776(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30776, ctx.r3.u32);
	// bl 0x8249bc18
	ctx.lr = 0x822FF910;
	sub_8249BC18(ctx, base);
loc_822FF910:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30772(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30772);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff930
	if (!ctx.cr6.eq) goto loc_822FF930;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249bd88
	ctx.lr = 0x822FF928;
	sub_8249BD88(ctx, base);
	// stw r3,-30772(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30772, ctx.r3.u32);
	// bl 0x8249be48
	ctx.lr = 0x822FF930;
	sub_8249BE48(ctx, base);
loc_822FF930:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30768(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30768);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff950
	if (!ctx.cr6.eq) goto loc_822FF950;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249bfb8
	ctx.lr = 0x822FF948;
	sub_8249BFB8(ctx, base);
	// stw r3,-30768(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30768, ctx.r3.u32);
	// bl 0x8249c078
	ctx.lr = 0x822FF950;
	sub_8249C078(ctx, base);
loc_822FF950:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30764(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30764);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff970
	if (!ctx.cr6.eq) goto loc_822FF970;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249c1e8
	ctx.lr = 0x822FF968;
	sub_8249C1E8(ctx, base);
	// stw r3,-30764(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30764, ctx.r3.u32);
	// bl 0x8249c2a8
	ctx.lr = 0x822FF970;
	sub_8249C2A8(ctx, base);
loc_822FF970:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30760(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30760);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff990
	if (!ctx.cr6.eq) goto loc_822FF990;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249c418
	ctx.lr = 0x822FF988;
	sub_8249C418(ctx, base);
	// stw r3,-30760(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30760, ctx.r3.u32);
	// bl 0x8249c4d8
	ctx.lr = 0x822FF990;
	sub_8249C4D8(ctx, base);
loc_822FF990:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30756(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30756);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff9b0
	if (!ctx.cr6.eq) goto loc_822FF9B0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249c648
	ctx.lr = 0x822FF9A8;
	sub_8249C648(ctx, base);
	// stw r3,-30756(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30756, ctx.r3.u32);
	// bl 0x8249c708
	ctx.lr = 0x822FF9B0;
	sub_8249C708(ctx, base);
loc_822FF9B0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30748(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30748);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff9d0
	if (!ctx.cr6.eq) goto loc_822FF9D0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249caa8
	ctx.lr = 0x822FF9C8;
	sub_8249CAA8(ctx, base);
	// stw r3,-30748(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30748, ctx.r3.u32);
	// bl 0x8249cb68
	ctx.lr = 0x822FF9D0;
	sub_8249CB68(ctx, base);
loc_822FF9D0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30752(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30752);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ff9f0
	if (!ctx.cr6.eq) goto loc_822FF9F0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8249c878
	ctx.lr = 0x822FF9E8;
	sub_8249C878(ctx, base);
	// stw r3,-30752(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30752, ctx.r3.u32);
	// bl 0x8249c938
	ctx.lr = 0x822FF9F0;
	sub_8249C938(ctx, base);
loc_822FF9F0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31304(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31304);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffa10
	if (!ctx.cr6.eq) goto loc_822FFA10;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8240f750
	ctx.lr = 0x822FFA08;
	sub_8240F750(ctx, base);
	// stw r3,-31304(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31304, ctx.r3.u32);
	// bl 0x8240f810
	ctx.lr = 0x822FFA10;
	sub_8240F810(ctx, base);
loc_822FFA10:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31292(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31292);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffa30
	if (!ctx.cr6.eq) goto loc_822FFA30;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82413580
	ctx.lr = 0x822FFA28;
	sub_82413580(ctx, base);
	// stw r3,-31292(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31292, ctx.r3.u32);
	// bl 0x82413640
	ctx.lr = 0x822FFA30;
	sub_82413640(ctx, base);
loc_822FFA30:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31288(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31288);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffa50
	if (!ctx.cr6.eq) goto loc_822FFA50;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82413e58
	ctx.lr = 0x822FFA48;
	sub_82413E58(ctx, base);
	// stw r3,-31288(r30)
	PPC_STORE_U32(ctx.r30.u32 + -31288, ctx.r3.u32);
	// bl 0x82413f18
	ctx.lr = 0x822FFA50;
	sub_82413F18(ctx, base);
loc_822FFA50:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28336(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28336);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffa70
	if (!ctx.cr6.eq) goto loc_822FFA70;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82633028
	ctx.lr = 0x822FFA68;
	sub_82633028(ctx, base);
	// stw r3,-28336(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28336, ctx.r3.u32);
	// bl 0x826330e8
	ctx.lr = 0x822FFA70;
	sub_826330E8(ctx, base);
loc_822FFA70:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28364(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28364);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffa90
	if (!ctx.cr6.eq) goto loc_822FFA90;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82630678
	ctx.lr = 0x822FFA88;
	sub_82630678(ctx, base);
	// stw r3,-28364(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28364, ctx.r3.u32);
	// bl 0x82630738
	ctx.lr = 0x822FFA90;
	sub_82630738(ctx, base);
loc_822FFA90:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28360(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28360);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffab0
	if (!ctx.cr6.eq) goto loc_822FFAB0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82630fe8
	ctx.lr = 0x822FFAA8;
	sub_82630FE8(ctx, base);
	// stw r3,-28360(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28360, ctx.r3.u32);
	// bl 0x826310a8
	ctx.lr = 0x822FFAB0;
	sub_826310A8(ctx, base);
loc_822FFAB0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28384(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28384);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffad0
	if (!ctx.cr6.eq) goto loc_822FFAD0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8262ee68
	ctx.lr = 0x822FFAC8;
	sub_8262EE68(ctx, base);
	// stw r3,-28384(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28384, ctx.r3.u32);
	// bl 0x8262ef28
	ctx.lr = 0x822FFAD0;
	sub_8262EF28(ctx, base);
loc_822FFAD0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28344(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffaf0
	if (!ctx.cr6.eq) goto loc_822FFAF0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826327f8
	ctx.lr = 0x822FFAE8;
	sub_826327F8(ctx, base);
	// stw r3,-28344(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28344, ctx.r3.u32);
	// bl 0x826328b8
	ctx.lr = 0x822FFAF0;
	sub_826328B8(ctx, base);
loc_822FFAF0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28348(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28348);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffb10
	if (!ctx.cr6.eq) goto loc_822FFB10;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82631ff0
	ctx.lr = 0x822FFB08;
	sub_82631FF0(ctx, base);
	// stw r3,-28348(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28348, ctx.r3.u32);
	// bl 0x826320b0
	ctx.lr = 0x822FFB10;
	sub_826320B0(ctx, base);
loc_822FFB10:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28392(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28392);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffb30
	if (!ctx.cr6.eq) goto loc_822FFB30;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8262d728
	ctx.lr = 0x822FFB28;
	sub_8262D728(ctx, base);
	// stw r3,-28392(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28392, ctx.r3.u32);
	// bl 0x8262d7e8
	ctx.lr = 0x822FFB30;
	sub_8262D7E8(ctx, base);
loc_822FFB30:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28380(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28380);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffb50
	if (!ctx.cr6.eq) goto loc_822FFB50;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8262f628
	ctx.lr = 0x822FFB48;
	sub_8262F628(ctx, base);
	// stw r3,-28380(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28380, ctx.r3.u32);
	// bl 0x8262f6e8
	ctx.lr = 0x822FFB50;
	sub_8262F6E8(ctx, base);
loc_822FFB50:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28332(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28332);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffb70
	if (!ctx.cr6.eq) goto loc_822FFB70;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82633628
	ctx.lr = 0x822FFB68;
	sub_82633628(ctx, base);
	// stw r3,-28332(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28332, ctx.r3.u32);
	// bl 0x826336e8
	ctx.lr = 0x822FFB70;
	sub_826336E8(ctx, base);
loc_822FFB70:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28396(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28396);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffb90
	if (!ctx.cr6.eq) goto loc_822FFB90;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8262cdf0
	ctx.lr = 0x822FFB88;
	sub_8262CDF0(ctx, base);
	// stw r3,-28396(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28396, ctx.r3.u32);
	// bl 0x8262ceb0
	ctx.lr = 0x822FFB90;
	sub_8262CEB0(ctx, base);
loc_822FFB90:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28372(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28372);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffbb0
	if (!ctx.cr6.eq) goto loc_822FFBB0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8262fd60
	ctx.lr = 0x822FFBA8;
	sub_8262FD60(ctx, base);
	// stw r3,-28372(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28372, ctx.r3.u32);
	// bl 0x8262fe20
	ctx.lr = 0x822FFBB0;
	sub_8262FE20(ctx, base);
loc_822FFBB0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28368(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28368);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffbd0
	if (!ctx.cr6.eq) goto loc_822FFBD0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82630080
	ctx.lr = 0x822FFBC8;
	sub_82630080(ctx, base);
	// stw r3,-28368(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28368, ctx.r3.u32);
	// bl 0x82630140
	ctx.lr = 0x822FFBD0;
	sub_82630140(ctx, base);
loc_822FFBD0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28376(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28376);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffbf0
	if (!ctx.cr6.eq) goto loc_822FFBF0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8262fa08
	ctx.lr = 0x822FFBE8;
	sub_8262FA08(ctx, base);
	// stw r3,-28376(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28376, ctx.r3.u32);
	// bl 0x8262fac8
	ctx.lr = 0x822FFBF0;
	sub_8262FAC8(ctx, base);
loc_822FFBF0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28352(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28352);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffc10
	if (!ctx.cr6.eq) goto loc_822FFC10;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82631ba0
	ctx.lr = 0x822FFC08;
	sub_82631BA0(ctx, base);
	// stw r3,-28352(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28352, ctx.r3.u32);
	// bl 0x82631c60
	ctx.lr = 0x822FFC10;
	sub_82631C60(ctx, base);
loc_822FFC10:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30900(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30900);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffc30
	if (!ctx.cr6.eq) goto loc_822FFC30;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82456e40
	ctx.lr = 0x822FFC28;
	sub_82456E40(ctx, base);
	// stw r3,-30900(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30900, ctx.r3.u32);
	// bl 0x82456f00
	ctx.lr = 0x822FFC30;
	sub_82456F00(ctx, base);
loc_822FFC30:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,22256
	ctx.r7.s64 = ctx.r10.s64 + 22256;
	// lwz r11,-30896(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30896);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822ffc6c
	if (!ctx.cr6.eq) goto loc_822FFC6C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82457070
	ctx.lr = 0x822FFC64;
	sub_82457070(ctx, base);
	// stw r3,-30896(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30896, ctx.r3.u32);
	// bl 0x82457130
	ctx.lr = 0x822FFC6C;
	sub_82457130(ctx, base);
loc_822FFC6C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30888(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30888);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffc8c
	if (!ctx.cr6.eq) goto loc_822FFC8C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824574c8
	ctx.lr = 0x822FFC84;
	sub_824574C8(ctx, base);
	// stw r3,-30888(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30888, ctx.r3.u32);
	// bl 0x82457588
	ctx.lr = 0x822FFC8C;
	sub_82457588(ctx, base);
loc_822FFC8C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,22376
	ctx.r7.s64 = ctx.r10.s64 + 22376;
	// lwz r11,-30892(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30892);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822ffcc8
	if (!ctx.cr6.eq) goto loc_822FFCC8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824572a0
	ctx.lr = 0x822FFCC0;
	sub_824572A0(ctx, base);
	// stw r3,-30892(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30892, ctx.r3.u32);
	// bl 0x82457360
	ctx.lr = 0x822FFCC8;
	sub_82457360(ctx, base);
loc_822FFCC8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-30884(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -30884);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffce8
	if (!ctx.cr6.eq) goto loc_822FFCE8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8246a378
	ctx.lr = 0x822FFCE0;
	sub_8246A378(ctx, base);
	// stw r3,-30884(r30)
	PPC_STORE_U32(ctx.r30.u32 + -30884, ctx.r3.u32);
	// bl 0x8246a438
	ctx.lr = 0x822FFCE8;
	sub_8246A438(ctx, base);
loc_822FFCE8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27776(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27776);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffd08
	if (!ctx.cr6.eq) goto loc_822FFD08;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826cbfa8
	ctx.lr = 0x822FFD00;
	sub_826CBFA8(ctx, base);
	// stw r3,-27776(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27776, ctx.r3.u32);
	// bl 0x826cc058
	ctx.lr = 0x822FFD08;
	sub_826CC058(ctx, base);
loc_822FFD08:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29696(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29696);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffd28
	if (!ctx.cr6.eq) goto loc_822FFD28;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8253e5b8
	ctx.lr = 0x822FFD20;
	sub_8253E5B8(ctx, base);
	// stw r3,-29696(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29696, ctx.r3.u32);
	// bl 0x8253e678
	ctx.lr = 0x822FFD28;
	sub_8253E678(ctx, base);
loc_822FFD28:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,28376
	ctx.r7.s64 = ctx.r10.s64 + 28376;
	// lwz r11,-27292(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27292);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822ffd64
	if (!ctx.cr6.eq) goto loc_822FFD64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82769658
	ctx.lr = 0x822FFD5C;
	sub_82769658(ctx, base);
	// stw r3,-27292(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27292, ctx.r3.u32);
	// bl 0x82769708
	ctx.lr = 0x822FFD64;
	sub_82769708(ctx, base);
loc_822FFD64:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27772(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27772);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffd84
	if (!ctx.cr6.eq) goto loc_822FFD84;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826cc1e0
	ctx.lr = 0x822FFD7C;
	sub_826CC1E0(ctx, base);
	// stw r3,-27772(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27772, ctx.r3.u32);
	// bl 0x826cc2a0
	ctx.lr = 0x822FFD84;
	sub_826CC2A0(ctx, base);
loc_822FFD84:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,28496
	ctx.r7.s64 = ctx.r10.s64 + 28496;
	// lwz r11,-27288(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27288);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822ffdc0
	if (!ctx.cr6.eq) goto loc_822FFDC0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82769890
	ctx.lr = 0x822FFDB8;
	sub_82769890(ctx, base);
	// stw r3,-27288(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27288, ctx.r3.u32);
	// bl 0x82769940
	ctx.lr = 0x822FFDC0;
	sub_82769940(ctx, base);
loc_822FFDC0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28460(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28460);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffde0
	if (!ctx.cr6.eq) goto loc_822FFDE0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8261be30
	ctx.lr = 0x822FFDD8;
	sub_8261BE30(ctx, base);
	// stw r3,-28460(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28460, ctx.r3.u32);
	// bl 0x8261bef0
	ctx.lr = 0x822FFDE0;
	sub_8261BEF0(ctx, base);
loc_822FFDE0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29304(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29304);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffe00
	if (!ctx.cr6.eq) goto loc_822FFE00;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259c9e0
	ctx.lr = 0x822FFDF8;
	sub_8259C9E0(ctx, base);
	// stw r3,-29304(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29304, ctx.r3.u32);
	// bl 0x8259caa0
	ctx.lr = 0x822FFE00;
	sub_8259CAA0(ctx, base);
loc_822FFE00:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,28616
	ctx.r7.s64 = ctx.r10.s64 + 28616;
	// lwz r11,-29308(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29308);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822ffe3c
	if (!ctx.cr6.eq) goto loc_822FFE3C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259c7b0
	ctx.lr = 0x822FFE34;
	sub_8259C7B0(ctx, base);
	// stw r3,-29308(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29308, ctx.r3.u32);
	// bl 0x8259c870
	ctx.lr = 0x822FFE3C;
	sub_8259C870(ctx, base);
loc_822FFE3C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29016(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29016);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffe5c
	if (!ctx.cr6.eq) goto loc_822FFE5C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825c0330
	ctx.lr = 0x822FFE54;
	sub_825C0330(ctx, base);
	// stw r3,-29016(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29016, ctx.r3.u32);
	// bl 0x825c03f0
	ctx.lr = 0x822FFE5C;
	sub_825C03F0(ctx, base);
loc_822FFE5C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-27764(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27764);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822ffe7c
	if (!ctx.cr6.eq) goto loc_822FFE7C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826cc658
	ctx.lr = 0x822FFE74;
	sub_826CC658(ctx, base);
	// stw r3,-27764(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27764, ctx.r3.u32);
	// bl 0x826cc708
	ctx.lr = 0x822FFE7C;
	sub_826CC708(ctx, base);
loc_822FFE7C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,28736
	ctx.r7.s64 = ctx.r10.s64 + 28736;
	// lwz r11,-27768(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -27768);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822ffeb8
	if (!ctx.cr6.eq) goto loc_822FFEB8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826cc410
	ctx.lr = 0x822FFEB0;
	sub_826CC410(ctx, base);
	// stw r3,-27768(r30)
	PPC_STORE_U32(ctx.r30.u32 + -27768, ctx.r3.u32);
	// bl 0x826cc4d0
	ctx.lr = 0x822FFEB8;
	sub_826CC4D0(ctx, base);
loc_822FFEB8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,28856
	ctx.r7.s64 = ctx.r10.s64 + 28856;
	// lwz r11,-29312(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29312);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822ffef4
	if (!ctx.cr6.eq) goto loc_822FFEF4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8258f778
	ctx.lr = 0x822FFEEC;
	sub_8258F778(ctx, base);
	// stw r3,-29312(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29312, ctx.r3.u32);
	// bl 0x8258f838
	ctx.lr = 0x822FFEF4;
	sub_8258F838(ctx, base);
loc_822FFEF4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29488(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29488);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x822fff14
	if (!ctx.cr6.eq) goto loc_822FFF14;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8255b818
	ctx.lr = 0x822FFF0C;
	sub_8255B818(ctx, base);
	// stw r3,-29488(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29488, ctx.r3.u32);
	// bl 0x8255b8d8
	ctx.lr = 0x822FFF14;
	sub_8255B8D8(ctx, base);
loc_822FFF14:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,28992
	ctx.r7.s64 = ctx.r10.s64 + 28992;
	// lwz r11,-29356(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29356);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fff50
	if (!ctx.cr6.eq) goto loc_822FFF50;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8258df68
	ctx.lr = 0x822FFF48;
	sub_8258DF68(ctx, base);
	// stw r3,-29356(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29356, ctx.r3.u32);
	// bl 0x8258e028
	ctx.lr = 0x822FFF50;
	sub_8258E028(ctx, base);
loc_822FFF50:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,29112
	ctx.r7.s64 = ctx.r10.s64 + 29112;
	// lwz r11,-29376(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29376);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fff8c
	if (!ctx.cr6.eq) goto loc_822FFF8C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8255f558
	ctx.lr = 0x822FFF84;
	sub_8255F558(ctx, base);
	// stw r3,-29376(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29376, ctx.r3.u32);
	// bl 0x8255f618
	ctx.lr = 0x822FFF8C;
	sub_8255F618(ctx, base);
loc_822FFF8C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,29232
	ctx.r7.s64 = ctx.r10.s64 + 29232;
	// lwz r11,-29352(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29352);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x822fffc8
	if (!ctx.cr6.eq) goto loc_822FFFC8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8258e190
	ctx.lr = 0x822FFFC0;
	sub_8258E190(ctx, base);
	// stw r3,-29352(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29352, ctx.r3.u32);
	// bl 0x8258e250
	ctx.lr = 0x822FFFC8;
	sub_8258E250(ctx, base);
loc_822FFFC8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,29368
	ctx.r7.s64 = ctx.r10.s64 + 29368;
	// lwz r11,-29492(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29492);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x82300004
	if (!ctx.cr6.eq) goto loc_82300004;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8255b5e8
	ctx.lr = 0x822FFFFC;
	sub_8255B5E8(ctx, base);
	// stw r3,-29492(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29492, ctx.r3.u32);
	// bl 0x8255b6a8
	ctx.lr = 0x82300004;
	sub_8255B6A8(ctx, base);
loc_82300004:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,29504
	ctx.r7.s64 = ctx.r10.s64 + 29504;
	// lwz r11,-29340(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29340);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x82300040
	if (!ctx.cr6.eq) goto loc_82300040;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8258e828
	ctx.lr = 0x82300038;
	sub_8258E828(ctx, base);
	// stw r3,-29340(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29340, ctx.r3.u32);
	// bl 0x8258e8e8
	ctx.lr = 0x82300040;
	sub_8258E8E8(ctx, base);
loc_82300040:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,29624
	ctx.r7.s64 = ctx.r10.s64 + 29624;
	// lwz r11,-29332(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29332);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x8230007c
	if (!ctx.cr6.eq) goto loc_8230007C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8258ec88
	ctx.lr = 0x82300074;
	sub_8258EC88(ctx, base);
	// stw r3,-29332(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29332, ctx.r3.u32);
	// bl 0x8258ed48
	ctx.lr = 0x8230007C;
	sub_8258ED48(ctx, base);
loc_8230007C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29336(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29336);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8230009c
	if (!ctx.cr6.eq) goto loc_8230009C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8258ea58
	ctx.lr = 0x82300094;
	sub_8258EA58(ctx, base);
	// stw r3,-29336(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29336, ctx.r3.u32);
	// bl 0x8258eb18
	ctx.lr = 0x8230009C;
	sub_8258EB18(ctx, base);
loc_8230009C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29244(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823000bc
	if (!ctx.cr6.eq) goto loc_823000BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825acfa8
	ctx.lr = 0x823000B4;
	sub_825ACFA8(ctx, base);
	// stw r3,-29244(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29244, ctx.r3.u32);
	// bl 0x825ad068
	ctx.lr = 0x823000BC;
	sub_825AD068(ctx, base);
loc_823000BC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,29760
	ctx.r7.s64 = ctx.r10.s64 + 29760;
	// lwz r11,-28092(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28092);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x823000f8
	if (!ctx.cr6.eq) goto loc_823000F8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8266c360
	ctx.lr = 0x823000F0;
	sub_8266C360(ctx, base);
	// stw r3,-28092(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28092, ctx.r3.u32);
	// bl 0x8266c420
	ctx.lr = 0x823000F8;
	sub_8266C420(ctx, base);
loc_823000F8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,29880
	ctx.r7.s64 = ctx.r10.s64 + 29880;
	// lwz r11,-29432(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29432);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x82300134
	if (!ctx.cr6.eq) goto loc_82300134;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8255d6b0
	ctx.lr = 0x8230012C;
	sub_8255D6B0(ctx, base);
	// stw r3,-29432(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29432, ctx.r3.u32);
	// bl 0x8255d770
	ctx.lr = 0x82300134;
	sub_8255D770(ctx, base);
loc_82300134:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29448(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29448);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300154
	if (!ctx.cr6.eq) goto loc_82300154;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8255cdf8
	ctx.lr = 0x8230014C;
	sub_8255CDF8(ctx, base);
	// stw r3,-29448(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29448, ctx.r3.u32);
	// bl 0x8255ceb8
	ctx.lr = 0x82300154;
	sub_8255CEB8(ctx, base);
loc_82300154:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,30000
	ctx.r7.s64 = ctx.r10.s64 + 30000;
	// lwz r11,-29444(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29444);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x82300190
	if (!ctx.cr6.eq) goto loc_82300190;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8255d028
	ctx.lr = 0x82300188;
	sub_8255D028(ctx, base);
	// stw r3,-29444(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29444, ctx.r3.u32);
	// bl 0x8255d0e8
	ctx.lr = 0x82300190;
	sub_8255D0E8(ctx, base);
loc_82300190:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,30136
	ctx.r7.s64 = ctx.r10.s64 + 30136;
	// lwz r11,-28072(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28072);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x823001cc
	if (!ctx.cr6.eq) goto loc_823001CC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8266ce50
	ctx.lr = 0x823001C4;
	sub_8266CE50(ctx, base);
	// stw r3,-28072(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28072, ctx.r3.u32);
	// bl 0x8266cf10
	ctx.lr = 0x823001CC;
	sub_8266CF10(ctx, base);
loc_823001CC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29652(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29652);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823001ec
	if (!ctx.cr6.eq) goto loc_823001EC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8253fdd0
	ctx.lr = 0x823001E4;
	sub_8253FDD0(ctx, base);
	// stw r3,-29652(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29652, ctx.r3.u32);
	// bl 0x8253fe90
	ctx.lr = 0x823001EC;
	sub_8253FE90(ctx, base);
loc_823001EC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29592(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29592);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8230020c
	if (!ctx.cr6.eq) goto loc_8230020C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82541ea0
	ctx.lr = 0x82300204;
	sub_82541EA0(ctx, base);
	// stw r3,-29592(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29592, ctx.r3.u32);
	// bl 0x82541f60
	ctx.lr = 0x8230020C;
	sub_82541F60(ctx, base);
loc_8230020C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29608(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29608);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8230022c
	if (!ctx.cr6.eq) goto loc_8230022C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825415e0
	ctx.lr = 0x82300224;
	sub_825415E0(ctx, base);
	// stw r3,-29608(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29608, ctx.r3.u32);
	// bl 0x825416a0
	ctx.lr = 0x8230022C;
	sub_825416A0(ctx, base);
loc_8230022C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29348(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29348);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8230024c
	if (!ctx.cr6.eq) goto loc_8230024C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8258e3c0
	ctx.lr = 0x82300244;
	sub_8258E3C0(ctx, base);
	// stw r3,-29348(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29348, ctx.r3.u32);
	// bl 0x8258e470
	ctx.lr = 0x8230024C;
	sub_8258E470(ctx, base);
loc_8230024C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,30256
	ctx.r7.s64 = ctx.r10.s64 + 30256;
	// lwz r11,-29604(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29604);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x82300288
	if (!ctx.cr6.eq) goto loc_82300288;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82541810
	ctx.lr = 0x82300280;
	sub_82541810(ctx, base);
	// stw r3,-29604(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29604, ctx.r3.u32);
	// bl 0x825418d0
	ctx.lr = 0x82300288;
	sub_825418D0(ctx, base);
loc_82300288:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29588(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29588);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823002a8
	if (!ctx.cr6.eq) goto loc_823002A8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825420d0
	ctx.lr = 0x823002A0;
	sub_825420D0(ctx, base);
	// stw r3,-29588(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29588, ctx.r3.u32);
	// bl 0x82542190
	ctx.lr = 0x823002A8;
	sub_82542190(ctx, base);
loc_823002A8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29584(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29584);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823002c8
	if (!ctx.cr6.eq) goto loc_823002C8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82542300
	ctx.lr = 0x823002C0;
	sub_82542300(ctx, base);
	// stw r3,-29584(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29584, ctx.r3.u32);
	// bl 0x825423c0
	ctx.lr = 0x823002C8;
	sub_825423C0(ctx, base);
loc_823002C8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29580(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29580);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823002e8
	if (!ctx.cr6.eq) goto loc_823002E8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82542530
	ctx.lr = 0x823002E0;
	sub_82542530(ctx, base);
	// stw r3,-29580(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29580, ctx.r3.u32);
	// bl 0x825425f0
	ctx.lr = 0x823002E8;
	sub_825425F0(ctx, base);
loc_823002E8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29648(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29648);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300308
	if (!ctx.cr6.eq) goto loc_82300308;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82540000
	ctx.lr = 0x82300300;
	sub_82540000(ctx, base);
	// stw r3,-29648(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29648, ctx.r3.u32);
	// bl 0x825400c0
	ctx.lr = 0x82300308;
	sub_825400C0(ctx, base);
loc_82300308:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29568(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29568);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300328
	if (!ctx.cr6.eq) goto loc_82300328;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82542bc0
	ctx.lr = 0x82300320;
	sub_82542BC0(ctx, base);
	// stw r3,-29568(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29568, ctx.r3.u32);
	// bl 0x82542c80
	ctx.lr = 0x82300328;
	sub_82542C80(ctx, base);
loc_82300328:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29600(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29600);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300348
	if (!ctx.cr6.eq) goto loc_82300348;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82541a40
	ctx.lr = 0x82300340;
	sub_82541A40(ctx, base);
	// stw r3,-29600(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29600, ctx.r3.u32);
	// bl 0x82541b00
	ctx.lr = 0x82300348;
	sub_82541B00(ctx, base);
loc_82300348:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29624(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29624);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300368
	if (!ctx.cr6.eq) goto loc_82300368;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82540d20
	ctx.lr = 0x82300360;
	sub_82540D20(ctx, base);
	// stw r3,-29624(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29624, ctx.r3.u32);
	// bl 0x82540de0
	ctx.lr = 0x82300368;
	sub_82540DE0(ctx, base);
loc_82300368:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29564(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29564);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300388
	if (!ctx.cr6.eq) goto loc_82300388;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82542df0
	ctx.lr = 0x82300380;
	sub_82542DF0(ctx, base);
	// stw r3,-29564(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29564, ctx.r3.u32);
	// bl 0x82542eb0
	ctx.lr = 0x82300388;
	sub_82542EB0(ctx, base);
loc_82300388:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,30392
	ctx.r7.s64 = ctx.r10.s64 + 30392;
	// lwz r11,-29576(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29576);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x823003c4
	if (!ctx.cr6.eq) goto loc_823003C4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82542760
	ctx.lr = 0x823003BC;
	sub_82542760(ctx, base);
	// stw r3,-29576(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29576, ctx.r3.u32);
	// bl 0x82542820
	ctx.lr = 0x823003C4;
	sub_82542820(ctx, base);
loc_823003C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29484(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29484);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823003e4
	if (!ctx.cr6.eq) goto loc_823003E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8255ba48
	ctx.lr = 0x823003DC;
	sub_8255BA48(ctx, base);
	// stw r3,-29484(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29484, ctx.r3.u32);
	// bl 0x8255bb08
	ctx.lr = 0x823003E4;
	sub_8255BB08(ctx, base);
loc_823003E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29480(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29480);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300404
	if (!ctx.cr6.eq) goto loc_82300404;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8255bc78
	ctx.lr = 0x823003FC;
	sub_8255BC78(ctx, base);
	// stw r3,-29480(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29480, ctx.r3.u32);
	// bl 0x8255bd38
	ctx.lr = 0x82300404;
	sub_8255BD38(ctx, base);
loc_82300404:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,30512
	ctx.r7.s64 = ctx.r10.s64 + 30512;
	// lwz r11,-29384(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29384);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x82300440
	if (!ctx.cr6.eq) goto loc_82300440;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8255f0f8
	ctx.lr = 0x82300438;
	sub_8255F0F8(ctx, base);
	// stw r3,-29384(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29384, ctx.r3.u32);
	// bl 0x8255f1b8
	ctx.lr = 0x82300440;
	sub_8255F1B8(ctx, base);
loc_82300440:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,30648
	ctx.r7.s64 = ctx.r10.s64 + 30648;
	// lwz r11,-29256(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29256);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x8230047c
	if (!ctx.cr6.eq) goto loc_8230047C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259e420
	ctx.lr = 0x82300474;
	sub_8259E420(ctx, base);
	// stw r3,-29256(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29256, ctx.r3.u32);
	// bl 0x8259e4e0
	ctx.lr = 0x8230047C;
	sub_8259E4E0(ctx, base);
loc_8230047C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29264(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29264);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8230049c
	if (!ctx.cr6.eq) goto loc_8230049C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259dfc0
	ctx.lr = 0x82300494;
	sub_8259DFC0(ctx, base);
	// stw r3,-29264(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29264, ctx.r3.u32);
	// bl 0x8259e080
	ctx.lr = 0x8230049C;
	sub_8259E080(ctx, base);
loc_8230049C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29280(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29280);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823004bc
	if (!ctx.cr6.eq) goto loc_823004BC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259d700
	ctx.lr = 0x823004B4;
	sub_8259D700(ctx, base);
	// stw r3,-29280(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29280, ctx.r3.u32);
	// bl 0x8259d7c0
	ctx.lr = 0x823004BC;
	sub_8259D7C0(ctx, base);
loc_823004BC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,30784
	ctx.r7.s64 = ctx.r10.s64 + 30784;
	// lwz r11,-29260(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29260);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x823004f8
	if (!ctx.cr6.eq) goto loc_823004F8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259e1f0
	ctx.lr = 0x823004F0;
	sub_8259E1F0(ctx, base);
	// stw r3,-29260(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29260, ctx.r3.u32);
	// bl 0x8259e2b0
	ctx.lr = 0x823004F8;
	sub_8259E2B0(ctx, base);
loc_823004F8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,30904
	ctx.r7.s64 = ctx.r10.s64 + 30904;
	// lwz r11,-29276(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29276);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x82300534
	if (!ctx.cr6.eq) goto loc_82300534;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259d930
	ctx.lr = 0x8230052C;
	sub_8259D930(ctx, base);
	// stw r3,-29276(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29276, ctx.r3.u32);
	// bl 0x8259d9f0
	ctx.lr = 0x82300534;
	sub_8259D9F0(ctx, base);
loc_82300534:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,31040
	ctx.r7.s64 = ctx.r10.s64 + 31040;
	// lwz r11,-29272(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29272);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x82300570
	if (!ctx.cr6.eq) goto loc_82300570;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259db60
	ctx.lr = 0x82300568;
	sub_8259DB60(ctx, base);
	// stw r3,-29272(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29272, ctx.r3.u32);
	// bl 0x8259dc20
	ctx.lr = 0x82300570;
	sub_8259DC20(ctx, base);
loc_82300570:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29268(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29268);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300590
	if (!ctx.cr6.eq) goto loc_82300590;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259dd90
	ctx.lr = 0x82300588;
	sub_8259DD90(ctx, base);
	// stw r3,-29268(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29268, ctx.r3.u32);
	// bl 0x8259de50
	ctx.lr = 0x82300590;
	sub_8259DE50(ctx, base);
loc_82300590:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29300(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29300);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823005b0
	if (!ctx.cr6.eq) goto loc_823005B0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259cc10
	ctx.lr = 0x823005A8;
	sub_8259CC10(ctx, base);
	// stw r3,-29300(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29300, ctx.r3.u32);
	// bl 0x8259ccd0
	ctx.lr = 0x823005B0;
	sub_8259CCD0(ctx, base);
loc_823005B0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29284(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29284);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823005d0
	if (!ctx.cr6.eq) goto loc_823005D0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259d4d0
	ctx.lr = 0x823005C8;
	sub_8259D4D0(ctx, base);
	// stw r3,-29284(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29284, ctx.r3.u32);
	// bl 0x8259d590
	ctx.lr = 0x823005D0;
	sub_8259D590(ctx, base);
loc_823005D0:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,31176
	ctx.r7.s64 = ctx.r10.s64 + 31176;
	// lwz r11,-29296(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29296);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x8230060c
	if (!ctx.cr6.eq) goto loc_8230060C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259ce40
	ctx.lr = 0x82300604;
	sub_8259CE40(ctx, base);
	// stw r3,-29296(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29296, ctx.r3.u32);
	// bl 0x8259cf00
	ctx.lr = 0x8230060C;
	sub_8259CF00(ctx, base);
loc_8230060C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,31296
	ctx.r7.s64 = ctx.r10.s64 + 31296;
	// lwz r11,-29292(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29292);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x82300648
	if (!ctx.cr6.eq) goto loc_82300648;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259d070
	ctx.lr = 0x82300640;
	sub_8259D070(ctx, base);
	// stw r3,-29292(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29292, ctx.r3.u32);
	// bl 0x8259d130
	ctx.lr = 0x82300648;
	sub_8259D130(ctx, base);
loc_82300648:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29288(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29288);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300668
	if (!ctx.cr6.eq) goto loc_82300668;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8259d2a0
	ctx.lr = 0x82300660;
	sub_8259D2A0(ctx, base);
	// stw r3,-29288(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29288, ctx.r3.u32);
	// bl 0x8259d360
	ctx.lr = 0x82300668;
	sub_8259D360(ctx, base);
loc_82300668:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29684(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29684);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300688
	if (!ctx.cr6.eq) goto loc_82300688;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8253ec60
	ctx.lr = 0x82300680;
	sub_8253EC60(ctx, base);
	// stw r3,-29684(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29684, ctx.r3.u32);
	// bl 0x8253ed20
	ctx.lr = 0x82300688;
	sub_8253ED20(ctx, base);
loc_82300688:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29688(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29688);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823006a8
	if (!ctx.cr6.eq) goto loc_823006A8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8253ea30
	ctx.lr = 0x823006A0;
	sub_8253EA30(ctx, base);
	// stw r3,-29688(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29688, ctx.r3.u32);
	// bl 0x8253eaf0
	ctx.lr = 0x823006A8;
	sub_8253EAF0(ctx, base);
loc_823006A8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29680(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29680);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823006c8
	if (!ctx.cr6.eq) goto loc_823006C8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8253ee90
	ctx.lr = 0x823006C0;
	sub_8253EE90(ctx, base);
	// stw r3,-29680(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29680, ctx.r3.u32);
	// bl 0x8253ef50
	ctx.lr = 0x823006C8;
	sub_8253EF50(ctx, base);
loc_823006C8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29428(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29428);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823006e8
	if (!ctx.cr6.eq) goto loc_823006E8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8255d8e0
	ctx.lr = 0x823006E0;
	sub_8255D8E0(ctx, base);
	// stw r3,-29428(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29428, ctx.r3.u32);
	// bl 0x8255d9a0
	ctx.lr = 0x823006E8;
	sub_8255D9A0(ctx, base);
loc_823006E8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-28064(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -28064);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300708
	if (!ctx.cr6.eq) goto loc_82300708;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8266d2b0
	ctx.lr = 0x82300700;
	sub_8266D2B0(ctx, base);
	// stw r3,-28064(r30)
	PPC_STORE_U32(ctx.r30.u32 + -28064, ctx.r3.u32);
	// bl 0x8266d370
	ctx.lr = 0x82300708;
	sub_8266D370(ctx, base);
loc_82300708:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29692(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29692);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300728
	if (!ctx.cr6.eq) goto loc_82300728;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8253e800
	ctx.lr = 0x82300720;
	sub_8253E800(ctx, base);
	// stw r3,-29692(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29692, ctx.r3.u32);
	// bl 0x8253e8c0
	ctx.lr = 0x82300728;
	sub_8253E8C0(ctx, base);
loc_82300728:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29508(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29508);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300748
	if (!ctx.cr6.eq) goto loc_82300748;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8254fc30
	ctx.lr = 0x82300740;
	sub_8254FC30(ctx, base);
	// stw r3,-29508(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29508, ctx.r3.u32);
	// bl 0x8254fcf0
	ctx.lr = 0x82300748;
	sub_8254FCF0(ctx, base);
loc_82300748:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29528(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29528);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300768
	if (!ctx.cr6.eq) goto loc_82300768;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8254d2d0
	ctx.lr = 0x82300760;
	sub_8254D2D0(ctx, base);
	// stw r3,-29528(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29528, ctx.r3.u32);
	// bl 0x8254d390
	ctx.lr = 0x82300768;
	sub_8254D390(ctx, base);
loc_82300768:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29532(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29532);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300788
	if (!ctx.cr6.eq) goto loc_82300788;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8254d0a0
	ctx.lr = 0x82300780;
	sub_8254D0A0(ctx, base);
	// stw r3,-29532(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29532, ctx.r3.u32);
	// bl 0x8254d160
	ctx.lr = 0x82300788;
	sub_8254D160(ctx, base);
loc_82300788:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29512(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29512);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823007a8
	if (!ctx.cr6.eq) goto loc_823007A8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8254fa00
	ctx.lr = 0x823007A0;
	sub_8254FA00(ctx, base);
	// stw r3,-29512(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29512, ctx.r3.u32);
	// bl 0x8254fac0
	ctx.lr = 0x823007A8;
	sub_8254FAC0(ctx, base);
loc_823007A8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29520(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29520);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823007c8
	if (!ctx.cr6.eq) goto loc_823007C8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8254e688
	ctx.lr = 0x823007C0;
	sub_8254E688(ctx, base);
	// stw r3,-29520(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29520, ctx.r3.u32);
	// bl 0x8254e748
	ctx.lr = 0x823007C8;
	sub_8254E748(ctx, base);
loc_823007C8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29516(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29516);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x823007e8
	if (!ctx.cr6.eq) goto loc_823007E8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8254edf0
	ctx.lr = 0x823007E0;
	sub_8254EDF0(ctx, base);
	// stw r3,-29516(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29516, ctx.r3.u32);
	// bl 0x8254eeb0
	ctx.lr = 0x823007E8;
	sub_8254EEB0(ctx, base);
loc_823007E8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29540(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29540);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300808
	if (!ctx.cr6.eq) goto loc_82300808;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8254b7d8
	ctx.lr = 0x82300800;
	sub_8254B7D8(ctx, base);
	// stw r3,-29540(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29540, ctx.r3.u32);
	// bl 0x8254b898
	ctx.lr = 0x82300808;
	sub_8254B898(ctx, base);
loc_82300808:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29536(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29536);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300828
	if (!ctx.cr6.eq) goto loc_82300828;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8254c468
	ctx.lr = 0x82300820;
	sub_8254C468(ctx, base);
	// stw r3,-29536(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29536, ctx.r3.u32);
	// bl 0x8254c528
	ctx.lr = 0x82300828;
	sub_8254C528(ctx, base);
loc_82300828:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-29676(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29676);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82300848
	if (!ctx.cr6.eq) goto loc_82300848;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8253f0c0
	ctx.lr = 0x82300840;
	sub_8253F0C0(ctx, base);
	// stw r3,-29676(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29676, ctx.r3.u32);
	// bl 0x8253f180
	ctx.lr = 0x82300848;
	sub_8253F180(ctx, base);
loc_82300848:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,31416
	ctx.r7.s64 = ctx.r10.s64 + 31416;
	// lwz r11,-29632(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29632);
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x82300884
	if (!ctx.cr6.eq) goto loc_82300884;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825408c0
	ctx.lr = 0x8230087C;
	sub_825408C0(ctx, base);
	// stw r3,-29632(r30)
	PPC_STORE_U32(ctx.r30.u32 + -29632, ctx.r3.u32);
	// bl 0x82540980
	ctx.lr = 0x82300884;
	sub_82540980(ctx, base);
loc_82300884:
	// bl 0x822e6798
	ctx.lr = 0x82300888;
	sub_822E6798(ctx, base);
	// bl 0x822e67e8
	ctx.lr = 0x8230088C;
	sub_822E67E8(ctx, base);
	// bl 0x822e6838
	ctx.lr = 0x82300890;
	sub_822E6838(ctx, base);
	// bl 0x822e6928
	ctx.lr = 0x82300894;
	sub_822E6928(ctx, base);
	// bl 0x822e6978
	ctx.lr = 0x82300898;
	sub_822E6978(ctx, base);
	// bl 0x822e6ae8
	ctx.lr = 0x8230089C;
	sub_822E6AE8(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,31536
	ctx.r7.s64 = ctx.r10.s64 + 31536;
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bl 0x822e6ca8
	ctx.lr = 0x823008BC;
	sub_822E6CA8(ctx, base);
	// bl 0x822e6b38
	ctx.lr = 0x823008C0;
	sub_822E6B38(ctx, base);
	// bl 0x822e6c08
	ctx.lr = 0x823008C4;
	sub_822E6C08(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r6,-32209
	ctx.r6.s64 = -2110849024;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// addi r3,r6,31672
	ctx.r3.s64 = ctx.r6.s64 + 31672;
	// stw r4,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r4.u32);
	// stwx r3,r5,r28
	PPC_STORE_U32(ctx.r5.u32 + ctx.r28.u32, ctx.r3.u32);
	// bl 0x822e6db0
	ctx.lr = 0x823008E4;
	sub_822E6DB0(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,31808
	ctx.r7.s64 = ctx.r10.s64 + 31808;
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bl 0x822e69c8
	ctx.lr = 0x82300904;
	sub_822E69C8(ctx, base);
	// bl 0x822e6a18
	ctx.lr = 0x82300908;
	sub_822E6A18(ctx, base);
	// bl 0x822e6e00
	ctx.lr = 0x8230090C;
	sub_822E6E00(ctx, base);
	// bl 0x822e6c58
	ctx.lr = 0x82300910;
	sub_822E6C58(ctx, base);
	// bl 0x822e6e50
	ctx.lr = 0x82300914;
	sub_822E6E50(ctx, base);
	// bl 0x822e3f40
	ctx.lr = 0x82300918;
	sub_822E3F40(ctx, base);
	// bl 0x822e3ef0
	ctx.lr = 0x8230091C;
	sub_822E3EF0(ctx, base);
	// bl 0x822e79e0
	ctx.lr = 0x82300920;
	sub_822E79E0(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r6,-32209
	ctx.r6.s64 = -2110849024;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// addi r3,r6,31928
	ctx.r3.s64 = ctx.r6.s64 + 31928;
	// stw r4,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r4.u32);
	// stwx r3,r5,r28
	PPC_STORE_U32(ctx.r5.u32 + ctx.r28.u32, ctx.r3.u32);
	// bl 0x822e77f0
	ctx.lr = 0x82300940;
	sub_822E77F0(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,32048
	ctx.r7.s64 = ctx.r10.s64 + 32048;
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bl 0x822ebe58
	ctx.lr = 0x82300960;
	sub_822EBE58(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r6,-32209
	ctx.r6.s64 = -2110849024;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// addi r3,r6,32168
	ctx.r3.s64 = ctx.r6.s64 + 32168;
	// stw r4,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r4.u32);
	// stwx r3,r5,r28
	PPC_STORE_U32(ctx.r5.u32 + ctx.r28.u32, ctx.r3.u32);
	// bl 0x822f0470
	ctx.lr = 0x82300980;
	sub_822F0470(ctx, base);
	// bl 0x822eac20
	ctx.lr = 0x82300984;
	sub_822EAC20(ctx, base);
	// bl 0x822ec778
	ctx.lr = 0x82300988;
	sub_822EC778(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,32304
	ctx.r7.s64 = ctx.r10.s64 + 32304;
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bl 0x822ecfd0
	ctx.lr = 0x823009A8;
	sub_822ECFD0(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r6,-32209
	ctx.r6.s64 = -2110849024;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// addi r3,r6,32440
	ctx.r3.s64 = ctx.r6.s64 + 32440;
	// stw r4,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r4.u32);
	// stwx r3,r5,r28
	PPC_STORE_U32(ctx.r5.u32 + ctx.r28.u32, ctx.r3.u32);
	// bl 0x822ea390
	ctx.lr = 0x823009C8;
	sub_822EA390(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32209
	ctx.r10.s64 = -2110849024;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,32576
	ctx.r7.s64 = ctx.r10.s64 + 32576;
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bl 0x822ee468
	ctx.lr = 0x823009E8;
	sub_822EE468(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r6,-32209
	ctx.r6.s64 = -2110849024;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// addi r3,r6,32712
	ctx.r3.s64 = ctx.r6.s64 + 32712;
	// stw r4,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r4.u32);
	// stwx r3,r5,r28
	PPC_STORE_U32(ctx.r5.u32 + ctx.r28.u32, ctx.r3.u32);
	// bl 0x822e3f90
	ctx.lr = 0x82300A08;
	sub_822E3F90(ctx, base);
	// bl 0x822e3fe0
	ctx.lr = 0x82300A0C;
	sub_822E3FE0(ctx, base);
	// bl 0x822f04c0
	ctx.lr = 0x82300A10;
	sub_822F04C0(ctx, base);
	// bl 0x822ee4b8
	ctx.lr = 0x82300A14;
	sub_822EE4B8(ctx, base);
	// bl 0x822ec170
	ctx.lr = 0x82300A18;
	sub_822EC170(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32208
	ctx.r10.s64 = -2110783488;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-32688
	ctx.r7.s64 = ctx.r10.s64 + -32688;
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bl 0x822ea628
	ctx.lr = 0x82300A38;
	sub_822EA628(ctx, base);
	// bl 0x822eac70
	ctx.lr = 0x82300A3C;
	sub_822EAC70(ctx, base);
	// bl 0x822ee508
	ctx.lr = 0x82300A40;
	sub_822EE508(ctx, base);
	// bl 0x822ee5c8
	ctx.lr = 0x82300A44;
	sub_822EE5C8(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r6,-32208
	ctx.r6.s64 = -2110783488;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// addi r3,r6,-32552
	ctx.r3.s64 = ctx.r6.s64 + -32552;
	// stw r4,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r4.u32);
	// stwx r3,r5,r28
	PPC_STORE_U32(ctx.r5.u32 + ctx.r28.u32, ctx.r3.u32);
	// bl 0x822f02e0
	ctx.lr = 0x82300A64;
	sub_822F02E0(ctx, base);
	// bl 0x822eeda0
	ctx.lr = 0x82300A68;
	sub_822EEDA0(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32208
	ctx.r10.s64 = -2110783488;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-32432
	ctx.r7.s64 = ctx.r10.s64 + -32432;
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bl 0x822e7840
	ctx.lr = 0x82300A88;
	sub_822E7840(ctx, base);
	// bl 0x822e7d50
	ctx.lr = 0x82300A8C;
	sub_822E7D50(ctx, base);
	// bl 0x822eacc0
	ctx.lr = 0x82300A90;
	sub_822EACC0(ctx, base);
	// bl 0x822ef6d8
	ctx.lr = 0x82300A94;
	sub_822EF6D8(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r6,-32208
	ctx.r6.s64 = -2110783488;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// addi r3,r6,-32296
	ctx.r3.s64 = ctx.r6.s64 + -32296;
	// stw r4,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r4.u32);
	// stwx r3,r5,r28
	PPC_STORE_U32(ctx.r5.u32 + ctx.r28.u32, ctx.r3.u32);
	// bl 0x822ea678
	ctx.lr = 0x82300AB4;
	sub_822EA678(ctx, base);
	// bl 0x822ea6c8
	ctx.lr = 0x82300AB8;
	sub_822EA6C8(ctx, base);
	// bl 0x822eafc8
	ctx.lr = 0x82300ABC;
	sub_822EAFC8(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32208
	ctx.r10.s64 = -2110783488;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-32176
	ctx.r7.s64 = ctx.r10.s64 + -32176;
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bl 0x822e7da0
	ctx.lr = 0x82300ADC;
	sub_822E7DA0(ctx, base);
	// bl 0x822e7430
	ctx.lr = 0x82300AE0;
	sub_822E7430(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r6,-32208
	ctx.r6.s64 = -2110783488;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// addi r3,r6,-32056
	ctx.r3.s64 = ctx.r6.s64 + -32056;
	// stw r4,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r4.u32);
	// stwx r3,r5,r28
	PPC_STORE_U32(ctx.r5.u32 + ctx.r28.u32, ctx.r3.u32);
	// bl 0x822efeb0
	ctx.lr = 0x82300B00;
	sub_822EFEB0(ctx, base);
	// lis r10,-32208
	ctx.r10.s64 = -2110783488;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r9,r10,-31936
	ctx.r9.s64 = ctx.r10.s64 + -31936;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r7,r11,1
	ctx.r7.s64 = ctx.r11.s64 + 1;
	// stw r7,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r7.u32);
	// stwx r9,r8,r28
	PPC_STORE_U32(ctx.r8.u32 + ctx.r28.u32, ctx.r9.u32);
	// bl 0x822f0330
	ctx.lr = 0x82300B20;
	sub_822F0330(ctx, base);
	// bl 0x822f0380
	ctx.lr = 0x82300B24;
	sub_822F0380(ctx, base);
	// bl 0x822f03d0
	ctx.lr = 0x82300B28;
	sub_822F03D0(ctx, base);
	// bl 0x822f0420
	ctx.lr = 0x82300B2C;
	sub_822F0420(ctx, base);
	// bl 0x822e4030
	ctx.lr = 0x82300B30;
	sub_822E4030(ctx, base);
	// bl 0x822f05b0
	ctx.lr = 0x82300B34;
	sub_822F05B0(ctx, base);
	// bl 0x822f0510
	ctx.lr = 0x82300B38;
	sub_822F0510(ctx, base);
	// bl 0x822f0600
	ctx.lr = 0x82300B3C;
	sub_822F0600(ctx, base);
	// bl 0x822f0650
	ctx.lr = 0x82300B40;
	sub_822F0650(ctx, base);
	// bl 0x822e4080
	ctx.lr = 0x82300B44;
	sub_822E4080(ctx, base);
	// bl 0x822ea490
	ctx.lr = 0x82300B48;
	sub_822EA490(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r6,-32208
	ctx.r6.s64 = -2110783488;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// addi r3,r6,-31800
	ctx.r3.s64 = ctx.r6.s64 + -31800;
	// stw r4,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r4.u32);
	// stwx r3,r5,r28
	PPC_STORE_U32(ctx.r5.u32 + ctx.r28.u32, ctx.r3.u32);
	// bl 0x822f0290
	ctx.lr = 0x82300B68;
	sub_822F0290(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32208
	ctx.r10.s64 = -2110783488;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-31664
	ctx.r7.s64 = ctx.r10.s64 + -31664;
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bl 0x822eb500
	ctx.lr = 0x82300B88;
	sub_822EB500(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r6,-32208
	ctx.r6.s64 = -2110783488;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// addi r3,r6,-31544
	ctx.r3.s64 = ctx.r6.s64 + -31544;
	// stw r4,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r4.u32);
	// stwx r3,r5,r28
	PPC_STORE_U32(ctx.r5.u32 + ctx.r28.u32, ctx.r3.u32);
	// bl 0x822f07c8
	ctx.lr = 0x82300BA8;
	sub_822F07C8(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32208
	ctx.r10.s64 = -2110783488;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-31408
	ctx.r7.s64 = ctx.r10.s64 + -31408;
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bl 0x822ea5d8
	ctx.lr = 0x82300BC8;
	sub_822EA5D8(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r6,-32208
	ctx.r6.s64 = -2110783488;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// addi r3,r6,-31288
	ctx.r3.s64 = ctx.r6.s64 + -31288;
	// stw r4,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r4.u32);
	// stwx r3,r5,r28
	PPC_STORE_U32(ctx.r5.u32 + ctx.r28.u32, ctx.r3.u32);
	// bl 0x822e7b20
	ctx.lr = 0x82300BE8;
	sub_822E7B20(ctx, base);
	// bl 0x822f1410
	ctx.lr = 0x82300BEC;
	sub_822F1410(ctx, base);
	// bl 0x822f20e8
	ctx.lr = 0x82300BF0;
	sub_822F20E8(ctx, base);
	// bl 0x822f2138
	ctx.lr = 0x82300BF4;
	sub_822F2138(ctx, base);
	// bl 0x822f27c8
	ctx.lr = 0x82300BF8;
	sub_822F27C8(ctx, base);
	// bl 0x822f13c0
	ctx.lr = 0x82300BFC;
	sub_822F13C0(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32208
	ctx.r10.s64 = -2110783488;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-31152
	ctx.r7.s64 = ctx.r10.s64 + -31152;
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bl 0x822f1460
	ctx.lr = 0x82300C1C;
	sub_822F1460(ctx, base);
	// bl 0x822f1500
	ctx.lr = 0x82300C20;
	sub_822F1500(ctx, base);
	// bl 0x822f1690
	ctx.lr = 0x82300C24;
	sub_822F1690(ctx, base);
	// bl 0x822f14b0
	ctx.lr = 0x82300C28;
	sub_822F14B0(ctx, base);
	// bl 0x822f1cd0
	ctx.lr = 0x82300C2C;
	sub_822F1CD0(ctx, base);
	// bl 0x822f15a0
	ctx.lr = 0x82300C30;
	sub_822F15A0(ctx, base);
	// bl 0x822f15f0
	ctx.lr = 0x82300C34;
	sub_822F15F0(ctx, base);
	// bl 0x822f1640
	ctx.lr = 0x82300C38;
	sub_822F1640(ctx, base);
	// bl 0x822f1550
	ctx.lr = 0x82300C3C;
	sub_822F1550(ctx, base);
	// bl 0x822f1870
	ctx.lr = 0x82300C40;
	sub_822F1870(ctx, base);
	// bl 0x822f1780
	ctx.lr = 0x82300C44;
	sub_822F1780(ctx, base);
	// bl 0x822f16e0
	ctx.lr = 0x82300C48;
	sub_822F16E0(ctx, base);
	// bl 0x822f18c0
	ctx.lr = 0x82300C4C;
	sub_822F18C0(ctx, base);
	// bl 0x822f1aa0
	ctx.lr = 0x82300C50;
	sub_822F1AA0(ctx, base);
	// bl 0x822f1910
	ctx.lr = 0x82300C54;
	sub_822F1910(ctx, base);
	// bl 0x822f1960
	ctx.lr = 0x82300C58;
	sub_822F1960(ctx, base);
	// bl 0x822f19b0
	ctx.lr = 0x82300C5C;
	sub_822F19B0(ctx, base);
	// bl 0x822f1a00
	ctx.lr = 0x82300C60;
	sub_822F1A00(ctx, base);
	// bl 0x822f1a50
	ctx.lr = 0x82300C64;
	sub_822F1A50(ctx, base);
	// bl 0x822f1af0
	ctx.lr = 0x82300C68;
	sub_822F1AF0(ctx, base);
	// bl 0x822f1b40
	ctx.lr = 0x82300C6C;
	sub_822F1B40(ctx, base);
	// bl 0x822f1d20
	ctx.lr = 0x82300C70;
	sub_822F1D20(ctx, base);
	// bl 0x822f1b90
	ctx.lr = 0x82300C74;
	sub_822F1B90(ctx, base);
	// bl 0x822f17d0
	ctx.lr = 0x82300C78;
	sub_822F17D0(ctx, base);
	// bl 0x822f1820
	ctx.lr = 0x82300C7C;
	sub_822F1820(ctx, base);
	// bl 0x822f1be0
	ctx.lr = 0x82300C80;
	sub_822F1BE0(ctx, base);
	// bl 0x822f1c30
	ctx.lr = 0x82300C84;
	sub_822F1C30(ctx, base);
	// bl 0x822f1c80
	ctx.lr = 0x82300C88;
	sub_822F1C80(ctx, base);
	// bl 0x822f1730
	ctx.lr = 0x82300C8C;
	sub_822F1730(ctx, base);
	// bl 0x822f1d70
	ctx.lr = 0x82300C90;
	sub_822F1D70(ctx, base);
	// bl 0x822f1e40
	ctx.lr = 0x82300C94;
	sub_822F1E40(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r6,-32208
	ctx.r6.s64 = -2110783488;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// addi r3,r6,-31032
	ctx.r3.s64 = ctx.r6.s64 + -31032;
	// stw r4,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r4.u32);
	// stwx r3,r5,r28
	PPC_STORE_U32(ctx.r5.u32 + ctx.r28.u32, ctx.r3.u32);
	// bl 0x822f1e90
	ctx.lr = 0x82300CB4;
	sub_822F1E90(ctx, base);
	// bl 0x822f1ee0
	ctx.lr = 0x82300CB8;
	sub_822F1EE0(ctx, base);
	// bl 0x822f1f30
	ctx.lr = 0x82300CBC;
	sub_822F1F30(ctx, base);
	// bl 0x822f2098
	ctx.lr = 0x82300CC0;
	sub_822F2098(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32208
	ctx.r10.s64 = -2110783488;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-30912
	ctx.r7.s64 = ctx.r10.s64 + -30912;
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bl 0x822f2188
	ctx.lr = 0x82300CE0;
	sub_822F2188(ctx, base);
	// bl 0x822f25e8
	ctx.lr = 0x82300CE4;
	sub_822F25E8(ctx, base);
	// bl 0x822f2638
	ctx.lr = 0x82300CE8;
	sub_822F2638(ctx, base);
	// bl 0x822f2688
	ctx.lr = 0x82300CEC;
	sub_822F2688(ctx, base);
	// bl 0x822f21d8
	ctx.lr = 0x82300CF0;
	sub_822F21D8(ctx, base);
	// bl 0x822f2228
	ctx.lr = 0x82300CF4;
	sub_822F2228(ctx, base);
	// bl 0x822f2278
	ctx.lr = 0x82300CF8;
	sub_822F2278(ctx, base);
	// bl 0x822f23b8
	ctx.lr = 0x82300CFC;
	sub_822F23B8(ctx, base);
	// bl 0x822f2408
	ctx.lr = 0x82300D00;
	sub_822F2408(ctx, base);
	// bl 0x822f22c8
	ctx.lr = 0x82300D04;
	sub_822F22C8(ctx, base);
	// bl 0x822f26d8
	ctx.lr = 0x82300D08;
	sub_822F26D8(ctx, base);
	// bl 0x822f2318
	ctx.lr = 0x82300D0C;
	sub_822F2318(ctx, base);
	// bl 0x822f2728
	ctx.lr = 0x82300D10;
	sub_822F2728(ctx, base);
	// bl 0x822f2368
	ctx.lr = 0x82300D14;
	sub_822F2368(ctx, base);
	// bl 0x822f2458
	ctx.lr = 0x82300D18;
	sub_822F2458(ctx, base);
	// bl 0x822f24a8
	ctx.lr = 0x82300D1C;
	sub_822F24A8(ctx, base);
	// bl 0x822f24f8
	ctx.lr = 0x82300D20;
	sub_822F24F8(ctx, base);
	// bl 0x822f2548
	ctx.lr = 0x82300D24;
	sub_822F2548(ctx, base);
	// bl 0x822f2778
	ctx.lr = 0x82300D28;
	sub_822F2778(ctx, base);
	// bl 0x822f2598
	ctx.lr = 0x82300D2C;
	sub_822F2598(ctx, base);
	// bl 0x822f1188
	ctx.lr = 0x82300D30;
	sub_822F1188(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r6,-32208
	ctx.r6.s64 = -2110783488;
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// addi r3,r6,-30792
	ctx.r3.s64 = ctx.r6.s64 + -30792;
	// stw r4,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r4.u32);
	// stwx r3,r5,r28
	PPC_STORE_U32(ctx.r5.u32 + ctx.r28.u32, ctx.r3.u32);
	// bl 0x822f1258
	ctx.lr = 0x82300D50;
	sub_822F1258(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32208
	ctx.r10.s64 = -2110783488;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-30656
	ctx.r7.s64 = ctx.r10.s64 + -30656;
	// stw r8,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r8.u32);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bl 0x82310518
	ctx.lr = 0x82300D70;
	sub_82310518(ctx, base);
	// bl 0x822d3570
	ctx.lr = 0x82300D74;
	sub_822D3570(ctx, base);
	// bl 0x822f2868
	ctx.lr = 0x82300D78;
	sub_822F2868(ctx, base);
	// bl 0x822f2818
	ctx.lr = 0x82300D7C;
	sub_822F2818(ctx, base);
	// bl 0x822f29f8
	ctx.lr = 0x82300D80;
	sub_822F29F8(ctx, base);
	// bl 0x822f28b8
	ctx.lr = 0x82300D84;
	sub_822F28B8(ctx, base);
	// bl 0x822f2908
	ctx.lr = 0x82300D88;
	sub_822F2908(ctx, base);
	// bl 0x822f2958
	ctx.lr = 0x82300D8C;
	sub_822F2958(ctx, base);
	// bl 0x822f29a8
	ctx.lr = 0x82300D90;
	sub_822F29A8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82cb1138
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82300D98"))) PPC_WEAK_FUNC(sub_82300D98);
PPC_FUNC_IMPL(__imp__sub_82300D98) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,30000
	ctx.r4.s64 = ctx.r11.s64 + 30000;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8233e028
	ctx.lr = 0x82300DC4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r9,-21800
	ctx.r3.s64 = ctx.r9.s64 + -21800;
	// addi r4,r8,30016
	ctx.r4.s64 = ctx.r8.s64 + 30016;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21800(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21800, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8233e028
	ctx.lr = 0x82300DF8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r9,-21792
	ctx.r3.s64 = ctx.r9.s64 + -21792;
	// addi r4,r8,30048
	ctx.r4.s64 = ctx.r8.s64 + 30048;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21792(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21792, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8233e028
	ctx.lr = 0x82300E2C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r9,-21784
	ctx.r3.s64 = ctx.r9.s64 + -21784;
	// addi r4,r8,30088
	ctx.r4.s64 = ctx.r8.s64 + 30088;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21784(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21784, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8233e028
	ctx.lr = 0x82300E60;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r9,-21776
	ctx.r3.s64 = ctx.r9.s64 + -21776;
	// addi r4,r8,30128
	ctx.r4.s64 = ctx.r8.s64 + 30128;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21776(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21776, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8233e028
	ctx.lr = 0x82300E94;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r9,-21768
	ctx.r3.s64 = ctx.r9.s64 + -21768;
	// addi r4,r8,30144
	ctx.r4.s64 = ctx.r8.s64 + 30144;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21768(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21768, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8233e028
	ctx.lr = 0x82300EC8;
	sub_8233E028(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r4,r10,30172
	ctx.r4.s64 = ctx.r10.s64 + 30172;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r8,r9,-21760
	ctx.r8.s64 = ctx.r9.s64 + -21760;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,-21760(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21760, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82300EFC;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-21752
	ctx.r3.s64 = ctx.r5.s64 + -21752;
	// addi r4,r4,30212
	ctx.r4.s64 = ctx.r4.s64 + 30212;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21752(r5)
	PPC_STORE_U32(ctx.r5.u32 + -21752, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82300F30;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21744
	ctx.r3.s64 = ctx.r9.s64 + -21744;
	// addi r4,r8,30232
	ctx.r4.s64 = ctx.r8.s64 + 30232;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21744(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21744, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82300F64;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21736
	ctx.r3.s64 = ctx.r9.s64 + -21736;
	// addi r4,r8,30252
	ctx.r4.s64 = ctx.r8.s64 + 30252;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21736(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21736, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82300F98;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21728
	ctx.r3.s64 = ctx.r9.s64 + -21728;
	// addi r4,r8,30280
	ctx.r4.s64 = ctx.r8.s64 + 30280;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21728(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21728, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82300FCC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21720
	ctx.r3.s64 = ctx.r9.s64 + -21720;
	// addi r4,r8,30340
	ctx.r4.s64 = ctx.r8.s64 + 30340;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21720(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21720, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301000;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r31,r9,-21712
	ctx.r31.s64 = ctx.r9.s64 + -21712;
	// addi r4,r8,30384
	ctx.r4.s64 = ctx.r8.s64 + 30384;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-21712(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21712, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82301034;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-21704
	ctx.r3.s64 = ctx.r5.s64 + -21704;
	// addi r4,r4,30400
	ctx.r4.s64 = ctx.r4.s64 + 30400;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21704(r5)
	PPC_STORE_U32(ctx.r5.u32 + -21704, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301068;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21696
	ctx.r3.s64 = ctx.r9.s64 + -21696;
	// addi r4,r8,30424
	ctx.r4.s64 = ctx.r8.s64 + 30424;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21696(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21696, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230109C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21688
	ctx.r3.s64 = ctx.r9.s64 + -21688;
	// addi r4,r8,30460
	ctx.r4.s64 = ctx.r8.s64 + 30460;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21688(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21688, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823010D0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21680
	ctx.r3.s64 = ctx.r9.s64 + -21680;
	// addi r4,r8,30496
	ctx.r4.s64 = ctx.r8.s64 + 30496;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21680(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21680, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301104;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21672
	ctx.r3.s64 = ctx.r9.s64 + -21672;
	// addi r4,r8,30520
	ctx.r4.s64 = ctx.r8.s64 + 30520;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21672(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21672, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301138;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21664
	ctx.r3.s64 = ctx.r9.s64 + -21664;
	// addi r4,r8,30540
	ctx.r4.s64 = ctx.r8.s64 + 30540;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21664(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21664, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230116C;
	sub_8233E028(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r4,r11,30580
	ctx.r4.s64 = ctx.r11.s64 + 30580;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r8,r9,-21656
	ctx.r8.s64 = ctx.r9.s64 + -21656;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-21656(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21656, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x823011A0;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-21648
	ctx.r3.s64 = ctx.r5.s64 + -21648;
	// addi r4,r4,30632
	ctx.r4.s64 = ctx.r4.s64 + 30632;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21648(r5)
	PPC_STORE_U32(ctx.r5.u32 + -21648, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823011D4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21640
	ctx.r3.s64 = ctx.r9.s64 + -21640;
	// addi r4,r8,30680
	ctx.r4.s64 = ctx.r8.s64 + 30680;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21640(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21640, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301208;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21632
	ctx.r3.s64 = ctx.r9.s64 + -21632;
	// addi r4,r8,30740
	ctx.r4.s64 = ctx.r8.s64 + 30740;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21632(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21632, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230123C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21624
	ctx.r3.s64 = ctx.r9.s64 + -21624;
	// addi r4,r8,30752
	ctx.r4.s64 = ctx.r8.s64 + 30752;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21624(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21624, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301270;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21616
	ctx.r3.s64 = ctx.r9.s64 + -21616;
	// addi r4,r8,30796
	ctx.r4.s64 = ctx.r8.s64 + 30796;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21616(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21616, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823012A4;
	sub_8233E028(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,30820
	ctx.r4.s64 = ctx.r11.s64 + 30820;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r8,r9,-21608
	ctx.r8.s64 = ctx.r9.s64 + -21608;
	// stw r11,-21608(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21608, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x823012D8;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-21600
	ctx.r3.s64 = ctx.r5.s64 + -21600;
	// addi r4,r4,30844
	ctx.r4.s64 = ctx.r4.s64 + 30844;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21600(r5)
	PPC_STORE_U32(ctx.r5.u32 + -21600, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230130C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21592
	ctx.r3.s64 = ctx.r9.s64 + -21592;
	// addi r4,r8,30856
	ctx.r4.s64 = ctx.r8.s64 + 30856;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21592(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21592, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301340;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21584
	ctx.r3.s64 = ctx.r9.s64 + -21584;
	// addi r4,r8,30892
	ctx.r4.s64 = ctx.r8.s64 + 30892;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21584(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21584, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301374;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21576
	ctx.r3.s64 = ctx.r9.s64 + -21576;
	// addi r4,r8,30952
	ctx.r4.s64 = ctx.r8.s64 + 30952;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21576(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21576, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823013A8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21568
	ctx.r3.s64 = ctx.r9.s64 + -21568;
	// addi r4,r8,30996
	ctx.r4.s64 = ctx.r8.s64 + 30996;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21568(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21568, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823013DC;
	sub_8233E028(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// addi r4,r11,31048
	ctx.r4.s64 = ctx.r11.s64 + 31048;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,-21560
	ctx.r8.s64 = ctx.r9.s64 + -21560;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-21560(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21560, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82301410;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-21552
	ctx.r3.s64 = ctx.r5.s64 + -21552;
	// addi r4,r4,31096
	ctx.r4.s64 = ctx.r4.s64 + 31096;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21552(r5)
	PPC_STORE_U32(ctx.r5.u32 + -21552, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301444;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21544
	ctx.r3.s64 = ctx.r9.s64 + -21544;
	// addi r4,r8,31148
	ctx.r4.s64 = ctx.r8.s64 + 31148;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21544(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21544, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301478;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21536
	ctx.r3.s64 = ctx.r9.s64 + -21536;
	// addi r4,r8,31208
	ctx.r4.s64 = ctx.r8.s64 + 31208;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21536(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21536, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823014AC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21528
	ctx.r3.s64 = ctx.r9.s64 + -21528;
	// addi r4,r8,31240
	ctx.r4.s64 = ctx.r8.s64 + 31240;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21528(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21528, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823014E0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21520
	ctx.r3.s64 = ctx.r9.s64 + -21520;
	// addi r4,r8,31268
	ctx.r4.s64 = ctx.r8.s64 + 31268;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21520(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21520, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301514;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r8,31304
	ctx.r4.s64 = ctx.r8.s64 + 31304;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21512(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21512, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r11,r9,-21512
	ctx.r11.s64 = ctx.r9.s64 + -21512;
	// stw r10,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82301548;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21504
	ctx.r3.s64 = ctx.r9.s64 + -21504;
	// addi r4,r8,31336
	ctx.r4.s64 = ctx.r8.s64 + 31336;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21504(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21504, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230157C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21496
	ctx.r3.s64 = ctx.r9.s64 + -21496;
	// addi r4,r8,31384
	ctx.r4.s64 = ctx.r8.s64 + 31384;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21496(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21496, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823015B0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21488
	ctx.r3.s64 = ctx.r9.s64 + -21488;
	// addi r4,r8,31444
	ctx.r4.s64 = ctx.r8.s64 + 31444;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21488(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21488, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823015E4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21480
	ctx.r3.s64 = ctx.r9.s64 + -21480;
	// addi r4,r8,31496
	ctx.r4.s64 = ctx.r8.s64 + 31496;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21480(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21480, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301618;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21472
	ctx.r3.s64 = ctx.r9.s64 + -21472;
	// addi r4,r8,31540
	ctx.r4.s64 = ctx.r8.s64 + 31540;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21472(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21472, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230164C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21464
	ctx.r3.s64 = ctx.r9.s64 + -21464;
	// addi r4,r8,31580
	ctx.r4.s64 = ctx.r8.s64 + 31580;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21464(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21464, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301680;
	sub_8233E028(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lis r8,-31882
	ctx.r8.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r9,31608
	ctx.r4.s64 = ctx.r9.s64 + 31608;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r9,r8,-21456
	ctx.r9.s64 = ctx.r8.s64 + -21456;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21456(r8)
	PPC_STORE_U32(ctx.r8.u32 + -21456, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x823016B4;
	sub_8233E028(ctx, base);
	// lis r8,-31882
	ctx.r8.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r8,-21448
	ctx.r3.s64 = ctx.r8.s64 + -21448;
	// addi r4,r7,31648
	ctx.r4.s64 = ctx.r7.s64 + 31648;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21448(r8)
	PPC_STORE_U32(ctx.r8.u32 + -21448, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823016E8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21440
	ctx.r3.s64 = ctx.r9.s64 + -21440;
	// addi r4,r8,31680
	ctx.r4.s64 = ctx.r8.s64 + 31680;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21440(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21440, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230171C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21432
	ctx.r3.s64 = ctx.r9.s64 + -21432;
	// addi r4,r8,31712
	ctx.r4.s64 = ctx.r8.s64 + 31712;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21432(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21432, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301750;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21424
	ctx.r3.s64 = ctx.r9.s64 + -21424;
	// addi r4,r8,31748
	ctx.r4.s64 = ctx.r8.s64 + 31748;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21424(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21424, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301784;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21416
	ctx.r3.s64 = ctx.r9.s64 + -21416;
	// addi r4,r8,31784
	ctx.r4.s64 = ctx.r8.s64 + 31784;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21416(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21416, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823017B8;
	sub_8233E028(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,31816
	ctx.r4.s64 = ctx.r11.s64 + 31816;
	// li r6,1
	ctx.r6.s64 = 1;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r8,r9,-21408
	ctx.r8.s64 = ctx.r9.s64 + -21408;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-21408(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21408, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x823017EC;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-21400
	ctx.r3.s64 = ctx.r5.s64 + -21400;
	// addi r4,r4,31864
	ctx.r4.s64 = ctx.r4.s64 + 31864;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21400(r5)
	PPC_STORE_U32(ctx.r5.u32 + -21400, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301820;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21392
	ctx.r3.s64 = ctx.r9.s64 + -21392;
	// addi r4,r8,31884
	ctx.r4.s64 = ctx.r8.s64 + 31884;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21392(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21392, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301854;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21384
	ctx.r3.s64 = ctx.r9.s64 + -21384;
	// addi r4,r8,31920
	ctx.r4.s64 = ctx.r8.s64 + 31920;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21384(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21384, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301888;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21376
	ctx.r3.s64 = ctx.r9.s64 + -21376;
	// addi r4,r8,31952
	ctx.r4.s64 = ctx.r8.s64 + 31952;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21376(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21376, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823018BC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21368
	ctx.r3.s64 = ctx.r9.s64 + -21368;
	// addi r4,r8,31980
	ctx.r4.s64 = ctx.r8.s64 + 31980;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21368(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21368, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823018F0;
	sub_8233E028(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,32024
	ctx.r4.s64 = ctx.r11.s64 + 32024;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,-21360
	ctx.r8.s64 = ctx.r9.s64 + -21360;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-21360(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21360, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82301924;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-21352
	ctx.r3.s64 = ctx.r5.s64 + -21352;
	// addi r4,r4,32060
	ctx.r4.s64 = ctx.r4.s64 + 32060;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21352(r5)
	PPC_STORE_U32(ctx.r5.u32 + -21352, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301958;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21344
	ctx.r3.s64 = ctx.r9.s64 + -21344;
	// addi r4,r8,32080
	ctx.r4.s64 = ctx.r8.s64 + 32080;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21344(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21344, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230198C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21336
	ctx.r3.s64 = ctx.r9.s64 + -21336;
	// addi r4,r8,32096
	ctx.r4.s64 = ctx.r8.s64 + 32096;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21336(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21336, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823019C0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21328
	ctx.r3.s64 = ctx.r9.s64 + -21328;
	// addi r4,r8,32124
	ctx.r4.s64 = ctx.r8.s64 + 32124;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21328(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21328, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823019F4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21320
	ctx.r3.s64 = ctx.r9.s64 + -21320;
	// addi r4,r8,32160
	ctx.r4.s64 = ctx.r8.s64 + 32160;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21320(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21320, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301A28;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r10,-31882
	ctx.r10.s64 = -2089418752;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r9,32196
	ctx.r4.s64 = ctx.r9.s64 + 32196;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-21312(r10)
	PPC_STORE_U32(ctx.r10.u32 + -21312, ctx.r11.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r10,-21312
	ctx.r8.s64 = ctx.r10.s64 + -21312;
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r11.u32);
	// bl 0x8233e028
	ctx.lr = 0x82301A5C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-21304
	ctx.r3.s64 = ctx.r5.s64 + -21304;
	// addi r4,r4,32232
	ctx.r4.s64 = ctx.r4.s64 + 32232;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21304(r5)
	PPC_STORE_U32(ctx.r5.u32 + -21304, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301A90;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21296
	ctx.r3.s64 = ctx.r9.s64 + -21296;
	// addi r4,r8,32256
	ctx.r4.s64 = ctx.r8.s64 + 32256;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21296(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21296, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301AC4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21288
	ctx.r3.s64 = ctx.r9.s64 + -21288;
	// addi r4,r8,32280
	ctx.r4.s64 = ctx.r8.s64 + 32280;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21288(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21288, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301AF8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21280
	ctx.r3.s64 = ctx.r9.s64 + -21280;
	// addi r4,r8,32308
	ctx.r4.s64 = ctx.r8.s64 + 32308;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21280(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21280, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301B2C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21272
	ctx.r3.s64 = ctx.r9.s64 + -21272;
	// addi r4,r8,32336
	ctx.r4.s64 = ctx.r8.s64 + 32336;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21272(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21272, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301B60;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21264
	ctx.r3.s64 = ctx.r9.s64 + -21264;
	// addi r4,r8,32356
	ctx.r4.s64 = ctx.r8.s64 + 32356;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21264(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21264, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301B94;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r9,-21256
	ctx.r3.s64 = ctx.r9.s64 + -21256;
	// addi r4,r8,32384
	ctx.r4.s64 = ctx.r8.s64 + 32384;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,-21256(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21256, ctx.r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301BC8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21248
	ctx.r3.s64 = ctx.r9.s64 + -21248;
	// addi r4,r8,32416
	ctx.r4.s64 = ctx.r8.s64 + 32416;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21248(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21248, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301BFC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21240
	ctx.r3.s64 = ctx.r9.s64 + -21240;
	// addi r4,r8,32432
	ctx.r4.s64 = ctx.r8.s64 + 32432;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21240(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21240, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301C30;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21232
	ctx.r3.s64 = ctx.r9.s64 + -21232;
	// addi r4,r8,32448
	ctx.r4.s64 = ctx.r8.s64 + 32448;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21232(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21232, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301C64;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21224
	ctx.r3.s64 = ctx.r9.s64 + -21224;
	// addi r4,r8,32480
	ctx.r4.s64 = ctx.r8.s64 + 32480;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21224(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21224, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301C98;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21216
	ctx.r3.s64 = ctx.r9.s64 + -21216;
	// addi r4,r8,32516
	ctx.r4.s64 = ctx.r8.s64 + 32516;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21216(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21216, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301CCC;
	sub_8233E028(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,32568
	ctx.r4.s64 = ctx.r11.s64 + 32568;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r8,r9,-21208
	ctx.r8.s64 = ctx.r9.s64 + -21208;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-21208(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21208, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82301D00;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-21200
	ctx.r3.s64 = ctx.r5.s64 + -21200;
	// addi r4,r4,32604
	ctx.r4.s64 = ctx.r4.s64 + 32604;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21200(r5)
	PPC_STORE_U32(ctx.r5.u32 + -21200, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301D34;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21192
	ctx.r3.s64 = ctx.r9.s64 + -21192;
	// addi r4,r8,32620
	ctx.r4.s64 = ctx.r8.s64 + 32620;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21192(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21192, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301D68;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21184
	ctx.r3.s64 = ctx.r9.s64 + -21184;
	// addi r4,r8,32656
	ctx.r4.s64 = ctx.r8.s64 + 32656;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21184(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21184, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301D9C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21176
	ctx.r3.s64 = ctx.r9.s64 + -21176;
	// addi r4,r8,32680
	ctx.r4.s64 = ctx.r8.s64 + 32680;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21176(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21176, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301DD0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21168
	ctx.r3.s64 = ctx.r9.s64 + -21168;
	// addi r4,r8,32704
	ctx.r4.s64 = ctx.r8.s64 + 32704;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21168(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21168, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301E04;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-21160
	ctx.r8.s64 = ctx.r9.s64 + -21160;
	// stw r11,-21160(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21160, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,32740
	ctx.r4.s64 = ctx.r6.s64 + 32740;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301E38;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-21152
	ctx.r3.s64 = ctx.r5.s64 + -21152;
	// addi r4,r4,-32752
	ctx.r4.s64 = ctx.r4.s64 + -32752;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21152(r5)
	PPC_STORE_U32(ctx.r5.u32 + -21152, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301E6C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21144
	ctx.r3.s64 = ctx.r9.s64 + -21144;
	// addi r4,r8,-32712
	ctx.r4.s64 = ctx.r8.s64 + -32712;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21144(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21144, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301EA0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21136
	ctx.r3.s64 = ctx.r9.s64 + -21136;
	// addi r4,r8,-32684
	ctx.r4.s64 = ctx.r8.s64 + -32684;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21136(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21136, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301ED4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21128
	ctx.r3.s64 = ctx.r9.s64 + -21128;
	// addi r4,r8,-32640
	ctx.r4.s64 = ctx.r8.s64 + -32640;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21128(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21128, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301F08;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21120
	ctx.r3.s64 = ctx.r9.s64 + -21120;
	// addi r4,r8,-32616
	ctx.r4.s64 = ctx.r8.s64 + -32616;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21120(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21120, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301F3C;
	sub_8233E028(ctx, base);
	// lis r10,-32243
	ctx.r10.s64 = -2113077248;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r10,-32588
	ctx.r4.s64 = ctx.r10.s64 + -32588;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,-21112
	ctx.r8.s64 = ctx.r9.s64 + -21112;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-21112(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21112, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82301F70;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-21104
	ctx.r3.s64 = ctx.r5.s64 + -21104;
	// addi r4,r4,-32560
	ctx.r4.s64 = ctx.r4.s64 + -32560;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21104(r5)
	PPC_STORE_U32(ctx.r5.u32 + -21104, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301FA4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21096
	ctx.r3.s64 = ctx.r9.s64 + -21096;
	// addi r4,r8,-32520
	ctx.r4.s64 = ctx.r8.s64 + -32520;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21096(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21096, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82301FD8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21088
	ctx.r3.s64 = ctx.r9.s64 + -21088;
	// addi r4,r8,-32480
	ctx.r4.s64 = ctx.r8.s64 + -32480;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21088(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21088, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230200C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21080
	ctx.r3.s64 = ctx.r9.s64 + -21080;
	// addi r4,r8,-32424
	ctx.r4.s64 = ctx.r8.s64 + -32424;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21080(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21080, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302040;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21072
	ctx.r3.s64 = ctx.r9.s64 + -21072;
	// addi r4,r8,-32388
	ctx.r4.s64 = ctx.r8.s64 + -32388;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21072(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21072, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302074;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r31,r9,-21064
	ctx.r31.s64 = ctx.r9.s64 + -21064;
	// addi r4,r8,-32364
	ctx.r4.s64 = ctx.r8.s64 + -32364;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-21064(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21064, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x823020A8;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-21056
	ctx.r3.s64 = ctx.r5.s64 + -21056;
	// addi r4,r4,-32332
	ctx.r4.s64 = ctx.r4.s64 + -32332;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21056(r5)
	PPC_STORE_U32(ctx.r5.u32 + -21056, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823020DC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21048
	ctx.r3.s64 = ctx.r9.s64 + -21048;
	// addi r4,r8,-32300
	ctx.r4.s64 = ctx.r8.s64 + -32300;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21048(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21048, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302110;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21040
	ctx.r3.s64 = ctx.r9.s64 + -21040;
	// addi r4,r8,-32268
	ctx.r4.s64 = ctx.r8.s64 + -32268;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21040(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21040, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302144;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21032
	ctx.r3.s64 = ctx.r9.s64 + -21032;
	// addi r4,r8,-32236
	ctx.r4.s64 = ctx.r8.s64 + -32236;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21032(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21032, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302178;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21024
	ctx.r3.s64 = ctx.r9.s64 + -21024;
	// addi r4,r8,-32192
	ctx.r4.s64 = ctx.r8.s64 + -32192;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21024(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21024, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823021AC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-21016
	ctx.r3.s64 = ctx.r9.s64 + -21016;
	// addi r4,r8,-32136
	ctx.r4.s64 = ctx.r8.s64 + -32136;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21016(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21016, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823021E0;
	sub_8233E028(ctx, base);
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// addi r4,r11,-32100
	ctx.r4.s64 = ctx.r11.s64 + -32100;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r8,r9,-21008
	ctx.r8.s64 = ctx.r9.s64 + -21008;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-21008(r9)
	PPC_STORE_U32(ctx.r9.u32 + -21008, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82302214;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-21000
	ctx.r3.s64 = ctx.r5.s64 + -21000;
	// addi r4,r4,-32076
	ctx.r4.s64 = ctx.r4.s64 + -32076;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-21000(r5)
	PPC_STORE_U32(ctx.r5.u32 + -21000, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302248;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20992
	ctx.r3.s64 = ctx.r9.s64 + -20992;
	// addi r4,r8,-32056
	ctx.r4.s64 = ctx.r8.s64 + -32056;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20992(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20992, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230227C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20984
	ctx.r3.s64 = ctx.r9.s64 + -20984;
	// addi r4,r8,-32040
	ctx.r4.s64 = ctx.r8.s64 + -32040;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20984(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20984, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823022B0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20976
	ctx.r3.s64 = ctx.r9.s64 + -20976;
	// addi r4,r8,-32016
	ctx.r4.s64 = ctx.r8.s64 + -32016;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20976(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20976, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823022E4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20968
	ctx.r3.s64 = ctx.r9.s64 + -20968;
	// addi r4,r8,-31996
	ctx.r4.s64 = ctx.r8.s64 + -31996;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20968(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20968, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302318;
	sub_8233E028(ctx, base);
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,-31984
	ctx.r4.s64 = ctx.r11.s64 + -31984;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r8,r9,-20960
	ctx.r8.s64 = ctx.r9.s64 + -20960;
	// stw r11,-20960(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20960, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x8230234C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-20952
	ctx.r3.s64 = ctx.r5.s64 + -20952;
	// addi r4,r4,-31964
	ctx.r4.s64 = ctx.r4.s64 + -31964;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20952(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20952, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302380;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20944
	ctx.r3.s64 = ctx.r9.s64 + -20944;
	// addi r4,r8,-31932
	ctx.r4.s64 = ctx.r8.s64 + -31932;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20944(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20944, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823023B4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20936
	ctx.r3.s64 = ctx.r9.s64 + -20936;
	// addi r4,r8,-31892
	ctx.r4.s64 = ctx.r8.s64 + -31892;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20936(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20936, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823023E8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20928
	ctx.r3.s64 = ctx.r9.s64 + -20928;
	// addi r4,r8,-31856
	ctx.r4.s64 = ctx.r8.s64 + -31856;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20928(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20928, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230241C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20920
	ctx.r3.s64 = ctx.r9.s64 + -20920;
	// addi r4,r8,-31812
	ctx.r4.s64 = ctx.r8.s64 + -31812;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20920(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20920, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302450;
	sub_8233E028(ctx, base);
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// addi r4,r11,-31768
	ctx.r4.s64 = ctx.r11.s64 + -31768;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,-20912
	ctx.r8.s64 = ctx.r9.s64 + -20912;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-20912(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20912, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82302484;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-20904
	ctx.r3.s64 = ctx.r5.s64 + -20904;
	// addi r4,r4,-31724
	ctx.r4.s64 = ctx.r4.s64 + -31724;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20904(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20904, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823024B8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20896
	ctx.r3.s64 = ctx.r9.s64 + -20896;
	// addi r4,r8,-31704
	ctx.r4.s64 = ctx.r8.s64 + -31704;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20896(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20896, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823024EC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20888
	ctx.r3.s64 = ctx.r9.s64 + -20888;
	// addi r4,r8,-31668
	ctx.r4.s64 = ctx.r8.s64 + -31668;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20888(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20888, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302520;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20880
	ctx.r3.s64 = ctx.r9.s64 + -20880;
	// addi r4,r8,-31644
	ctx.r4.s64 = ctx.r8.s64 + -31644;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20880(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20880, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302554;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20872
	ctx.r3.s64 = ctx.r9.s64 + -20872;
	// addi r4,r8,-31600
	ctx.r4.s64 = ctx.r8.s64 + -31600;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20872(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20872, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302588;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r8,-31588
	ctx.r4.s64 = ctx.r8.s64 + -31588;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20864(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20864, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r11,r9,-20864
	ctx.r11.s64 = ctx.r9.s64 + -20864;
	// stw r10,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x823025BC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20856
	ctx.r3.s64 = ctx.r9.s64 + -20856;
	// addi r4,r8,-31564
	ctx.r4.s64 = ctx.r8.s64 + -31564;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20856(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20856, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823025F0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20848
	ctx.r3.s64 = ctx.r9.s64 + -20848;
	// addi r4,r8,-31544
	ctx.r4.s64 = ctx.r8.s64 + -31544;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20848(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20848, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302624;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20840
	ctx.r3.s64 = ctx.r9.s64 + -20840;
	// addi r4,r8,-31520
	ctx.r4.s64 = ctx.r8.s64 + -31520;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20840(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20840, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302658;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20832
	ctx.r3.s64 = ctx.r9.s64 + -20832;
	// addi r4,r8,-31488
	ctx.r4.s64 = ctx.r8.s64 + -31488;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20832(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20832, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230268C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20824
	ctx.r3.s64 = ctx.r9.s64 + -20824;
	// addi r4,r8,-31468
	ctx.r4.s64 = ctx.r8.s64 + -31468;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20824(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20824, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823026C0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20816
	ctx.r3.s64 = ctx.r9.s64 + -20816;
	// addi r4,r8,-31420
	ctx.r4.s64 = ctx.r8.s64 + -31420;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20816(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20816, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823026F4;
	sub_8233E028(ctx, base);
	// lis r9,-32243
	ctx.r9.s64 = -2113077248;
	// lis r8,-31882
	ctx.r8.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r9,-31372
	ctx.r4.s64 = ctx.r9.s64 + -31372;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r9,r8,-20808
	ctx.r9.s64 = ctx.r8.s64 + -20808;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20808(r8)
	PPC_STORE_U32(ctx.r8.u32 + -20808, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82302728;
	sub_8233E028(ctx, base);
	// lis r8,-31882
	ctx.r8.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r7,-32243
	ctx.r7.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r8,-20800
	ctx.r3.s64 = ctx.r8.s64 + -20800;
	// addi r4,r7,-31356
	ctx.r4.s64 = ctx.r7.s64 + -31356;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20800(r8)
	PPC_STORE_U32(ctx.r8.u32 + -20800, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230275C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20792
	ctx.r3.s64 = ctx.r9.s64 + -20792;
	// addi r4,r8,-31328
	ctx.r4.s64 = ctx.r8.s64 + -31328;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20792(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20792, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302790;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20784
	ctx.r3.s64 = ctx.r9.s64 + -20784;
	// addi r4,r8,-31272
	ctx.r4.s64 = ctx.r8.s64 + -31272;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20784(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20784, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823027C4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20776
	ctx.r3.s64 = ctx.r9.s64 + -20776;
	// addi r4,r8,-31236
	ctx.r4.s64 = ctx.r8.s64 + -31236;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20776(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20776, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823027F8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20768
	ctx.r3.s64 = ctx.r9.s64 + -20768;
	// addi r4,r8,-31176
	ctx.r4.s64 = ctx.r8.s64 + -31176;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20768(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20768, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230282C;
	sub_8233E028(ctx, base);
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,-31164
	ctx.r4.s64 = ctx.r11.s64 + -31164;
	// li r6,1
	ctx.r6.s64 = 1;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r8,r9,-20760
	ctx.r8.s64 = ctx.r9.s64 + -20760;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-20760(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20760, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82302860;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-20752
	ctx.r3.s64 = ctx.r5.s64 + -20752;
	// addi r4,r4,-31144
	ctx.r4.s64 = ctx.r4.s64 + -31144;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20752(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20752, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302894;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20744
	ctx.r3.s64 = ctx.r9.s64 + -20744;
	// addi r4,r8,-31124
	ctx.r4.s64 = ctx.r8.s64 + -31124;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20744(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20744, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823028C8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20736
	ctx.r3.s64 = ctx.r9.s64 + -20736;
	// addi r4,r8,-31088
	ctx.r4.s64 = ctx.r8.s64 + -31088;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20736(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20736, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823028FC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20728
	ctx.r3.s64 = ctx.r9.s64 + -20728;
	// addi r4,r8,-31072
	ctx.r4.s64 = ctx.r8.s64 + -31072;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20728(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20728, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302930;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20720
	ctx.r3.s64 = ctx.r9.s64 + -20720;
	// addi r4,r8,-31044
	ctx.r4.s64 = ctx.r8.s64 + -31044;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20720(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20720, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302964;
	sub_8233E028(ctx, base);
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,-31012
	ctx.r4.s64 = ctx.r11.s64 + -31012;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,-20712
	ctx.r8.s64 = ctx.r9.s64 + -20712;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-20712(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20712, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82302998;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-20704
	ctx.r3.s64 = ctx.r5.s64 + -20704;
	// addi r4,r4,-30984
	ctx.r4.s64 = ctx.r4.s64 + -30984;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20704(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20704, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823029CC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20696
	ctx.r3.s64 = ctx.r9.s64 + -20696;
	// addi r4,r8,-30952
	ctx.r4.s64 = ctx.r8.s64 + -30952;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20696(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20696, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302A00;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20688
	ctx.r3.s64 = ctx.r9.s64 + -20688;
	// addi r4,r8,-30924
	ctx.r4.s64 = ctx.r8.s64 + -30924;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20688(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20688, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302A34;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20680
	ctx.r3.s64 = ctx.r9.s64 + -20680;
	// addi r4,r8,-30900
	ctx.r4.s64 = ctx.r8.s64 + -30900;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20680(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20680, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302A68;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20672
	ctx.r3.s64 = ctx.r9.s64 + -20672;
	// addi r4,r8,-30876
	ctx.r4.s64 = ctx.r8.s64 + -30876;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20672(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20672, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302A9C;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r10,-31882
	ctx.r10.s64 = -2089418752;
	// lis r9,-32243
	ctx.r9.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r9,-30832
	ctx.r4.s64 = ctx.r9.s64 + -30832;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-20664(r10)
	PPC_STORE_U32(ctx.r10.u32 + -20664, ctx.r11.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r10,-20664
	ctx.r8.s64 = ctx.r10.s64 + -20664;
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r11.u32);
	// bl 0x8233e028
	ctx.lr = 0x82302AD0;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-20656
	ctx.r3.s64 = ctx.r5.s64 + -20656;
	// addi r4,r4,-30792
	ctx.r4.s64 = ctx.r4.s64 + -30792;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20656(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20656, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302B04;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20648
	ctx.r3.s64 = ctx.r9.s64 + -20648;
	// addi r4,r8,-30748
	ctx.r4.s64 = ctx.r8.s64 + -30748;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20648(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20648, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302B38;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20640
	ctx.r3.s64 = ctx.r9.s64 + -20640;
	// addi r4,r8,-30704
	ctx.r4.s64 = ctx.r8.s64 + -30704;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20640(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20640, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302B6C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20632
	ctx.r3.s64 = ctx.r9.s64 + -20632;
	// addi r4,r8,-30644
	ctx.r4.s64 = ctx.r8.s64 + -30644;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20632(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20632, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302BA0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20624
	ctx.r3.s64 = ctx.r9.s64 + -20624;
	// addi r4,r8,-30596
	ctx.r4.s64 = ctx.r8.s64 + -30596;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20624(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20624, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302BD4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20616
	ctx.r3.s64 = ctx.r9.s64 + -20616;
	// addi r4,r8,-30568
	ctx.r4.s64 = ctx.r8.s64 + -30568;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20616(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20616, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302C08;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// addi r3,r9,-20608
	ctx.r3.s64 = ctx.r9.s64 + -20608;
	// addi r4,r8,-30536
	ctx.r4.s64 = ctx.r8.s64 + -30536;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,-20608(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20608, ctx.r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302C3C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20600
	ctx.r3.s64 = ctx.r9.s64 + -20600;
	// addi r4,r8,-30508
	ctx.r4.s64 = ctx.r8.s64 + -30508;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20600(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20600, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302C70;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20592
	ctx.r3.s64 = ctx.r9.s64 + -20592;
	// addi r4,r8,-30472
	ctx.r4.s64 = ctx.r8.s64 + -30472;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20592(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20592, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302CA4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20584
	ctx.r3.s64 = ctx.r9.s64 + -20584;
	// addi r4,r8,-30436
	ctx.r4.s64 = ctx.r8.s64 + -30436;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20584(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20584, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302CD8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20576
	ctx.r3.s64 = ctx.r9.s64 + -20576;
	// addi r4,r8,-30384
	ctx.r4.s64 = ctx.r8.s64 + -30384;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20576(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20576, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302D0C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20568
	ctx.r3.s64 = ctx.r9.s64 + -20568;
	// addi r4,r8,-30348
	ctx.r4.s64 = ctx.r8.s64 + -30348;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20568(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20568, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302D40;
	sub_8233E028(ctx, base);
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,-30288
	ctx.r4.s64 = ctx.r11.s64 + -30288;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r8,r9,-20560
	ctx.r8.s64 = ctx.r9.s64 + -20560;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-20560(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20560, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82302D74;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-20552
	ctx.r3.s64 = ctx.r5.s64 + -20552;
	// addi r4,r4,-30264
	ctx.r4.s64 = ctx.r4.s64 + -30264;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20552(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20552, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302DA8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20544
	ctx.r3.s64 = ctx.r9.s64 + -20544;
	// addi r4,r8,-30236
	ctx.r4.s64 = ctx.r8.s64 + -30236;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20544(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20544, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302DDC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20536
	ctx.r3.s64 = ctx.r9.s64 + -20536;
	// addi r4,r8,-30216
	ctx.r4.s64 = ctx.r8.s64 + -30216;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20536(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20536, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302E10;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20528
	ctx.r3.s64 = ctx.r9.s64 + -20528;
	// addi r4,r8,-30192
	ctx.r4.s64 = ctx.r8.s64 + -30192;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20528(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20528, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302E44;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20520
	ctx.r3.s64 = ctx.r9.s64 + -20520;
	// addi r4,r8,-30160
	ctx.r4.s64 = ctx.r8.s64 + -30160;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20520(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20520, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302E78;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-20512
	ctx.r8.s64 = ctx.r9.s64 + -20512;
	// stw r11,-20512(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20512, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-30124
	ctx.r4.s64 = ctx.r6.s64 + -30124;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302EAC;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-20504
	ctx.r3.s64 = ctx.r5.s64 + -20504;
	// addi r4,r4,-30096
	ctx.r4.s64 = ctx.r4.s64 + -30096;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20504(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20504, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302EE0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20496
	ctx.r3.s64 = ctx.r9.s64 + -20496;
	// addi r4,r8,-30056
	ctx.r4.s64 = ctx.r8.s64 + -30056;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20496(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20496, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302F14;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20488
	ctx.r3.s64 = ctx.r9.s64 + -20488;
	// addi r4,r8,-30016
	ctx.r4.s64 = ctx.r8.s64 + -30016;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20488(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20488, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302F48;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20480
	ctx.r3.s64 = ctx.r9.s64 + -20480;
	// addi r4,r8,-29968
	ctx.r4.s64 = ctx.r8.s64 + -29968;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20480(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20480, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302F7C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20472
	ctx.r3.s64 = ctx.r9.s64 + -20472;
	// addi r4,r8,-29916
	ctx.r4.s64 = ctx.r8.s64 + -29916;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20472(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20472, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82302FB0;
	sub_8233E028(ctx, base);
	// lis r10,-32243
	ctx.r10.s64 = -2113077248;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r10,-29864
	ctx.r4.s64 = ctx.r10.s64 + -29864;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,-20464
	ctx.r8.s64 = ctx.r9.s64 + -20464;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-20464(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20464, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82302FE4;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-20456
	ctx.r3.s64 = ctx.r5.s64 + -20456;
	// addi r4,r4,-29848
	ctx.r4.s64 = ctx.r4.s64 + -29848;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20456(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20456, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303018;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20448
	ctx.r3.s64 = ctx.r9.s64 + -20448;
	// addi r4,r8,-29828
	ctx.r4.s64 = ctx.r8.s64 + -29828;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20448(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20448, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230304C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20440
	ctx.r3.s64 = ctx.r9.s64 + -20440;
	// addi r4,r8,-29808
	ctx.r4.s64 = ctx.r8.s64 + -29808;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20440(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20440, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303080;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20432
	ctx.r3.s64 = ctx.r9.s64 + -20432;
	// addi r4,r8,-29784
	ctx.r4.s64 = ctx.r8.s64 + -29784;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20432(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20432, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823030B4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20424
	ctx.r3.s64 = ctx.r9.s64 + -20424;
	// addi r4,r8,-29756
	ctx.r4.s64 = ctx.r8.s64 + -29756;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20424(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20424, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823030E8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r31,r9,-20416
	ctx.r31.s64 = ctx.r9.s64 + -20416;
	// addi r4,r8,-29716
	ctx.r4.s64 = ctx.r8.s64 + -29716;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-20416(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20416, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x8230311C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-20408
	ctx.r3.s64 = ctx.r5.s64 + -20408;
	// addi r4,r4,-29672
	ctx.r4.s64 = ctx.r4.s64 + -29672;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20408(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20408, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303150;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20400
	ctx.r3.s64 = ctx.r9.s64 + -20400;
	// addi r4,r8,-29644
	ctx.r4.s64 = ctx.r8.s64 + -29644;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20400(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20400, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303184;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20392
	ctx.r3.s64 = ctx.r9.s64 + -20392;
	// addi r4,r8,-29612
	ctx.r4.s64 = ctx.r8.s64 + -29612;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20392(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20392, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823031B8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20384
	ctx.r3.s64 = ctx.r9.s64 + -20384;
	// addi r4,r8,-29560
	ctx.r4.s64 = ctx.r8.s64 + -29560;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20384(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20384, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823031EC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20376
	ctx.r3.s64 = ctx.r9.s64 + -20376;
	// addi r4,r8,-29520
	ctx.r4.s64 = ctx.r8.s64 + -29520;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20376(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20376, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303220;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20368
	ctx.r3.s64 = ctx.r9.s64 + -20368;
	// addi r4,r8,-29496
	ctx.r4.s64 = ctx.r8.s64 + -29496;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20368(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20368, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303254;
	sub_8233E028(ctx, base);
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// addi r4,r11,-29472
	ctx.r4.s64 = ctx.r11.s64 + -29472;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r8,r9,-20360
	ctx.r8.s64 = ctx.r9.s64 + -20360;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-20360(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20360, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82303288;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-20352
	ctx.r3.s64 = ctx.r5.s64 + -20352;
	// addi r4,r4,-29436
	ctx.r4.s64 = ctx.r4.s64 + -29436;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20352(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20352, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823032BC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20344
	ctx.r3.s64 = ctx.r9.s64 + -20344;
	// addi r4,r8,-29400
	ctx.r4.s64 = ctx.r8.s64 + -29400;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20344(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20344, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823032F0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20336
	ctx.r3.s64 = ctx.r9.s64 + -20336;
	// addi r4,r8,-29372
	ctx.r4.s64 = ctx.r8.s64 + -29372;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20336(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20336, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303324;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20328
	ctx.r3.s64 = ctx.r9.s64 + -20328;
	// addi r4,r8,-29336
	ctx.r4.s64 = ctx.r8.s64 + -29336;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20328(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20328, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303358;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20320
	ctx.r3.s64 = ctx.r9.s64 + -20320;
	// addi r4,r8,-29296
	ctx.r4.s64 = ctx.r8.s64 + -29296;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20320(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20320, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230338C;
	sub_8233E028(ctx, base);
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,-29256
	ctx.r4.s64 = ctx.r11.s64 + -29256;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r8,r9,-20312
	ctx.r8.s64 = ctx.r9.s64 + -20312;
	// stw r11,-20312(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20312, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x823033C0;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-20304
	ctx.r3.s64 = ctx.r5.s64 + -20304;
	// addi r4,r4,-29236
	ctx.r4.s64 = ctx.r4.s64 + -29236;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20304(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20304, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823033F4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20296
	ctx.r3.s64 = ctx.r9.s64 + -20296;
	// addi r4,r8,-29212
	ctx.r4.s64 = ctx.r8.s64 + -29212;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20296(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20296, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303428;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20288
	ctx.r3.s64 = ctx.r9.s64 + -20288;
	// addi r4,r8,-29176
	ctx.r4.s64 = ctx.r8.s64 + -29176;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20288(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20288, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230345C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20280
	ctx.r3.s64 = ctx.r9.s64 + -20280;
	// addi r4,r8,-29160
	ctx.r4.s64 = ctx.r8.s64 + -29160;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20280(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20280, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303490;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20272
	ctx.r3.s64 = ctx.r9.s64 + -20272;
	// addi r4,r8,-29108
	ctx.r4.s64 = ctx.r8.s64 + -29108;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20272(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20272, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823034C4;
	sub_8233E028(ctx, base);
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// addi r4,r11,-29080
	ctx.r4.s64 = ctx.r11.s64 + -29080;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,-20264
	ctx.r8.s64 = ctx.r9.s64 + -20264;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-20264(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20264, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x823034F8;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-20256
	ctx.r3.s64 = ctx.r5.s64 + -20256;
	// addi r4,r4,-29040
	ctx.r4.s64 = ctx.r4.s64 + -29040;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20256(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20256, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230352C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20248
	ctx.r3.s64 = ctx.r9.s64 + -20248;
	// addi r4,r8,-29004
	ctx.r4.s64 = ctx.r8.s64 + -29004;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20248(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20248, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303560;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20240
	ctx.r3.s64 = ctx.r9.s64 + -20240;
	// addi r4,r8,-28984
	ctx.r4.s64 = ctx.r8.s64 + -28984;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20240(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20240, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303594;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20232
	ctx.r3.s64 = ctx.r9.s64 + -20232;
	// addi r4,r8,-28960
	ctx.r4.s64 = ctx.r8.s64 + -28960;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20232(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20232, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823035C8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20224
	ctx.r3.s64 = ctx.r9.s64 + -20224;
	// addi r4,r8,-28920
	ctx.r4.s64 = ctx.r8.s64 + -28920;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20224(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20224, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823035FC;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r8,-28900
	ctx.r4.s64 = ctx.r8.s64 + -28900;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20216(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20216, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r11,r9,-20216
	ctx.r11.s64 = ctx.r9.s64 + -20216;
	// stw r10,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82303630;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20208
	ctx.r3.s64 = ctx.r9.s64 + -20208;
	// addi r4,r8,-28872
	ctx.r4.s64 = ctx.r8.s64 + -28872;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20208(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20208, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303664;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20200
	ctx.r3.s64 = ctx.r9.s64 + -20200;
	// addi r4,r8,-28840
	ctx.r4.s64 = ctx.r8.s64 + -28840;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20200(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20200, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303698;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20192
	ctx.r3.s64 = ctx.r9.s64 + -20192;
	// addi r4,r8,-28800
	ctx.r4.s64 = ctx.r8.s64 + -28800;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20192(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20192, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823036CC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20184
	ctx.r3.s64 = ctx.r9.s64 + -20184;
	// addi r4,r8,-28784
	ctx.r4.s64 = ctx.r8.s64 + -28784;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20184(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20184, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303700;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20176
	ctx.r3.s64 = ctx.r9.s64 + -20176;
	// addi r4,r8,-28764
	ctx.r4.s64 = ctx.r8.s64 + -28764;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20176(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20176, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303734;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20168
	ctx.r3.s64 = ctx.r9.s64 + -20168;
	// addi r4,r8,-28744
	ctx.r4.s64 = ctx.r8.s64 + -28744;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20168(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20168, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303768;
	sub_8233E028(ctx, base);
	// lis r9,-32243
	ctx.r9.s64 = -2113077248;
	// lis r8,-31882
	ctx.r8.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r9,-28716
	ctx.r4.s64 = ctx.r9.s64 + -28716;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r9,r8,-20160
	ctx.r9.s64 = ctx.r8.s64 + -20160;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20160(r8)
	PPC_STORE_U32(ctx.r8.u32 + -20160, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x8230379C;
	sub_8233E028(ctx, base);
	// lis r8,-31882
	ctx.r8.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r7,-32243
	ctx.r7.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r8,-20152
	ctx.r3.s64 = ctx.r8.s64 + -20152;
	// addi r4,r7,-28692
	ctx.r4.s64 = ctx.r7.s64 + -28692;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20152(r8)
	PPC_STORE_U32(ctx.r8.u32 + -20152, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823037D0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20144
	ctx.r3.s64 = ctx.r9.s64 + -20144;
	// addi r4,r8,-28648
	ctx.r4.s64 = ctx.r8.s64 + -28648;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20144(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20144, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303804;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20136
	ctx.r3.s64 = ctx.r9.s64 + -20136;
	// addi r4,r8,-28632
	ctx.r4.s64 = ctx.r8.s64 + -28632;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20136(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20136, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303838;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20128
	ctx.r3.s64 = ctx.r9.s64 + -20128;
	// addi r4,r8,-28608
	ctx.r4.s64 = ctx.r8.s64 + -28608;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20128(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20128, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230386C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20120
	ctx.r3.s64 = ctx.r9.s64 + -20120;
	// addi r4,r8,-28576
	ctx.r4.s64 = ctx.r8.s64 + -28576;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20120(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20120, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823038A0;
	sub_8233E028(ctx, base);
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,-28528
	ctx.r4.s64 = ctx.r11.s64 + -28528;
	// li r6,1
	ctx.r6.s64 = 1;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r8,r9,-20112
	ctx.r8.s64 = ctx.r9.s64 + -20112;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-20112(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20112, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x823038D4;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-20104
	ctx.r3.s64 = ctx.r5.s64 + -20104;
	// addi r4,r4,-28484
	ctx.r4.s64 = ctx.r4.s64 + -28484;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20104(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20104, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303908;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20096
	ctx.r3.s64 = ctx.r9.s64 + -20096;
	// addi r4,r8,-28452
	ctx.r4.s64 = ctx.r8.s64 + -28452;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20096(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20096, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230393C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20088
	ctx.r3.s64 = ctx.r9.s64 + -20088;
	// addi r4,r8,-28424
	ctx.r4.s64 = ctx.r8.s64 + -28424;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20088(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20088, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303970;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20080
	ctx.r3.s64 = ctx.r9.s64 + -20080;
	// addi r4,r8,-28392
	ctx.r4.s64 = ctx.r8.s64 + -28392;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20080(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20080, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823039A4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20072
	ctx.r3.s64 = ctx.r9.s64 + -20072;
	// addi r4,r8,-28352
	ctx.r4.s64 = ctx.r8.s64 + -28352;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20072(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20072, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823039D8;
	sub_8233E028(ctx, base);
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,-28320
	ctx.r4.s64 = ctx.r11.s64 + -28320;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,-20064
	ctx.r8.s64 = ctx.r9.s64 + -20064;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-20064(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20064, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82303A0C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-20056
	ctx.r3.s64 = ctx.r5.s64 + -20056;
	// addi r4,r4,-28288
	ctx.r4.s64 = ctx.r4.s64 + -28288;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20056(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20056, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303A40;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20048
	ctx.r3.s64 = ctx.r9.s64 + -20048;
	// addi r4,r8,-28256
	ctx.r4.s64 = ctx.r8.s64 + -28256;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20048(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20048, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303A74;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20040
	ctx.r3.s64 = ctx.r9.s64 + -20040;
	// addi r4,r8,-28216
	ctx.r4.s64 = ctx.r8.s64 + -28216;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20040(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20040, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303AA8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20032
	ctx.r3.s64 = ctx.r9.s64 + -20032;
	// addi r4,r8,-28176
	ctx.r4.s64 = ctx.r8.s64 + -28176;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20032(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20032, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303ADC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20024
	ctx.r3.s64 = ctx.r9.s64 + -20024;
	// addi r4,r8,-28132
	ctx.r4.s64 = ctx.r8.s64 + -28132;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20024(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20024, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303B10;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r10,-31882
	ctx.r10.s64 = -2089418752;
	// lis r9,-32243
	ctx.r9.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r9,-28108
	ctx.r4.s64 = ctx.r9.s64 + -28108;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-20016(r10)
	PPC_STORE_U32(ctx.r10.u32 + -20016, ctx.r11.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r10,-20016
	ctx.r8.s64 = ctx.r10.s64 + -20016;
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r11.u32);
	// bl 0x8233e028
	ctx.lr = 0x82303B44;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-20008
	ctx.r3.s64 = ctx.r5.s64 + -20008;
	// addi r4,r4,-28084
	ctx.r4.s64 = ctx.r4.s64 + -28084;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20008(r5)
	PPC_STORE_U32(ctx.r5.u32 + -20008, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303B78;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-20000
	ctx.r3.s64 = ctx.r9.s64 + -20000;
	// addi r4,r8,-28064
	ctx.r4.s64 = ctx.r8.s64 + -28064;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-20000(r9)
	PPC_STORE_U32(ctx.r9.u32 + -20000, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303BAC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19992
	ctx.r3.s64 = ctx.r9.s64 + -19992;
	// addi r4,r8,-28020
	ctx.r4.s64 = ctx.r8.s64 + -28020;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19992(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19992, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303BE0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19984
	ctx.r3.s64 = ctx.r9.s64 + -19984;
	// addi r4,r8,-27988
	ctx.r4.s64 = ctx.r8.s64 + -27988;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19984(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19984, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303C14;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19976
	ctx.r3.s64 = ctx.r9.s64 + -19976;
	// addi r4,r8,-27952
	ctx.r4.s64 = ctx.r8.s64 + -27952;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19976(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19976, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303C48;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19968
	ctx.r3.s64 = ctx.r9.s64 + -19968;
	// addi r4,r8,-27904
	ctx.r4.s64 = ctx.r8.s64 + -27904;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19968(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19968, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303C7C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// addi r3,r9,-19960
	ctx.r3.s64 = ctx.r9.s64 + -19960;
	// addi r4,r8,-27876
	ctx.r4.s64 = ctx.r8.s64 + -27876;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,-19960(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19960, ctx.r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303CB0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19952
	ctx.r3.s64 = ctx.r9.s64 + -19952;
	// addi r4,r8,-27836
	ctx.r4.s64 = ctx.r8.s64 + -27836;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19952(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19952, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303CE4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19944
	ctx.r3.s64 = ctx.r9.s64 + -19944;
	// addi r4,r8,-27780
	ctx.r4.s64 = ctx.r8.s64 + -27780;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19944(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19944, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303D18;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19936
	ctx.r3.s64 = ctx.r9.s64 + -19936;
	// addi r4,r8,-27728
	ctx.r4.s64 = ctx.r8.s64 + -27728;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19936(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19936, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303D4C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19928
	ctx.r3.s64 = ctx.r9.s64 + -19928;
	// addi r4,r8,-27696
	ctx.r4.s64 = ctx.r8.s64 + -27696;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19928(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19928, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303D80;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19920
	ctx.r3.s64 = ctx.r9.s64 + -19920;
	// addi r4,r8,-27664
	ctx.r4.s64 = ctx.r8.s64 + -27664;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19920(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19920, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303DB4;
	sub_8233E028(ctx, base);
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,-27624
	ctx.r4.s64 = ctx.r11.s64 + -27624;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r8,r9,-19912
	ctx.r8.s64 = ctx.r9.s64 + -19912;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-19912(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19912, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82303DE8;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-19904
	ctx.r3.s64 = ctx.r5.s64 + -19904;
	// addi r4,r4,-27600
	ctx.r4.s64 = ctx.r4.s64 + -27600;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19904(r5)
	PPC_STORE_U32(ctx.r5.u32 + -19904, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303E1C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19896
	ctx.r3.s64 = ctx.r9.s64 + -19896;
	// addi r4,r8,-27576
	ctx.r4.s64 = ctx.r8.s64 + -27576;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19896(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19896, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303E50;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19888
	ctx.r3.s64 = ctx.r9.s64 + -19888;
	// addi r4,r8,-27540
	ctx.r4.s64 = ctx.r8.s64 + -27540;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19888(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19888, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303E84;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19880
	ctx.r3.s64 = ctx.r9.s64 + -19880;
	// addi r4,r8,-27516
	ctx.r4.s64 = ctx.r8.s64 + -27516;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19880(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19880, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303EB8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19872
	ctx.r3.s64 = ctx.r9.s64 + -19872;
	// addi r4,r8,-27484
	ctx.r4.s64 = ctx.r8.s64 + -27484;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19872(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19872, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303EEC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-19864
	ctx.r8.s64 = ctx.r9.s64 + -19864;
	// stw r11,-19864(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19864, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-27456
	ctx.r4.s64 = ctx.r6.s64 + -27456;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303F20;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-19856
	ctx.r3.s64 = ctx.r5.s64 + -19856;
	// addi r4,r4,-27428
	ctx.r4.s64 = ctx.r4.s64 + -27428;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19856(r5)
	PPC_STORE_U32(ctx.r5.u32 + -19856, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303F54;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19848
	ctx.r3.s64 = ctx.r9.s64 + -19848;
	// addi r4,r8,-27388
	ctx.r4.s64 = ctx.r8.s64 + -27388;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19848(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19848, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303F88;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19840
	ctx.r3.s64 = ctx.r9.s64 + -19840;
	// addi r4,r8,-27344
	ctx.r4.s64 = ctx.r8.s64 + -27344;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19840(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19840, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303FBC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19832
	ctx.r3.s64 = ctx.r9.s64 + -19832;
	// addi r4,r8,-27316
	ctx.r4.s64 = ctx.r8.s64 + -27316;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19832(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19832, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82303FF0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19824
	ctx.r3.s64 = ctx.r9.s64 + -19824;
	// addi r4,r8,-27276
	ctx.r4.s64 = ctx.r8.s64 + -27276;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19824(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19824, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304024;
	sub_8233E028(ctx, base);
	// lis r10,-32243
	ctx.r10.s64 = -2113077248;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r10,-27244
	ctx.r4.s64 = ctx.r10.s64 + -27244;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,-19816
	ctx.r8.s64 = ctx.r9.s64 + -19816;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-19816(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19816, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82304058;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-19808
	ctx.r3.s64 = ctx.r5.s64 + -19808;
	// addi r4,r4,-27212
	ctx.r4.s64 = ctx.r4.s64 + -27212;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19808(r5)
	PPC_STORE_U32(ctx.r5.u32 + -19808, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230408C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19800
	ctx.r3.s64 = ctx.r9.s64 + -19800;
	// addi r4,r8,-27176
	ctx.r4.s64 = ctx.r8.s64 + -27176;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19800(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19800, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823040C0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19792
	ctx.r3.s64 = ctx.r9.s64 + -19792;
	// addi r4,r8,-27136
	ctx.r4.s64 = ctx.r8.s64 + -27136;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19792(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19792, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823040F4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19784
	ctx.r3.s64 = ctx.r9.s64 + -19784;
	// addi r4,r8,-27084
	ctx.r4.s64 = ctx.r8.s64 + -27084;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19784(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19784, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304128;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19776
	ctx.r3.s64 = ctx.r9.s64 + -19776;
	// addi r4,r8,-27048
	ctx.r4.s64 = ctx.r8.s64 + -27048;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19776(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19776, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230415C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r31,r9,-19768
	ctx.r31.s64 = ctx.r9.s64 + -19768;
	// addi r4,r8,-27024
	ctx.r4.s64 = ctx.r8.s64 + -27024;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-19768(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19768, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82304190;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-19760
	ctx.r3.s64 = ctx.r5.s64 + -19760;
	// addi r4,r4,-26992
	ctx.r4.s64 = ctx.r4.s64 + -26992;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19760(r5)
	PPC_STORE_U32(ctx.r5.u32 + -19760, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823041C4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19752
	ctx.r3.s64 = ctx.r9.s64 + -19752;
	// addi r4,r8,-26956
	ctx.r4.s64 = ctx.r8.s64 + -26956;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19752(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19752, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823041F8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19744
	ctx.r3.s64 = ctx.r9.s64 + -19744;
	// addi r4,r8,-26916
	ctx.r4.s64 = ctx.r8.s64 + -26916;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19744(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19744, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230422C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19736
	ctx.r3.s64 = ctx.r9.s64 + -19736;
	// addi r4,r8,-26892
	ctx.r4.s64 = ctx.r8.s64 + -26892;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19736(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19736, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304260;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19728
	ctx.r3.s64 = ctx.r9.s64 + -19728;
	// addi r4,r8,-26860
	ctx.r4.s64 = ctx.r8.s64 + -26860;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19728(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19728, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304294;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19720
	ctx.r3.s64 = ctx.r9.s64 + -19720;
	// addi r4,r8,-26836
	ctx.r4.s64 = ctx.r8.s64 + -26836;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19720(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19720, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823042C8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// addi r8,r9,-19712
	ctx.r8.s64 = ctx.r9.s64 + -19712;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-26808
	ctx.r4.s64 = ctx.r6.s64 + -26808;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-19712(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19712, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x823042FC;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-19704
	ctx.r3.s64 = ctx.r5.s64 + -19704;
	// addi r4,r4,-26768
	ctx.r4.s64 = ctx.r4.s64 + -26768;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19704(r5)
	PPC_STORE_U32(ctx.r5.u32 + -19704, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304330;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19696
	ctx.r3.s64 = ctx.r9.s64 + -19696;
	// addi r4,r8,-26744
	ctx.r4.s64 = ctx.r8.s64 + -26744;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19696(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19696, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304364;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19688
	ctx.r3.s64 = ctx.r9.s64 + -19688;
	// addi r4,r8,-26720
	ctx.r4.s64 = ctx.r8.s64 + -26720;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19688(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19688, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304398;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19680
	ctx.r3.s64 = ctx.r9.s64 + -19680;
	// addi r4,r8,-26676
	ctx.r4.s64 = ctx.r8.s64 + -26676;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19680(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19680, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823043CC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19672
	ctx.r3.s64 = ctx.r9.s64 + -19672;
	// addi r4,r8,-26628
	ctx.r4.s64 = ctx.r8.s64 + -26628;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19672(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19672, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304400;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-19664
	ctx.r8.s64 = ctx.r9.s64 + -19664;
	// stw r11,-19664(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19664, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-26604
	ctx.r4.s64 = ctx.r6.s64 + -26604;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304434;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-19656
	ctx.r3.s64 = ctx.r5.s64 + -19656;
	// addi r4,r4,-26556
	ctx.r4.s64 = ctx.r4.s64 + -26556;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19656(r5)
	PPC_STORE_U32(ctx.r5.u32 + -19656, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304468;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19648
	ctx.r3.s64 = ctx.r9.s64 + -19648;
	// addi r4,r8,-26532
	ctx.r4.s64 = ctx.r8.s64 + -26532;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19648(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19648, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230449C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19640
	ctx.r3.s64 = ctx.r9.s64 + -19640;
	// addi r4,r8,-26500
	ctx.r4.s64 = ctx.r8.s64 + -26500;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19640(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19640, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823044D0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19632
	ctx.r3.s64 = ctx.r9.s64 + -19632;
	// addi r4,r8,-26464
	ctx.r4.s64 = ctx.r8.s64 + -26464;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19632(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19632, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304504;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19624
	ctx.r3.s64 = ctx.r9.s64 + -19624;
	// addi r4,r8,-14952
	ctx.r4.s64 = ctx.r8.s64 + -14952;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19624(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19624, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304538;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r7,r9,-19616
	ctx.r7.s64 = ctx.r9.s64 + -19616;
	// addi r4,r8,-26452
	ctx.r4.s64 = ctx.r8.s64 + -26452;
	// stw r11,-19616(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19616, ctx.r11.u32);
	// stw r10,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r10.u32);
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230456C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-19608
	ctx.r3.s64 = ctx.r5.s64 + -19608;
	// addi r4,r4,-26436
	ctx.r4.s64 = ctx.r4.s64 + -26436;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19608(r5)
	PPC_STORE_U32(ctx.r5.u32 + -19608, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823045A0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19600
	ctx.r3.s64 = ctx.r9.s64 + -19600;
	// addi r4,r8,-26424
	ctx.r4.s64 = ctx.r8.s64 + -26424;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19600(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19600, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823045D4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19592
	ctx.r3.s64 = ctx.r9.s64 + -19592;
	// addi r4,r8,-26408
	ctx.r4.s64 = ctx.r8.s64 + -26408;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19592(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19592, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304608;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19584
	ctx.r3.s64 = ctx.r9.s64 + -19584;
	// addi r4,r8,-26384
	ctx.r4.s64 = ctx.r8.s64 + -26384;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19584(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19584, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230463C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19576
	ctx.r3.s64 = ctx.r9.s64 + -19576;
	// addi r4,r8,-26364
	ctx.r4.s64 = ctx.r8.s64 + -26364;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19576(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19576, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304670;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19568
	ctx.r3.s64 = ctx.r9.s64 + -19568;
	// addi r4,r8,-26316
	ctx.r4.s64 = ctx.r8.s64 + -26316;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19568(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19568, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823046A4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19560
	ctx.r3.s64 = ctx.r9.s64 + -19560;
	// addi r4,r8,-26268
	ctx.r4.s64 = ctx.r8.s64 + -26268;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19560(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19560, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823046D8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19552
	ctx.r3.s64 = ctx.r9.s64 + -19552;
	// addi r4,r8,-26252
	ctx.r4.s64 = ctx.r8.s64 + -26252;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19552(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19552, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230470C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19544
	ctx.r3.s64 = ctx.r9.s64 + -19544;
	// addi r4,r8,-26236
	ctx.r4.s64 = ctx.r8.s64 + -26236;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19544(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19544, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304740;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19536
	ctx.r3.s64 = ctx.r9.s64 + -19536;
	// addi r4,r8,-26208
	ctx.r4.s64 = ctx.r8.s64 + -26208;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19536(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19536, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304774;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19052
	ctx.r3.s64 = ctx.r9.s64 + -19052;
	// addi r4,r8,-26160
	ctx.r4.s64 = ctx.r8.s64 + -26160;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19052(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19052, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823047A8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-19004
	ctx.r3.s64 = ctx.r9.s64 + -19004;
	// addi r4,r8,-26132
	ctx.r4.s64 = ctx.r8.s64 + -26132;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-19004(r9)
	PPC_STORE_U32(ctx.r9.u32 + -19004, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823047DC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,-18996
	ctx.r8.s64 = ctx.r9.s64 + -18996;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-26116
	ctx.r4.s64 = ctx.r6.s64 + -26116;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18996(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18996, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304810;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-18972
	ctx.r3.s64 = ctx.r5.s64 + -18972;
	// addi r4,r4,-26072
	ctx.r4.s64 = ctx.r4.s64 + -26072;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18972(r5)
	PPC_STORE_U32(ctx.r5.u32 + -18972, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304844;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18892
	ctx.r3.s64 = ctx.r9.s64 + -18892;
	// addi r4,r8,-26052
	ctx.r4.s64 = ctx.r8.s64 + -26052;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18892(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18892, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304878;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18884
	ctx.r3.s64 = ctx.r9.s64 + -18884;
	// addi r4,r8,-26028
	ctx.r4.s64 = ctx.r8.s64 + -26028;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18884(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18884, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823048AC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18876
	ctx.r3.s64 = ctx.r9.s64 + -18876;
	// addi r4,r8,-26004
	ctx.r4.s64 = ctx.r8.s64 + -26004;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18876(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18876, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823048E0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18868
	ctx.r3.s64 = ctx.r9.s64 + -18868;
	// addi r4,r8,-25968
	ctx.r4.s64 = ctx.r8.s64 + -25968;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18868(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18868, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304914;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r10,-31882
	ctx.r10.s64 = -2089418752;
	// addi r9,r10,-18860
	ctx.r9.s64 = ctx.r10.s64 + -18860;
	// stw r11,-18860(r10)
	PPC_STORE_U32(ctx.r10.u32 + -18860, ctx.r11.u32);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r8,-25932
	ctx.r4.s64 = ctx.r8.s64 + -25932;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304948;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-18852
	ctx.r3.s64 = ctx.r5.s64 + -18852;
	// addi r4,r4,-25876
	ctx.r4.s64 = ctx.r4.s64 + -25876;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18852(r5)
	PPC_STORE_U32(ctx.r5.u32 + -18852, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230497C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18844
	ctx.r3.s64 = ctx.r9.s64 + -18844;
	// addi r4,r8,-25828
	ctx.r4.s64 = ctx.r8.s64 + -25828;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18844(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18844, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823049B0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18836
	ctx.r3.s64 = ctx.r9.s64 + -18836;
	// addi r4,r8,-25800
	ctx.r4.s64 = ctx.r8.s64 + -25800;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18836(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18836, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823049E4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18828
	ctx.r3.s64 = ctx.r9.s64 + -18828;
	// addi r4,r8,-25764
	ctx.r4.s64 = ctx.r8.s64 + -25764;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18828(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18828, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304A18;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18820
	ctx.r3.s64 = ctx.r9.s64 + -18820;
	// addi r4,r8,-25748
	ctx.r4.s64 = ctx.r8.s64 + -25748;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18820(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18820, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304A4C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r7,r9,-18812
	ctx.r7.s64 = ctx.r9.s64 + -18812;
	// stw r11,-18812(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18812, ctx.r11.u32);
	// stw r10,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r10.u32);
	// addi r4,r8,-25712
	ctx.r4.s64 = ctx.r8.s64 + -25712;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304A80;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-18804
	ctx.r3.s64 = ctx.r5.s64 + -18804;
	// addi r4,r4,-25664
	ctx.r4.s64 = ctx.r4.s64 + -25664;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18804(r5)
	PPC_STORE_U32(ctx.r5.u32 + -18804, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304AB4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18776
	ctx.r3.s64 = ctx.r9.s64 + -18776;
	// addi r4,r8,-25628
	ctx.r4.s64 = ctx.r8.s64 + -25628;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18776(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18776, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304AE8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18768
	ctx.r3.s64 = ctx.r9.s64 + -18768;
	// addi r4,r8,-25604
	ctx.r4.s64 = ctx.r8.s64 + -25604;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18768(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18768, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304B1C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18720
	ctx.r3.s64 = ctx.r9.s64 + -18720;
	// addi r4,r8,-25588
	ctx.r4.s64 = ctx.r8.s64 + -25588;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18720(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18720, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304B50;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18712
	ctx.r3.s64 = ctx.r9.s64 + -18712;
	// addi r4,r8,-25552
	ctx.r4.s64 = ctx.r8.s64 + -25552;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18712(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18712, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304B84;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r5,r9,-18704
	ctx.r5.s64 = ctx.r9.s64 + -18704;
	// addi r4,r8,-25520
	ctx.r4.s64 = ctx.r8.s64 + -25520;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18704(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18704, ctx.r11.u32);
	// stw r10,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r10.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304BB8;
	sub_8233E028(ctx, base);
	// lis r3,-31882
	ctx.r3.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-32243
	ctx.r9.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r3,-18696
	ctx.r8.s64 = ctx.r3.s64 + -18696;
	// addi r4,r9,-25504
	ctx.r4.s64 = ctx.r9.s64 + -25504;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18696(r3)
	PPC_STORE_U32(ctx.r3.u32 + -18696, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304BEC;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-18688
	ctx.r3.s64 = ctx.r5.s64 + -18688;
	// addi r4,r4,-25468
	ctx.r4.s64 = ctx.r4.s64 + -25468;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18688(r5)
	PPC_STORE_U32(ctx.r5.u32 + -18688, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304C20;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18680
	ctx.r3.s64 = ctx.r9.s64 + -18680;
	// addi r4,r8,-25448
	ctx.r4.s64 = ctx.r8.s64 + -25448;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18680(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18680, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304C54;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18672
	ctx.r3.s64 = ctx.r9.s64 + -18672;
	// addi r4,r8,-25428
	ctx.r4.s64 = ctx.r8.s64 + -25428;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18672(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18672, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304C88;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18596
	ctx.r3.s64 = ctx.r9.s64 + -18596;
	// addi r4,r8,-25400
	ctx.r4.s64 = ctx.r8.s64 + -25400;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18596(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18596, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304CBC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18588
	ctx.r3.s64 = ctx.r9.s64 + -18588;
	// addi r4,r8,-25376
	ctx.r4.s64 = ctx.r8.s64 + -25376;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18588(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18588, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304CF0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// addi r3,r9,-18580
	ctx.r3.s64 = ctx.r9.s64 + -18580;
	// addi r4,r8,-25336
	ctx.r4.s64 = ctx.r8.s64 + -25336;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,-18580(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18580, ctx.r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304D24;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18572
	ctx.r3.s64 = ctx.r9.s64 + -18572;
	// addi r4,r8,-25304
	ctx.r4.s64 = ctx.r8.s64 + -25304;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18572(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18572, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304D58;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18564
	ctx.r3.s64 = ctx.r9.s64 + -18564;
	// addi r4,r8,-25264
	ctx.r4.s64 = ctx.r8.s64 + -25264;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18564(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18564, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304D8C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18556
	ctx.r3.s64 = ctx.r9.s64 + -18556;
	// addi r4,r8,-25228
	ctx.r4.s64 = ctx.r8.s64 + -25228;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18556(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18556, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304DC0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18548
	ctx.r3.s64 = ctx.r9.s64 + -18548;
	// addi r4,r8,-25196
	ctx.r4.s64 = ctx.r8.s64 + -25196;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18548(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18548, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304DF4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18540
	ctx.r3.s64 = ctx.r9.s64 + -18540;
	// addi r4,r8,-25160
	ctx.r4.s64 = ctx.r8.s64 + -25160;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18540(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18540, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304E28;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,-18532
	ctx.r8.s64 = ctx.r9.s64 + -18532;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// stw r11,-18532(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18532, ctx.r11.u32);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-25100
	ctx.r4.s64 = ctx.r6.s64 + -25100;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304E5C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-18524
	ctx.r3.s64 = ctx.r5.s64 + -18524;
	// addi r4,r4,-25076
	ctx.r4.s64 = ctx.r4.s64 + -25076;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18524(r5)
	PPC_STORE_U32(ctx.r5.u32 + -18524, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304E90;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18516
	ctx.r3.s64 = ctx.r9.s64 + -18516;
	// addi r4,r8,-25056
	ctx.r4.s64 = ctx.r8.s64 + -25056;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18516(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18516, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304EC4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18508
	ctx.r3.s64 = ctx.r9.s64 + -18508;
	// addi r4,r8,-25036
	ctx.r4.s64 = ctx.r8.s64 + -25036;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18508(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18508, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304EF8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18500
	ctx.r3.s64 = ctx.r9.s64 + -18500;
	// addi r4,r8,-25016
	ctx.r4.s64 = ctx.r8.s64 + -25016;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18500(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18500, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304F2C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18492
	ctx.r3.s64 = ctx.r9.s64 + -18492;
	// addi r4,r8,-24984
	ctx.r4.s64 = ctx.r8.s64 + -24984;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18492(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18492, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304F60;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-18484
	ctx.r8.s64 = ctx.r9.s64 + -18484;
	// stw r11,-18484(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18484, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-24936
	ctx.r4.s64 = ctx.r6.s64 + -24936;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304F94;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-18476
	ctx.r3.s64 = ctx.r5.s64 + -18476;
	// addi r4,r4,-24904
	ctx.r4.s64 = ctx.r4.s64 + -24904;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18476(r5)
	PPC_STORE_U32(ctx.r5.u32 + -18476, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304FC8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18468
	ctx.r3.s64 = ctx.r9.s64 + -18468;
	// addi r4,r8,-24856
	ctx.r4.s64 = ctx.r8.s64 + -24856;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18468(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18468, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82304FFC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18460
	ctx.r3.s64 = ctx.r9.s64 + -18460;
	// addi r4,r8,-24804
	ctx.r4.s64 = ctx.r8.s64 + -24804;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18460(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18460, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305030;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18452
	ctx.r3.s64 = ctx.r9.s64 + -18452;
	// addi r4,r8,-24760
	ctx.r4.s64 = ctx.r8.s64 + -24760;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18452(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18452, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305064;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18444
	ctx.r3.s64 = ctx.r9.s64 + -18444;
	// addi r4,r8,-24712
	ctx.r4.s64 = ctx.r8.s64 + -24712;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18444(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18444, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305098;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r6,r9,-18436
	ctx.r6.s64 = ctx.r9.s64 + -18436;
	// addi r4,r8,-24664
	ctx.r4.s64 = ctx.r8.s64 + -24664;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,-18436(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18436, ctx.r11.u32);
	// stw r10,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r10.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823050CC;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-18428
	ctx.r3.s64 = ctx.r5.s64 + -18428;
	// addi r4,r4,-24640
	ctx.r4.s64 = ctx.r4.s64 + -24640;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18428(r5)
	PPC_STORE_U32(ctx.r5.u32 + -18428, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305100;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18420
	ctx.r3.s64 = ctx.r9.s64 + -18420;
	// addi r4,r8,-24620
	ctx.r4.s64 = ctx.r8.s64 + -24620;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18420(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18420, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305134;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18412
	ctx.r3.s64 = ctx.r9.s64 + -18412;
	// addi r4,r8,-24600
	ctx.r4.s64 = ctx.r8.s64 + -24600;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18412(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18412, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305168;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18404
	ctx.r3.s64 = ctx.r9.s64 + -18404;
	// addi r4,r8,-24572
	ctx.r4.s64 = ctx.r8.s64 + -24572;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18404(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18404, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230519C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18396
	ctx.r3.s64 = ctx.r9.s64 + -18396;
	// addi r4,r8,-24544
	ctx.r4.s64 = ctx.r8.s64 + -24544;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18396(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18396, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823051D0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// addi r3,r9,-18388
	ctx.r3.s64 = ctx.r9.s64 + -18388;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r8,-24516
	ctx.r4.s64 = ctx.r8.s64 + -24516;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-18388(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18388, ctx.r11.u32);
	// bl 0x8233e028
	ctx.lr = 0x82305204;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18380
	ctx.r3.s64 = ctx.r9.s64 + -18380;
	// addi r4,r8,-24496
	ctx.r4.s64 = ctx.r8.s64 + -24496;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18380(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18380, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305238;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18372
	ctx.r3.s64 = ctx.r9.s64 + -18372;
	// addi r4,r8,-24464
	ctx.r4.s64 = ctx.r8.s64 + -24464;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18372(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18372, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230526C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18364
	ctx.r3.s64 = ctx.r9.s64 + -18364;
	// addi r4,r8,-24436
	ctx.r4.s64 = ctx.r8.s64 + -24436;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18364(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18364, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823052A0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18356
	ctx.r3.s64 = ctx.r9.s64 + -18356;
	// addi r4,r8,-24396
	ctx.r4.s64 = ctx.r8.s64 + -24396;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18356(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18356, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823052D4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18348
	ctx.r3.s64 = ctx.r9.s64 + -18348;
	// addi r4,r8,-24360
	ctx.r4.s64 = ctx.r8.s64 + -24360;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18348(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18348, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305308;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18340
	ctx.r3.s64 = ctx.r9.s64 + -18340;
	// addi r4,r8,-24328
	ctx.r4.s64 = ctx.r8.s64 + -24328;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18340(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18340, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230533C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// addi r8,r9,-18332
	ctx.r8.s64 = ctx.r9.s64 + -18332;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-24300
	ctx.r4.s64 = ctx.r6.s64 + -24300;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-18332(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18332, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x82305370;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-18324
	ctx.r3.s64 = ctx.r5.s64 + -18324;
	// addi r4,r4,-24248
	ctx.r4.s64 = ctx.r4.s64 + -24248;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18324(r5)
	PPC_STORE_U32(ctx.r5.u32 + -18324, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823053A4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18316
	ctx.r3.s64 = ctx.r9.s64 + -18316;
	// addi r4,r8,-24196
	ctx.r4.s64 = ctx.r8.s64 + -24196;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18316(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18316, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823053D8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18308
	ctx.r3.s64 = ctx.r9.s64 + -18308;
	// addi r4,r8,-24144
	ctx.r4.s64 = ctx.r8.s64 + -24144;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18308(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18308, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230540C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18300
	ctx.r3.s64 = ctx.r9.s64 + -18300;
	// addi r4,r8,-24108
	ctx.r4.s64 = ctx.r8.s64 + -24108;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18300(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18300, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305440;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18292
	ctx.r3.s64 = ctx.r9.s64 + -18292;
	// addi r4,r8,-24068
	ctx.r4.s64 = ctx.r8.s64 + -24068;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18292(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18292, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305474;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-18284
	ctx.r8.s64 = ctx.r9.s64 + -18284;
	// stw r11,-18284(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18284, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-24036
	ctx.r4.s64 = ctx.r6.s64 + -24036;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823054A8;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-18276
	ctx.r3.s64 = ctx.r5.s64 + -18276;
	// addi r4,r4,-24012
	ctx.r4.s64 = ctx.r4.s64 + -24012;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18276(r5)
	PPC_STORE_U32(ctx.r5.u32 + -18276, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823054DC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18268
	ctx.r3.s64 = ctx.r9.s64 + -18268;
	// addi r4,r8,-23988
	ctx.r4.s64 = ctx.r8.s64 + -23988;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18268(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18268, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305510;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18260
	ctx.r3.s64 = ctx.r9.s64 + -18260;
	// addi r4,r8,-23956
	ctx.r4.s64 = ctx.r8.s64 + -23956;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18260(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18260, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305544;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18252
	ctx.r3.s64 = ctx.r9.s64 + -18252;
	// addi r4,r8,-23928
	ctx.r4.s64 = ctx.r8.s64 + -23928;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18252(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18252, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305578;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18244
	ctx.r3.s64 = ctx.r9.s64 + -18244;
	// addi r4,r8,-23892
	ctx.r4.s64 = ctx.r8.s64 + -23892;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18244(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18244, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823055AC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r7,r9,-18236
	ctx.r7.s64 = ctx.r9.s64 + -18236;
	// addi r4,r8,-23860
	ctx.r4.s64 = ctx.r8.s64 + -23860;
	// stw r11,-18236(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18236, ctx.r11.u32);
	// stw r10,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r10.u32);
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823055E0;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-18228
	ctx.r3.s64 = ctx.r5.s64 + -18228;
	// addi r4,r4,-23824
	ctx.r4.s64 = ctx.r4.s64 + -23824;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18228(r5)
	PPC_STORE_U32(ctx.r5.u32 + -18228, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305614;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18220
	ctx.r3.s64 = ctx.r9.s64 + -18220;
	// addi r4,r8,-23796
	ctx.r4.s64 = ctx.r8.s64 + -23796;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18220(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18220, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305648;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18212
	ctx.r3.s64 = ctx.r9.s64 + -18212;
	// addi r4,r8,-23768
	ctx.r4.s64 = ctx.r8.s64 + -23768;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18212(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18212, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230567C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18060
	ctx.r3.s64 = ctx.r9.s64 + -18060;
	// addi r4,r8,-23732
	ctx.r4.s64 = ctx.r8.s64 + -23732;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18060(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18060, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823056B0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18052
	ctx.r3.s64 = ctx.r9.s64 + -18052;
	// addi r4,r8,-23704
	ctx.r4.s64 = ctx.r8.s64 + -23704;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18052(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18052, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823056E4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18044
	ctx.r3.s64 = ctx.r9.s64 + -18044;
	// addi r4,r8,-23660
	ctx.r4.s64 = ctx.r8.s64 + -23660;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18044(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18044, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305718;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18036
	ctx.r3.s64 = ctx.r9.s64 + -18036;
	// addi r4,r8,-23612
	ctx.r4.s64 = ctx.r8.s64 + -23612;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18036(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18036, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230574C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18028
	ctx.r3.s64 = ctx.r9.s64 + -18028;
	// addi r4,r8,-23560
	ctx.r4.s64 = ctx.r8.s64 + -23560;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18028(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18028, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305780;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18020
	ctx.r3.s64 = ctx.r9.s64 + -18020;
	// addi r4,r8,-23516
	ctx.r4.s64 = ctx.r8.s64 + -23516;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18020(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18020, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823057B4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18012
	ctx.r3.s64 = ctx.r9.s64 + -18012;
	// addi r4,r8,-23492
	ctx.r4.s64 = ctx.r8.s64 + -23492;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18012(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18012, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823057E8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-18004
	ctx.r3.s64 = ctx.r9.s64 + -18004;
	// addi r4,r8,-23460
	ctx.r4.s64 = ctx.r8.s64 + -23460;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-18004(r9)
	PPC_STORE_U32(ctx.r9.u32 + -18004, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230581C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17996
	ctx.r3.s64 = ctx.r9.s64 + -17996;
	// addi r4,r8,-23424
	ctx.r4.s64 = ctx.r8.s64 + -23424;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17996(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17996, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305850;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,-17988
	ctx.r8.s64 = ctx.r9.s64 + -17988;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-23396
	ctx.r4.s64 = ctx.r6.s64 + -23396;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17988(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17988, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305884;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-17980
	ctx.r3.s64 = ctx.r5.s64 + -17980;
	// addi r4,r4,-23356
	ctx.r4.s64 = ctx.r4.s64 + -23356;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17980(r5)
	PPC_STORE_U32(ctx.r5.u32 + -17980, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823058B8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17972
	ctx.r3.s64 = ctx.r9.s64 + -17972;
	// addi r4,r8,-23300
	ctx.r4.s64 = ctx.r8.s64 + -23300;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17972(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17972, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823058EC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17964
	ctx.r3.s64 = ctx.r9.s64 + -17964;
	// addi r4,r8,-23276
	ctx.r4.s64 = ctx.r8.s64 + -23276;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17964(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17964, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305920;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17956
	ctx.r3.s64 = ctx.r9.s64 + -17956;
	// addi r4,r8,-23232
	ctx.r4.s64 = ctx.r8.s64 + -23232;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17956(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17956, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305954;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17948
	ctx.r3.s64 = ctx.r9.s64 + -17948;
	// addi r4,r8,-23184
	ctx.r4.s64 = ctx.r8.s64 + -23184;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17948(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17948, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305988;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r10,-31882
	ctx.r10.s64 = -2089418752;
	// addi r9,r10,-17940
	ctx.r9.s64 = ctx.r10.s64 + -17940;
	// stw r11,-17940(r10)
	PPC_STORE_U32(ctx.r10.u32 + -17940, ctx.r11.u32);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r8,-23144
	ctx.r4.s64 = ctx.r8.s64 + -23144;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823059BC;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-17932
	ctx.r3.s64 = ctx.r5.s64 + -17932;
	// addi r4,r4,-23096
	ctx.r4.s64 = ctx.r4.s64 + -23096;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17932(r5)
	PPC_STORE_U32(ctx.r5.u32 + -17932, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823059F0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17924
	ctx.r3.s64 = ctx.r9.s64 + -17924;
	// addi r4,r8,-23044
	ctx.r4.s64 = ctx.r8.s64 + -23044;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17924(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17924, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305A24;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17916
	ctx.r3.s64 = ctx.r9.s64 + -17916;
	// addi r4,r8,-22992
	ctx.r4.s64 = ctx.r8.s64 + -22992;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17916(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17916, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305A58;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17908
	ctx.r3.s64 = ctx.r9.s64 + -17908;
	// addi r4,r8,-22972
	ctx.r4.s64 = ctx.r8.s64 + -22972;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17908(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17908, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305A8C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17900
	ctx.r3.s64 = ctx.r9.s64 + -17900;
	// addi r4,r8,-22948
	ctx.r4.s64 = ctx.r8.s64 + -22948;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17900(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17900, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305AC0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r7,r9,-17892
	ctx.r7.s64 = ctx.r9.s64 + -17892;
	// stw r11,-17892(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17892, ctx.r11.u32);
	// stw r10,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r10.u32);
	// addi r4,r8,-22908
	ctx.r4.s64 = ctx.r8.s64 + -22908;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305AF4;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-17884
	ctx.r3.s64 = ctx.r5.s64 + -17884;
	// addi r4,r4,-22868
	ctx.r4.s64 = ctx.r4.s64 + -22868;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17884(r5)
	PPC_STORE_U32(ctx.r5.u32 + -17884, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305B28;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17876
	ctx.r3.s64 = ctx.r9.s64 + -17876;
	// addi r4,r8,-22820
	ctx.r4.s64 = ctx.r8.s64 + -22820;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17876(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17876, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305B5C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17868
	ctx.r3.s64 = ctx.r9.s64 + -17868;
	// addi r4,r8,-22788
	ctx.r4.s64 = ctx.r8.s64 + -22788;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17868(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17868, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305B90;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17860
	ctx.r3.s64 = ctx.r9.s64 + -17860;
	// addi r4,r8,-22764
	ctx.r4.s64 = ctx.r8.s64 + -22764;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17860(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17860, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305BC4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17852
	ctx.r3.s64 = ctx.r9.s64 + -17852;
	// addi r4,r8,-22732
	ctx.r4.s64 = ctx.r8.s64 + -22732;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17852(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17852, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305BF8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r5,r9,-17844
	ctx.r5.s64 = ctx.r9.s64 + -17844;
	// addi r4,r8,-22688
	ctx.r4.s64 = ctx.r8.s64 + -22688;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17844(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17844, ctx.r11.u32);
	// stw r10,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r10.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305C2C;
	sub_8233E028(ctx, base);
	// lis r3,-31882
	ctx.r3.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-32243
	ctx.r9.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r3,-17836
	ctx.r8.s64 = ctx.r3.s64 + -17836;
	// addi r4,r9,-22656
	ctx.r4.s64 = ctx.r9.s64 + -22656;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17836(r3)
	PPC_STORE_U32(ctx.r3.u32 + -17836, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305C60;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-17828
	ctx.r3.s64 = ctx.r5.s64 + -17828;
	// addi r4,r4,-22616
	ctx.r4.s64 = ctx.r4.s64 + -22616;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17828(r5)
	PPC_STORE_U32(ctx.r5.u32 + -17828, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305C94;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17820
	ctx.r3.s64 = ctx.r9.s64 + -17820;
	// addi r4,r8,-22556
	ctx.r4.s64 = ctx.r8.s64 + -22556;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17820(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17820, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305CC8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17812
	ctx.r3.s64 = ctx.r9.s64 + -17812;
	// addi r4,r8,-22524
	ctx.r4.s64 = ctx.r8.s64 + -22524;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17812(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17812, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305CFC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17804
	ctx.r3.s64 = ctx.r9.s64 + -17804;
	// addi r4,r8,-22480
	ctx.r4.s64 = ctx.r8.s64 + -22480;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17804(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17804, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305D30;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17796
	ctx.r3.s64 = ctx.r9.s64 + -17796;
	// addi r4,r8,-22448
	ctx.r4.s64 = ctx.r8.s64 + -22448;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17796(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17796, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305D64;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// addi r3,r9,-17788
	ctx.r3.s64 = ctx.r9.s64 + -17788;
	// addi r4,r8,-22416
	ctx.r4.s64 = ctx.r8.s64 + -22416;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,-17788(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17788, ctx.r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305D98;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17780
	ctx.r3.s64 = ctx.r9.s64 + -17780;
	// addi r4,r8,-22388
	ctx.r4.s64 = ctx.r8.s64 + -22388;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17780(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17780, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305DCC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17772
	ctx.r3.s64 = ctx.r9.s64 + -17772;
	// addi r4,r8,-22340
	ctx.r4.s64 = ctx.r8.s64 + -22340;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17772(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17772, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305E00;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17764
	ctx.r3.s64 = ctx.r9.s64 + -17764;
	// addi r4,r8,-22300
	ctx.r4.s64 = ctx.r8.s64 + -22300;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17764(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17764, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305E34;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17756
	ctx.r3.s64 = ctx.r9.s64 + -17756;
	// addi r4,r8,-22276
	ctx.r4.s64 = ctx.r8.s64 + -22276;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17756(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17756, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305E68;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17748
	ctx.r3.s64 = ctx.r9.s64 + -17748;
	// addi r4,r8,-22240
	ctx.r4.s64 = ctx.r8.s64 + -22240;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17748(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17748, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305E9C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,-17740
	ctx.r8.s64 = ctx.r9.s64 + -17740;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// stw r11,-17740(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17740, ctx.r11.u32);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-22204
	ctx.r4.s64 = ctx.r6.s64 + -22204;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305ED0;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-17732
	ctx.r3.s64 = ctx.r5.s64 + -17732;
	// addi r4,r4,-22176
	ctx.r4.s64 = ctx.r4.s64 + -22176;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17732(r5)
	PPC_STORE_U32(ctx.r5.u32 + -17732, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305F04;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17724
	ctx.r3.s64 = ctx.r9.s64 + -17724;
	// addi r4,r8,-22148
	ctx.r4.s64 = ctx.r8.s64 + -22148;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17724(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17724, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305F38;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17716
	ctx.r3.s64 = ctx.r9.s64 + -17716;
	// addi r4,r8,-22108
	ctx.r4.s64 = ctx.r8.s64 + -22108;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17716(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17716, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305F6C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17708
	ctx.r3.s64 = ctx.r9.s64 + -17708;
	// addi r4,r8,-22068
	ctx.r4.s64 = ctx.r8.s64 + -22068;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17708(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17708, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305FA0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17700
	ctx.r3.s64 = ctx.r9.s64 + -17700;
	// addi r4,r8,-22024
	ctx.r4.s64 = ctx.r8.s64 + -22024;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17700(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17700, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82305FD4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-17692
	ctx.r8.s64 = ctx.r9.s64 + -17692;
	// stw r11,-17692(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17692, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-21980
	ctx.r4.s64 = ctx.r6.s64 + -21980;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82306008;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-17684
	ctx.r3.s64 = ctx.r5.s64 + -17684;
	// addi r4,r4,-21932
	ctx.r4.s64 = ctx.r4.s64 + -21932;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17684(r5)
	PPC_STORE_U32(ctx.r5.u32 + -17684, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230603C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17676
	ctx.r3.s64 = ctx.r9.s64 + -17676;
	// addi r4,r8,-21904
	ctx.r4.s64 = ctx.r8.s64 + -21904;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17676(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17676, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82306070;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17668
	ctx.r3.s64 = ctx.r9.s64 + -17668;
	// addi r4,r8,-21864
	ctx.r4.s64 = ctx.r8.s64 + -21864;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17668(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17668, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823060A4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17660
	ctx.r3.s64 = ctx.r9.s64 + -17660;
	// addi r4,r8,-21828
	ctx.r4.s64 = ctx.r8.s64 + -21828;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17660(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17660, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823060D8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17652
	ctx.r3.s64 = ctx.r9.s64 + -17652;
	// addi r4,r8,-21804
	ctx.r4.s64 = ctx.r8.s64 + -21804;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17652(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17652, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230610C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r6,r9,-17644
	ctx.r6.s64 = ctx.r9.s64 + -17644;
	// addi r4,r8,-21780
	ctx.r4.s64 = ctx.r8.s64 + -21780;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,-17644(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17644, ctx.r11.u32);
	// stw r10,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r10.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82306140;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-17636
	ctx.r3.s64 = ctx.r5.s64 + -17636;
	// addi r4,r4,-21756
	ctx.r4.s64 = ctx.r4.s64 + -21756;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17636(r5)
	PPC_STORE_U32(ctx.r5.u32 + -17636, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82306174;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17628
	ctx.r3.s64 = ctx.r9.s64 + -17628;
	// addi r4,r8,-21724
	ctx.r4.s64 = ctx.r8.s64 + -21724;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17628(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17628, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823061A8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17620
	ctx.r3.s64 = ctx.r9.s64 + -17620;
	// addi r4,r8,-21684
	ctx.r4.s64 = ctx.r8.s64 + -21684;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17620(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17620, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823061DC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17612
	ctx.r3.s64 = ctx.r9.s64 + -17612;
	// addi r4,r8,-21648
	ctx.r4.s64 = ctx.r8.s64 + -21648;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17612(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17612, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82306210;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17604
	ctx.r3.s64 = ctx.r9.s64 + -17604;
	// addi r4,r8,-21612
	ctx.r4.s64 = ctx.r8.s64 + -21612;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17604(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17604, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82306244;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// addi r3,r9,-17596
	ctx.r3.s64 = ctx.r9.s64 + -17596;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r8,-21576
	ctx.r4.s64 = ctx.r8.s64 + -21576;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-17596(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17596, ctx.r11.u32);
	// bl 0x8233e028
	ctx.lr = 0x82306278;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17588
	ctx.r3.s64 = ctx.r9.s64 + -17588;
	// addi r4,r8,-21548
	ctx.r4.s64 = ctx.r8.s64 + -21548;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17588(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17588, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823062AC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17580
	ctx.r3.s64 = ctx.r9.s64 + -17580;
	// addi r4,r8,-21512
	ctx.r4.s64 = ctx.r8.s64 + -21512;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17580(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17580, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823062E0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17572
	ctx.r3.s64 = ctx.r9.s64 + -17572;
	// addi r4,r8,-21492
	ctx.r4.s64 = ctx.r8.s64 + -21492;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17572(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17572, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82306314;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17564
	ctx.r3.s64 = ctx.r9.s64 + -17564;
	// addi r4,r8,-21456
	ctx.r4.s64 = ctx.r8.s64 + -21456;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17564(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17564, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82306348;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17556
	ctx.r3.s64 = ctx.r9.s64 + -17556;
	// addi r4,r8,-21416
	ctx.r4.s64 = ctx.r8.s64 + -21416;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17556(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17556, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230637C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17548
	ctx.r3.s64 = ctx.r9.s64 + -17548;
	// addi r4,r8,-21376
	ctx.r4.s64 = ctx.r8.s64 + -21376;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17548(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17548, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823063B0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// addi r8,r9,-17540
	ctx.r8.s64 = ctx.r9.s64 + -17540;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-21348
	ctx.r4.s64 = ctx.r6.s64 + -21348;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-17540(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17540, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x823063E4;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-17300
	ctx.r3.s64 = ctx.r5.s64 + -17300;
	// addi r4,r4,-21320
	ctx.r4.s64 = ctx.r4.s64 + -21320;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17300(r5)
	PPC_STORE_U32(ctx.r5.u32 + -17300, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82306418;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17292
	ctx.r3.s64 = ctx.r9.s64 + -17292;
	// addi r4,r8,-21288
	ctx.r4.s64 = ctx.r8.s64 + -21288;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17292(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17292, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230644C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17284
	ctx.r3.s64 = ctx.r9.s64 + -17284;
	// addi r4,r8,-21264
	ctx.r4.s64 = ctx.r8.s64 + -21264;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17284(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17284, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82306480;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17276
	ctx.r3.s64 = ctx.r9.s64 + -17276;
	// addi r4,r8,-21228
	ctx.r4.s64 = ctx.r8.s64 + -21228;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17276(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17276, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823064B4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17268
	ctx.r3.s64 = ctx.r9.s64 + -17268;
	// addi r4,r8,-21196
	ctx.r4.s64 = ctx.r8.s64 + -21196;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17268(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17268, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823064E8;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-17260
	ctx.r8.s64 = ctx.r9.s64 + -17260;
	// stw r11,-17260(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17260, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32243
	ctx.r6.s64 = -2113077248;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,-21160
	ctx.r4.s64 = ctx.r6.s64 + -21160;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x8230651C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-17252
	ctx.r3.s64 = ctx.r5.s64 + -17252;
	// addi r4,r4,-21124
	ctx.r4.s64 = ctx.r4.s64 + -21124;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17252(r5)
	PPC_STORE_U32(ctx.r5.u32 + -17252, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82306550;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17244
	ctx.r3.s64 = ctx.r9.s64 + -17244;
	// addi r4,r8,-21096
	ctx.r4.s64 = ctx.r8.s64 + -21096;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17244(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17244, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x82306584;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-17236
	ctx.r3.s64 = ctx.r9.s64 + -17236;
	// addi r4,r8,-21052
	ctx.r4.s64 = ctx.r8.s64 + -21052;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-17236(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17236, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x823065B8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-17228
	ctx.r8.s64 = ctx.r9.s64 + -17228;
	// stw r11,-17228(r9)
	PPC_STORE_U32(ctx.r9.u32 + -17228, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823065E4"))) PPC_WEAK_FUNC(sub_823065E4);
PPC_FUNC_IMPL(__imp__sub_823065E4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_823065E8"))) PPC_WEAK_FUNC(sub_823065E8);
PPC_FUNC_IMPL(__imp__sub_823065E8) {
	PPC_FUNC_PROLOGUE();
	// lwz r10,4(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// addi r11,r11,11272
	ctx.r11.s64 = ctx.r11.s64 + 11272;
	// beq cr6,0x82306604
	if (ctx.cr6.eq) goto loc_82306604;
	// lwz r4,0(r4)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// b 0x82306608
	goto loc_82306608;
loc_82306604:
	// mr r4,r11
	ctx.r4.u64 = ctx.r11.u64;
loc_82306608:
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8230661c
	if (ctx.cr6.eq) goto loc_8230661C;
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x82306620
	goto loc_82306620;
loc_8230661C:
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
loc_82306620:
	// b 0x82cb0328
	sub_82CB0328(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82306624"))) PPC_WEAK_FUNC(sub_82306624);
PPC_FUNC_IMPL(__imp__sub_82306624) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82306628"))) PPC_WEAK_FUNC(sub_82306628);
PPC_FUNC_IMPL(__imp__sub_82306628) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x82306644;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x823066cc
	if (ctx.cr6.eq) goto loc_823066CC;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// li r9,16384
	ctx.r9.s64 = 16384;
	// ori r8,r11,16516
	ctx.r8.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32243
	ctx.r7.s64 = -2113077248;
	// lis r5,-32214
	ctx.r5.s64 = -2111176704;
	// lis r4,-32208
	ctx.r4.s64 = -2110783488;
	// rldimi r9,r8,32,0
	ctx.r9.u64 = (__builtin_rotateleft64(ctx.r8.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r9.u64 & 0xFFFFFFFF);
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// lis r31,-32207
	ctx.r31.s64 = -2110717952;
	// addi r11,r7,-21036
	ctx.r11.s64 = ctx.r7.s64 + -21036;
	// addi r8,r5,-20912
	ctx.r8.s64 = ctx.r5.s64 + -20912;
	// addi r7,r4,29040
	ctx.r7.s64 = ctx.r4.s64 + 29040;
	// addi r6,r10,14488
	ctx.r6.s64 = ctx.r10.s64 + 14488;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r4,r9
	ctx.r4.u64 = ctx.r9.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// addi r5,r31,1200
	ctx.r5.s64 = ctx.r31.s64 + 1200;
	// mr r10,r6
	ctx.r10.u64 = ctx.r6.u64;
	// std r4,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r4.u64);
	// mr r9,r6
	ctx.r9.u64 = ctx.r6.u64;
	// stw r5,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r5.u32);
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,13
	ctx.r6.s64 = 13;
	// li r5,924
	ctx.r5.s64 = 924;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x823066B8;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_823066CC:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_823066E4"))) PPC_WEAK_FUNC(sub_823066E4);
PPC_FUNC_IMPL(__imp__sub_823066E4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_823066E8"))) PPC_WEAK_FUNC(sub_823066E8);
PPC_FUNC_IMPL(__imp__sub_823066E8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x823066F0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r29,r11,14476
	ctx.r29.s64 = ctx.r11.s64 + 14476;
	// lwz r10,25336(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25336);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82306720
	if (!ctx.cr6.eq) goto loc_82306720;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x822c20d0
	ctx.lr = 0x82306714;
	sub_822C20D0(ctx, base);
	// stw r3,25336(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25336, ctx.r3.u32);
	// bl 0x822c2180
	ctx.lr = 0x8230671C;
	sub_822C2180(ctx, base);
	// lwz r10,25336(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25336);
loc_82306720:
	// lis r30,-31884
	ctx.r30.s64 = -2089549824;
	// lwz r11,25356(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 25356);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x82306740
	if (ctx.cr6.eq) goto loc_82306740;
	// bl 0x822c6380
	ctx.lr = 0x82306734;
	sub_822C6380(ctx, base);
	// lwz r11,25356(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 25356);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x82306748
	goto loc_82306748;
loc_82306740:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_82306748:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82306770
	if (!ctx.cr6.eq) goto loc_82306770;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x822aace8
	ctx.lr = 0x82306760;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x82306768;
	sub_822AADA8(ctx, base);
	// lwz r11,25356(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 25356);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_82306770:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x8230679c
	if (!ctx.cr6.eq) goto loc_8230679C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82398580
	ctx.lr = 0x8230678C;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x82306794;
	sub_82398640(ctx, base);
	// lwz r11,25356(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 25356);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_8230679C:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x823067d4
	if (ctx.cr6.eq) goto loc_823067D4;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x823067B8;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x823067d4
	if (!ctx.cr6.eq) goto loc_823067D4;
	// lwz r3,25356(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 25356);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x823067D4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_823067D4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_823067DC"))) PPC_WEAK_FUNC(sub_823067DC);
PPC_FUNC_IMPL(__imp__sub_823067DC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_823067E0"))) PPC_WEAK_FUNC(sub_823067E0);
PPC_FUNC_IMPL(__imp__sub_823067E0) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-32207
	ctx.r11.s64 = -2110717952;
	// lis r10,-32213
	ctx.r10.s64 = -2111111168;
	// addi r9,r11,1184
	ctx.r9.s64 = ctx.r11.s64 + 1184;
	// addi r8,r10,5760
	ctx.r8.s64 = ctx.r10.s64 + 5760;
	// subf r7,r9,r8
	ctx.r7.s64 = ctx.r8.s64 - ctx.r9.s64;
	// cntlzw r6,r7
	ctx.r6.u64 = ctx.r7.u32 == 0 ? 32 : __builtin_clz(ctx.r7.u32);
	// rlwinm r3,r6,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 27) & 0x1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82306800"))) PPC_WEAK_FUNC(sub_82306800);
PPC_FUNC_IMPL(__imp__sub_82306800) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,25336(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25336);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82306844
	if (!ctx.cr6.eq) goto loc_82306844;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14476
	ctx.r3.s64 = ctx.r11.s64 + 14476;
	// bl 0x822c20d0
	ctx.lr = 0x82306838;
	sub_822C20D0(ctx, base);
	// stw r3,25336(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25336, ctx.r3.u32);
	// bl 0x822c2180
	ctx.lr = 0x82306840;
	sub_822C2180(ctx, base);
	// lwz r11,25336(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25336);
loc_82306844:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8230686C"))) PPC_WEAK_FUNC(sub_8230686C);
PPC_FUNC_IMPL(__imp__sub_8230686C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82306870"))) PPC_WEAK_FUNC(sub_82306870);
PPC_FUNC_IMPL(__imp__sub_82306870) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x8230688C;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82306914
	if (ctx.cr6.eq) goto loc_82306914;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// li r9,16384
	ctx.r9.s64 = 16384;
	// ori r8,r11,16516
	ctx.r8.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32243
	ctx.r7.s64 = -2113077248;
	// lis r5,-32214
	ctx.r5.s64 = -2111176704;
	// lis r4,-32208
	ctx.r4.s64 = -2110783488;
	// rldimi r9,r8,32,0
	ctx.r9.u64 = (__builtin_rotateleft64(ctx.r8.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r9.u64 & 0xFFFFFFFF);
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// lis r31,-32207
	ctx.r31.s64 = -2110717952;
	// addi r11,r7,-21020
	ctx.r11.s64 = ctx.r7.s64 + -21020;
	// addi r8,r5,-20912
	ctx.r8.s64 = ctx.r5.s64 + -20912;
	// addi r7,r4,29040
	ctx.r7.s64 = ctx.r4.s64 + 29040;
	// addi r6,r10,14488
	ctx.r6.s64 = ctx.r10.s64 + 14488;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r4,r9
	ctx.r4.u64 = ctx.r9.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// addi r5,r31,1160
	ctx.r5.s64 = ctx.r31.s64 + 1160;
	// mr r10,r6
	ctx.r10.u64 = ctx.r6.u64;
	// std r4,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r4.u64);
	// mr r9,r6
	ctx.r9.u64 = ctx.r6.u64;
	// stw r5,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r5.u32);
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,12
	ctx.r6.s64 = 12;
	// li r5,1180
	ctx.r5.s64 = 1180;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x82306900;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82306914:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8230692C"))) PPC_WEAK_FUNC(sub_8230692C);
PPC_FUNC_IMPL(__imp__sub_8230692C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_82306930"))) PPC_WEAK_FUNC(sub_82306930);
PPC_FUNC_IMPL(__imp__sub_82306930) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x82306938;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lwz r10,25356(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25356);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82306964
	if (!ctx.cr6.eq) goto loc_82306964;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82306628
	ctx.lr = 0x82306958;
	sub_82306628(ctx, base);
	// stw r3,25356(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25356, ctx.r3.u32);
	// bl 0x823066e8
	ctx.lr = 0x82306960;
	sub_823066E8(ctx, base);
	// lwz r10,25356(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25356);
loc_82306964:
	// lis r29,-31884
	ctx.r29.s64 = -2089549824;
	// lwz r11,25360(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 25360);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x82306984
	if (ctx.cr6.eq) goto loc_82306984;
	// bl 0x823160a8
	ctx.lr = 0x82306978;
	sub_823160A8(ctx, base);
	// lwz r11,25360(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 25360);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x8230698c
	goto loc_8230698C;
loc_82306984:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_8230698C:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x823069bc
	if (!ctx.cr6.eq) goto loc_823069BC;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x823069AC;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x823069B4;
	sub_822AADA8(ctx, base);
	// lwz r11,25360(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 25360);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_823069BC:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x823069e8
	if (!ctx.cr6.eq) goto loc_823069E8;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x823069D8;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x823069E0;
	sub_82398640(ctx, base);
	// lwz r11,25360(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 25360);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_823069E8:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x82306a20
	if (ctx.cr6.eq) goto loc_82306A20;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x82306A04;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x82306a20
	if (!ctx.cr6.eq) goto loc_82306A20;
	// lwz r3,25360(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 25360);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82306A20;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82306A20:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

