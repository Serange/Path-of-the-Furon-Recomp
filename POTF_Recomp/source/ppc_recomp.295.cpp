#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_829C34E0"))) PPC_WEAK_FUNC(sub_829C34E0);
PPC_FUNC_IMPL(__imp__sub_829C34E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C34E8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,15568
	ctx.r30.s64 = ctx.r11.s64 + 15568;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,15568(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 15568);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3538
	if (ctx.cr6.eq) goto loc_829C3538;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C350C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3518;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3544
	if (ctx.cr6.eq) goto loc_829C3544;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c350c
	if (!ctx.cr6.eq) goto loc_829C350C;
loc_829C3538:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3544:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3558"))) PPC_WEAK_FUNC(sub_829C3558);
PPC_FUNC_IMPL(__imp__sub_829C3558) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3560;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,15584
	ctx.r30.s64 = ctx.r11.s64 + 15584;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,15584(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 15584);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c35b0
	if (ctx.cr6.eq) goto loc_829C35B0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3584:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3590;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c35bc
	if (ctx.cr6.eq) goto loc_829C35BC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3584
	if (!ctx.cr6.eq) goto loc_829C3584;
loc_829C35B0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C35BC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C35D0"))) PPC_WEAK_FUNC(sub_829C35D0);
PPC_FUNC_IMPL(__imp__sub_829C35D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C35D8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,15608
	ctx.r30.s64 = ctx.r11.s64 + 15608;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,15608(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 15608);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3628
	if (ctx.cr6.eq) goto loc_829C3628;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C35FC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3608;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3634
	if (ctx.cr6.eq) goto loc_829C3634;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c35fc
	if (!ctx.cr6.eq) goto loc_829C35FC;
loc_829C3628:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3634:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3648"))) PPC_WEAK_FUNC(sub_829C3648);
PPC_FUNC_IMPL(__imp__sub_829C3648) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3650;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,15632
	ctx.r30.s64 = ctx.r11.s64 + 15632;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,15632(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 15632);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c36a0
	if (ctx.cr6.eq) goto loc_829C36A0;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3674:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3680;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c36ac
	if (ctx.cr6.eq) goto loc_829C36AC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3674
	if (!ctx.cr6.eq) goto loc_829C3674;
loc_829C36A0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C36AC:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C36C0"))) PPC_WEAK_FUNC(sub_829C36C0);
PPC_FUNC_IMPL(__imp__sub_829C36C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C36C8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,15648
	ctx.r30.s64 = ctx.r11.s64 + 15648;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,15648(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 15648);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3718
	if (ctx.cr6.eq) goto loc_829C3718;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C36EC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C36F8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3724
	if (ctx.cr6.eq) goto loc_829C3724;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c36ec
	if (!ctx.cr6.eq) goto loc_829C36EC;
loc_829C3718:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3724:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3738"))) PPC_WEAK_FUNC(sub_829C3738);
PPC_FUNC_IMPL(__imp__sub_829C3738) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3740;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,15680
	ctx.r30.s64 = ctx.r11.s64 + 15680;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,15680(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 15680);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3790
	if (ctx.cr6.eq) goto loc_829C3790;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3764:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3770;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c379c
	if (ctx.cr6.eq) goto loc_829C379C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3764
	if (!ctx.cr6.eq) goto loc_829C3764;
loc_829C3790:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C379C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C37B0"))) PPC_WEAK_FUNC(sub_829C37B0);
PPC_FUNC_IMPL(__imp__sub_829C37B0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C37B8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,15712
	ctx.r30.s64 = ctx.r11.s64 + 15712;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,15712(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 15712);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3808
	if (ctx.cr6.eq) goto loc_829C3808;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C37DC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C37E8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3814
	if (ctx.cr6.eq) goto loc_829C3814;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c37dc
	if (!ctx.cr6.eq) goto loc_829C37DC;
loc_829C3808:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3814:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3828"))) PPC_WEAK_FUNC(sub_829C3828);
PPC_FUNC_IMPL(__imp__sub_829C3828) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3830;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16208
	ctx.r30.s64 = ctx.r11.s64 + 16208;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16208(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16208);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3880
	if (ctx.cr6.eq) goto loc_829C3880;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3854:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3860;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c388c
	if (ctx.cr6.eq) goto loc_829C388C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3854
	if (!ctx.cr6.eq) goto loc_829C3854;
loc_829C3880:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C388C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C38A0"))) PPC_WEAK_FUNC(sub_829C38A0);
PPC_FUNC_IMPL(__imp__sub_829C38A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C38A8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16224
	ctx.r30.s64 = ctx.r11.s64 + 16224;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16224(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16224);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c38f8
	if (ctx.cr6.eq) goto loc_829C38F8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C38CC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C38D8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3904
	if (ctx.cr6.eq) goto loc_829C3904;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c38cc
	if (!ctx.cr6.eq) goto loc_829C38CC;
loc_829C38F8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3904:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3918"))) PPC_WEAK_FUNC(sub_829C3918);
PPC_FUNC_IMPL(__imp__sub_829C3918) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3920;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16408
	ctx.r30.s64 = ctx.r11.s64 + 16408;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16408(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16408);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3970
	if (ctx.cr6.eq) goto loc_829C3970;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3944:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3950;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c397c
	if (ctx.cr6.eq) goto loc_829C397C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3944
	if (!ctx.cr6.eq) goto loc_829C3944;
loc_829C3970:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C397C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3990"))) PPC_WEAK_FUNC(sub_829C3990);
PPC_FUNC_IMPL(__imp__sub_829C3990) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3998;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16496
	ctx.r30.s64 = ctx.r11.s64 + 16496;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16496(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16496);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c39e8
	if (ctx.cr6.eq) goto loc_829C39E8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C39BC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C39C8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c39f4
	if (ctx.cr6.eq) goto loc_829C39F4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c39bc
	if (!ctx.cr6.eq) goto loc_829C39BC;
loc_829C39E8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C39F4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3A08"))) PPC_WEAK_FUNC(sub_829C3A08);
PPC_FUNC_IMPL(__imp__sub_829C3A08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3A10;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16656
	ctx.r30.s64 = ctx.r11.s64 + 16656;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16656(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16656);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3a60
	if (ctx.cr6.eq) goto loc_829C3A60;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3A34:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3A40;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3a6c
	if (ctx.cr6.eq) goto loc_829C3A6C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3a34
	if (!ctx.cr6.eq) goto loc_829C3A34;
loc_829C3A60:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3A6C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3A80"))) PPC_WEAK_FUNC(sub_829C3A80);
PPC_FUNC_IMPL(__imp__sub_829C3A80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3A88;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16680
	ctx.r30.s64 = ctx.r11.s64 + 16680;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16680(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16680);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3ad8
	if (ctx.cr6.eq) goto loc_829C3AD8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3AAC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3AB8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3ae4
	if (ctx.cr6.eq) goto loc_829C3AE4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3aac
	if (!ctx.cr6.eq) goto loc_829C3AAC;
loc_829C3AD8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3AE4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3AF8"))) PPC_WEAK_FUNC(sub_829C3AF8);
PPC_FUNC_IMPL(__imp__sub_829C3AF8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3B00;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16696
	ctx.r30.s64 = ctx.r11.s64 + 16696;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16696(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16696);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3b50
	if (ctx.cr6.eq) goto loc_829C3B50;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3B24:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3B30;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3b5c
	if (ctx.cr6.eq) goto loc_829C3B5C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3b24
	if (!ctx.cr6.eq) goto loc_829C3B24;
loc_829C3B50:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3B5C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3B70"))) PPC_WEAK_FUNC(sub_829C3B70);
PPC_FUNC_IMPL(__imp__sub_829C3B70) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3B78;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16736
	ctx.r30.s64 = ctx.r11.s64 + 16736;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16736(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16736);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3bc8
	if (ctx.cr6.eq) goto loc_829C3BC8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3B9C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3BA8;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3bd4
	if (ctx.cr6.eq) goto loc_829C3BD4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3b9c
	if (!ctx.cr6.eq) goto loc_829C3B9C;
loc_829C3BC8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3BD4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3BE8"))) PPC_WEAK_FUNC(sub_829C3BE8);
PPC_FUNC_IMPL(__imp__sub_829C3BE8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3BF0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16752
	ctx.r30.s64 = ctx.r11.s64 + 16752;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16752(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16752);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3c40
	if (ctx.cr6.eq) goto loc_829C3C40;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3C14:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3C20;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3c4c
	if (ctx.cr6.eq) goto loc_829C3C4C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3c14
	if (!ctx.cr6.eq) goto loc_829C3C14;
loc_829C3C40:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3C4C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3C60"))) PPC_WEAK_FUNC(sub_829C3C60);
PPC_FUNC_IMPL(__imp__sub_829C3C60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3C68;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16768
	ctx.r30.s64 = ctx.r11.s64 + 16768;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16768(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16768);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3cb8
	if (ctx.cr6.eq) goto loc_829C3CB8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3C8C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3C98;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3cc4
	if (ctx.cr6.eq) goto loc_829C3CC4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3c8c
	if (!ctx.cr6.eq) goto loc_829C3C8C;
loc_829C3CB8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3CC4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3CD8"))) PPC_WEAK_FUNC(sub_829C3CD8);
PPC_FUNC_IMPL(__imp__sub_829C3CD8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3CE0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16840
	ctx.r30.s64 = ctx.r11.s64 + 16840;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16840(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16840);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3d30
	if (ctx.cr6.eq) goto loc_829C3D30;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3D04:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3D10;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3d3c
	if (ctx.cr6.eq) goto loc_829C3D3C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3d04
	if (!ctx.cr6.eq) goto loc_829C3D04;
loc_829C3D30:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3D3C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3D50"))) PPC_WEAK_FUNC(sub_829C3D50);
PPC_FUNC_IMPL(__imp__sub_829C3D50) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3D58;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16872
	ctx.r30.s64 = ctx.r11.s64 + 16872;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16872(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16872);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3da8
	if (ctx.cr6.eq) goto loc_829C3DA8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3D7C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3D88;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3db4
	if (ctx.cr6.eq) goto loc_829C3DB4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3d7c
	if (!ctx.cr6.eq) goto loc_829C3D7C;
loc_829C3DA8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3DB4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3DC8"))) PPC_WEAK_FUNC(sub_829C3DC8);
PPC_FUNC_IMPL(__imp__sub_829C3DC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3DD0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16920
	ctx.r30.s64 = ctx.r11.s64 + 16920;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16920(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16920);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3e20
	if (ctx.cr6.eq) goto loc_829C3E20;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3DF4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3E00;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3e2c
	if (ctx.cr6.eq) goto loc_829C3E2C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3df4
	if (!ctx.cr6.eq) goto loc_829C3DF4;
loc_829C3E20:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3E2C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3E40"))) PPC_WEAK_FUNC(sub_829C3E40);
PPC_FUNC_IMPL(__imp__sub_829C3E40) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3E48;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16936
	ctx.r30.s64 = ctx.r11.s64 + 16936;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16936(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16936);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3e98
	if (ctx.cr6.eq) goto loc_829C3E98;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3E6C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3E78;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3ea4
	if (ctx.cr6.eq) goto loc_829C3EA4;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3e6c
	if (!ctx.cr6.eq) goto loc_829C3E6C;
loc_829C3E98:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3EA4:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3EB8"))) PPC_WEAK_FUNC(sub_829C3EB8);
PPC_FUNC_IMPL(__imp__sub_829C3EB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3EC0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16952
	ctx.r30.s64 = ctx.r11.s64 + 16952;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16952(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16952);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3f10
	if (ctx.cr6.eq) goto loc_829C3F10;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3EE4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3EF0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3f1c
	if (ctx.cr6.eq) goto loc_829C3F1C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3ee4
	if (!ctx.cr6.eq) goto loc_829C3EE4;
loc_829C3F10:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3F1C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3F30"))) PPC_WEAK_FUNC(sub_829C3F30);
PPC_FUNC_IMPL(__imp__sub_829C3F30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3F38;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,16992
	ctx.r30.s64 = ctx.r11.s64 + 16992;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,16992(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16992);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c3f88
	if (ctx.cr6.eq) goto loc_829C3F88;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3F5C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3F68;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c3f94
	if (ctx.cr6.eq) goto loc_829C3F94;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3f5c
	if (!ctx.cr6.eq) goto loc_829C3F5C;
loc_829C3F88:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C3F94:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C3FA8"))) PPC_WEAK_FUNC(sub_829C3FA8);
PPC_FUNC_IMPL(__imp__sub_829C3FA8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C3FB0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,17032
	ctx.r30.s64 = ctx.r11.s64 + 17032;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,17032(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17032);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c4000
	if (ctx.cr6.eq) goto loc_829C4000;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C3FD4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C3FE0;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c400c
	if (ctx.cr6.eq) goto loc_829C400C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c3fd4
	if (!ctx.cr6.eq) goto loc_829C3FD4;
loc_829C4000:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C400C:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C4020"))) PPC_WEAK_FUNC(sub_829C4020);
PPC_FUNC_IMPL(__imp__sub_829C4020) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C4028;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r30,r11,17064
	ctx.r30.s64 = ctx.r11.s64 + 17064;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,17064(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17064);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829c4078
	if (ctx.cr6.eq) goto loc_829C4078;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829C404C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82cb20a0
	ctx.lr = 0x829C4058;
	sub_82CB20A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x829c4084
	if (ctx.cr6.eq) goto loc_829C4084;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c404c
	if (!ctx.cr6.eq) goto loc_829C404C;
loc_829C4078:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
loc_829C4084:
	// rlwinm r11,r31,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// addi r10,r30,4
	ctx.r10.s64 = ctx.r30.s64 + 4;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C4098"))) PPC_WEAK_FUNC(sub_829C4098);
PPC_FUNC_IMPL(__imp__sub_829C4098) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829C40B0;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829c4134
	if (ctx.cr6.eq) goto loc_829C4134;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,5708
	ctx.r11.s64 = ctx.r8.s64 + 5708;
	// lis r5,-32104
	ctx.r5.s64 = -2103967744;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,27040
	ctx.r6.s64 = ctx.r5.s64 + 27040;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,-988
	ctx.r10.s64 = ctx.r4.s64 + -988;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,5
	ctx.r6.s64 = 5;
	// li r5,2384
	ctx.r5.s64 = 2384;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829C4124;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829C4134:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829C4148"))) PPC_WEAK_FUNC(sub_829C4148);
PPC_FUNC_IMPL(__imp__sub_829C4148) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829C4150;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-28744(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28744);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c417c
	if (!ctx.cr6.eq) goto loc_829C417C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826016d0
	ctx.lr = 0x829C4170;
	sub_826016D0(ctx, base);
	// stw r3,-28744(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28744, ctx.r3.u32);
	// bl 0x82601780
	ctx.lr = 0x829C4178;
	sub_82601780(ctx, base);
	// lwz r10,-28744(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28744);
loc_829C417C:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25824(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25824);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829c419c
	if (ctx.cr6.eq) goto loc_829C419C;
	// bl 0x82313808
	ctx.lr = 0x829C4190;
	sub_82313808(ctx, base);
	// lwz r11,-25824(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25824);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829c41a4
	goto loc_829C41A4;
loc_829C419C:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829C41A4:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c41d4
	if (!ctx.cr6.eq) goto loc_829C41D4;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829C41C4;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829C41CC;
	sub_822AADA8(ctx, base);
	// lwz r11,-25824(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25824);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829C41D4:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829c4200
	if (!ctx.cr6.eq) goto loc_829C4200;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829C41F0;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829C41F8;
	sub_82398640(ctx, base);
	// lwz r11,-25824(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25824);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829C4200:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829c4238
	if (ctx.cr6.eq) goto loc_829C4238;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829C421C;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829c4238
	if (!ctx.cr6.eq) goto loc_829C4238;
	// lwz r3,-25824(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25824);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829C4238;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829C4238:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829C4240"))) PPC_WEAK_FUNC(sub_829C4240);
PPC_FUNC_IMPL(__imp__sub_829C4240) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829C4248"))) PPC_WEAK_FUNC(sub_829C4248);
PPC_FUNC_IMPL(__imp__sub_829C4248) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-28744(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28744);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c428c
	if (!ctx.cr6.eq) goto loc_829C428C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826016d0
	ctx.lr = 0x829C4280;
	sub_826016D0(ctx, base);
	// stw r3,-28744(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28744, ctx.r3.u32);
	// bl 0x82601780
	ctx.lr = 0x829C4288;
	sub_82601780(ctx, base);
	// lwz r11,-28744(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28744);
loc_829C428C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829C42B4"))) PPC_WEAK_FUNC(sub_829C42B4);
PPC_FUNC_IMPL(__imp__sub_829C42B4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829C42B8"))) PPC_WEAK_FUNC(sub_829C42B8);
PPC_FUNC_IMPL(__imp__sub_829C42B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10e8
	ctx.lr = 0x829C42C0;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r29,r11,11336
	ctx.r29.s64 = ctx.r11.s64 + 11336;
	// lwz r11,-25812(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25812);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c42f0
	if (!ctx.cr6.eq) goto loc_829C42F0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829cfbf0
	ctx.lr = 0x829C42E8;
	sub_829CFBF0(ctx, base);
	// stw r3,-25812(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25812, ctx.r3.u32);
	// bl 0x829cfca0
	ctx.lr = 0x829C42F0;
	sub_829CFCA0(ctx, base);
loc_829C42F0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23900(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23900);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4310
	if (!ctx.cr6.eq) goto loc_829C4310;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b09b90
	ctx.lr = 0x829C4308;
	sub_82B09B90(ctx, base);
	// stw r3,-23900(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23900, ctx.r3.u32);
	// bl 0x82b09c40
	ctx.lr = 0x829C4310;
	sub_82B09C40(ctx, base);
loc_829C4310:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23896(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23896);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4330
	if (!ctx.cr6.eq) goto loc_829C4330;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b09db0
	ctx.lr = 0x829C4328;
	sub_82B09DB0(ctx, base);
	// stw r3,-23896(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23896, ctx.r3.u32);
	// bl 0x82b09e60
	ctx.lr = 0x829C4330;
	sub_82B09E60(ctx, base);
loc_829C4330:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23820(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23820);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4350
	if (!ctx.cr6.eq) goto loc_829C4350;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b160a0
	ctx.lr = 0x829C4348;
	sub_82B160A0(ctx, base);
	// stw r3,-23820(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23820, ctx.r3.u32);
	// bl 0x82b16150
	ctx.lr = 0x829C4350;
	sub_82B16150(ctx, base);
loc_829C4350:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23448(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23448);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4370
	if (!ctx.cr6.eq) goto loc_829C4370;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b505b0
	ctx.lr = 0x829C4368;
	sub_82B505B0(ctx, base);
	// stw r3,-23448(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23448, ctx.r3.u32);
	// bl 0x82b50660
	ctx.lr = 0x829C4370;
	sub_82B50660(ctx, base);
loc_829C4370:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23480(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23480);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4390
	if (!ctx.cr6.eq) goto loc_829C4390;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b4d278
	ctx.lr = 0x829C4388;
	sub_82B4D278(ctx, base);
	// stw r3,-23480(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23480, ctx.r3.u32);
	// bl 0x82b4d328
	ctx.lr = 0x829C4390;
	sub_82B4D328(ctx, base);
loc_829C4390:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24072(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24072);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c43b0
	if (!ctx.cr6.eq) goto loc_829C43B0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82af9068
	ctx.lr = 0x829C43A8;
	sub_82AF9068(ctx, base);
	// stw r3,-24072(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24072, ctx.r3.u32);
	// bl 0x82af9118
	ctx.lr = 0x829C43B0;
	sub_82AF9118(ctx, base);
loc_829C43B0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23420(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23420);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c43d0
	if (!ctx.cr6.eq) goto loc_829C43D0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b59cc0
	ctx.lr = 0x829C43C8;
	sub_82B59CC0(ctx, base);
	// stw r3,-23420(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23420, ctx.r3.u32);
	// bl 0x82b59d70
	ctx.lr = 0x829C43D0;
	sub_82B59D70(ctx, base);
loc_829C43D0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25524(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25524);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c43f0
	if (!ctx.cr6.eq) goto loc_829C43F0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829fe638
	ctx.lr = 0x829C43E8;
	sub_829FE638(ctx, base);
	// stw r3,-25524(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25524, ctx.r3.u32);
	// bl 0x829fe6e8
	ctx.lr = 0x829C43F0;
	sub_829FE6E8(ctx, base);
loc_829C43F0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23856(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23856);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4410
	if (!ctx.cr6.eq) goto loc_829C4410;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b0ef50
	ctx.lr = 0x829C4408;
	sub_82B0EF50(ctx, base);
	// stw r3,-23856(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23856, ctx.r3.u32);
	// bl 0x82b0f000
	ctx.lr = 0x829C4410;
	sub_82B0F000(ctx, base);
loc_829C4410:
	// lis r10,-31889
	ctx.r10.s64 = -2089877504;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// addi r28,r10,29176
	ctx.r28.s64 = ctx.r10.s64 + 29176;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r10,-12288
	ctx.r8.s64 = ctx.r10.s64 + -12288;
	// lwz r10,-23628(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23628);
	// addi r7,r11,1
	ctx.r7.s64 = ctx.r11.s64 + 1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// stw r7,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r7.u32);
	// stwx r8,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r8.u32);
	// bne cr6,0x829c4454
	if (!ctx.cr6.eq) goto loc_829C4454;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b337a0
	ctx.lr = 0x829C444C;
	sub_82B337A0(ctx, base);
	// stw r3,-23628(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23628, ctx.r3.u32);
	// bl 0x82b33850
	ctx.lr = 0x829C4454;
	sub_82B33850(ctx, base);
loc_829C4454:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-12168
	ctx.r7.s64 = ctx.r10.s64 + -12168;
	// lwz r11,-23672(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23672);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4490
	if (!ctx.cr6.eq) goto loc_829C4490;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b2e068
	ctx.lr = 0x829C4488;
	sub_82B2E068(ctx, base);
	// stw r3,-23672(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23672, ctx.r3.u32);
	// bl 0x82b2e118
	ctx.lr = 0x829C4490;
	sub_82B2E118(ctx, base);
loc_829C4490:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-12048
	ctx.r7.s64 = ctx.r10.s64 + -12048;
	// lwz r11,-24636(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24636);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c44cc
	if (!ctx.cr6.eq) goto loc_829C44CC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9d578
	ctx.lr = 0x829C44C4;
	sub_82A9D578(ctx, base);
	// stw r3,-24636(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24636, ctx.r3.u32);
	// bl 0x82a9d628
	ctx.lr = 0x829C44CC;
	sub_82A9D628(ctx, base);
loc_829C44CC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-11928
	ctx.r7.s64 = ctx.r10.s64 + -11928;
	// lwz r11,-23668(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23668);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4508
	if (!ctx.cr6.eq) goto loc_829C4508;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b2e288
	ctx.lr = 0x829C4500;
	sub_82B2E288(ctx, base);
	// stw r3,-23668(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23668, ctx.r3.u32);
	// bl 0x82b2e338
	ctx.lr = 0x829C4508;
	sub_82B2E338(ctx, base);
loc_829C4508:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-11808
	ctx.r7.s64 = ctx.r10.s64 + -11808;
	// lwz r11,-24920(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24920);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4544
	if (!ctx.cr6.eq) goto loc_829C4544;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a74d20
	ctx.lr = 0x829C453C;
	sub_82A74D20(ctx, base);
	// stw r3,-24920(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24920, ctx.r3.u32);
	// bl 0x82a74dd0
	ctx.lr = 0x829C4544;
	sub_82A74DD0(ctx, base);
loc_829C4544:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25000(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25000);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4564
	if (!ctx.cr6.eq) goto loc_829C4564;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a722a0
	ctx.lr = 0x829C455C;
	sub_82A722A0(ctx, base);
	// stw r3,-25000(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25000, ctx.r3.u32);
	// bl 0x82a72350
	ctx.lr = 0x829C4564;
	sub_82A72350(ctx, base);
loc_829C4564:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24988(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24988);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4584
	if (!ctx.cr6.eq) goto loc_829C4584;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a72900
	ctx.lr = 0x829C457C;
	sub_82A72900(ctx, base);
	// stw r3,-24988(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24988, ctx.r3.u32);
	// bl 0x82a729b0
	ctx.lr = 0x829C4584;
	sub_82A729B0(ctx, base);
loc_829C4584:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24984(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24984);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c45a4
	if (!ctx.cr6.eq) goto loc_829C45A4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a72b20
	ctx.lr = 0x829C459C;
	sub_82A72B20(ctx, base);
	// stw r3,-24984(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24984, ctx.r3.u32);
	// bl 0x82a72bd0
	ctx.lr = 0x829C45A4;
	sub_82A72BD0(ctx, base);
loc_829C45A4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24980(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24980);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c45c4
	if (!ctx.cr6.eq) goto loc_829C45C4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a72d40
	ctx.lr = 0x829C45BC;
	sub_82A72D40(ctx, base);
	// stw r3,-24980(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24980, ctx.r3.u32);
	// bl 0x82a72df0
	ctx.lr = 0x829C45C4;
	sub_82A72DF0(ctx, base);
loc_829C45C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24976(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24976);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c45e4
	if (!ctx.cr6.eq) goto loc_829C45E4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a72f60
	ctx.lr = 0x829C45DC;
	sub_82A72F60(ctx, base);
	// stw r3,-24976(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24976, ctx.r3.u32);
	// bl 0x82a73010
	ctx.lr = 0x829C45E4;
	sub_82A73010(ctx, base);
loc_829C45E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24972(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24972);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4604
	if (!ctx.cr6.eq) goto loc_829C4604;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a73180
	ctx.lr = 0x829C45FC;
	sub_82A73180(ctx, base);
	// stw r3,-24972(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24972, ctx.r3.u32);
	// bl 0x82a73230
	ctx.lr = 0x829C4604;
	sub_82A73230(ctx, base);
loc_829C4604:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24960(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24960);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4624
	if (!ctx.cr6.eq) goto loc_829C4624;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a737e0
	ctx.lr = 0x829C461C;
	sub_82A737E0(ctx, base);
	// stw r3,-24960(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24960, ctx.r3.u32);
	// bl 0x82a73890
	ctx.lr = 0x829C4624;
	sub_82A73890(ctx, base);
loc_829C4624:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24956(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24956);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4644
	if (!ctx.cr6.eq) goto loc_829C4644;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a73a00
	ctx.lr = 0x829C463C;
	sub_82A73A00(ctx, base);
	// stw r3,-24956(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24956, ctx.r3.u32);
	// bl 0x82a73ab0
	ctx.lr = 0x829C4644;
	sub_82A73AB0(ctx, base);
loc_829C4644:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24944(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24944);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4664
	if (!ctx.cr6.eq) goto loc_829C4664;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a74060
	ctx.lr = 0x829C465C;
	sub_82A74060(ctx, base);
	// stw r3,-24944(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24944, ctx.r3.u32);
	// bl 0x82a74110
	ctx.lr = 0x829C4664;
	sub_82A74110(ctx, base);
loc_829C4664:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24916(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24916);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4684
	if (!ctx.cr6.eq) goto loc_829C4684;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a74f40
	ctx.lr = 0x829C467C;
	sub_82A74F40(ctx, base);
	// stw r3,-24916(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24916, ctx.r3.u32);
	// bl 0x82a74ff0
	ctx.lr = 0x829C4684;
	sub_82A74FF0(ctx, base);
loc_829C4684:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24924(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24924);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c46a4
	if (!ctx.cr6.eq) goto loc_829C46A4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a74b00
	ctx.lr = 0x829C469C;
	sub_82A74B00(ctx, base);
	// stw r3,-24924(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24924, ctx.r3.u32);
	// bl 0x82a74bb0
	ctx.lr = 0x829C46A4;
	sub_82A74BB0(ctx, base);
loc_829C46A4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25336(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25336);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c46c4
	if (!ctx.cr6.eq) goto loc_829C46C4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2e3f8
	ctx.lr = 0x829C46BC;
	sub_82A2E3F8(ctx, base);
	// stw r3,-25336(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25336, ctx.r3.u32);
	// bl 0x82a2e4a8
	ctx.lr = 0x829C46C4;
	sub_82A2E4A8(ctx, base);
loc_829C46C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25368(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25368);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c46e4
	if (!ctx.cr6.eq) goto loc_829C46E4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2a5a8
	ctx.lr = 0x829C46DC;
	sub_82A2A5A8(ctx, base);
	// stw r3,-25368(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25368, ctx.r3.u32);
	// bl 0x82a2a658
	ctx.lr = 0x829C46E4;
	sub_82A2A658(ctx, base);
loc_829C46E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24124(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24124);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4704
	if (!ctx.cr6.eq) goto loc_829C4704;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aeaaa0
	ctx.lr = 0x829C46FC;
	sub_82AEAAA0(ctx, base);
	// stw r3,-24124(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24124, ctx.r3.u32);
	// bl 0x82aeab50
	ctx.lr = 0x829C4704;
	sub_82AEAB50(ctx, base);
loc_829C4704:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-11688
	ctx.r7.s64 = ctx.r10.s64 + -11688;
	// lwz r11,-25260(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25260);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4740
	if (!ctx.cr6.eq) goto loc_829C4740;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a3fbb0
	ctx.lr = 0x829C4738;
	sub_82A3FBB0(ctx, base);
	// stw r3,-25260(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25260, ctx.r3.u32);
	// bl 0x82a3fc60
	ctx.lr = 0x829C4740;
	sub_82A3FC60(ctx, base);
loc_829C4740:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-11568
	ctx.r7.s64 = ctx.r10.s64 + -11568;
	// lwz r11,-25376(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25376);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c477c
	if (!ctx.cr6.eq) goto loc_829C477C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a28a28
	ctx.lr = 0x829C4774;
	sub_82A28A28(ctx, base);
	// stw r3,-25376(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25376, ctx.r3.u32);
	// bl 0x82a28ad8
	ctx.lr = 0x829C477C;
	sub_82A28AD8(ctx, base);
loc_829C477C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23792(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23792);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c479c
	if (!ctx.cr6.eq) goto loc_829C479C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b18fc8
	ctx.lr = 0x829C4794;
	sub_82B18FC8(ctx, base);
	// stw r3,-23792(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23792, ctx.r3.u32);
	// bl 0x82b19078
	ctx.lr = 0x829C479C;
	sub_82B19078(ctx, base);
loc_829C479C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-11448
	ctx.r7.s64 = ctx.r10.s64 + -11448;
	// lwz r11,-23440(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23440);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c47d8
	if (!ctx.cr6.eq) goto loc_829C47D8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b51078
	ctx.lr = 0x829C47D0;
	sub_82B51078(ctx, base);
	// stw r3,-23440(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23440, ctx.r3.u32);
	// bl 0x82b51128
	ctx.lr = 0x829C47D8;
	sub_82B51128(ctx, base);
loc_829C47D8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-11328
	ctx.r7.s64 = ctx.r10.s64 + -11328;
	// lwz r11,-23756(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23756);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4814
	if (!ctx.cr6.eq) goto loc_829C4814;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b22798
	ctx.lr = 0x829C480C;
	sub_82B22798(ctx, base);
	// stw r3,-23756(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23756, ctx.r3.u32);
	// bl 0x82b22848
	ctx.lr = 0x829C4814;
	sub_82B22848(ctx, base);
loc_829C4814:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-11208
	ctx.r7.s64 = ctx.r10.s64 + -11208;
	// lwz r11,-24656(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24656);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4850
	if (!ctx.cr6.eq) goto loc_829C4850;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a97d10
	ctx.lr = 0x829C4848;
	sub_82A97D10(ctx, base);
	// stw r3,-24656(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24656, ctx.r3.u32);
	// bl 0x82a97dc0
	ctx.lr = 0x829C4850;
	sub_82A97DC0(ctx, base);
loc_829C4850:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24664(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24664);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4870
	if (!ctx.cr6.eq) goto loc_829C4870;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a978d0
	ctx.lr = 0x829C4868;
	sub_82A978D0(ctx, base);
	// stw r3,-24664(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24664, ctx.r3.u32);
	// bl 0x82a97980
	ctx.lr = 0x829C4870;
	sub_82A97980(ctx, base);
loc_829C4870:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25596(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25596);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4890
	if (!ctx.cr6.eq) goto loc_829C4890;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e6830
	ctx.lr = 0x829C4888;
	sub_829E6830(ctx, base);
	// stw r3,-25596(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25596, ctx.r3.u32);
	// bl 0x829e68e0
	ctx.lr = 0x829C4890;
	sub_829E68E0(ctx, base);
loc_829C4890:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24376(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24376);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c48b0
	if (!ctx.cr6.eq) goto loc_829C48B0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac9520
	ctx.lr = 0x829C48A8;
	sub_82AC9520(ctx, base);
	// stw r3,-24376(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24376, ctx.r3.u32);
	// bl 0x82ac95d0
	ctx.lr = 0x829C48B0;
	sub_82AC95D0(ctx, base);
loc_829C48B0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24364(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24364);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c48d0
	if (!ctx.cr6.eq) goto loc_829C48D0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac9b80
	ctx.lr = 0x829C48C8;
	sub_82AC9B80(ctx, base);
	// stw r3,-24364(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24364, ctx.r3.u32);
	// bl 0x82ac9c30
	ctx.lr = 0x829C48D0;
	sub_82AC9C30(ctx, base);
loc_829C48D0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23956(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23956);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c48f0
	if (!ctx.cr6.eq) goto loc_829C48F0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b051e8
	ctx.lr = 0x829C48E8;
	sub_82B051E8(ctx, base);
	// stw r3,-23956(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23956, ctx.r3.u32);
	// bl 0x82b05298
	ctx.lr = 0x829C48F0;
	sub_82B05298(ctx, base);
loc_829C48F0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23928(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23928);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4910
	if (!ctx.cr6.eq) goto loc_829C4910;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b060c8
	ctx.lr = 0x829C4908;
	sub_82B060C8(ctx, base);
	// stw r3,-23928(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23928, ctx.r3.u32);
	// bl 0x82b06178
	ctx.lr = 0x829C4910;
	sub_82B06178(ctx, base);
loc_829C4910:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24064(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24064);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4930
	if (!ctx.cr6.eq) goto loc_829C4930;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82af98b0
	ctx.lr = 0x829C4928;
	sub_82AF98B0(ctx, base);
	// stw r3,-24064(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24064, ctx.r3.u32);
	// bl 0x82af9960
	ctx.lr = 0x829C4930;
	sub_82AF9960(ctx, base);
loc_829C4930:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-11088
	ctx.r7.s64 = ctx.r10.s64 + -11088;
	// lwz r11,-24060(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24060);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c496c
	if (!ctx.cr6.eq) goto loc_829C496C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82af9ad0
	ctx.lr = 0x829C4964;
	sub_82AF9AD0(ctx, base);
	// stw r3,-24060(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24060, ctx.r3.u32);
	// bl 0x82af9b80
	ctx.lr = 0x829C496C;
	sub_82AF9B80(ctx, base);
loc_829C496C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-10968
	ctx.r7.s64 = ctx.r10.s64 + -10968;
	// lwz r11,-25512(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25512);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c49a8
	if (!ctx.cr6.eq) goto loc_829C49A8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a04770
	ctx.lr = 0x829C49A0;
	sub_82A04770(ctx, base);
	// stw r3,-25512(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25512, ctx.r3.u32);
	// bl 0x82a04820
	ctx.lr = 0x829C49A8;
	sub_82A04820(ctx, base);
loc_829C49A8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-10848
	ctx.r7.s64 = ctx.r10.s64 + -10848;
	// lwz r11,-23432(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23432);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c49e4
	if (!ctx.cr6.eq) goto loc_829C49E4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b549a8
	ctx.lr = 0x829C49DC;
	sub_82B549A8(ctx, base);
	// stw r3,-23432(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23432, ctx.r3.u32);
	// bl 0x82b54a58
	ctx.lr = 0x829C49E4;
	sub_82B54A58(ctx, base);
loc_829C49E4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-10728
	ctx.r7.s64 = ctx.r10.s64 + -10728;
	// lwz r11,-25508(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25508);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4a20
	if (!ctx.cr6.eq) goto loc_829C4A20;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a04990
	ctx.lr = 0x829C4A18;
	sub_82A04990(ctx, base);
	// stw r3,-25508(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25508, ctx.r3.u32);
	// bl 0x82a04a40
	ctx.lr = 0x829C4A20;
	sub_82A04A40(ctx, base);
loc_829C4A20:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23660(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23660);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4a40
	if (!ctx.cr6.eq) goto loc_829C4A40;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b2fef8
	ctx.lr = 0x829C4A38;
	sub_82B2FEF8(ctx, base);
	// stw r3,-23660(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23660, ctx.r3.u32);
	// bl 0x82b2ffa8
	ctx.lr = 0x829C4A40;
	sub_82B2FFA8(ctx, base);
loc_829C4A40:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23572(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23572);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4a60
	if (!ctx.cr6.eq) goto loc_829C4A60;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b3bf18
	ctx.lr = 0x829C4A58;
	sub_82B3BF18(ctx, base);
	// stw r3,-23572(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23572, ctx.r3.u32);
	// bl 0x82b3bfc8
	ctx.lr = 0x829C4A60;
	sub_82B3BFC8(ctx, base);
loc_829C4A60:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24668(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24668);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4a80
	if (!ctx.cr6.eq) goto loc_829C4A80;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a976b0
	ctx.lr = 0x829C4A78;
	sub_82A976B0(ctx, base);
	// stw r3,-24668(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24668, ctx.r3.u32);
	// bl 0x82a97760
	ctx.lr = 0x829C4A80;
	sub_82A97760(ctx, base);
loc_829C4A80:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-10608
	ctx.r7.s64 = ctx.r10.s64 + -10608;
	// lwz r11,-25624(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25624);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4abc
	if (!ctx.cr6.eq) goto loc_829C4ABC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e5950
	ctx.lr = 0x829C4AB4;
	sub_829E5950(ctx, base);
	// stw r3,-25624(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25624, ctx.r3.u32);
	// bl 0x829e5a00
	ctx.lr = 0x829C4ABC;
	sub_829E5A00(ctx, base);
loc_829C4ABC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-10472
	ctx.r7.s64 = ctx.r10.s64 + -10472;
	// lwz r11,-24052(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24052);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4af8
	if (!ctx.cr6.eq) goto loc_829C4AF8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82afbc30
	ctx.lr = 0x829C4AF0;
	sub_82AFBC30(ctx, base);
	// stw r3,-24052(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24052, ctx.r3.u32);
	// bl 0x82afbce0
	ctx.lr = 0x829C4AF8;
	sub_82AFBCE0(ctx, base);
loc_829C4AF8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-10352
	ctx.r7.s64 = ctx.r10.s64 + -10352;
	// lwz r11,-24056(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24056);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4b34
	if (!ctx.cr6.eq) goto loc_829C4B34;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82afba10
	ctx.lr = 0x829C4B2C;
	sub_82AFBA10(ctx, base);
	// stw r3,-24056(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24056, ctx.r3.u32);
	// bl 0x82afbac0
	ctx.lr = 0x829C4B34;
	sub_82AFBAC0(ctx, base);
loc_829C4B34:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23388(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23388);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4b54
	if (!ctx.cr6.eq) goto loc_829C4B54;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b602e8
	ctx.lr = 0x829C4B4C;
	sub_82B602E8(ctx, base);
	// stw r3,-23388(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23388, ctx.r3.u32);
	// bl 0x82b60398
	ctx.lr = 0x829C4B54;
	sub_82B60398(ctx, base);
loc_829C4B54:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24176(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24176);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4b74
	if (!ctx.cr6.eq) goto loc_829C4B74;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae64e8
	ctx.lr = 0x829C4B6C;
	sub_82AE64E8(ctx, base);
	// stw r3,-24176(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24176, ctx.r3.u32);
	// bl 0x82ae6598
	ctx.lr = 0x829C4B74;
	sub_82AE6598(ctx, base);
loc_829C4B74:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25180(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25180);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4b94
	if (!ctx.cr6.eq) goto loc_829C4B94;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4e6d0
	ctx.lr = 0x829C4B8C;
	sub_82A4E6D0(ctx, base);
	// stw r3,-25180(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25180, ctx.r3.u32);
	// bl 0x82a4e780
	ctx.lr = 0x829C4B94;
	sub_82A4E780(ctx, base);
loc_829C4B94:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-10232
	ctx.r7.s64 = ctx.r10.s64 + -10232;
	// lwz r11,-23804(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23804);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4bd0
	if (!ctx.cr6.eq) goto loc_829C4BD0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b17f78
	ctx.lr = 0x829C4BC8;
	sub_82B17F78(ctx, base);
	// stw r3,-23804(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23804, ctx.r3.u32);
	// bl 0x82b18028
	ctx.lr = 0x829C4BD0;
	sub_82B18028(ctx, base);
loc_829C4BD0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23800(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23800);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4bf0
	if (!ctx.cr6.eq) goto loc_829C4BF0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b18198
	ctx.lr = 0x829C4BE8;
	sub_82B18198(ctx, base);
	// stw r3,-23800(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23800, ctx.r3.u32);
	// bl 0x82b18248
	ctx.lr = 0x829C4BF0;
	sub_82B18248(ctx, base);
loc_829C4BF0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-10112
	ctx.r7.s64 = ctx.r10.s64 + -10112;
	// lwz r11,-24228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24228);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4c2c
	if (!ctx.cr6.eq) goto loc_829C4C2C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82adecd0
	ctx.lr = 0x829C4C24;
	sub_82ADECD0(ctx, base);
	// stw r3,-24228(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24228, ctx.r3.u32);
	// bl 0x82aded80
	ctx.lr = 0x829C4C2C;
	sub_82ADED80(ctx, base);
loc_829C4C2C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24240(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24240);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4c4c
	if (!ctx.cr6.eq) goto loc_829C4C4C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ade670
	ctx.lr = 0x829C4C44;
	sub_82ADE670(ctx, base);
	// stw r3,-24240(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24240, ctx.r3.u32);
	// bl 0x82ade720
	ctx.lr = 0x829C4C4C;
	sub_82ADE720(ctx, base);
loc_829C4C4C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24236(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24236);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4c6c
	if (!ctx.cr6.eq) goto loc_829C4C6C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ade890
	ctx.lr = 0x829C4C64;
	sub_82ADE890(ctx, base);
	// stw r3,-24236(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24236, ctx.r3.u32);
	// bl 0x82ade940
	ctx.lr = 0x829C4C6C;
	sub_82ADE940(ctx, base);
loc_829C4C6C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-9992
	ctx.r7.s64 = ctx.r10.s64 + -9992;
	// lwz r11,-25488(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25488);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4ca8
	if (!ctx.cr6.eq) goto loc_829C4CA8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a0eae0
	ctx.lr = 0x829C4CA0;
	sub_82A0EAE0(ctx, base);
	// stw r3,-25488(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25488, ctx.r3.u32);
	// bl 0x82a0eb90
	ctx.lr = 0x829C4CA8;
	sub_82A0EB90(ctx, base);
loc_829C4CA8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-9872
	ctx.r7.s64 = ctx.r10.s64 + -9872;
	// lwz r11,-23796(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23796);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4ce4
	if (!ctx.cr6.eq) goto loc_829C4CE4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b18da8
	ctx.lr = 0x829C4CDC;
	sub_82B18DA8(ctx, base);
	// stw r3,-23796(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23796, ctx.r3.u32);
	// bl 0x82b18e58
	ctx.lr = 0x829C4CE4;
	sub_82B18E58(ctx, base);
loc_829C4CE4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25800(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25800);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4d04
	if (!ctx.cr6.eq) goto loc_829C4D04;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d0248
	ctx.lr = 0x829C4CFC;
	sub_829D0248(ctx, base);
	// stw r3,-25800(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25800, ctx.r3.u32);
	// bl 0x829d02f8
	ctx.lr = 0x829C4D04;
	sub_829D02F8(ctx, base);
loc_829C4D04:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-9736
	ctx.r7.s64 = ctx.r10.s64 + -9736;
	// lwz r11,-23400(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23400);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4d40
	if (!ctx.cr6.eq) goto loc_829C4D40;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b5cc78
	ctx.lr = 0x829C4D38;
	sub_82B5CC78(ctx, base);
	// stw r3,-23400(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23400, ctx.r3.u32);
	// bl 0x82b5cd28
	ctx.lr = 0x829C4D40;
	sub_82B5CD28(ctx, base);
loc_829C4D40:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-9616
	ctx.r7.s64 = ctx.r10.s64 + -9616;
	// lwz r11,-25732(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25732);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4d7c
	if (!ctx.cr6.eq) goto loc_829C4D7C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d2680
	ctx.lr = 0x829C4D74;
	sub_829D2680(ctx, base);
	// stw r3,-25732(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25732, ctx.r3.u32);
	// bl 0x829d2730
	ctx.lr = 0x829C4D7C;
	sub_829D2730(ctx, base);
loc_829C4D7C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24912(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24912);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4d9c
	if (!ctx.cr6.eq) goto loc_829C4D9C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7b8c8
	ctx.lr = 0x829C4D94;
	sub_82A7B8C8(ctx, base);
	// stw r3,-24912(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24912, ctx.r3.u32);
	// bl 0x82a7b978
	ctx.lr = 0x829C4D9C;
	sub_82A7B978(ctx, base);
loc_829C4D9C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23392(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23392);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4dbc
	if (!ctx.cr6.eq) goto loc_829C4DBC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b5e1c0
	ctx.lr = 0x829C4DB4;
	sub_82B5E1C0(ctx, base);
	// stw r3,-23392(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23392, ctx.r3.u32);
	// bl 0x82b5e270
	ctx.lr = 0x829C4DBC;
	sub_82B5E270(ctx, base);
loc_829C4DBC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-9496
	ctx.r7.s64 = ctx.r10.s64 + -9496;
	// lwz r11,-25764(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25764);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4df8
	if (!ctx.cr6.eq) goto loc_829C4DF8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d1568
	ctx.lr = 0x829C4DF0;
	sub_829D1568(ctx, base);
	// stw r3,-25764(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25764, ctx.r3.u32);
	// bl 0x829d1618
	ctx.lr = 0x829C4DF8;
	sub_829D1618(ctx, base);
loc_829C4DF8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25548(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25548);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4e18
	if (!ctx.cr6.eq) goto loc_829C4E18;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829fcbb8
	ctx.lr = 0x829C4E10;
	sub_829FCBB8(ctx, base);
	// stw r3,-25548(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25548, ctx.r3.u32);
	// bl 0x829fcc68
	ctx.lr = 0x829C4E18;
	sub_829FCC68(ctx, base);
loc_829C4E18:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-9376
	ctx.r7.s64 = ctx.r10.s64 + -9376;
	// lwz r11,-23576(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23576);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4e54
	if (!ctx.cr6.eq) goto loc_829C4E54;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b3bb40
	ctx.lr = 0x829C4E4C;
	sub_82B3BB40(ctx, base);
	// stw r3,-23576(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23576, ctx.r3.u32);
	// bl 0x82b3bbf0
	ctx.lr = 0x829C4E54;
	sub_82B3BBF0(ctx, base);
loc_829C4E54:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24908(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24908);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4e74
	if (!ctx.cr6.eq) goto loc_829C4E74;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7bae8
	ctx.lr = 0x829C4E6C;
	sub_82A7BAE8(ctx, base);
	// stw r3,-24908(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24908, ctx.r3.u32);
	// bl 0x82a7bb98
	ctx.lr = 0x829C4E74;
	sub_82A7BB98(ctx, base);
loc_829C4E74:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24904(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24904);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4e94
	if (!ctx.cr6.eq) goto loc_829C4E94;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7bd08
	ctx.lr = 0x829C4E8C;
	sub_82A7BD08(ctx, base);
	// stw r3,-24904(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24904, ctx.r3.u32);
	// bl 0x82a7bdb8
	ctx.lr = 0x829C4E94;
	sub_82A7BDB8(ctx, base);
loc_829C4E94:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24900(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24900);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4eb4
	if (!ctx.cr6.eq) goto loc_829C4EB4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7bf28
	ctx.lr = 0x829C4EAC;
	sub_82A7BF28(ctx, base);
	// stw r3,-24900(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24900, ctx.r3.u32);
	// bl 0x82a7bfd8
	ctx.lr = 0x829C4EB4;
	sub_82A7BFD8(ctx, base);
loc_829C4EB4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24860(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24860);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4ed4
	if (!ctx.cr6.eq) goto loc_829C4ED4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7d468
	ctx.lr = 0x829C4ECC;
	sub_82A7D468(ctx, base);
	// stw r3,-24860(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24860, ctx.r3.u32);
	// bl 0x82a7d518
	ctx.lr = 0x829C4ED4;
	sub_82A7D518(ctx, base);
loc_829C4ED4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24896(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24896);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4ef4
	if (!ctx.cr6.eq) goto loc_829C4EF4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7c148
	ctx.lr = 0x829C4EEC;
	sub_82A7C148(ctx, base);
	// stw r3,-24896(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24896, ctx.r3.u32);
	// bl 0x82a7c1f8
	ctx.lr = 0x829C4EF4;
	sub_82A7C1F8(ctx, base);
loc_829C4EF4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24892(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24892);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4f14
	if (!ctx.cr6.eq) goto loc_829C4F14;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7c368
	ctx.lr = 0x829C4F0C;
	sub_82A7C368(ctx, base);
	// stw r3,-24892(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24892, ctx.r3.u32);
	// bl 0x82a7c418
	ctx.lr = 0x829C4F14;
	sub_82A7C418(ctx, base);
loc_829C4F14:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24856(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24856);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4f34
	if (!ctx.cr6.eq) goto loc_829C4F34;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7d688
	ctx.lr = 0x829C4F2C;
	sub_82A7D688(ctx, base);
	// stw r3,-24856(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24856, ctx.r3.u32);
	// bl 0x82a7d738
	ctx.lr = 0x829C4F34;
	sub_82A7D738(ctx, base);
loc_829C4F34:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24888(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24888);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4f54
	if (!ctx.cr6.eq) goto loc_829C4F54;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7c588
	ctx.lr = 0x829C4F4C;
	sub_82A7C588(ctx, base);
	// stw r3,-24888(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24888, ctx.r3.u32);
	// bl 0x82a7c638
	ctx.lr = 0x829C4F54;
	sub_82A7C638(ctx, base);
loc_829C4F54:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24864(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24864);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4f74
	if (!ctx.cr6.eq) goto loc_829C4F74;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7d248
	ctx.lr = 0x829C4F6C;
	sub_82A7D248(ctx, base);
	// stw r3,-24864(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24864, ctx.r3.u32);
	// bl 0x82a7d2f8
	ctx.lr = 0x829C4F74;
	sub_82A7D2F8(ctx, base);
loc_829C4F74:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24868(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24868);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4f94
	if (!ctx.cr6.eq) goto loc_829C4F94;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7d028
	ctx.lr = 0x829C4F8C;
	sub_82A7D028(ctx, base);
	// stw r3,-24868(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24868, ctx.r3.u32);
	// bl 0x82a7d0d8
	ctx.lr = 0x829C4F94;
	sub_82A7D0D8(ctx, base);
loc_829C4F94:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24872(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24872);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c4fb4
	if (!ctx.cr6.eq) goto loc_829C4FB4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7ce08
	ctx.lr = 0x829C4FAC;
	sub_82A7CE08(ctx, base);
	// stw r3,-24872(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24872, ctx.r3.u32);
	// bl 0x82a7ceb8
	ctx.lr = 0x829C4FB4;
	sub_82A7CEB8(ctx, base);
loc_829C4FB4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-9256
	ctx.r7.s64 = ctx.r10.s64 + -9256;
	// lwz r11,-24852(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24852);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c4ff0
	if (!ctx.cr6.eq) goto loc_829C4FF0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7d8a8
	ctx.lr = 0x829C4FE8;
	sub_82A7D8A8(ctx, base);
	// stw r3,-24852(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24852, ctx.r3.u32);
	// bl 0x82a7d958
	ctx.lr = 0x829C4FF0;
	sub_82A7D958(ctx, base);
loc_829C4FF0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24876(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24876);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5010
	if (!ctx.cr6.eq) goto loc_829C5010;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7cbe8
	ctx.lr = 0x829C5008;
	sub_82A7CBE8(ctx, base);
	// stw r3,-24876(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24876, ctx.r3.u32);
	// bl 0x82a7cc98
	ctx.lr = 0x829C5010;
	sub_82A7CC98(ctx, base);
loc_829C5010:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24844(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24844);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5030
	if (!ctx.cr6.eq) goto loc_829C5030;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7dce8
	ctx.lr = 0x829C5028;
	sub_82A7DCE8(ctx, base);
	// stw r3,-24844(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24844, ctx.r3.u32);
	// bl 0x82a7dd98
	ctx.lr = 0x829C5030;
	sub_82A7DD98(ctx, base);
loc_829C5030:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24848(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24848);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5050
	if (!ctx.cr6.eq) goto loc_829C5050;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7dac8
	ctx.lr = 0x829C5048;
	sub_82A7DAC8(ctx, base);
	// stw r3,-24848(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24848, ctx.r3.u32);
	// bl 0x82a7db78
	ctx.lr = 0x829C5050;
	sub_82A7DB78(ctx, base);
loc_829C5050:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24884(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24884);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5070
	if (!ctx.cr6.eq) goto loc_829C5070;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7c7a8
	ctx.lr = 0x829C5068;
	sub_82A7C7A8(ctx, base);
	// stw r3,-24884(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24884, ctx.r3.u32);
	// bl 0x82a7c858
	ctx.lr = 0x829C5070;
	sub_82A7C858(ctx, base);
loc_829C5070:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24880(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24880);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5090
	if (!ctx.cr6.eq) goto loc_829C5090;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7c9c8
	ctx.lr = 0x829C5088;
	sub_82A7C9C8(ctx, base);
	// stw r3,-24880(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24880, ctx.r3.u32);
	// bl 0x82a7ca78
	ctx.lr = 0x829C5090;
	sub_82A7CA78(ctx, base);
loc_829C5090:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25580(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25580);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c50b0
	if (!ctx.cr6.eq) goto loc_829C50B0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e70b0
	ctx.lr = 0x829C50A8;
	sub_829E70B0(ctx, base);
	// stw r3,-25580(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25580, ctx.r3.u32);
	// bl 0x829e7160
	ctx.lr = 0x829C50B0;
	sub_829E7160(ctx, base);
loc_829C50B0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25592(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25592);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c50d0
	if (!ctx.cr6.eq) goto loc_829C50D0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e6a50
	ctx.lr = 0x829C50C8;
	sub_829E6A50(ctx, base);
	// stw r3,-25592(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25592, ctx.r3.u32);
	// bl 0x829e6b00
	ctx.lr = 0x829C50D0;
	sub_829E6B00(ctx, base);
loc_829C50D0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-9136
	ctx.r7.s64 = ctx.r10.s64 + -9136;
	// lwz r11,-24640(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24640);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c510c
	if (!ctx.cr6.eq) goto loc_829C510C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9d358
	ctx.lr = 0x829C5104;
	sub_82A9D358(ctx, base);
	// stw r3,-24640(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24640, ctx.r3.u32);
	// bl 0x82a9d408
	ctx.lr = 0x829C510C;
	sub_82A9D408(ctx, base);
loc_829C510C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-9016
	ctx.r7.s64 = ctx.r10.s64 + -9016;
	// lwz r11,-25772(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25772);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5148
	if (!ctx.cr6.eq) goto loc_829C5148;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d1128
	ctx.lr = 0x829C5140;
	sub_829D1128(ctx, base);
	// stw r3,-25772(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25772, ctx.r3.u32);
	// bl 0x829d11d8
	ctx.lr = 0x829C5148;
	sub_829D11D8(ctx, base);
loc_829C5148:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25780(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25780);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5168
	if (!ctx.cr6.eq) goto loc_829C5168;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d0ce8
	ctx.lr = 0x829C5160;
	sub_829D0CE8(ctx, base);
	// stw r3,-25780(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25780, ctx.r3.u32);
	// bl 0x829d0d98
	ctx.lr = 0x829C5168;
	sub_829D0D98(ctx, base);
loc_829C5168:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25776(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25776);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5188
	if (!ctx.cr6.eq) goto loc_829C5188;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d0f08
	ctx.lr = 0x829C5180;
	sub_829D0F08(ctx, base);
	// stw r3,-25776(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25776, ctx.r3.u32);
	// bl 0x829d0fb8
	ctx.lr = 0x829C5188;
	sub_829D0FB8(ctx, base);
loc_829C5188:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-8896
	ctx.r7.s64 = ctx.r10.s64 + -8896;
	// lwz r11,-24624(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24624);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c51c4
	if (!ctx.cr6.eq) goto loc_829C51C4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9e550
	ctx.lr = 0x829C51BC;
	sub_82A9E550(ctx, base);
	// stw r3,-24624(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24624, ctx.r3.u32);
	// bl 0x82a9e600
	ctx.lr = 0x829C51C4;
	sub_82A9E600(ctx, base);
loc_829C51C4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-8776
	ctx.r7.s64 = ctx.r10.s64 + -8776;
	// lwz r11,-23932(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23932);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5200
	if (!ctx.cr6.eq) goto loc_829C5200;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b05ea8
	ctx.lr = 0x829C51F8;
	sub_82B05EA8(ctx, base);
	// stw r3,-23932(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23932, ctx.r3.u32);
	// bl 0x82b05f58
	ctx.lr = 0x829C5200;
	sub_82B05F58(ctx, base);
loc_829C5200:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-8656
	ctx.r7.s64 = ctx.r10.s64 + -8656;
	// lwz r11,-24592(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24592);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c523c
	if (!ctx.cr6.eq) goto loc_829C523C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9f648
	ctx.lr = 0x829C5234;
	sub_82A9F648(ctx, base);
	// stw r3,-24592(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24592, ctx.r3.u32);
	// bl 0x82a9f6f8
	ctx.lr = 0x829C523C;
	sub_82A9F6F8(ctx, base);
loc_829C523C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24584(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24584);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c525c
	if (!ctx.cr6.eq) goto loc_829C525C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9fa88
	ctx.lr = 0x829C5254;
	sub_82A9FA88(ctx, base);
	// stw r3,-24584(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24584, ctx.r3.u32);
	// bl 0x82a9fb38
	ctx.lr = 0x829C525C;
	sub_82A9FB38(ctx, base);
loc_829C525C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-8536
	ctx.r7.s64 = ctx.r10.s64 + -8536;
	// lwz r11,-24600(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24600);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5298
	if (!ctx.cr6.eq) goto loc_829C5298;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9f208
	ctx.lr = 0x829C5290;
	sub_82A9F208(ctx, base);
	// stw r3,-24600(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24600, ctx.r3.u32);
	// bl 0x82a9f2b8
	ctx.lr = 0x829C5298;
	sub_82A9F2B8(ctx, base);
loc_829C5298:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-8416
	ctx.r7.s64 = ctx.r10.s64 + -8416;
	// lwz r11,-24612(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24612);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c52d4
	if (!ctx.cr6.eq) goto loc_829C52D4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9eba8
	ctx.lr = 0x829C52CC;
	sub_82A9EBA8(ctx, base);
	// stw r3,-24612(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24612, ctx.r3.u32);
	// bl 0x82a9ec58
	ctx.lr = 0x829C52D4;
	sub_82A9EC58(ctx, base);
loc_829C52D4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-8296
	ctx.r7.s64 = ctx.r10.s64 + -8296;
	// lwz r11,-24560(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24560);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5310
	if (!ctx.cr6.eq) goto loc_829C5310;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aa0748
	ctx.lr = 0x829C5308;
	sub_82AA0748(ctx, base);
	// stw r3,-24560(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24560, ctx.r3.u32);
	// bl 0x82aa07f8
	ctx.lr = 0x829C5310;
	sub_82AA07F8(ctx, base);
loc_829C5310:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-8176
	ctx.r7.s64 = ctx.r10.s64 + -8176;
	// lwz r11,-24576(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24576);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c534c
	if (!ctx.cr6.eq) goto loc_829C534C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9fec8
	ctx.lr = 0x829C5344;
	sub_82A9FEC8(ctx, base);
	// stw r3,-24576(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24576, ctx.r3.u32);
	// bl 0x82a9ff78
	ctx.lr = 0x829C534C;
	sub_82A9FF78(ctx, base);
loc_829C534C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-8056
	ctx.r7.s64 = ctx.r10.s64 + -8056;
	// lwz r11,-24564(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24564);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5388
	if (!ctx.cr6.eq) goto loc_829C5388;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aa0528
	ctx.lr = 0x829C5380;
	sub_82AA0528(ctx, base);
	// stw r3,-24564(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24564, ctx.r3.u32);
	// bl 0x82aa05d8
	ctx.lr = 0x829C5388;
	sub_82AA05D8(ctx, base);
loc_829C5388:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-7936
	ctx.r7.s64 = ctx.r10.s64 + -7936;
	// lwz r11,-24368(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24368);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c53c4
	if (!ctx.cr6.eq) goto loc_829C53C4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac9960
	ctx.lr = 0x829C53BC;
	sub_82AC9960(ctx, base);
	// stw r3,-24368(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24368, ctx.r3.u32);
	// bl 0x82ac9a10
	ctx.lr = 0x829C53C4;
	sub_82AC9A10(ctx, base);
loc_829C53C4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-7816
	ctx.r7.s64 = ctx.r10.s64 + -7816;
	// lwz r11,-24596(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24596);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5400
	if (!ctx.cr6.eq) goto loc_829C5400;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9f428
	ctx.lr = 0x829C53F8;
	sub_82A9F428(ctx, base);
	// stw r3,-24596(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24596, ctx.r3.u32);
	// bl 0x82a9f4d8
	ctx.lr = 0x829C5400;
	sub_82A9F4D8(ctx, base);
loc_829C5400:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-7696
	ctx.r7.s64 = ctx.r10.s64 + -7696;
	// lwz r11,-24620(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24620);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c543c
	if (!ctx.cr6.eq) goto loc_829C543C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9e768
	ctx.lr = 0x829C5434;
	sub_82A9E768(ctx, base);
	// stw r3,-24620(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24620, ctx.r3.u32);
	// bl 0x82a9e818
	ctx.lr = 0x829C543C;
	sub_82A9E818(ctx, base);
loc_829C543C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-7576
	ctx.r7.s64 = ctx.r10.s64 + -7576;
	// lwz r11,-24604(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24604);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5478
	if (!ctx.cr6.eq) goto loc_829C5478;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9efe8
	ctx.lr = 0x829C5470;
	sub_82A9EFE8(ctx, base);
	// stw r3,-24604(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24604, ctx.r3.u32);
	// bl 0x82a9f098
	ctx.lr = 0x829C5478;
	sub_82A9F098(ctx, base);
loc_829C5478:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-7456
	ctx.r7.s64 = ctx.r10.s64 + -7456;
	// lwz r11,-24616(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24616);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c54b4
	if (!ctx.cr6.eq) goto loc_829C54B4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9e988
	ctx.lr = 0x829C54AC;
	sub_82A9E988(ctx, base);
	// stw r3,-24616(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24616, ctx.r3.u32);
	// bl 0x82a9ea38
	ctx.lr = 0x829C54B4;
	sub_82A9EA38(ctx, base);
loc_829C54B4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-7336
	ctx.r7.s64 = ctx.r10.s64 + -7336;
	// lwz r11,-23936(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23936);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c54f0
	if (!ctx.cr6.eq) goto loc_829C54F0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b05c88
	ctx.lr = 0x829C54E8;
	sub_82B05C88(ctx, base);
	// stw r3,-23936(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23936, ctx.r3.u32);
	// bl 0x82b05d38
	ctx.lr = 0x829C54F0;
	sub_82B05D38(ctx, base);
loc_829C54F0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-7216
	ctx.r7.s64 = ctx.r10.s64 + -7216;
	// lwz r11,-24572(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24572);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c552c
	if (!ctx.cr6.eq) goto loc_829C552C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aa00e8
	ctx.lr = 0x829C5524;
	sub_82AA00E8(ctx, base);
	// stw r3,-24572(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24572, ctx.r3.u32);
	// bl 0x82aa0198
	ctx.lr = 0x829C552C;
	sub_82AA0198(ctx, base);
loc_829C552C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-7096
	ctx.r7.s64 = ctx.r10.s64 + -7096;
	// lwz r11,-24588(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24588);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5568
	if (!ctx.cr6.eq) goto loc_829C5568;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9f868
	ctx.lr = 0x829C5560;
	sub_82A9F868(ctx, base);
	// stw r3,-24588(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24588, ctx.r3.u32);
	// bl 0x82a9f918
	ctx.lr = 0x829C5568;
	sub_82A9F918(ctx, base);
loc_829C5568:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-6976
	ctx.r7.s64 = ctx.r10.s64 + -6976;
	// lwz r11,-24580(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24580);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c55a4
	if (!ctx.cr6.eq) goto loc_829C55A4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9fca8
	ctx.lr = 0x829C559C;
	sub_82A9FCA8(ctx, base);
	// stw r3,-24580(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24580, ctx.r3.u32);
	// bl 0x82a9fd58
	ctx.lr = 0x829C55A4;
	sub_82A9FD58(ctx, base);
loc_829C55A4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-6856
	ctx.r7.s64 = ctx.r10.s64 + -6856;
	// lwz r11,-24608(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24608);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c55e0
	if (!ctx.cr6.eq) goto loc_829C55E0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9edc8
	ctx.lr = 0x829C55D8;
	sub_82A9EDC8(ctx, base);
	// stw r3,-24608(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24608, ctx.r3.u32);
	// bl 0x82a9ee78
	ctx.lr = 0x829C55E0;
	sub_82A9EE78(ctx, base);
loc_829C55E0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-6736
	ctx.r7.s64 = ctx.r10.s64 + -6736;
	// lwz r11,-24568(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24568);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c561c
	if (!ctx.cr6.eq) goto loc_829C561C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aa0308
	ctx.lr = 0x829C5614;
	sub_82AA0308(ctx, base);
	// stw r3,-24568(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24568, ctx.r3.u32);
	// bl 0x82aa03b8
	ctx.lr = 0x829C561C;
	sub_82AA03B8(ctx, base);
loc_829C561C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-6616
	ctx.r7.s64 = ctx.r10.s64 + -6616;
	// lwz r11,-25352(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25352);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5658
	if (!ctx.cr6.eq) goto loc_829C5658;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2db78
	ctx.lr = 0x829C5650;
	sub_82A2DB78(ctx, base);
	// stw r3,-25352(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25352, ctx.r3.u32);
	// bl 0x82a2dc28
	ctx.lr = 0x829C5658;
	sub_82A2DC28(ctx, base);
loc_829C5658:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-6496
	ctx.r7.s64 = ctx.r10.s64 + -6496;
	// lwz r11,-24628(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24628);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5694
	if (!ctx.cr6.eq) goto loc_829C5694;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9e330
	ctx.lr = 0x829C568C;
	sub_82A9E330(ctx, base);
	// stw r3,-24628(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24628, ctx.r3.u32);
	// bl 0x82a9e3e0
	ctx.lr = 0x829C5694;
	sub_82A9E3E0(ctx, base);
loc_829C5694:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-6376
	ctx.r7.s64 = ctx.r10.s64 + -6376;
	// lwz r11,-24252(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24252);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c56d0
	if (!ctx.cr6.eq) goto loc_829C56D0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad8328
	ctx.lr = 0x829C56C8;
	sub_82AD8328(ctx, base);
	// stw r3,-24252(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24252, ctx.r3.u32);
	// bl 0x82ad83d8
	ctx.lr = 0x829C56D0;
	sub_82AD83D8(ctx, base);
loc_829C56D0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-6256
	ctx.r7.s64 = ctx.r10.s64 + -6256;
	// lwz r11,-25076(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25076);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c570c
	if (!ctx.cr6.eq) goto loc_829C570C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a67768
	ctx.lr = 0x829C5704;
	sub_82A67768(ctx, base);
	// stw r3,-25076(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25076, ctx.r3.u32);
	// bl 0x82a67818
	ctx.lr = 0x829C570C;
	sub_82A67818(ctx, base);
loc_829C570C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-6136
	ctx.r7.s64 = ctx.r10.s64 + -6136;
	// lwz r11,-25188(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25188);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5748
	if (!ctx.cr6.eq) goto loc_829C5748;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4d2c0
	ctx.lr = 0x829C5740;
	sub_82A4D2C0(ctx, base);
	// stw r3,-25188(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25188, ctx.r3.u32);
	// bl 0x82a4d370
	ctx.lr = 0x829C5748;
	sub_82A4D370(ctx, base);
loc_829C5748:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25184(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25184);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5768
	if (!ctx.cr6.eq) goto loc_829C5768;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4d4e0
	ctx.lr = 0x829C5760;
	sub_82A4D4E0(ctx, base);
	// stw r3,-25184(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25184, ctx.r3.u32);
	// bl 0x82a4d590
	ctx.lr = 0x829C5768;
	sub_82A4D590(ctx, base);
loc_829C5768:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-6016
	ctx.r7.s64 = ctx.r10.s64 + -6016;
	// lwz r11,-25360(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25360);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c57a4
	if (!ctx.cr6.eq) goto loc_829C57A4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2a9e8
	ctx.lr = 0x829C579C;
	sub_82A2A9E8(ctx, base);
	// stw r3,-25360(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25360, ctx.r3.u32);
	// bl 0x82a2aa98
	ctx.lr = 0x829C57A4;
	sub_82A2AA98(ctx, base);
loc_829C57A4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-5896
	ctx.r7.s64 = ctx.r10.s64 + -5896;
	// lwz r11,-25364(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25364);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c57e0
	if (!ctx.cr6.eq) goto loc_829C57E0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2a7c8
	ctx.lr = 0x829C57D8;
	sub_82A2A7C8(ctx, base);
	// stw r3,-25364(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25364, ctx.r3.u32);
	// bl 0x82a2a878
	ctx.lr = 0x829C57E0;
	sub_82A2A878(ctx, base);
loc_829C57E0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25192(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25192);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5800
	if (!ctx.cr6.eq) goto loc_829C5800;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4d0a0
	ctx.lr = 0x829C57F8;
	sub_82A4D0A0(ctx, base);
	// stw r3,-25192(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25192, ctx.r3.u32);
	// bl 0x82a4d150
	ctx.lr = 0x829C5800;
	sub_82A4D150(ctx, base);
loc_829C5800:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-5776
	ctx.r7.s64 = ctx.r10.s64 + -5776;
	// lwz r11,-24384(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24384);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c583c
	if (!ctx.cr6.eq) goto loc_829C583C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac7f30
	ctx.lr = 0x829C5834;
	sub_82AC7F30(ctx, base);
	// stw r3,-24384(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24384, ctx.r3.u32);
	// bl 0x82ac7fe0
	ctx.lr = 0x829C583C;
	sub_82AC7FE0(ctx, base);
loc_829C583C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25804(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25804);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c585c
	if (!ctx.cr6.eq) goto loc_829C585C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d0028
	ctx.lr = 0x829C5854;
	sub_829D0028(ctx, base);
	// stw r3,-25804(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25804, ctx.r3.u32);
	// bl 0x829d00d8
	ctx.lr = 0x829C585C;
	sub_829D00D8(ctx, base);
loc_829C585C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25404(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25404);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c587c
	if (!ctx.cr6.eq) goto loc_829C587C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a18628
	ctx.lr = 0x829C5874;
	sub_82A18628(ctx, base);
	// stw r3,-25404(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25404, ctx.r3.u32);
	// bl 0x82a186d8
	ctx.lr = 0x829C587C;
	sub_82A186D8(ctx, base);
loc_829C587C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-5656
	ctx.r7.s64 = ctx.r10.s64 + -5656;
	// lwz r11,-25808(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25808);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c58b8
	if (!ctx.cr6.eq) goto loc_829C58B8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829cfe08
	ctx.lr = 0x829C58B0;
	sub_829CFE08(ctx, base);
	// stw r3,-25808(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25808, ctx.r3.u32);
	// bl 0x829cfeb8
	ctx.lr = 0x829C58B8;
	sub_829CFEB8(ctx, base);
loc_829C58B8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-5536
	ctx.r7.s64 = ctx.r10.s64 + -5536;
	// lwz r11,-24440(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24440);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c58f4
	if (!ctx.cr6.eq) goto loc_829C58F4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82abe818
	ctx.lr = 0x829C58EC;
	sub_82ABE818(ctx, base);
	// stw r3,-24440(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24440, ctx.r3.u32);
	// bl 0x82abe8c8
	ctx.lr = 0x829C58F4;
	sub_82ABE8C8(ctx, base);
loc_829C58F4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-5416
	ctx.r7.s64 = ctx.r10.s64 + -5416;
	// lwz r11,-24676(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24676);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5930
	if (!ctx.cr6.eq) goto loc_829C5930;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a97258
	ctx.lr = 0x829C5928;
	sub_82A97258(ctx, base);
	// stw r3,-24676(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24676, ctx.r3.u32);
	// bl 0x82a97308
	ctx.lr = 0x829C5930;
	sub_82A97308(ctx, base);
loc_829C5930:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24672(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24672);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5950
	if (!ctx.cr6.eq) goto loc_829C5950;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a97490
	ctx.lr = 0x829C5948;
	sub_82A97490(ctx, base);
	// stw r3,-24672(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24672, ctx.r3.u32);
	// bl 0x82a97540
	ctx.lr = 0x829C5950;
	sub_82A97540(ctx, base);
loc_829C5950:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25748(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25748);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5970
	if (!ctx.cr6.eq) goto loc_829C5970;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d1de8
	ctx.lr = 0x829C5968;
	sub_829D1DE8(ctx, base);
	// stw r3,-25748(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25748, ctx.r3.u32);
	// bl 0x829d1e98
	ctx.lr = 0x829C5970;
	sub_829D1E98(ctx, base);
loc_829C5970:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-5296
	ctx.r7.s64 = ctx.r10.s64 + -5296;
	// lwz r11,-24820(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24820);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c59ac
	if (!ctx.cr6.eq) goto loc_829C59AC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a838a0
	ctx.lr = 0x829C59A4;
	sub_82A838A0(ctx, base);
	// stw r3,-24820(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24820, ctx.r3.u32);
	// bl 0x82a83950
	ctx.lr = 0x829C59AC;
	sub_82A83950(ctx, base);
loc_829C59AC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-5160
	ctx.r7.s64 = ctx.r10.s64 + -5160;
	// lwz r11,-24348(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24348);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c59e8
	if (!ctx.cr6.eq) goto loc_829C59E8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82acda60
	ctx.lr = 0x829C59E0;
	sub_82ACDA60(ctx, base);
	// stw r3,-24348(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24348, ctx.r3.u32);
	// bl 0x82acdb10
	ctx.lr = 0x829C59E8;
	sub_82ACDB10(ctx, base);
loc_829C59E8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24556(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24556);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5a08
	if (!ctx.cr6.eq) goto loc_829C5A08;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aa0968
	ctx.lr = 0x829C5A00;
	sub_82AA0968(ctx, base);
	// stw r3,-24556(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24556, ctx.r3.u32);
	// bl 0x82aa0a18
	ctx.lr = 0x829C5A08;
	sub_82AA0A18(ctx, base);
loc_829C5A08:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-5040
	ctx.r7.s64 = ctx.r10.s64 + -5040;
	// lwz r11,-25568(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25568);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5a44
	if (!ctx.cr6.eq) goto loc_829C5A44;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829f0ab0
	ctx.lr = 0x829C5A3C;
	sub_829F0AB0(ctx, base);
	// stw r3,-25568(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25568, ctx.r3.u32);
	// bl 0x829f0b60
	ctx.lr = 0x829C5A44;
	sub_829F0B60(ctx, base);
loc_829C5A44:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23512(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23512);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5a64
	if (!ctx.cr6.eq) goto loc_829C5A64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b46d88
	ctx.lr = 0x829C5A5C;
	sub_82B46D88(ctx, base);
	// stw r3,-23512(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23512, ctx.r3.u32);
	// bl 0x82b46e38
	ctx.lr = 0x829C5A64;
	sub_82B46E38(ctx, base);
loc_829C5A64:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25332(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25332);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5a84
	if (!ctx.cr6.eq) goto loc_829C5A84;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2e618
	ctx.lr = 0x829C5A7C;
	sub_82A2E618(ctx, base);
	// stw r3,-25332(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25332, ctx.r3.u32);
	// bl 0x82a2e6c8
	ctx.lr = 0x829C5A84;
	sub_82A2E6C8(ctx, base);
loc_829C5A84:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-4920
	ctx.r7.s64 = ctx.r10.s64 + -4920;
	// lwz r11,-23908(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23908);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5ac0
	if (!ctx.cr6.eq) goto loc_829C5AC0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b095e8
	ctx.lr = 0x829C5AB8;
	sub_82B095E8(ctx, base);
	// stw r3,-23908(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23908, ctx.r3.u32);
	// bl 0x82b09698
	ctx.lr = 0x829C5AC0;
	sub_82B09698(ctx, base);
loc_829C5AC0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23904(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23904);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5ae0
	if (!ctx.cr6.eq) goto loc_829C5AE0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b09808
	ctx.lr = 0x829C5AD8;
	sub_82B09808(ctx, base);
	// stw r3,-23904(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23904, ctx.r3.u32);
	// bl 0x82b098b8
	ctx.lr = 0x829C5AE0;
	sub_82B098B8(ctx, base);
loc_829C5AE0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23412(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23412);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5b00
	if (!ctx.cr6.eq) goto loc_829C5B00;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b5a380
	ctx.lr = 0x829C5AF8;
	sub_82B5A380(ctx, base);
	// stw r3,-23412(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23412, ctx.r3.u32);
	// bl 0x82b5a430
	ctx.lr = 0x829C5B00;
	sub_82B5A430(ctx, base);
loc_829C5B00:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-4800
	ctx.r7.s64 = ctx.r10.s64 + -4800;
	// lwz r11,-25756(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25756);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5b3c
	if (!ctx.cr6.eq) goto loc_829C5B3C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d19a8
	ctx.lr = 0x829C5B34;
	sub_829D19A8(ctx, base);
	// stw r3,-25756(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25756, ctx.r3.u32);
	// bl 0x829d1a58
	ctx.lr = 0x829C5B3C;
	sub_829D1A58(ctx, base);
loc_829C5B3C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25072(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25072);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5b5c
	if (!ctx.cr6.eq) goto loc_829C5B5C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a67988
	ctx.lr = 0x829C5B54;
	sub_82A67988(ctx, base);
	// stw r3,-25072(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25072, ctx.r3.u32);
	// bl 0x82a67a38
	ctx.lr = 0x829C5B5C;
	sub_82A67A38(ctx, base);
loc_829C5B5C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-4680
	ctx.r7.s64 = ctx.r10.s64 + -4680;
	// lwz r11,-23404(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23404);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5b98
	if (!ctx.cr6.eq) goto loc_829C5B98;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b5bdc8
	ctx.lr = 0x829C5B90;
	sub_82B5BDC8(ctx, base);
	// stw r3,-23404(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23404, ctx.r3.u32);
	// bl 0x82b5be78
	ctx.lr = 0x829C5B98;
	sub_82B5BE78(ctx, base);
loc_829C5B98:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23712(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23712);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5bb8
	if (!ctx.cr6.eq) goto loc_829C5BB8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b29da0
	ctx.lr = 0x829C5BB0;
	sub_82B29DA0(ctx, base);
	// stw r3,-23712(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23712, ctx.r3.u32);
	// bl 0x82b29e50
	ctx.lr = 0x829C5BB8;
	sub_82B29E50(ctx, base);
loc_829C5BB8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-4560
	ctx.r7.s64 = ctx.r10.s64 + -4560;
	// lwz r11,-24316(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24316);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5bf4
	if (!ctx.cr6.eq) goto loc_829C5BF4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad10a0
	ctx.lr = 0x829C5BEC;
	sub_82AD10A0(ctx, base);
	// stw r3,-24316(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24316, ctx.r3.u32);
	// bl 0x82ad1150
	ctx.lr = 0x829C5BF4;
	sub_82AD1150(ctx, base);
loc_829C5BF4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24808(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24808);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5c14
	if (!ctx.cr6.eq) goto loc_829C5C14;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8a860
	ctx.lr = 0x829C5C0C;
	sub_82A8A860(ctx, base);
	// stw r3,-24808(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24808, ctx.r3.u32);
	// bl 0x82a8a910
	ctx.lr = 0x829C5C14;
	sub_82A8A910(ctx, base);
loc_829C5C14:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23752(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23752);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5c34
	if (!ctx.cr6.eq) goto loc_829C5C34;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b22e18
	ctx.lr = 0x829C5C2C;
	sub_82B22E18(ctx, base);
	// stw r3,-23752(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23752, ctx.r3.u32);
	// bl 0x82b22ec8
	ctx.lr = 0x829C5C34;
	sub_82B22EC8(ctx, base);
loc_829C5C34:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25584(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25584);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5c54
	if (!ctx.cr6.eq) goto loc_829C5C54;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e6e90
	ctx.lr = 0x829C5C4C;
	sub_829E6E90(ctx, base);
	// stw r3,-25584(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25584, ctx.r3.u32);
	// bl 0x829e6f40
	ctx.lr = 0x829C5C54;
	sub_829E6F40(ctx, base);
loc_829C5C54:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-4440
	ctx.r7.s64 = ctx.r10.s64 + -4440;
	// lwz r11,-24812(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24812);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5c90
	if (!ctx.cr6.eq) goto loc_829C5C90;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8a640
	ctx.lr = 0x829C5C88;
	sub_82A8A640(ctx, base);
	// stw r3,-24812(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24812, ctx.r3.u32);
	// bl 0x82a8a6f0
	ctx.lr = 0x829C5C90;
	sub_82A8A6F0(ctx, base);
loc_829C5C90:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25396(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25396);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5cb0
	if (!ctx.cr6.eq) goto loc_829C5CB0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a1d788
	ctx.lr = 0x829C5CA8;
	sub_82A1D788(ctx, base);
	// stw r3,-25396(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25396, ctx.r3.u32);
	// bl 0x82a1d838
	ctx.lr = 0x829C5CB0;
	sub_82A1D838(ctx, base);
loc_829C5CB0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25400(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25400);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5cd0
	if (!ctx.cr6.eq) goto loc_829C5CD0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a1d568
	ctx.lr = 0x829C5CC8;
	sub_82A1D568(ctx, base);
	// stw r3,-25400(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25400, ctx.r3.u32);
	// bl 0x82a1d618
	ctx.lr = 0x829C5CD0;
	sub_82A1D618(ctx, base);
loc_829C5CD0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-4320
	ctx.r7.s64 = ctx.r10.s64 + -4320;
	// lwz r11,-23776(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23776);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5d0c
	if (!ctx.cr6.eq) goto loc_829C5D0C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b1b398
	ctx.lr = 0x829C5D04;
	sub_82B1B398(ctx, base);
	// stw r3,-23776(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23776, ctx.r3.u32);
	// bl 0x82b1b448
	ctx.lr = 0x829C5D0C;
	sub_82B1B448(ctx, base);
loc_829C5D0C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-4200
	ctx.r7.s64 = ctx.r10.s64 + -4200;
	// lwz r11,-25408(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25408);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5d48
	if (!ctx.cr6.eq) goto loc_829C5D48;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a18408
	ctx.lr = 0x829C5D40;
	sub_82A18408(ctx, base);
	// stw r3,-25408(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25408, ctx.r3.u32);
	// bl 0x82a184b8
	ctx.lr = 0x829C5D48;
	sub_82A184B8(ctx, base);
loc_829C5D48:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-4080
	ctx.r7.s64 = ctx.r10.s64 + -4080;
	// lwz r11,-25768(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25768);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5d84
	if (!ctx.cr6.eq) goto loc_829C5D84;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d1348
	ctx.lr = 0x829C5D7C;
	sub_829D1348(ctx, base);
	// stw r3,-25768(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25768, ctx.r3.u32);
	// bl 0x829d13f8
	ctx.lr = 0x829C5D84;
	sub_829D13F8(ctx, base);
loc_829C5D84:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23740(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23740);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5da4
	if (!ctx.cr6.eq) goto loc_829C5DA4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b23c68
	ctx.lr = 0x829C5D9C;
	sub_82B23C68(ctx, base);
	// stw r3,-23740(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23740, ctx.r3.u32);
	// bl 0x82b23d18
	ctx.lr = 0x829C5DA4;
	sub_82B23D18(ctx, base);
loc_829C5DA4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24436(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24436);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c5dc4
	if (!ctx.cr6.eq) goto loc_829C5DC4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac12e8
	ctx.lr = 0x829C5DBC;
	sub_82AC12E8(ctx, base);
	// stw r3,-24436(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24436, ctx.r3.u32);
	// bl 0x82ac1398
	ctx.lr = 0x829C5DC4;
	sub_82AC1398(ctx, base);
loc_829C5DC4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-3960
	ctx.r7.s64 = ctx.r10.s64 + -3960;
	// lwz r11,-24360(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24360);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5e00
	if (!ctx.cr6.eq) goto loc_829C5E00;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82acb618
	ctx.lr = 0x829C5DF8;
	sub_82ACB618(ctx, base);
	// stw r3,-24360(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24360, ctx.r3.u32);
	// bl 0x82acb6c8
	ctx.lr = 0x829C5E00;
	sub_82ACB6C8(ctx, base);
loc_829C5E00:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-3840
	ctx.r7.s64 = ctx.r10.s64 + -3840;
	// lwz r11,-25760(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25760);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5e3c
	if (!ctx.cr6.eq) goto loc_829C5E3C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d1788
	ctx.lr = 0x829C5E34;
	sub_829D1788(ctx, base);
	// stw r3,-25760(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25760, ctx.r3.u32);
	// bl 0x829d1838
	ctx.lr = 0x829C5E3C;
	sub_829D1838(ctx, base);
loc_829C5E3C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-3720
	ctx.r7.s64 = ctx.r10.s64 + -3720;
	// lwz r11,-25588(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25588);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5e78
	if (!ctx.cr6.eq) goto loc_829C5E78;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e6c70
	ctx.lr = 0x829C5E70;
	sub_829E6C70(ctx, base);
	// stw r3,-25588(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25588, ctx.r3.u32);
	// bl 0x829e6d20
	ctx.lr = 0x829C5E78;
	sub_829E6D20(ctx, base);
loc_829C5E78:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-3600
	ctx.r7.s64 = ctx.r10.s64 + -3600;
	// lwz r11,-23604(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23604);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5eb4
	if (!ctx.cr6.eq) goto loc_829C5EB4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b384d8
	ctx.lr = 0x829C5EAC;
	sub_82B384D8(ctx, base);
	// stw r3,-23604(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23604, ctx.r3.u32);
	// bl 0x82b38588
	ctx.lr = 0x829C5EB4;
	sub_82B38588(ctx, base);
loc_829C5EB4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-3480
	ctx.r7.s64 = ctx.r10.s64 + -3480;
	// lwz r11,-25468(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25468);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5ef0
	if (!ctx.cr6.eq) goto loc_829C5EF0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a11050
	ctx.lr = 0x829C5EE8;
	sub_82A11050(ctx, base);
	// stw r3,-25468(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25468, ctx.r3.u32);
	// bl 0x82a11100
	ctx.lr = 0x829C5EF0;
	sub_82A11100(ctx, base);
loc_829C5EF0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-3360
	ctx.r7.s64 = ctx.r10.s64 + -3360;
	// lwz r11,-23528(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23528);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5f2c
	if (!ctx.cr6.eq) goto loc_829C5F2C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b43180
	ctx.lr = 0x829C5F24;
	sub_82B43180(ctx, base);
	// stw r3,-23528(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23528, ctx.r3.u32);
	// bl 0x82b43230
	ctx.lr = 0x829C5F2C;
	sub_82B43230(ctx, base);
loc_829C5F2C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-3240
	ctx.r7.s64 = ctx.r10.s64 + -3240;
	// lwz r11,-24108(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24108);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5f68
	if (!ctx.cr6.eq) goto loc_829C5F68;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aec408
	ctx.lr = 0x829C5F60;
	sub_82AEC408(ctx, base);
	// stw r3,-24108(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24108, ctx.r3.u32);
	// bl 0x82aec4b8
	ctx.lr = 0x829C5F68;
	sub_82AEC4B8(ctx, base);
loc_829C5F68:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-3120
	ctx.r7.s64 = ctx.r10.s64 + -3120;
	// lwz r11,-23696(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23696);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5fa4
	if (!ctx.cr6.eq) goto loc_829C5FA4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b2ae18
	ctx.lr = 0x829C5F9C;
	sub_82B2AE18(ctx, base);
	// stw r3,-23696(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23696, ctx.r3.u32);
	// bl 0x82b2aec8
	ctx.lr = 0x829C5FA4;
	sub_82B2AEC8(ctx, base);
loc_829C5FA4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-3000
	ctx.r7.s64 = ctx.r10.s64 + -3000;
	// lwz r11,-23704(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23704);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c5fe0
	if (!ctx.cr6.eq) goto loc_829C5FE0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b2a9d8
	ctx.lr = 0x829C5FD8;
	sub_82B2A9D8(ctx, base);
	// stw r3,-23704(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23704, ctx.r3.u32);
	// bl 0x82b2aa88
	ctx.lr = 0x829C5FE0;
	sub_82B2AA88(ctx, base);
loc_829C5FE0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23692(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23692);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6000
	if (!ctx.cr6.eq) goto loc_829C6000;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b2b038
	ctx.lr = 0x829C5FF8;
	sub_82B2B038(ctx, base);
	// stw r3,-23692(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23692, ctx.r3.u32);
	// bl 0x82b2b0e8
	ctx.lr = 0x829C6000;
	sub_82B2B0E8(ctx, base);
loc_829C6000:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23688(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23688);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6020
	if (!ctx.cr6.eq) goto loc_829C6020;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b2b258
	ctx.lr = 0x829C6018;
	sub_82B2B258(ctx, base);
	// stw r3,-23688(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23688, ctx.r3.u32);
	// bl 0x82b2b308
	ctx.lr = 0x829C6020;
	sub_82B2B308(ctx, base);
loc_829C6020:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24120(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24120);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6040
	if (!ctx.cr6.eq) goto loc_829C6040;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aeacc0
	ctx.lr = 0x829C6038;
	sub_82AEACC0(ctx, base);
	// stw r3,-24120(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24120, ctx.r3.u32);
	// bl 0x82aead70
	ctx.lr = 0x829C6040;
	sub_82AEAD70(ctx, base);
loc_829C6040:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-2880
	ctx.r7.s64 = ctx.r10.s64 + -2880;
	// lwz r11,-23700(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23700);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c607c
	if (!ctx.cr6.eq) goto loc_829C607C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b2abf8
	ctx.lr = 0x829C6074;
	sub_82B2ABF8(ctx, base);
	// stw r3,-23700(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23700, ctx.r3.u32);
	// bl 0x82b2aca8
	ctx.lr = 0x829C607C;
	sub_82B2ACA8(ctx, base);
loc_829C607C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-2760
	ctx.r7.s64 = ctx.r10.s64 + -2760;
	// lwz r11,-23944(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23944);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c60b8
	if (!ctx.cr6.eq) goto loc_829C60B8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b05848
	ctx.lr = 0x829C60B0;
	sub_82B05848(ctx, base);
	// stw r3,-23944(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23944, ctx.r3.u32);
	// bl 0x82b058f8
	ctx.lr = 0x829C60B8;
	sub_82B058F8(ctx, base);
loc_829C60B8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23952(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23952);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c60d8
	if (!ctx.cr6.eq) goto loc_829C60D8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b05408
	ctx.lr = 0x829C60D0;
	sub_82B05408(ctx, base);
	// stw r3,-23952(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23952, ctx.r3.u32);
	// bl 0x82b054b8
	ctx.lr = 0x829C60D8;
	sub_82B054B8(ctx, base);
loc_829C60D8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24780(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24780);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c60f8
	if (!ctx.cr6.eq) goto loc_829C60F8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8c980
	ctx.lr = 0x829C60F0;
	sub_82A8C980(ctx, base);
	// stw r3,-24780(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24780, ctx.r3.u32);
	// bl 0x82a8ca30
	ctx.lr = 0x829C60F8;
	sub_82A8CA30(ctx, base);
loc_829C60F8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-2640
	ctx.r7.s64 = ctx.r10.s64 + -2640;
	// lwz r11,-23708(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23708);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6134
	if (!ctx.cr6.eq) goto loc_829C6134;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b2a7b8
	ctx.lr = 0x829C612C;
	sub_82B2A7B8(ctx, base);
	// stw r3,-23708(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23708, ctx.r3.u32);
	// bl 0x82b2a868
	ctx.lr = 0x829C6134;
	sub_82B2A868(ctx, base);
loc_829C6134:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-2520
	ctx.r7.s64 = ctx.r10.s64 + -2520;
	// lwz r11,-25652(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25652);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6170
	if (!ctx.cr6.eq) goto loc_829C6170;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829dd7f0
	ctx.lr = 0x829C6168;
	sub_829DD7F0(ctx, base);
	// stw r3,-25652(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25652, ctx.r3.u32);
	// bl 0x829dd8a0
	ctx.lr = 0x829C6170;
	sub_829DD8A0(ctx, base);
loc_829C6170:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-2400
	ctx.r7.s64 = ctx.r10.s64 + -2400;
	// lwz r11,-24372(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24372);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c61ac
	if (!ctx.cr6.eq) goto loc_829C61AC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac9740
	ctx.lr = 0x829C61A4;
	sub_82AC9740(ctx, base);
	// stw r3,-24372(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24372, ctx.r3.u32);
	// bl 0x82ac97f0
	ctx.lr = 0x829C61AC;
	sub_82AC97F0(ctx, base);
loc_829C61AC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25648(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25648);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c61cc
	if (!ctx.cr6.eq) goto loc_829C61CC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829dda10
	ctx.lr = 0x829C61C4;
	sub_829DDA10(ctx, base);
	// stw r3,-25648(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25648, ctx.r3.u32);
	// bl 0x829ddac0
	ctx.lr = 0x829C61CC;
	sub_829DDAC0(ctx, base);
loc_829C61CC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25104(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25104);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c61ec
	if (!ctx.cr6.eq) goto loc_829C61EC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a63fb0
	ctx.lr = 0x829C61E4;
	sub_82A63FB0(ctx, base);
	// stw r3,-25104(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25104, ctx.r3.u32);
	// bl 0x82a64060
	ctx.lr = 0x829C61EC;
	sub_82A64060(ctx, base);
loc_829C61EC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-2280
	ctx.r7.s64 = ctx.r10.s64 + -2280;
	// lwz r11,-23920(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23920);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6228
	if (!ctx.cr6.eq) goto loc_829C6228;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b06508
	ctx.lr = 0x829C6220;
	sub_82B06508(ctx, base);
	// stw r3,-23920(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23920, ctx.r3.u32);
	// bl 0x82b065b8
	ctx.lr = 0x829C6228;
	sub_82B065B8(ctx, base);
loc_829C6228:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25636(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25636);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6248
	if (!ctx.cr6.eq) goto loc_829C6248;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829de070
	ctx.lr = 0x829C6240;
	sub_829DE070(ctx, base);
	// stw r3,-25636(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25636, ctx.r3.u32);
	// bl 0x829de120
	ctx.lr = 0x829C6248;
	sub_829DE120(ctx, base);
loc_829C6248:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25552(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25552);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6268
	if (!ctx.cr6.eq) goto loc_829C6268;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829f7b00
	ctx.lr = 0x829C6260;
	sub_829F7B00(ctx, base);
	// stw r3,-25552(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25552, ctx.r3.u32);
	// bl 0x829f7bb0
	ctx.lr = 0x829C6268;
	sub_829F7BB0(ctx, base);
loc_829C6268:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25644(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25644);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6288
	if (!ctx.cr6.eq) goto loc_829C6288;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829ddc30
	ctx.lr = 0x829C6280;
	sub_829DDC30(ctx, base);
	// stw r3,-25644(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25644, ctx.r3.u32);
	// bl 0x829ddce0
	ctx.lr = 0x829C6288;
	sub_829DDCE0(ctx, base);
loc_829C6288:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25752(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25752);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c62a8
	if (!ctx.cr6.eq) goto loc_829C62A8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d1bc8
	ctx.lr = 0x829C62A0;
	sub_829D1BC8(ctx, base);
	// stw r3,-25752(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25752, ctx.r3.u32);
	// bl 0x829d1c78
	ctx.lr = 0x829C62A8;
	sub_829D1C78(ctx, base);
loc_829C62A8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25640(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25640);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c62c8
	if (!ctx.cr6.eq) goto loc_829C62C8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829dde50
	ctx.lr = 0x829C62C0;
	sub_829DDE50(ctx, base);
	// stw r3,-25640(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25640, ctx.r3.u32);
	// bl 0x829ddf00
	ctx.lr = 0x829C62C8;
	sub_829DDF00(ctx, base);
loc_829C62C8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25088(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25088);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c62e8
	if (!ctx.cr6.eq) goto loc_829C62E8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a66178
	ctx.lr = 0x829C62E0;
	sub_82A66178(ctx, base);
	// stw r3,-25088(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25088, ctx.r3.u32);
	// bl 0x82a66228
	ctx.lr = 0x829C62E8;
	sub_82A66228(ctx, base);
loc_829C62E8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25092(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25092);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6308
	if (!ctx.cr6.eq) goto loc_829C6308;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a65f60
	ctx.lr = 0x829C6300;
	sub_82A65F60(ctx, base);
	// stw r3,-25092(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25092, ctx.r3.u32);
	// bl 0x82a66010
	ctx.lr = 0x829C6308;
	sub_82A66010(ctx, base);
loc_829C6308:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-2160
	ctx.r7.s64 = ctx.r10.s64 + -2160;
	// lwz r11,-25736(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25736);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6344
	if (!ctx.cr6.eq) goto loc_829C6344;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d2460
	ctx.lr = 0x829C633C;
	sub_829D2460(ctx, base);
	// stw r3,-25736(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25736, ctx.r3.u32);
	// bl 0x829d2510
	ctx.lr = 0x829C6344;
	sub_829D2510(ctx, base);
loc_829C6344:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-2040
	ctx.r7.s64 = ctx.r10.s64 + -2040;
	// lwz r11,-25740(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25740);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6380
	if (!ctx.cr6.eq) goto loc_829C6380;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d2240
	ctx.lr = 0x829C6378;
	sub_829D2240(ctx, base);
	// stw r3,-25740(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25740, ctx.r3.u32);
	// bl 0x829d22f0
	ctx.lr = 0x829C6380;
	sub_829D22F0(ctx, base);
loc_829C6380:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23724(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23724);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c63a0
	if (!ctx.cr6.eq) goto loc_829C63A0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b25cf0
	ctx.lr = 0x829C6398;
	sub_82B25CF0(ctx, base);
	// stw r3,-23724(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23724, ctx.r3.u32);
	// bl 0x82b25da0
	ctx.lr = 0x829C63A0;
	sub_82B25DA0(ctx, base);
loc_829C63A0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-1920
	ctx.r7.s64 = ctx.r10.s64 + -1920;
	// lwz r11,-24048(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24048);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c63dc
	if (!ctx.cr6.eq) goto loc_829C63DC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82afbe50
	ctx.lr = 0x829C63D4;
	sub_82AFBE50(ctx, base);
	// stw r3,-24048(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24048, ctx.r3.u32);
	// bl 0x82afbf00
	ctx.lr = 0x829C63DC;
	sub_82AFBF00(ctx, base);
loc_829C63DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24044(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c63fc
	if (!ctx.cr6.eq) goto loc_829C63FC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82afc070
	ctx.lr = 0x829C63F4;
	sub_82AFC070(ctx, base);
	// stw r3,-24044(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24044, ctx.r3.u32);
	// bl 0x82afc120
	ctx.lr = 0x829C63FC;
	sub_82AFC120(ctx, base);
loc_829C63FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23760(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23760);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c641c
	if (!ctx.cr6.eq) goto loc_829C641C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b21988
	ctx.lr = 0x829C6414;
	sub_82B21988(ctx, base);
	// stw r3,-23760(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23760, ctx.r3.u32);
	// bl 0x82b21a38
	ctx.lr = 0x829C641C;
	sub_82B21A38(ctx, base);
loc_829C641C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-1800
	ctx.r7.s64 = ctx.r10.s64 + -1800;
	// lwz r11,-25564(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25564);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6458
	if (!ctx.cr6.eq) goto loc_829C6458;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829f53d8
	ctx.lr = 0x829C6450;
	sub_829F53D8(ctx, base);
	// stw r3,-25564(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25564, ctx.r3.u32);
	// bl 0x829f5488
	ctx.lr = 0x829C6458;
	sub_829F5488(ctx, base);
loc_829C6458:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-1680
	ctx.r7.s64 = ctx.r10.s64 + -1680;
	// lwz r11,-25560(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25560);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6494
	if (!ctx.cr6.eq) goto loc_829C6494;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829f6130
	ctx.lr = 0x829C648C;
	sub_829F6130(ctx, base);
	// stw r3,-25560(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25560, ctx.r3.u32);
	// bl 0x829f61e0
	ctx.lr = 0x829C6494;
	sub_829F61E0(ctx, base);
loc_829C6494:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-1560
	ctx.r7.s64 = ctx.r10.s64 + -1560;
	// lwz r11,-23556(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23556);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c64d0
	if (!ctx.cr6.eq) goto loc_829C64D0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b3fa48
	ctx.lr = 0x829C64C8;
	sub_82B3FA48(ctx, base);
	// stw r3,-23556(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23556, ctx.r3.u32);
	// bl 0x82b3faf8
	ctx.lr = 0x829C64D0;
	sub_82B3FAF8(ctx, base);
loc_829C64D0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-1440
	ctx.r7.s64 = ctx.r10.s64 + -1440;
	// lwz r11,-24340(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24340);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c650c
	if (!ctx.cr6.eq) goto loc_829C650C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ace710
	ctx.lr = 0x829C6504;
	sub_82ACE710(ctx, base);
	// stw r3,-24340(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24340, ctx.r3.u32);
	// bl 0x82ace7c0
	ctx.lr = 0x829C650C;
	sub_82ACE7C0(ctx, base);
loc_829C650C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-1320
	ctx.r7.s64 = ctx.r10.s64 + -1320;
	// lwz r11,-24336(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24336);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6548
	if (!ctx.cr6.eq) goto loc_829C6548;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ace930
	ctx.lr = 0x829C6540;
	sub_82ACE930(ctx, base);
	// stw r3,-24336(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24336, ctx.r3.u32);
	// bl 0x82ace9e0
	ctx.lr = 0x829C6548;
	sub_82ACE9E0(ctx, base);
loc_829C6548:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-1200
	ctx.r7.s64 = ctx.r10.s64 + -1200;
	// lwz r11,-24332(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24332);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6584
	if (!ctx.cr6.eq) goto loc_829C6584;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aceb50
	ctx.lr = 0x829C657C;
	sub_82ACEB50(ctx, base);
	// stw r3,-24332(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24332, ctx.r3.u32);
	// bl 0x82acec00
	ctx.lr = 0x829C6584;
	sub_82ACEC00(ctx, base);
loc_829C6584:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-1080
	ctx.r7.s64 = ctx.r10.s64 + -1080;
	// lwz r11,-23844(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23844);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c65c0
	if (!ctx.cr6.eq) goto loc_829C65C0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b0ffb8
	ctx.lr = 0x829C65B8;
	sub_82B0FFB8(ctx, base);
	// stw r3,-23844(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23844, ctx.r3.u32);
	// bl 0x82b10068
	ctx.lr = 0x829C65C0;
	sub_82B10068(ctx, base);
loc_829C65C0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23784(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23784);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c65e0
	if (!ctx.cr6.eq) goto loc_829C65E0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b1a3b8
	ctx.lr = 0x829C65D8;
	sub_82B1A3B8(ctx, base);
	// stw r3,-23784(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23784, ctx.r3.u32);
	// bl 0x82b1a470
	ctx.lr = 0x829C65E0;
	sub_82B1A470(ctx, base);
loc_829C65E0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-960
	ctx.r7.s64 = ctx.r10.s64 + -960;
	// lwz r11,-23624(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23624);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c661c
	if (!ctx.cr6.eq) goto loc_829C661C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b34090
	ctx.lr = 0x829C6614;
	sub_82B34090(ctx, base);
	// stw r3,-23624(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23624, ctx.r3.u32);
	// bl 0x82b34140
	ctx.lr = 0x829C661C;
	sub_82B34140(ctx, base);
loc_829C661C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24840(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24840);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c663c
	if (!ctx.cr6.eq) goto loc_829C663C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a7f628
	ctx.lr = 0x829C6634;
	sub_82A7F628(ctx, base);
	// stw r3,-24840(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24840, ctx.r3.u32);
	// bl 0x82a7f6d8
	ctx.lr = 0x829C663C;
	sub_82A7F6D8(ctx, base);
loc_829C663C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24172(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24172);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c665c
	if (!ctx.cr6.eq) goto loc_829C665C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae6bb8
	ctx.lr = 0x829C6654;
	sub_82AE6BB8(ctx, base);
	// stw r3,-24172(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24172, ctx.r3.u32);
	// bl 0x82ae6c68
	ctx.lr = 0x829C665C;
	sub_82AE6C68(ctx, base);
loc_829C665C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24400(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24400);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c667c
	if (!ctx.cr6.eq) goto loc_829C667C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac5198
	ctx.lr = 0x829C6674;
	sub_82AC5198(ctx, base);
	// stw r3,-24400(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24400, ctx.r3.u32);
	// bl 0x82ac5248
	ctx.lr = 0x829C667C;
	sub_82AC5248(ctx, base);
loc_829C667C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23648(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23648);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c669c
	if (!ctx.cr6.eq) goto loc_829C669C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b31be0
	ctx.lr = 0x829C6694;
	sub_82B31BE0(ctx, base);
	// stw r3,-23648(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23648, ctx.r3.u32);
	// bl 0x82b31c90
	ctx.lr = 0x829C669C;
	sub_82B31C90(ctx, base);
loc_829C669C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23620(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23620);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c66bc
	if (!ctx.cr6.eq) goto loc_829C66BC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b35af8
	ctx.lr = 0x829C66B4;
	sub_82B35AF8(ctx, base);
	// stw r3,-23620(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23620, ctx.r3.u32);
	// bl 0x82b35ba8
	ctx.lr = 0x829C66BC;
	sub_82B35BA8(ctx, base);
loc_829C66BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25728(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25728);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c66dc
	if (!ctx.cr6.eq) goto loc_829C66DC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d2898
	ctx.lr = 0x829C66D4;
	sub_829D2898(ctx, base);
	// stw r3,-25728(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25728, ctx.r3.u32);
	// bl 0x829d2948
	ctx.lr = 0x829C66DC;
	sub_829D2948(ctx, base);
loc_829C66DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25744(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25744);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c66fc
	if (!ctx.cr6.eq) goto loc_829C66FC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d2020
	ctx.lr = 0x829C66F4;
	sub_829D2020(ctx, base);
	// stw r3,-25744(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25744, ctx.r3.u32);
	// bl 0x829d20d0
	ctx.lr = 0x829C66FC;
	sub_829D20D0(ctx, base);
loc_829C66FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24132(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24132);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c671c
	if (!ctx.cr6.eq) goto loc_829C671C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aea510
	ctx.lr = 0x829C6714;
	sub_82AEA510(ctx, base);
	// stw r3,-24132(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24132, ctx.r3.u32);
	// bl 0x82aea5c0
	ctx.lr = 0x829C671C;
	sub_82AEA5C0(ctx, base);
loc_829C671C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23456(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23456);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c673c
	if (!ctx.cr6.eq) goto loc_829C673C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b4f8e8
	ctx.lr = 0x829C6734;
	sub_82B4F8E8(ctx, base);
	// stw r3,-23456(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23456, ctx.r3.u32);
	// bl 0x82b4f998
	ctx.lr = 0x829C673C;
	sub_82B4F998(ctx, base);
loc_829C673C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-840
	ctx.r7.s64 = ctx.r10.s64 + -840;
	// lwz r11,-24232(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24232);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6778
	if (!ctx.cr6.eq) goto loc_829C6778;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82adeab0
	ctx.lr = 0x829C6770;
	sub_82ADEAB0(ctx, base);
	// stw r3,-24232(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24232, ctx.r3.u32);
	// bl 0x82adeb60
	ctx.lr = 0x829C6778;
	sub_82ADEB60(ctx, base);
loc_829C6778:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23948(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23948);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6798
	if (!ctx.cr6.eq) goto loc_829C6798;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b05628
	ctx.lr = 0x829C6790;
	sub_82B05628(ctx, base);
	// stw r3,-23948(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23948, ctx.r3.u32);
	// bl 0x82b056d8
	ctx.lr = 0x829C6798;
	sub_82B056D8(ctx, base);
loc_829C6798:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24416(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24416);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c67b8
	if (!ctx.cr6.eq) goto loc_829C67B8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac3f18
	ctx.lr = 0x829C67B0;
	sub_82AC3F18(ctx, base);
	// stw r3,-24416(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24416, ctx.r3.u32);
	// bl 0x82ac3fc8
	ctx.lr = 0x829C67B8;
	sub_82AC3FC8(ctx, base);
loc_829C67B8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-720
	ctx.r7.s64 = ctx.r10.s64 + -720;
	// lwz r11,-25816(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25816);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c67f4
	if (!ctx.cr6.eq) goto loc_829C67F4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829cf9d0
	ctx.lr = 0x829C67EC;
	sub_829CF9D0(ctx, base);
	// stw r3,-25816(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25816, ctx.r3.u32);
	// bl 0x829cfa80
	ctx.lr = 0x829C67F4;
	sub_829CFA80(ctx, base);
loc_829C67F4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23488(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23488);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6814
	if (!ctx.cr6.eq) goto loc_829C6814;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b4bab8
	ctx.lr = 0x829C680C;
	sub_82B4BAB8(ctx, base);
	// stw r3,-23488(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23488, ctx.r3.u32);
	// bl 0x82b4bb68
	ctx.lr = 0x829C6814;
	sub_82B4BB68(ctx, base);
loc_829C6814:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24428(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24428);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6834
	if (!ctx.cr6.eq) goto loc_829C6834;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac3cf8
	ctx.lr = 0x829C682C;
	sub_82AC3CF8(ctx, base);
	// stw r3,-24428(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24428, ctx.r3.u32);
	// bl 0x82ac3da8
	ctx.lr = 0x829C6834;
	sub_82AC3DA8(ctx, base);
loc_829C6834:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23472(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23472);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6854
	if (!ctx.cr6.eq) goto loc_829C6854;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b4e510
	ctx.lr = 0x829C684C;
	sub_82B4E510(ctx, base);
	// stw r3,-23472(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23472, ctx.r3.u32);
	// bl 0x82b4e5c0
	ctx.lr = 0x829C6854;
	sub_82B4E5C0(ctx, base);
loc_829C6854:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-600
	ctx.r7.s64 = ctx.r10.s64 + -600;
	// lwz r11,-25496(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25496);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6890
	if (!ctx.cr6.eq) goto loc_829C6890;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a0e558
	ctx.lr = 0x829C6888;
	sub_82A0E558(ctx, base);
	// stw r3,-25496(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25496, ctx.r3.u32);
	// bl 0x82a0e608
	ctx.lr = 0x829C6890;
	sub_82A0E608(ctx, base);
loc_829C6890:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-480
	ctx.r7.s64 = ctx.r10.s64 + -480;
	// lwz r11,-25388(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25388);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c68cc
	if (!ctx.cr6.eq) goto loc_829C68CC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a22818
	ctx.lr = 0x829C68C4;
	sub_82A22818(ctx, base);
	// stw r3,-25388(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25388, ctx.r3.u32);
	// bl 0x82a228c8
	ctx.lr = 0x829C68CC;
	sub_82A228C8(ctx, base);
loc_829C68CC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-360
	ctx.r7.s64 = ctx.r10.s64 + -360;
	// lwz r11,-23988(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23988);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6908
	if (!ctx.cr6.eq) goto loc_829C6908;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82afe4e8
	ctx.lr = 0x829C6900;
	sub_82AFE4E8(ctx, base);
	// stw r3,-23988(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23988, ctx.r3.u32);
	// bl 0x82afe598
	ctx.lr = 0x829C6908;
	sub_82AFE598(ctx, base);
loc_829C6908:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-240
	ctx.r7.s64 = ctx.r10.s64 + -240;
	// lwz r11,-23892(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23892);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6944
	if (!ctx.cr6.eq) goto loc_829C6944;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b0a718
	ctx.lr = 0x829C693C;
	sub_82B0A718(ctx, base);
	// stw r3,-23892(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23892, ctx.r3.u32);
	// bl 0x82b0a7c8
	ctx.lr = 0x829C6944;
	sub_82B0A7C8(ctx, base);
loc_829C6944:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,-120
	ctx.r7.s64 = ctx.r10.s64 + -120;
	// lwz r11,-23888(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23888);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6980
	if (!ctx.cr6.eq) goto loc_829C6980;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b0a938
	ctx.lr = 0x829C6978;
	sub_82B0A938(ctx, base);
	// stw r3,-23888(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23888, ctx.r3.u32);
	// bl 0x82b0a9e8
	ctx.lr = 0x829C6980;
	sub_82B0A9E8(ctx, base);
loc_829C6980:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,0
	ctx.r7.s64 = ctx.r10.s64 + 0;
	// lwz r11,-23884(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23884);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c69bc
	if (!ctx.cr6.eq) goto loc_829C69BC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b0ab58
	ctx.lr = 0x829C69B4;
	sub_82B0AB58(ctx, base);
	// stw r3,-23884(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23884, ctx.r3.u32);
	// bl 0x82b0ac08
	ctx.lr = 0x829C69BC;
	sub_82B0AC08(ctx, base);
loc_829C69BC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,120
	ctx.r7.s64 = ctx.r10.s64 + 120;
	// lwz r11,-24792(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24792);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c69f8
	if (!ctx.cr6.eq) goto loc_829C69F8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8c168
	ctx.lr = 0x829C69F0;
	sub_82A8C168(ctx, base);
	// stw r3,-24792(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24792, ctx.r3.u32);
	// bl 0x82a8c220
	ctx.lr = 0x829C69F8;
	sub_82A8C220(ctx, base);
loc_829C69F8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23916(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23916);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6a18
	if (!ctx.cr6.eq) goto loc_829C6A18;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b08778
	ctx.lr = 0x829C6A10;
	sub_82B08778(ctx, base);
	// stw r3,-23916(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23916, ctx.r3.u32);
	// bl 0x82b08830
	ctx.lr = 0x829C6A18;
	sub_82B08830(ctx, base);
loc_829C6A18:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,240
	ctx.r7.s64 = ctx.r10.s64 + 240;
	// lwz r11,-24824(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24824);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6a54
	if (!ctx.cr6.eq) goto loc_829C6A54;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a81a90
	ctx.lr = 0x829C6A4C;
	sub_82A81A90(ctx, base);
	// stw r3,-24824(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24824, ctx.r3.u32);
	// bl 0x82a81b48
	ctx.lr = 0x829C6A54;
	sub_82A81B48(ctx, base);
loc_829C6A54:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,360
	ctx.r7.s64 = ctx.r10.s64 + 360;
	// lwz r11,-23716(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23716);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6a90
	if (!ctx.cr6.eq) goto loc_829C6A90;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b27e70
	ctx.lr = 0x829C6A88;
	sub_82B27E70(ctx, base);
	// stw r3,-23716(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23716, ctx.r3.u32);
	// bl 0x82b27f28
	ctx.lr = 0x829C6A90;
	sub_82B27F28(ctx, base);
loc_829C6A90:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,480
	ctx.r7.s64 = ctx.r10.s64 + 480;
	// lwz r11,-23720(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23720);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6acc
	if (!ctx.cr6.eq) goto loc_829C6ACC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b262a8
	ctx.lr = 0x829C6AC4;
	sub_82B262A8(ctx, base);
	// stw r3,-23720(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23720, ctx.r3.u32);
	// bl 0x82b26360
	ctx.lr = 0x829C6ACC;
	sub_82B26360(ctx, base);
loc_829C6ACC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,600
	ctx.r7.s64 = ctx.r10.s64 + 600;
	// lwz r11,-23912(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23912);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6b08
	if (!ctx.cr6.eq) goto loc_829C6B08;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b08988
	ctx.lr = 0x829C6B00;
	sub_82B08988(ctx, base);
	// stw r3,-23912(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23912, ctx.r3.u32);
	// bl 0x82b08a40
	ctx.lr = 0x829C6B08;
	sub_82B08A40(ctx, base);
loc_829C6B08:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24244(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6b28
	if (!ctx.cr6.eq) goto loc_829C6B28;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82addd18
	ctx.lr = 0x829C6B20;
	sub_82ADDD18(ctx, base);
	// stw r3,-24244(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24244, ctx.r3.u32);
	// bl 0x82adddc8
	ctx.lr = 0x829C6B28;
	sub_82ADDDC8(ctx, base);
loc_829C6B28:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24280(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24280);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6b48
	if (!ctx.cr6.eq) goto loc_829C6B48;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad6990
	ctx.lr = 0x829C6B40;
	sub_82AD6990(ctx, base);
	// stw r3,-24280(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24280, ctx.r3.u32);
	// bl 0x82ad6a40
	ctx.lr = 0x829C6B48;
	sub_82AD6A40(ctx, base);
loc_829C6B48:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24076(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24076);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6b68
	if (!ctx.cr6.eq) goto loc_829C6B68;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82af8960
	ctx.lr = 0x829C6B60;
	sub_82AF8960(ctx, base);
	// stw r3,-24076(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24076, ctx.r3.u32);
	// bl 0x82af8a10
	ctx.lr = 0x829C6B68;
	sub_82AF8A10(ctx, base);
loc_829C6B68:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23548(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23548);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6b88
	if (!ctx.cr6.eq) goto loc_829C6B88;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b40720
	ctx.lr = 0x829C6B80;
	sub_82B40720(ctx, base);
	// stw r3,-23548(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23548, ctx.r3.u32);
	// bl 0x82b407d0
	ctx.lr = 0x829C6B88;
	sub_82B407D0(ctx, base);
loc_829C6B88:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23600(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23600);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6ba8
	if (!ctx.cr6.eq) goto loc_829C6BA8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b38850
	ctx.lr = 0x829C6BA0;
	sub_82B38850(ctx, base);
	// stw r3,-23600(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23600, ctx.r3.u32);
	// bl 0x82b38900
	ctx.lr = 0x829C6BA8;
	sub_82B38900(ctx, base);
loc_829C6BA8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23500(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23500);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6bc8
	if (!ctx.cr6.eq) goto loc_829C6BC8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b4b298
	ctx.lr = 0x829C6BC0;
	sub_82B4B298(ctx, base);
	// stw r3,-23500(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23500, ctx.r3.u32);
	// bl 0x82b4b348
	ctx.lr = 0x829C6BC8;
	sub_82B4B348(ctx, base);
loc_829C6BC8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,720
	ctx.r7.s64 = ctx.r10.s64 + 720;
	// lwz r11,-24144(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24144);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6c04
	if (!ctx.cr6.eq) goto loc_829C6C04;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae8798
	ctx.lr = 0x829C6BFC;
	sub_82AE8798(ctx, base);
	// stw r3,-24144(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24144, ctx.r3.u32);
	// bl 0x82ae8848
	ctx.lr = 0x829C6C04;
	sub_82AE8848(ctx, base);
loc_829C6C04:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23396(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23396);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6c24
	if (!ctx.cr6.eq) goto loc_829C6C24;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b5de20
	ctx.lr = 0x829C6C1C;
	sub_82B5DE20(ctx, base);
	// stw r3,-23396(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23396, ctx.r3.u32);
	// bl 0x82b5ded0
	ctx.lr = 0x829C6C24;
	sub_82B5DED0(ctx, base);
loc_829C6C24:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24648(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24648);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6c44
	if (!ctx.cr6.eq) goto loc_829C6C44;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a98150
	ctx.lr = 0x829C6C3C;
	sub_82A98150(ctx, base);
	// stw r3,-24648(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24648, ctx.r3.u32);
	// bl 0x82a98200
	ctx.lr = 0x829C6C44;
	sub_82A98200(ctx, base);
loc_829C6C44:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23664(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23664);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6c64
	if (!ctx.cr6.eq) goto loc_829C6C64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b2fb08
	ctx.lr = 0x829C6C5C;
	sub_82B2FB08(ctx, base);
	// stw r3,-23664(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23664, ctx.r3.u32);
	// bl 0x82b2fbb8
	ctx.lr = 0x829C6C64;
	sub_82B2FBB8(ctx, base);
loc_829C6C64:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23676(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23676);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6c84
	if (!ctx.cr6.eq) goto loc_829C6C84;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b2dcb0
	ctx.lr = 0x829C6C7C;
	sub_82B2DCB0(ctx, base);
	// stw r3,-23676(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23676, ctx.r3.u32);
	// bl 0x82b2dd60
	ctx.lr = 0x829C6C84;
	sub_82B2DD60(ctx, base);
loc_829C6C84:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25052(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25052);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6ca4
	if (!ctx.cr6.eq) goto loc_829C6CA4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a68428
	ctx.lr = 0x829C6C9C;
	sub_82A68428(ctx, base);
	// stw r3,-25052(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25052, ctx.r3.u32);
	// bl 0x82a684d8
	ctx.lr = 0x829C6CA4;
	sub_82A684D8(ctx, base);
loc_829C6CA4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,840
	ctx.r7.s64 = ctx.r10.s64 + 840;
	// lwz r11,-25064(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25064);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6ce0
	if (!ctx.cr6.eq) goto loc_829C6CE0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a67dc8
	ctx.lr = 0x829C6CD8;
	sub_82A67DC8(ctx, base);
	// stw r3,-25064(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25064, ctx.r3.u32);
	// bl 0x82a67e78
	ctx.lr = 0x829C6CE0;
	sub_82A67E78(ctx, base);
loc_829C6CE0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,960
	ctx.r7.s64 = ctx.r10.s64 + 960;
	// lwz r11,-25060(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25060);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6d1c
	if (!ctx.cr6.eq) goto loc_829C6D1C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a67fe8
	ctx.lr = 0x829C6D14;
	sub_82A67FE8(ctx, base);
	// stw r3,-25060(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25060, ctx.r3.u32);
	// bl 0x82a68098
	ctx.lr = 0x829C6D1C;
	sub_82A68098(ctx, base);
loc_829C6D1C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,1080
	ctx.r7.s64 = ctx.r10.s64 + 1080;
	// lwz r11,-25020(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25020);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6d58
	if (!ctx.cr6.eq) goto loc_829C6D58;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a69520
	ctx.lr = 0x829C6D50;
	sub_82A69520(ctx, base);
	// stw r3,-25020(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25020, ctx.r3.u32);
	// bl 0x82a695d0
	ctx.lr = 0x829C6D58;
	sub_82A695D0(ctx, base);
loc_829C6D58:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,1200
	ctx.r7.s64 = ctx.r10.s64 + 1200;
	// lwz r11,-25040(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25040);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6d94
	if (!ctx.cr6.eq) goto loc_829C6D94;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a68a88
	ctx.lr = 0x829C6D8C;
	sub_82A68A88(ctx, base);
	// stw r3,-25040(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25040, ctx.r3.u32);
	// bl 0x82a68b38
	ctx.lr = 0x829C6D94;
	sub_82A68B38(ctx, base);
loc_829C6D94:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,1320
	ctx.r7.s64 = ctx.r10.s64 + 1320;
	// lwz r11,-25008(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25008);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6dd0
	if (!ctx.cr6.eq) goto loc_829C6DD0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a69b80
	ctx.lr = 0x829C6DC8;
	sub_82A69B80(ctx, base);
	// stw r3,-25008(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25008, ctx.r3.u32);
	// bl 0x82a69c30
	ctx.lr = 0x829C6DD0;
	sub_82A69C30(ctx, base);
loc_829C6DD0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,1440
	ctx.r7.s64 = ctx.r10.s64 + 1440;
	// lwz r11,-24836(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24836);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6e0c
	if (!ctx.cr6.eq) goto loc_829C6E0C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a80508
	ctx.lr = 0x829C6E04;
	sub_82A80508(ctx, base);
	// stw r3,-24836(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24836, ctx.r3.u32);
	// bl 0x82a805b8
	ctx.lr = 0x829C6E0C;
	sub_82A805B8(ctx, base);
loc_829C6E0C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,1560
	ctx.r7.s64 = ctx.r10.s64 + 1560;
	// lwz r11,-23504(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23504);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6e48
	if (!ctx.cr6.eq) goto loc_829C6E48;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b47550
	ctx.lr = 0x829C6E40;
	sub_82B47550(ctx, base);
	// stw r3,-23504(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23504, ctx.r3.u32);
	// bl 0x82b47600
	ctx.lr = 0x829C6E48;
	sub_82B47600(ctx, base);
loc_829C6E48:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,1680
	ctx.r7.s64 = ctx.r10.s64 + 1680;
	// lwz r11,-25036(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25036);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6e84
	if (!ctx.cr6.eq) goto loc_829C6E84;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a68ca8
	ctx.lr = 0x829C6E7C;
	sub_82A68CA8(ctx, base);
	// stw r3,-25036(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25036, ctx.r3.u32);
	// bl 0x82a68d58
	ctx.lr = 0x829C6E84;
	sub_82A68D58(ctx, base);
loc_829C6E84:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,1800
	ctx.r7.s64 = ctx.r10.s64 + 1800;
	// lwz r11,-25080(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25080);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6ec0
	if (!ctx.cr6.eq) goto loc_829C6EC0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a67548
	ctx.lr = 0x829C6EB8;
	sub_82A67548(ctx, base);
	// stw r3,-25080(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25080, ctx.r3.u32);
	// bl 0x82a675f8
	ctx.lr = 0x829C6EC0;
	sub_82A675F8(ctx, base);
loc_829C6EC0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23596(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23596);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6ee0
	if (!ctx.cr6.eq) goto loc_829C6EE0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b38a70
	ctx.lr = 0x829C6ED8;
	sub_82B38A70(ctx, base);
	// stw r3,-23596(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23596, ctx.r3.u32);
	// bl 0x82b38b20
	ctx.lr = 0x829C6EE0;
	sub_82B38B20(ctx, base);
loc_829C6EE0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23552(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23552);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6f00
	if (!ctx.cr6.eq) goto loc_829C6F00;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b404e0
	ctx.lr = 0x829C6EF8;
	sub_82B404E0(ctx, base);
	// stw r3,-23552(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23552, ctx.r3.u32);
	// bl 0x82b40590
	ctx.lr = 0x829C6F00;
	sub_82B40590(ctx, base);
loc_829C6F00:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24276(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24276);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6f20
	if (!ctx.cr6.eq) goto loc_829C6F20;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad6bb0
	ctx.lr = 0x829C6F18;
	sub_82AD6BB0(ctx, base);
	// stw r3,-24276(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24276, ctx.r3.u32);
	// bl 0x82ad6c60
	ctx.lr = 0x829C6F20;
	sub_82AD6C60(ctx, base);
loc_829C6F20:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25016(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25016);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c6f40
	if (!ctx.cr6.eq) goto loc_829C6F40;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a69740
	ctx.lr = 0x829C6F38;
	sub_82A69740(ctx, base);
	// stw r3,-25016(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25016, ctx.r3.u32);
	// bl 0x82a697f0
	ctx.lr = 0x829C6F40;
	sub_82A697F0(ctx, base);
loc_829C6F40:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,1936
	ctx.r7.s64 = ctx.r10.s64 + 1936;
	// lwz r11,-25012(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25012);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6f7c
	if (!ctx.cr6.eq) goto loc_829C6F7C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a69960
	ctx.lr = 0x829C6F74;
	sub_82A69960(ctx, base);
	// stw r3,-25012(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25012, ctx.r3.u32);
	// bl 0x82a69a10
	ctx.lr = 0x829C6F7C;
	sub_82A69A10(ctx, base);
loc_829C6F7C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,2056
	ctx.r7.s64 = ctx.r10.s64 + 2056;
	// lwz r11,-25004(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25004);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6fb8
	if (!ctx.cr6.eq) goto loc_829C6FB8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a69da0
	ctx.lr = 0x829C6FB0;
	sub_82A69DA0(ctx, base);
	// stw r3,-25004(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25004, ctx.r3.u32);
	// bl 0x82a69e50
	ctx.lr = 0x829C6FB8;
	sub_82A69E50(ctx, base);
loc_829C6FB8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,2192
	ctx.r7.s64 = ctx.r10.s64 + 2192;
	// lwz r11,-24816(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24816);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c6ff4
	if (!ctx.cr6.eq) goto loc_829C6FF4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a89c30
	ctx.lr = 0x829C6FEC;
	sub_82A89C30(ctx, base);
	// stw r3,-24816(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24816, ctx.r3.u32);
	// bl 0x82a89ce0
	ctx.lr = 0x829C6FF4;
	sub_82A89CE0(ctx, base);
loc_829C6FF4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,2312
	ctx.r7.s64 = ctx.r10.s64 + 2312;
	// lwz r11,-25056(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25056);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7030
	if (!ctx.cr6.eq) goto loc_829C7030;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a68208
	ctx.lr = 0x829C7028;
	sub_82A68208(ctx, base);
	// stw r3,-25056(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25056, ctx.r3.u32);
	// bl 0x82a682b8
	ctx.lr = 0x829C7030;
	sub_82A682B8(ctx, base);
loc_829C7030:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24268(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24268);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7050
	if (!ctx.cr6.eq) goto loc_829C7050;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad7aa8
	ctx.lr = 0x829C7048;
	sub_82AD7AA8(ctx, base);
	// stw r3,-24268(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24268, ctx.r3.u32);
	// bl 0x82ad7b58
	ctx.lr = 0x829C7050;
	sub_82AD7B58(ctx, base);
loc_829C7050:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,2432
	ctx.r7.s64 = ctx.r10.s64 + 2432;
	// lwz r11,-24264(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24264);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c708c
	if (!ctx.cr6.eq) goto loc_829C708C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad7cc8
	ctx.lr = 0x829C7084;
	sub_82AD7CC8(ctx, base);
	// stw r3,-24264(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24264, ctx.r3.u32);
	// bl 0x82ad7d78
	ctx.lr = 0x829C708C;
	sub_82AD7D78(ctx, base);
loc_829C708C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,2552
	ctx.r7.s64 = ctx.r10.s64 + 2552;
	// lwz r11,-24260(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24260);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c70c8
	if (!ctx.cr6.eq) goto loc_829C70C8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad7ee8
	ctx.lr = 0x829C70C0;
	sub_82AD7EE8(ctx, base);
	// stw r3,-24260(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24260, ctx.r3.u32);
	// bl 0x82ad7f98
	ctx.lr = 0x829C70C8;
	sub_82AD7F98(ctx, base);
loc_829C70C8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,2688
	ctx.r7.s64 = ctx.r10.s64 + 2688;
	// lwz r11,-24080(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24080);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7104
	if (!ctx.cr6.eq) goto loc_829C7104;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82af8740
	ctx.lr = 0x829C70FC;
	sub_82AF8740(ctx, base);
	// stw r3,-24080(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24080, ctx.r3.u32);
	// bl 0x82af87f0
	ctx.lr = 0x829C7104;
	sub_82AF87F0(ctx, base);
loc_829C7104:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23768(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23768);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7124
	if (!ctx.cr6.eq) goto loc_829C7124;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b1f520
	ctx.lr = 0x829C711C;
	sub_82B1F520(ctx, base);
	// stw r3,-23768(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23768, ctx.r3.u32);
	// bl 0x82b1f5d0
	ctx.lr = 0x829C7124;
	sub_82B1F5D0(ctx, base);
loc_829C7124:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,2824
	ctx.r7.s64 = ctx.r10.s64 + 2824;
	// lwz r11,-24352(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24352);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7160
	if (!ctx.cr6.eq) goto loc_829C7160;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82accbd8
	ctx.lr = 0x829C7158;
	sub_82ACCBD8(ctx, base);
	// stw r3,-24352(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24352, ctx.r3.u32);
	// bl 0x82accc88
	ctx.lr = 0x829C7160;
	sub_82ACCC88(ctx, base);
loc_829C7160:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,2944
	ctx.r7.s64 = ctx.r10.s64 + 2944;
	// lwz r11,-24256(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24256);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c719c
	if (!ctx.cr6.eq) goto loc_829C719C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad8108
	ctx.lr = 0x829C7194;
	sub_82AD8108(ctx, base);
	// stw r3,-24256(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24256, ctx.r3.u32);
	// bl 0x82ad81b8
	ctx.lr = 0x829C719C;
	sub_82AD81B8(ctx, base);
loc_829C719C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24652(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24652);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c71bc
	if (!ctx.cr6.eq) goto loc_829C71BC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a97f30
	ctx.lr = 0x829C71B4;
	sub_82A97F30(ctx, base);
	// stw r3,-24652(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24652, ctx.r3.u32);
	// bl 0x82a97fe0
	ctx.lr = 0x829C71BC;
	sub_82A97FE0(ctx, base);
loc_829C71BC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,3064
	ctx.r7.s64 = ctx.r10.s64 + 3064;
	// lwz r11,-24272(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24272);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c71f8
	if (!ctx.cr6.eq) goto loc_829C71F8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad7888
	ctx.lr = 0x829C71F0;
	sub_82AD7888(ctx, base);
	// stw r3,-24272(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24272, ctx.r3.u32);
	// bl 0x82ad7938
	ctx.lr = 0x829C71F8;
	sub_82AD7938(ctx, base);
loc_829C71F8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,3184
	ctx.r7.s64 = ctx.r10.s64 + 3184;
	// lwz r11,-25044(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25044);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7234
	if (!ctx.cr6.eq) goto loc_829C7234;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a68868
	ctx.lr = 0x829C722C;
	sub_82A68868(ctx, base);
	// stw r3,-25044(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25044, ctx.r3.u32);
	// bl 0x82a68918
	ctx.lr = 0x829C7234;
	sub_82A68918(ctx, base);
loc_829C7234:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,3304
	ctx.r7.s64 = ctx.r10.s64 + 3304;
	// lwz r11,-25048(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25048);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7270
	if (!ctx.cr6.eq) goto loc_829C7270;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a68648
	ctx.lr = 0x829C7268;
	sub_82A68648(ctx, base);
	// stw r3,-25048(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25048, ctx.r3.u32);
	// bl 0x82a686f8
	ctx.lr = 0x829C7270;
	sub_82A686F8(ctx, base);
loc_829C7270:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,3424
	ctx.r7.s64 = ctx.r10.s64 + 3424;
	// lwz r11,-25068(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25068);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c72ac
	if (!ctx.cr6.eq) goto loc_829C72AC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a67ba8
	ctx.lr = 0x829C72A4;
	sub_82A67BA8(ctx, base);
	// stw r3,-25068(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25068, ctx.r3.u32);
	// bl 0x82a67c58
	ctx.lr = 0x829C72AC;
	sub_82A67C58(ctx, base);
loc_829C72AC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,3544
	ctx.r7.s64 = ctx.r10.s64 + 3544;
	// lwz r11,-25032(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25032);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c72e8
	if (!ctx.cr6.eq) goto loc_829C72E8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a68ec8
	ctx.lr = 0x829C72E0;
	sub_82A68EC8(ctx, base);
	// stw r3,-25032(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25032, ctx.r3.u32);
	// bl 0x82a68f78
	ctx.lr = 0x829C72E8;
	sub_82A68F78(ctx, base);
loc_829C72E8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,3664
	ctx.r7.s64 = ctx.r10.s64 + 3664;
	// lwz r11,-25028(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25028);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7324
	if (!ctx.cr6.eq) goto loc_829C7324;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a690e8
	ctx.lr = 0x829C731C;
	sub_82A690E8(ctx, base);
	// stw r3,-25028(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25028, ctx.r3.u32);
	// bl 0x82a69198
	ctx.lr = 0x829C7324;
	sub_82A69198(ctx, base);
loc_829C7324:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,3784
	ctx.r7.s64 = ctx.r10.s64 + 3784;
	// lwz r11,-25024(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25024);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7360
	if (!ctx.cr6.eq) goto loc_829C7360;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a69308
	ctx.lr = 0x829C7358;
	sub_82A69308(ctx, base);
	// stw r3,-25024(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25024, ctx.r3.u32);
	// bl 0x82a693b8
	ctx.lr = 0x829C7360;
	sub_82A693B8(ctx, base);
loc_829C7360:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,3904
	ctx.r7.s64 = ctx.r10.s64 + 3904;
	// lwz r11,-23780(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23780);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c739c
	if (!ctx.cr6.eq) goto loc_829C739C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b1a830
	ctx.lr = 0x829C7394;
	sub_82B1A830(ctx, base);
	// stw r3,-23780(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23780, ctx.r3.u32);
	// bl 0x82b1a8e0
	ctx.lr = 0x829C739C;
	sub_82B1A8E0(ctx, base);
loc_829C739C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23584(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23584);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c73bc
	if (!ctx.cr6.eq) goto loc_829C73BC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b3a700
	ctx.lr = 0x829C73B4;
	sub_82B3A700(ctx, base);
	// stw r3,-23584(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23584, ctx.r3.u32);
	// bl 0x82b3a7b0
	ctx.lr = 0x829C73BC;
	sub_82B3A7B0(ctx, base);
loc_829C73BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23560(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23560);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c73dc
	if (!ctx.cr6.eq) goto loc_829C73DC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b3e5e8
	ctx.lr = 0x829C73D4;
	sub_82B3E5E8(ctx, base);
	// stw r3,-23560(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23560, ctx.r3.u32);
	// bl 0x82b3e698
	ctx.lr = 0x829C73DC;
	sub_82B3E698(ctx, base);
loc_829C73DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23656(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23656);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c73fc
	if (!ctx.cr6.eq) goto loc_829C73FC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b30228
	ctx.lr = 0x829C73F4;
	sub_82B30228(ctx, base);
	// stw r3,-23656(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23656, ctx.r3.u32);
	// bl 0x82b302d8
	ctx.lr = 0x829C73FC;
	sub_82B302D8(ctx, base);
loc_829C73FC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,4024
	ctx.r7.s64 = ctx.r10.s64 + 4024;
	// lwz r11,-23964(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23964);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7438
	if (!ctx.cr6.eq) goto loc_829C7438;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b02df8
	ctx.lr = 0x829C7430;
	sub_82B02DF8(ctx, base);
	// stw r3,-23964(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23964, ctx.r3.u32);
	// bl 0x82b02ea8
	ctx.lr = 0x829C7438;
	sub_82B02EA8(ctx, base);
loc_829C7438:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,4144
	ctx.r7.s64 = ctx.r10.s64 + 4144;
	// lwz r11,-23960(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23960);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7474
	if (!ctx.cr6.eq) goto loc_829C7474;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b03018
	ctx.lr = 0x829C746C;
	sub_82B03018(ctx, base);
	// stw r3,-23960(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23960, ctx.r3.u32);
	// bl 0x82b030c8
	ctx.lr = 0x829C7474;
	sub_82B030C8(ctx, base);
loc_829C7474:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25160(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25160);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7494
	if (!ctx.cr6.eq) goto loc_829C7494;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a5d988
	ctx.lr = 0x829C748C;
	sub_82A5D988(ctx, base);
	// stw r3,-25160(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25160, ctx.r3.u32);
	// bl 0x82a5da38
	ctx.lr = 0x829C7494;
	sub_82A5DA38(ctx, base);
loc_829C7494:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,4264
	ctx.r7.s64 = ctx.r10.s64 + 4264;
	// lwz r11,-25532(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25532);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c74d0
	if (!ctx.cr6.eq) goto loc_829C74D0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829fe1f8
	ctx.lr = 0x829C74C8;
	sub_829FE1F8(ctx, base);
	// stw r3,-25532(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25532, ctx.r3.u32);
	// bl 0x829fe2a8
	ctx.lr = 0x829C74D0;
	sub_829FE2A8(ctx, base);
loc_829C74D0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,4384
	ctx.r7.s64 = ctx.r10.s64 + 4384;
	// lwz r11,-25528(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25528);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c750c
	if (!ctx.cr6.eq) goto loc_829C750C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829fe418
	ctx.lr = 0x829C7504;
	sub_829FE418(ctx, base);
	// stw r3,-25528(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25528, ctx.r3.u32);
	// bl 0x829fe4c8
	ctx.lr = 0x829C750C;
	sub_829FE4C8(ctx, base);
loc_829C750C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25276(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25276);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c752c
	if (!ctx.cr6.eq) goto loc_829C752C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a303d8
	ctx.lr = 0x829C7524;
	sub_82A303D8(ctx, base);
	// stw r3,-25276(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25276, ctx.r3.u32);
	// bl 0x82a30488
	ctx.lr = 0x829C752C;
	sub_82A30488(ctx, base);
loc_829C752C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,4504
	ctx.r7.s64 = ctx.r10.s64 + 4504;
	// lwz r11,-24344(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24344);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7568
	if (!ctx.cr6.eq) goto loc_829C7568;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ace338
	ctx.lr = 0x829C7560;
	sub_82ACE338(ctx, base);
	// stw r3,-24344(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24344, ctx.r3.u32);
	// bl 0x82ace3e8
	ctx.lr = 0x829C7568;
	sub_82ACE3E8(ctx, base);
loc_829C7568:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25256(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25256);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7588
	if (!ctx.cr6.eq) goto loc_829C7588;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a41b78
	ctx.lr = 0x829C7580;
	sub_82A41B78(ctx, base);
	// stw r3,-25256(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25256, ctx.r3.u32);
	// bl 0x82a41c28
	ctx.lr = 0x829C7588;
	sub_82A41C28(ctx, base);
loc_829C7588:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,4624
	ctx.r7.s64 = ctx.r10.s64 + 4624;
	// lwz r11,-24112(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24112);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c75c4
	if (!ctx.cr6.eq) goto loc_829C75C4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aec1e8
	ctx.lr = 0x829C75BC;
	sub_82AEC1E8(ctx, base);
	// stw r3,-24112(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24112, ctx.r3.u32);
	// bl 0x82aec298
	ctx.lr = 0x829C75C4;
	sub_82AEC298(ctx, base);
loc_829C75C4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,4744
	ctx.r7.s64 = ctx.r10.s64 + 4744;
	// lwz r11,-25268(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25268);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7600
	if (!ctx.cr6.eq) goto loc_829C7600;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a3f770
	ctx.lr = 0x829C75F8;
	sub_82A3F770(ctx, base);
	// stw r3,-25268(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25268, ctx.r3.u32);
	// bl 0x82a3f820
	ctx.lr = 0x829C7600;
	sub_82A3F820(ctx, base);
loc_829C7600:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25372(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25372);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7620
	if (!ctx.cr6.eq) goto loc_829C7620;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2a388
	ctx.lr = 0x829C7618;
	sub_82A2A388(ctx, base);
	// stw r3,-25372(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25372, ctx.r3.u32);
	// bl 0x82a2a438
	ctx.lr = 0x829C7620;
	sub_82A2A438(ctx, base);
loc_829C7620:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,4864
	ctx.r7.s64 = ctx.r10.s64 + 4864;
	// lwz r11,-25264(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25264);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c765c
	if (!ctx.cr6.eq) goto loc_829C765C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a3f990
	ctx.lr = 0x829C7654;
	sub_82A3F990(ctx, base);
	// stw r3,-25264(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25264, ctx.r3.u32);
	// bl 0x82a3fa40
	ctx.lr = 0x829C765C;
	sub_82A3FA40(ctx, base);
loc_829C765C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25272(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25272);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c767c
	if (!ctx.cr6.eq) goto loc_829C767C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a3f550
	ctx.lr = 0x829C7674;
	sub_82A3F550(ctx, base);
	// stw r3,-25272(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25272, ctx.r3.u32);
	// bl 0x82a3f600
	ctx.lr = 0x829C767C;
	sub_82A3F600(ctx, base);
loc_829C767C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,4984
	ctx.r7.s64 = ctx.r10.s64 + 4984;
	// lwz r11,-24800(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24800);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c76b8
	if (!ctx.cr6.eq) goto loc_829C76B8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8b140
	ctx.lr = 0x829C76B0;
	sub_82A8B140(ctx, base);
	// stw r3,-24800(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24800, ctx.r3.u32);
	// bl 0x82a8b1f0
	ctx.lr = 0x829C76B8;
	sub_82A8B1F0(ctx, base);
loc_829C76B8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24128(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24128);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c76d8
	if (!ctx.cr6.eq) goto loc_829C76D8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aea880
	ctx.lr = 0x829C76D0;
	sub_82AEA880(ctx, base);
	// stw r3,-24128(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24128, ctx.r3.u32);
	// bl 0x82aea930
	ctx.lr = 0x829C76D8;
	sub_82AEA930(ctx, base);
loc_829C76D8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25392(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25392);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c76f8
	if (!ctx.cr6.eq) goto loc_829C76F8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a225f8
	ctx.lr = 0x829C76F0;
	sub_82A225F8(ctx, base);
	// stw r3,-25392(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25392, ctx.r3.u32);
	// bl 0x82a226a8
	ctx.lr = 0x829C76F8;
	sub_82A226A8(ctx, base);
loc_829C76F8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,5104
	ctx.r7.s64 = ctx.r10.s64 + 5104;
	// lwz r11,-24772(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24772);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7734
	if (!ctx.cr6.eq) goto loc_829C7734;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8f020
	ctx.lr = 0x829C772C;
	sub_82A8F020(ctx, base);
	// stw r3,-24772(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24772, ctx.r3.u32);
	// bl 0x82a8f0d0
	ctx.lr = 0x829C7734;
	sub_82A8F0D0(ctx, base);
loc_829C7734:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,5224
	ctx.r7.s64 = ctx.r10.s64 + 5224;
	// lwz r11,-24768(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24768);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7770
	if (!ctx.cr6.eq) goto loc_829C7770;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8f240
	ctx.lr = 0x829C7768;
	sub_82A8F240(ctx, base);
	// stw r3,-24768(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24768, ctx.r3.u32);
	// bl 0x82a8f2f0
	ctx.lr = 0x829C7770;
	sub_82A8F2F0(ctx, base);
loc_829C7770:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24832(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24832);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7790
	if (!ctx.cr6.eq) goto loc_829C7790;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a810b0
	ctx.lr = 0x829C7788;
	sub_82A810B0(ctx, base);
	// stw r3,-24832(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24832, ctx.r3.u32);
	// bl 0x82a81160
	ctx.lr = 0x829C7790;
	sub_82A81160(ctx, base);
loc_829C7790:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,5344
	ctx.r7.s64 = ctx.r10.s64 + 5344;
	// lwz r11,-25328(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25328);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c77cc
	if (!ctx.cr6.eq) goto loc_829C77CC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2e838
	ctx.lr = 0x829C77C4;
	sub_82A2E838(ctx, base);
	// stw r3,-25328(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25328, ctx.r3.u32);
	// bl 0x82a2e8e8
	ctx.lr = 0x829C77CC;
	sub_82A2E8E8(ctx, base);
loc_829C77CC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,5464
	ctx.r7.s64 = ctx.r10.s64 + 5464;
	// lwz r11,-25324(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25324);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7808
	if (!ctx.cr6.eq) goto loc_829C7808;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2ea58
	ctx.lr = 0x829C7800;
	sub_82A2EA58(ctx, base);
	// stw r3,-25324(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25324, ctx.r3.u32);
	// bl 0x82a2eb08
	ctx.lr = 0x829C7808;
	sub_82A2EB08(ctx, base);
loc_829C7808:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,5584
	ctx.r7.s64 = ctx.r10.s64 + 5584;
	// lwz r11,-25296(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25296);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7844
	if (!ctx.cr6.eq) goto loc_829C7844;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2f938
	ctx.lr = 0x829C783C;
	sub_82A2F938(ctx, base);
	// stw r3,-25296(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25296, ctx.r3.u32);
	// bl 0x82a2f9e8
	ctx.lr = 0x829C7844;
	sub_82A2F9E8(ctx, base);
loc_829C7844:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25316(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25316);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7864
	if (!ctx.cr6.eq) goto loc_829C7864;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2ee98
	ctx.lr = 0x829C785C;
	sub_82A2EE98(ctx, base);
	// stw r3,-25316(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25316, ctx.r3.u32);
	// bl 0x82a2ef48
	ctx.lr = 0x829C7864;
	sub_82A2EF48(ctx, base);
loc_829C7864:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,5704
	ctx.r7.s64 = ctx.r10.s64 + 5704;
	// lwz r11,-25288(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25288);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c78a0
	if (!ctx.cr6.eq) goto loc_829C78A0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2fd78
	ctx.lr = 0x829C7898;
	sub_82A2FD78(ctx, base);
	// stw r3,-25288(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25288, ctx.r3.u32);
	// bl 0x82a2fe28
	ctx.lr = 0x829C78A0;
	sub_82A2FE28(ctx, base);
loc_829C78A0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25312(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25312);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c78c0
	if (!ctx.cr6.eq) goto loc_829C78C0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2f0b8
	ctx.lr = 0x829C78B8;
	sub_82A2F0B8(ctx, base);
	// stw r3,-25312(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25312, ctx.r3.u32);
	// bl 0x82a2f168
	ctx.lr = 0x829C78C0;
	sub_82A2F168(ctx, base);
loc_829C78C0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,5824
	ctx.r7.s64 = ctx.r10.s64 + 5824;
	// lwz r11,-25308(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25308);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c78fc
	if (!ctx.cr6.eq) goto loc_829C78FC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2f2d8
	ctx.lr = 0x829C78F4;
	sub_82A2F2D8(ctx, base);
	// stw r3,-25308(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25308, ctx.r3.u32);
	// bl 0x82a2f388
	ctx.lr = 0x829C78FC;
	sub_82A2F388(ctx, base);
loc_829C78FC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,5944
	ctx.r7.s64 = ctx.r10.s64 + 5944;
	// lwz r11,-25284(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25284);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7938
	if (!ctx.cr6.eq) goto loc_829C7938;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2ff98
	ctx.lr = 0x829C7930;
	sub_82A2FF98(ctx, base);
	// stw r3,-25284(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25284, ctx.r3.u32);
	// bl 0x82a30048
	ctx.lr = 0x829C7938;
	sub_82A30048(ctx, base);
loc_829C7938:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25344(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7958
	if (!ctx.cr6.eq) goto loc_829C7958;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2dfb8
	ctx.lr = 0x829C7950;
	sub_82A2DFB8(ctx, base);
	// stw r3,-25344(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25344, ctx.r3.u32);
	// bl 0x82a2e068
	ctx.lr = 0x829C7958;
	sub_82A2E068(ctx, base);
loc_829C7958:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,6064
	ctx.r7.s64 = ctx.r10.s64 + 6064;
	// lwz r11,-25300(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25300);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7994
	if (!ctx.cr6.eq) goto loc_829C7994;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2f718
	ctx.lr = 0x829C798C;
	sub_82A2F718(ctx, base);
	// stw r3,-25300(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25300, ctx.r3.u32);
	// bl 0x82a2f7c8
	ctx.lr = 0x829C7994;
	sub_82A2F7C8(ctx, base);
loc_829C7994:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24388(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24388);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c79b4
	if (!ctx.cr6.eq) goto loc_829C79B4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac7d10
	ctx.lr = 0x829C79AC;
	sub_82AC7D10(ctx, base);
	// stw r3,-24388(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24388, ctx.r3.u32);
	// bl 0x82ac7dc0
	ctx.lr = 0x829C79B4;
	sub_82AC7DC0(ctx, base);
loc_829C79B4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,6184
	ctx.r7.s64 = ctx.r10.s64 + 6184;
	// lwz r11,-24380(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24380);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c79f0
	if (!ctx.cr6.eq) goto loc_829C79F0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac8150
	ctx.lr = 0x829C79E8;
	sub_82AC8150(ctx, base);
	// stw r3,-24380(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24380, ctx.r3.u32);
	// bl 0x82ac8200
	ctx.lr = 0x829C79F0;
	sub_82AC8200(ctx, base);
loc_829C79F0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25292(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25292);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7a10
	if (!ctx.cr6.eq) goto loc_829C7A10;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2fb58
	ctx.lr = 0x829C7A08;
	sub_82A2FB58(ctx, base);
	// stw r3,-25292(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25292, ctx.r3.u32);
	// bl 0x82a2fc08
	ctx.lr = 0x829C7A10;
	sub_82A2FC08(ctx, base);
loc_829C7A10:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,6304
	ctx.r7.s64 = ctx.r10.s64 + 6304;
	// lwz r11,-23924(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23924);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7a4c
	if (!ctx.cr6.eq) goto loc_829C7A4C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b062e8
	ctx.lr = 0x829C7A44;
	sub_82B062E8(ctx, base);
	// stw r3,-23924(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23924, ctx.r3.u32);
	// bl 0x82b06398
	ctx.lr = 0x829C7A4C;
	sub_82B06398(ctx, base);
loc_829C7A4C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,6424
	ctx.r7.s64 = ctx.r10.s64 + 6424;
	// lwz r11,-25280(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25280);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7a88
	if (!ctx.cr6.eq) goto loc_829C7A88;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a301b8
	ctx.lr = 0x829C7A80;
	sub_82A301B8(ctx, base);
	// stw r3,-25280(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25280, ctx.r3.u32);
	// bl 0x82a30268
	ctx.lr = 0x829C7A88;
	sub_82A30268(ctx, base);
loc_829C7A88:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25320(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25320);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7aa8
	if (!ctx.cr6.eq) goto loc_829C7AA8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2ec78
	ctx.lr = 0x829C7AA0;
	sub_82A2EC78(ctx, base);
	// stw r3,-25320(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25320, ctx.r3.u32);
	// bl 0x82a2ed28
	ctx.lr = 0x829C7AA8;
	sub_82A2ED28(ctx, base);
loc_829C7AA8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,6544
	ctx.r7.s64 = ctx.r10.s64 + 6544;
	// lwz r11,-25304(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25304);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7ae4
	if (!ctx.cr6.eq) goto loc_829C7AE4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2f4f8
	ctx.lr = 0x829C7ADC;
	sub_82A2F4F8(ctx, base);
	// stw r3,-25304(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25304, ctx.r3.u32);
	// bl 0x82a2f5a8
	ctx.lr = 0x829C7AE4;
	sub_82A2F5A8(ctx, base);
loc_829C7AE4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,6664
	ctx.r7.s64 = ctx.r10.s64 + 6664;
	// lwz r11,-25348(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25348);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7b20
	if (!ctx.cr6.eq) goto loc_829C7B20;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2dd98
	ctx.lr = 0x829C7B18;
	sub_82A2DD98(ctx, base);
	// stw r3,-25348(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25348, ctx.r3.u32);
	// bl 0x82a2de48
	ctx.lr = 0x829C7B20;
	sub_82A2DE48(ctx, base);
loc_829C7B20:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,6784
	ctx.r7.s64 = ctx.r10.s64 + 6784;
	// lwz r11,-25356(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25356);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7b5c
	if (!ctx.cr6.eq) goto loc_829C7B5C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2d958
	ctx.lr = 0x829C7B54;
	sub_82A2D958(ctx, base);
	// stw r3,-25356(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25356, ctx.r3.u32);
	// bl 0x82a2da08
	ctx.lr = 0x829C7B5C;
	sub_82A2DA08(ctx, base);
loc_829C7B5C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,6904
	ctx.r7.s64 = ctx.r10.s64 + 6904;
	// lwz r11,-23580(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23580);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7b98
	if (!ctx.cr6.eq) goto loc_829C7B98;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b3b0d8
	ctx.lr = 0x829C7B90;
	sub_82B3B0D8(ctx, base);
	// stw r3,-23580(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23580, ctx.r3.u32);
	// bl 0x82b3b188
	ctx.lr = 0x829C7B98;
	sub_82B3B188(ctx, base);
loc_829C7B98:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,7024
	ctx.r7.s64 = ctx.r10.s64 + 7024;
	// lwz r11,-25340(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25340);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7bd4
	if (!ctx.cr6.eq) goto loc_829C7BD4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2e1d8
	ctx.lr = 0x829C7BCC;
	sub_82A2E1D8(ctx, base);
	// stw r3,-25340(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25340, ctx.r3.u32);
	// bl 0x82a2e288
	ctx.lr = 0x829C7BD4;
	sub_82A2E288(ctx, base);
loc_829C7BD4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,7144
	ctx.r7.s64 = ctx.r10.s64 + 7144;
	// lwz r11,-24828(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24828);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7c10
	if (!ctx.cr6.eq) goto loc_829C7C10;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a81720
	ctx.lr = 0x829C7C08;
	sub_82A81720(ctx, base);
	// stw r3,-24828(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24828, ctx.r3.u32);
	// bl 0x82a817d0
	ctx.lr = 0x829C7C10;
	sub_82A817D0(ctx, base);
loc_829C7C10:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,7264
	ctx.r7.s64 = ctx.r10.s64 + 7264;
	// lwz r11,-25600(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25600);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7c4c
	if (!ctx.cr6.eq) goto loc_829C7C4C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e6610
	ctx.lr = 0x829C7C44;
	sub_829E6610(ctx, base);
	// stw r3,-25600(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25600, ctx.r3.u32);
	// bl 0x829e66c0
	ctx.lr = 0x829C7C4C;
	sub_829E66C0(ctx, base);
loc_829C7C4C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,7384
	ctx.r7.s64 = ctx.r10.s64 + 7384;
	// lwz r11,-25796(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25796);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7c88
	if (!ctx.cr6.eq) goto loc_829C7C88;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d0468
	ctx.lr = 0x829C7C80;
	sub_829D0468(ctx, base);
	// stw r3,-25796(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25796, ctx.r3.u32);
	// bl 0x829d0518
	ctx.lr = 0x829C7C88;
	sub_829D0518(ctx, base);
loc_829C7C88:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23984(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23984);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7ca8
	if (!ctx.cr6.eq) goto loc_829C7CA8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aff420
	ctx.lr = 0x829C7CA0;
	sub_82AFF420(ctx, base);
	// stw r3,-23984(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23984, ctx.r3.u32);
	// bl 0x82aff4d0
	ctx.lr = 0x829C7CA8;
	sub_82AFF4D0(ctx, base);
loc_829C7CA8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,7504
	ctx.r7.s64 = ctx.r10.s64 + 7504;
	// lwz r11,-25824(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25824);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7ce4
	if (!ctx.cr6.eq) goto loc_829C7CE4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829c4098
	ctx.lr = 0x829C7CDC;
	sub_829C4098(ctx, base);
	// stw r3,-25824(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25824, ctx.r3.u32);
	// bl 0x829c4148
	ctx.lr = 0x829C7CE4;
	sub_829C4148(ctx, base);
loc_829C7CE4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,7624
	ctx.r7.s64 = ctx.r10.s64 + 7624;
	// lwz r11,-25820(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25820);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7d20
	if (!ctx.cr6.eq) goto loc_829C7D20;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829cf7b8
	ctx.lr = 0x829C7D18;
	sub_829CF7B8(ctx, base);
	// stw r3,-25820(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25820, ctx.r3.u32);
	// bl 0x829cf868
	ctx.lr = 0x829C7D20;
	sub_829CF868(ctx, base);
loc_829C7D20:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,7744
	ctx.r7.s64 = ctx.r10.s64 + 7744;
	// lwz r11,-25516(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25516);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7d5c
	if (!ctx.cr6.eq) goto loc_829C7D5C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a04110
	ctx.lr = 0x829C7D54;
	sub_82A04110(ctx, base);
	// stw r3,-25516(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25516, ctx.r3.u32);
	// bl 0x82a041c0
	ctx.lr = 0x829C7D5C;
	sub_82A041C0(ctx, base);
loc_829C7D5C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24284(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24284);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7d7c
	if (!ctx.cr6.eq) goto loc_829C7D7C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad3e28
	ctx.lr = 0x829C7D74;
	sub_82AD3E28(ctx, base);
	// stw r3,-24284(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24284, ctx.r3.u32);
	// bl 0x82ad3ed8
	ctx.lr = 0x829C7D7C;
	sub_82AD3ED8(ctx, base);
loc_829C7D7C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,7864
	ctx.r7.s64 = ctx.r10.s64 + 7864;
	// lwz r11,-25456(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25456);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7db8
	if (!ctx.cr6.eq) goto loc_829C7DB8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a14b78
	ctx.lr = 0x829C7DB0;
	sub_82A14B78(ctx, base);
	// stw r3,-25456(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25456, ctx.r3.u32);
	// bl 0x82a14c28
	ctx.lr = 0x829C7DB8;
	sub_82A14C28(ctx, base);
loc_829C7DB8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25472(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25472);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7dd8
	if (!ctx.cr6.eq) goto loc_829C7DD8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a10960
	ctx.lr = 0x829C7DD0;
	sub_82A10960(ctx, base);
	// stw r3,-25472(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25472, ctx.r3.u32);
	// bl 0x82a10a10
	ctx.lr = 0x829C7DD8;
	sub_82A10A10(ctx, base);
loc_829C7DD8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,7984
	ctx.r7.s64 = ctx.r10.s64 + 7984;
	// lwz r11,-25464(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25464);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7e14
	if (!ctx.cr6.eq) goto loc_829C7E14;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a11360
	ctx.lr = 0x829C7E0C;
	sub_82A11360(ctx, base);
	// stw r3,-25464(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25464, ctx.r3.u32);
	// bl 0x82a11410
	ctx.lr = 0x829C7E14;
	sub_82A11410(ctx, base);
loc_829C7E14:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25460(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25460);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7e34
	if (!ctx.cr6.eq) goto loc_829C7E34;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a11968
	ctx.lr = 0x829C7E2C;
	sub_82A11968(ctx, base);
	// stw r3,-25460(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25460, ctx.r3.u32);
	// bl 0x82a11a18
	ctx.lr = 0x829C7E34;
	sub_82A11A18(ctx, base);
loc_829C7E34:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,8120
	ctx.r7.s64 = ctx.r10.s64 + 8120;
	// lwz r11,-24356(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24356);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7e70
	if (!ctx.cr6.eq) goto loc_829C7E70;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82acb838
	ctx.lr = 0x829C7E68;
	sub_82ACB838(ctx, base);
	// stw r3,-24356(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24356, ctx.r3.u32);
	// bl 0x82acb8e8
	ctx.lr = 0x829C7E70;
	sub_82ACB8E8(ctx, base);
loc_829C7E70:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24680(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24680);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7e90
	if (!ctx.cr6.eq) goto loc_829C7E90;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a97038
	ctx.lr = 0x829C7E88;
	sub_82A97038(ctx, base);
	// stw r3,-24680(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24680, ctx.r3.u32);
	// bl 0x82a970e8
	ctx.lr = 0x829C7E90;
	sub_82A970E8(ctx, base);
loc_829C7E90:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24692(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24692);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7eb0
	if (!ctx.cr6.eq) goto loc_829C7EB0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a969d8
	ctx.lr = 0x829C7EA8;
	sub_82A969D8(ctx, base);
	// stw r3,-24692(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24692, ctx.r3.u32);
	// bl 0x82a96a88
	ctx.lr = 0x829C7EB0;
	sub_82A96A88(ctx, base);
loc_829C7EB0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24684(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24684);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7ed0
	if (!ctx.cr6.eq) goto loc_829C7ED0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a96e18
	ctx.lr = 0x829C7EC8;
	sub_82A96E18(ctx, base);
	// stw r3,-24684(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24684, ctx.r3.u32);
	// bl 0x82a96ec8
	ctx.lr = 0x829C7ED0;
	sub_82A96EC8(ctx, base);
loc_829C7ED0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24788(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24788);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7ef0
	if (!ctx.cr6.eq) goto loc_829C7EF0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8c540
	ctx.lr = 0x829C7EE8;
	sub_82A8C540(ctx, base);
	// stw r3,-24788(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24788, ctx.r3.u32);
	// bl 0x82a8c5f0
	ctx.lr = 0x829C7EF0;
	sub_82A8C5F0(ctx, base);
loc_829C7EF0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,8256
	ctx.r7.s64 = ctx.r10.s64 + 8256;
	// lwz r11,-24784(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24784);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7f2c
	if (!ctx.cr6.eq) goto loc_829C7F2C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8c760
	ctx.lr = 0x829C7F24;
	sub_82A8C760(ctx, base);
	// stw r3,-24784(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24784, ctx.r3.u32);
	// bl 0x82a8c810
	ctx.lr = 0x829C7F2C;
	sub_82A8C810(ctx, base);
loc_829C7F2C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25616(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25616);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7f4c
	if (!ctx.cr6.eq) goto loc_829C7F4C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e5d90
	ctx.lr = 0x829C7F44;
	sub_829E5D90(ctx, base);
	// stw r3,-25616(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25616, ctx.r3.u32);
	// bl 0x829e5e40
	ctx.lr = 0x829C7F4C;
	sub_829E5E40(ctx, base);
loc_829C7F4C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,8376
	ctx.r7.s64 = ctx.r10.s64 + 8376;
	// lwz r11,-24412(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24412);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c7f88
	if (!ctx.cr6.eq) goto loc_829C7F88;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac4550
	ctx.lr = 0x829C7F80;
	sub_82AC4550(ctx, base);
	// stw r3,-24412(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24412, ctx.r3.u32);
	// bl 0x82ac4600
	ctx.lr = 0x829C7F88;
	sub_82AC4600(ctx, base);
loc_829C7F88:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24504(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24504);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7fa8
	if (!ctx.cr6.eq) goto loc_829C7FA8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aae8d0
	ctx.lr = 0x829C7FA0;
	sub_82AAE8D0(ctx, base);
	// stw r3,-24504(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24504, ctx.r3.u32);
	// bl 0x82aae980
	ctx.lr = 0x829C7FA8;
	sub_82AAE980(ctx, base);
loc_829C7FA8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25612(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25612);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c7fc8
	if (!ctx.cr6.eq) goto loc_829C7FC8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e5fb0
	ctx.lr = 0x829C7FC0;
	sub_829E5FB0(ctx, base);
	// stw r3,-25612(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25612, ctx.r3.u32);
	// bl 0x829e6060
	ctx.lr = 0x829C7FC8;
	sub_829E6060(ctx, base);
loc_829C7FC8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,8496
	ctx.r7.s64 = ctx.r10.s64 + 8496;
	// lwz r11,-23536(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23536);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8004
	if (!ctx.cr6.eq) goto loc_829C8004;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b41728
	ctx.lr = 0x829C7FFC;
	sub_82B41728(ctx, base);
	// stw r3,-23536(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23536, ctx.r3.u32);
	// bl 0x82b417d8
	ctx.lr = 0x829C8004;
	sub_82B417D8(ctx, base);
loc_829C8004:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,8616
	ctx.r7.s64 = ctx.r10.s64 + 8616;
	// lwz r11,-25608(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25608);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8040
	if (!ctx.cr6.eq) goto loc_829C8040;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e61d0
	ctx.lr = 0x829C8038;
	sub_829E61D0(ctx, base);
	// stw r3,-25608(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25608, ctx.r3.u32);
	// bl 0x829e6280
	ctx.lr = 0x829C8040;
	sub_829E6280(ctx, base);
loc_829C8040:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,8736
	ctx.r7.s64 = ctx.r10.s64 + 8736;
	// lwz r11,-24404(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24404);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c807c
	if (!ctx.cr6.eq) goto loc_829C807C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac4a10
	ctx.lr = 0x829C8074;
	sub_82AC4A10(ctx, base);
	// stw r3,-24404(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24404, ctx.r3.u32);
	// bl 0x82ac4ac0
	ctx.lr = 0x829C807C;
	sub_82AC4AC0(ctx, base);
loc_829C807C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24408(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24408);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c809c
	if (!ctx.cr6.eq) goto loc_829C809C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac4770
	ctx.lr = 0x829C8094;
	sub_82AC4770(ctx, base);
	// stw r3,-24408(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24408, ctx.r3.u32);
	// bl 0x82ac4820
	ctx.lr = 0x829C809C;
	sub_82AC4820(ctx, base);
loc_829C809C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23940(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23940);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c80bc
	if (!ctx.cr6.eq) goto loc_829C80BC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b05a68
	ctx.lr = 0x829C80B4;
	sub_82B05A68(ctx, base);
	// stw r3,-23940(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23940, ctx.r3.u32);
	// bl 0x82b05b18
	ctx.lr = 0x829C80BC;
	sub_82B05B18(ctx, base);
loc_829C80BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25136(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25136);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c80dc
	if (!ctx.cr6.eq) goto loc_829C80DC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a62450
	ctx.lr = 0x829C80D4;
	sub_82A62450(ctx, base);
	// stw r3,-25136(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25136, ctx.r3.u32);
	// bl 0x82a62500
	ctx.lr = 0x829C80DC;
	sub_82A62500(ctx, base);
loc_829C80DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25132(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25132);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c80fc
	if (!ctx.cr6.eq) goto loc_829C80FC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a62670
	ctx.lr = 0x829C80F4;
	sub_82A62670(ctx, base);
	// stw r3,-25132(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25132, ctx.r3.u32);
	// bl 0x82a62720
	ctx.lr = 0x829C80FC;
	sub_82A62720(ctx, base);
loc_829C80FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25108(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25108);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c811c
	if (!ctx.cr6.eq) goto loc_829C811C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a63330
	ctx.lr = 0x829C8114;
	sub_82A63330(ctx, base);
	// stw r3,-25108(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25108, ctx.r3.u32);
	// bl 0x82a633e0
	ctx.lr = 0x829C811C;
	sub_82A633E0(ctx, base);
loc_829C811C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25120(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25120);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c813c
	if (!ctx.cr6.eq) goto loc_829C813C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a62cd0
	ctx.lr = 0x829C8134;
	sub_82A62CD0(ctx, base);
	// stw r3,-25120(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25120, ctx.r3.u32);
	// bl 0x82a62d80
	ctx.lr = 0x829C813C;
	sub_82A62D80(ctx, base);
loc_829C813C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25112(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25112);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c815c
	if (!ctx.cr6.eq) goto loc_829C815C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a63110
	ctx.lr = 0x829C8154;
	sub_82A63110(ctx, base);
	// stw r3,-25112(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25112, ctx.r3.u32);
	// bl 0x82a631c0
	ctx.lr = 0x829C815C;
	sub_82A631C0(ctx, base);
loc_829C815C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25124(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25124);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c817c
	if (!ctx.cr6.eq) goto loc_829C817C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a62ab0
	ctx.lr = 0x829C8174;
	sub_82A62AB0(ctx, base);
	// stw r3,-25124(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25124, ctx.r3.u32);
	// bl 0x82a62b60
	ctx.lr = 0x829C817C;
	sub_82A62B60(ctx, base);
loc_829C817C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25128(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25128);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c819c
	if (!ctx.cr6.eq) goto loc_829C819C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a62890
	ctx.lr = 0x829C8194;
	sub_82A62890(ctx, base);
	// stw r3,-25128(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25128, ctx.r3.u32);
	// bl 0x82a62940
	ctx.lr = 0x829C819C;
	sub_82A62940(ctx, base);
loc_829C819C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25116(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25116);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c81bc
	if (!ctx.cr6.eq) goto loc_829C81BC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a62ef0
	ctx.lr = 0x829C81B4;
	sub_82A62EF0(ctx, base);
	// stw r3,-25116(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25116, ctx.r3.u32);
	// bl 0x82a62fa0
	ctx.lr = 0x829C81BC;
	sub_82A62FA0(ctx, base);
loc_829C81BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25620(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25620);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c81dc
	if (!ctx.cr6.eq) goto loc_829C81DC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e5b70
	ctx.lr = 0x829C81D4;
	sub_829E5B70(ctx, base);
	// stw r3,-25620(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25620, ctx.r3.u32);
	// bl 0x829e5c20
	ctx.lr = 0x829C81DC;
	sub_829E5C20(ctx, base);
loc_829C81DC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,8856
	ctx.r7.s64 = ctx.r10.s64 + 8856;
	// lwz r11,-25604(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25604);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8218
	if (!ctx.cr6.eq) goto loc_829C8218;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e63f0
	ctx.lr = 0x829C8210;
	sub_829E63F0(ctx, base);
	// stw r3,-25604(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25604, ctx.r3.u32);
	// bl 0x829e64a0
	ctx.lr = 0x829C8218;
	sub_829E64A0(ctx, base);
loc_829C8218:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,8976
	ctx.r7.s64 = ctx.r10.s64 + 8976;
	// lwz r11,-24204(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24204);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8254
	if (!ctx.cr6.eq) goto loc_829C8254;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae0718
	ctx.lr = 0x829C824C;
	sub_82AE0718(ctx, base);
	// stw r3,-24204(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24204, ctx.r3.u32);
	// bl 0x82ae07c8
	ctx.lr = 0x829C8254;
	sub_82AE07C8(ctx, base);
loc_829C8254:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24192(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24192);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8274
	if (!ctx.cr6.eq) goto loc_829C8274;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae0d78
	ctx.lr = 0x829C826C;
	sub_82AE0D78(ctx, base);
	// stw r3,-24192(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24192, ctx.r3.u32);
	// bl 0x82ae0e28
	ctx.lr = 0x829C8274;
	sub_82AE0E28(ctx, base);
loc_829C8274:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25572(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25572);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8294
	if (!ctx.cr6.eq) goto loc_829C8294;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829f0890
	ctx.lr = 0x829C828C;
	sub_829F0890(ctx, base);
	// stw r3,-25572(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25572, ctx.r3.u32);
	// bl 0x829f0940
	ctx.lr = 0x829C8294;
	sub_829F0940(ctx, base);
loc_829C8294:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,9096
	ctx.r7.s64 = ctx.r10.s64 + 9096;
	// lwz r11,-23416(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23416);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c82d0
	if (!ctx.cr6.eq) goto loc_829C82D0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b5a030
	ctx.lr = 0x829C82C8;
	sub_82B5A030(ctx, base);
	// stw r3,-23416(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23416, ctx.r3.u32);
	// bl 0x82b5a0e0
	ctx.lr = 0x829C82D0;
	sub_82B5A0E0(ctx, base);
loc_829C82D0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,9216
	ctx.r7.s64 = ctx.r10.s64 + 9216;
	// lwz r11,-24224(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24224);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c830c
	if (!ctx.cr6.eq) goto loc_829C830C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82adeee8
	ctx.lr = 0x829C8304;
	sub_82ADEEE8(ctx, base);
	// stw r3,-24224(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24224, ctx.r3.u32);
	// bl 0x82adef98
	ctx.lr = 0x829C830C;
	sub_82ADEF98(ctx, base);
loc_829C830C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25576(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25576);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c832c
	if (!ctx.cr6.eq) goto loc_829C832C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e72d0
	ctx.lr = 0x829C8324;
	sub_829E72D0(ctx, base);
	// stw r3,-25576(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25576, ctx.r3.u32);
	// bl 0x829e7380
	ctx.lr = 0x829C832C;
	sub_829E7380(ctx, base);
loc_829C832C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24764(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24764);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c834c
	if (!ctx.cr6.eq) goto loc_829C834C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8f7c0
	ctx.lr = 0x829C8344;
	sub_82A8F7C0(ctx, base);
	// stw r3,-24764(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24764, ctx.r3.u32);
	// bl 0x82a8f870
	ctx.lr = 0x829C834C;
	sub_82A8F870(ctx, base);
loc_829C834C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24216(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24216);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c836c
	if (!ctx.cr6.eq) goto loc_829C836C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae00b8
	ctx.lr = 0x829C8364;
	sub_82AE00B8(ctx, base);
	// stw r3,-24216(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24216, ctx.r3.u32);
	// bl 0x82ae0168
	ctx.lr = 0x829C836C;
	sub_82AE0168(ctx, base);
loc_829C836C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,9336
	ctx.r7.s64 = ctx.r10.s64 + 9336;
	// lwz r11,-24212(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24212);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c83a8
	if (!ctx.cr6.eq) goto loc_829C83A8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae02d8
	ctx.lr = 0x829C83A0;
	sub_82AE02D8(ctx, base);
	// stw r3,-24212(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24212, ctx.r3.u32);
	// bl 0x82ae0388
	ctx.lr = 0x829C83A8;
	sub_82AE0388(ctx, base);
loc_829C83A8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23976(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23976);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c83c8
	if (!ctx.cr6.eq) goto loc_829C83C8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aff860
	ctx.lr = 0x829C83C0;
	sub_82AFF860(ctx, base);
	// stw r3,-23976(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23976, ctx.r3.u32);
	// bl 0x82aff910
	ctx.lr = 0x829C83C8;
	sub_82AFF910(ctx, base);
loc_829C83C8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,9456
	ctx.r7.s64 = ctx.r10.s64 + 9456;
	// lwz r11,-23972(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23972);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8404
	if (!ctx.cr6.eq) goto loc_829C8404;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82affa80
	ctx.lr = 0x829C83FC;
	sub_82AFFA80(ctx, base);
	// stw r3,-23972(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23972, ctx.r3.u32);
	// bl 0x82affb30
	ctx.lr = 0x829C8404;
	sub_82AFFB30(ctx, base);
loc_829C8404:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,9576
	ctx.r7.s64 = ctx.r10.s64 + 9576;
	// lwz r11,-23980(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23980);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8440
	if (!ctx.cr6.eq) goto loc_829C8440;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aff640
	ctx.lr = 0x829C8438;
	sub_82AFF640(ctx, base);
	// stw r3,-23980(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23980, ctx.r3.u32);
	// bl 0x82aff6f0
	ctx.lr = 0x829C8440;
	sub_82AFF6F0(ctx, base);
loc_829C8440:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24508(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24508);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8460
	if (!ctx.cr6.eq) goto loc_829C8460;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aae6b0
	ctx.lr = 0x829C8458;
	sub_82AAE6B0(ctx, base);
	// stw r3,-24508(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24508, ctx.r3.u32);
	// bl 0x82aae760
	ctx.lr = 0x829C8460;
	sub_82AAE760(ctx, base);
loc_829C8460:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,9696
	ctx.r7.s64 = ctx.r10.s64 + 9696;
	// lwz r11,-24512(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24512);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c849c
	if (!ctx.cr6.eq) goto loc_829C849C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aae490
	ctx.lr = 0x829C8494;
	sub_82AAE490(ctx, base);
	// stw r3,-24512(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24512, ctx.r3.u32);
	// bl 0x82aae540
	ctx.lr = 0x829C849C;
	sub_82AAE540(ctx, base);
loc_829C849C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,9816
	ctx.r7.s64 = ctx.r10.s64 + 9816;
	// lwz r11,-23880(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23880);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c84d8
	if (!ctx.cr6.eq) goto loc_829C84D8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b0ad78
	ctx.lr = 0x829C84D0;
	sub_82B0AD78(ctx, base);
	// stw r3,-23880(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23880, ctx.r3.u32);
	// bl 0x82b0ae28
	ctx.lr = 0x829C84D8;
	sub_82B0AE28(ctx, base);
loc_829C84D8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,9936
	ctx.r7.s64 = ctx.r10.s64 + 9936;
	// lwz r11,-23540(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23540);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8514
	if (!ctx.cr6.eq) goto loc_829C8514;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b41508
	ctx.lr = 0x829C850C;
	sub_82B41508(ctx, base);
	// stw r3,-23540(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23540, ctx.r3.u32);
	// bl 0x82b415b8
	ctx.lr = 0x829C8514;
	sub_82B415B8(ctx, base);
loc_829C8514:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24496(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24496);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8534
	if (!ctx.cr6.eq) goto loc_829C8534;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aaed10
	ctx.lr = 0x829C852C;
	sub_82AAED10(ctx, base);
	// stw r3,-24496(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24496, ctx.r3.u32);
	// bl 0x82aaedc0
	ctx.lr = 0x829C8534;
	sub_82AAEDC0(ctx, base);
loc_829C8534:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,10056
	ctx.r7.s64 = ctx.r10.s64 + 10056;
	// lwz r11,-24524(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24524);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8570
	if (!ctx.cr6.eq) goto loc_829C8570;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aade30
	ctx.lr = 0x829C8568;
	sub_82AADE30(ctx, base);
	// stw r3,-24524(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24524, ctx.r3.u32);
	// bl 0x82aadee0
	ctx.lr = 0x829C8570;
	sub_82AADEE0(ctx, base);
loc_829C8570:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,10176
	ctx.r7.s64 = ctx.r10.s64 + 10176;
	// lwz r11,-24500(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24500);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c85ac
	if (!ctx.cr6.eq) goto loc_829C85AC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aaeaf0
	ctx.lr = 0x829C85A4;
	sub_82AAEAF0(ctx, base);
	// stw r3,-24500(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24500, ctx.r3.u32);
	// bl 0x82aaeba0
	ctx.lr = 0x829C85AC;
	sub_82AAEBA0(ctx, base);
loc_829C85AC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,10296
	ctx.r7.s64 = ctx.r10.s64 + 10296;
	// lwz r11,-24520(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24520);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c85e8
	if (!ctx.cr6.eq) goto loc_829C85E8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aae050
	ctx.lr = 0x829C85E0;
	sub_82AAE050(ctx, base);
	// stw r3,-24520(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24520, ctx.r3.u32);
	// bl 0x82aae100
	ctx.lr = 0x829C85E8;
	sub_82AAE100(ctx, base);
loc_829C85E8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,10416
	ctx.r7.s64 = ctx.r10.s64 + 10416;
	// lwz r11,-24488(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24488);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8624
	if (!ctx.cr6.eq) goto loc_829C8624;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ab4820
	ctx.lr = 0x829C861C;
	sub_82AB4820(ctx, base);
	// stw r3,-24488(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24488, ctx.r3.u32);
	// bl 0x82ab48d0
	ctx.lr = 0x829C8624;
	sub_82AB48D0(ctx, base);
loc_829C8624:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,10536
	ctx.r7.s64 = ctx.r10.s64 + 10536;
	// lwz r11,-24492(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24492);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8660
	if (!ctx.cr6.eq) goto loc_829C8660;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ab4600
	ctx.lr = 0x829C8658;
	sub_82AB4600(ctx, base);
	// stw r3,-24492(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24492, ctx.r3.u32);
	// bl 0x82ab46b0
	ctx.lr = 0x829C8660;
	sub_82AB46B0(ctx, base);
loc_829C8660:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,10656
	ctx.r7.s64 = ctx.r10.s64 + 10656;
	// lwz r11,-24484(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24484);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c869c
	if (!ctx.cr6.eq) goto loc_829C869C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ab4a40
	ctx.lr = 0x829C8694;
	sub_82AB4A40(ctx, base);
	// stw r3,-24484(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24484, ctx.r3.u32);
	// bl 0x82ab4af0
	ctx.lr = 0x829C869C;
	sub_82AB4AF0(ctx, base);
loc_829C869C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,10776
	ctx.r7.s64 = ctx.r10.s64 + 10776;
	// lwz r11,-24200(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24200);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c86d8
	if (!ctx.cr6.eq) goto loc_829C86D8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae0938
	ctx.lr = 0x829C86D0;
	sub_82AE0938(ctx, base);
	// stw r3,-24200(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24200, ctx.r3.u32);
	// bl 0x82ae09e8
	ctx.lr = 0x829C86D8;
	sub_82AE09E8(ctx, base);
loc_829C86D8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24396(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24396);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c86f8
	if (!ctx.cr6.eq) goto loc_829C86F8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac6108
	ctx.lr = 0x829C86F0;
	sub_82AC6108(ctx, base);
	// stw r3,-24396(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24396, ctx.r3.u32);
	// bl 0x82ac61b8
	ctx.lr = 0x829C86F8;
	sub_82AC61B8(ctx, base);
loc_829C86F8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,10896
	ctx.r7.s64 = ctx.r10.s64 + 10896;
	// lwz r11,-24392(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24392);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8734
	if (!ctx.cr6.eq) goto loc_829C8734;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ac6328
	ctx.lr = 0x829C872C;
	sub_82AC6328(ctx, base);
	// stw r3,-24392(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24392, ctx.r3.u32);
	// bl 0x82ac63d8
	ctx.lr = 0x829C8734;
	sub_82AC63D8(ctx, base);
loc_829C8734:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23840(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23840);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8754
	if (!ctx.cr6.eq) goto loc_829C8754;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b13f90
	ctx.lr = 0x829C874C;
	sub_82B13F90(ctx, base);
	// stw r3,-23840(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23840, ctx.r3.u32);
	// bl 0x82b14040
	ctx.lr = 0x829C8754;
	sub_82B14040(ctx, base);
loc_829C8754:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23836(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23836);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8774
	if (!ctx.cr6.eq) goto loc_829C8774;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b141b0
	ctx.lr = 0x829C876C;
	sub_82B141B0(ctx, base);
	// stw r3,-23836(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23836, ctx.r3.u32);
	// bl 0x82b14260
	ctx.lr = 0x829C8774;
	sub_82B14260(ctx, base);
loc_829C8774:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24516(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24516);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8794
	if (!ctx.cr6.eq) goto loc_829C8794;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aae270
	ctx.lr = 0x829C878C;
	sub_82AAE270(ctx, base);
	// stw r3,-24516(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24516, ctx.r3.u32);
	// bl 0x82aae320
	ctx.lr = 0x829C8794;
	sub_82AAE320(ctx, base);
loc_829C8794:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,11016
	ctx.r7.s64 = ctx.r10.s64 + 11016;
	// lwz r11,-24208(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24208);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c87d0
	if (!ctx.cr6.eq) goto loc_829C87D0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae04f8
	ctx.lr = 0x829C87C8;
	sub_82AE04F8(ctx, base);
	// stw r3,-24208(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24208, ctx.r3.u32);
	// bl 0x82ae05a8
	ctx.lr = 0x829C87D0;
	sub_82AE05A8(ctx, base);
loc_829C87D0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24196(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24196);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c87f0
	if (!ctx.cr6.eq) goto loc_829C87F0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae0b58
	ctx.lr = 0x829C87E8;
	sub_82AE0B58(ctx, base);
	// stw r3,-24196(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24196, ctx.r3.u32);
	// bl 0x82ae0c08
	ctx.lr = 0x829C87F0;
	sub_82AE0C08(ctx, base);
loc_829C87F0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,11136
	ctx.r7.s64 = ctx.r10.s64 + 11136;
	// lwz r11,-23816(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23816);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c882c
	if (!ctx.cr6.eq) goto loc_829C882C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b16700
	ctx.lr = 0x829C8824;
	sub_82B16700(ctx, base);
	// stw r3,-23816(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23816, ctx.r3.u32);
	// bl 0x82b167b0
	ctx.lr = 0x829C882C;
	sub_82B167B0(ctx, base);
loc_829C882C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,11256
	ctx.r7.s64 = ctx.r10.s64 + 11256;
	// lwz r11,-23812(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23812);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8868
	if (!ctx.cr6.eq) goto loc_829C8868;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b16920
	ctx.lr = 0x829C8860;
	sub_82B16920(ctx, base);
	// stw r3,-23812(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23812, ctx.r3.u32);
	// bl 0x82b169d0
	ctx.lr = 0x829C8868;
	sub_82B169D0(ctx, base);
loc_829C8868:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23568(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23568);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8888
	if (!ctx.cr6.eq) goto loc_829C8888;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b3d250
	ctx.lr = 0x829C8880;
	sub_82B3D250(ctx, base);
	// stw r3,-23568(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23568, ctx.r3.u32);
	// bl 0x82b3d300
	ctx.lr = 0x829C8888;
	sub_82B3D300(ctx, base);
loc_829C8888:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,11376
	ctx.r7.s64 = ctx.r10.s64 + 11376;
	// lwz r11,-24996(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24996);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c88c4
	if (!ctx.cr6.eq) goto loc_829C88C4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a724c0
	ctx.lr = 0x829C88BC;
	sub_82A724C0(ctx, base);
	// stw r3,-24996(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24996, ctx.r3.u32);
	// bl 0x82a72570
	ctx.lr = 0x829C88C4;
	sub_82A72570(ctx, base);
loc_829C88C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24992(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24992);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c88e4
	if (!ctx.cr6.eq) goto loc_829C88E4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a726e0
	ctx.lr = 0x829C88DC;
	sub_82A726E0(ctx, base);
	// stw r3,-24992(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24992, ctx.r3.u32);
	// bl 0x82a72790
	ctx.lr = 0x829C88E4;
	sub_82A72790(ctx, base);
loc_829C88E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24968(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24968);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8904
	if (!ctx.cr6.eq) goto loc_829C8904;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a733a0
	ctx.lr = 0x829C88FC;
	sub_82A733A0(ctx, base);
	// stw r3,-24968(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24968, ctx.r3.u32);
	// bl 0x82a73450
	ctx.lr = 0x829C8904;
	sub_82A73450(ctx, base);
loc_829C8904:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24964(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24964);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8924
	if (!ctx.cr6.eq) goto loc_829C8924;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a735c0
	ctx.lr = 0x829C891C;
	sub_82A735C0(ctx, base);
	// stw r3,-24964(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24964, ctx.r3.u32);
	// bl 0x82a73670
	ctx.lr = 0x829C8924;
	sub_82A73670(ctx, base);
loc_829C8924:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24952(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24952);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8944
	if (!ctx.cr6.eq) goto loc_829C8944;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a73c20
	ctx.lr = 0x829C893C;
	sub_82A73C20(ctx, base);
	// stw r3,-24952(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24952, ctx.r3.u32);
	// bl 0x82a73cd0
	ctx.lr = 0x829C8944;
	sub_82A73CD0(ctx, base);
loc_829C8944:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,11496
	ctx.r7.s64 = ctx.r10.s64 + 11496;
	// lwz r11,-24948(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24948);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8980
	if (!ctx.cr6.eq) goto loc_829C8980;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a73e40
	ctx.lr = 0x829C8978;
	sub_82A73E40(ctx, base);
	// stw r3,-24948(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24948, ctx.r3.u32);
	// bl 0x82a73ef0
	ctx.lr = 0x829C8980;
	sub_82A73EF0(ctx, base);
loc_829C8980:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24940(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24940);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c89a0
	if (!ctx.cr6.eq) goto loc_829C89A0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a74280
	ctx.lr = 0x829C8998;
	sub_82A74280(ctx, base);
	// stw r3,-24940(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24940, ctx.r3.u32);
	// bl 0x82a74330
	ctx.lr = 0x829C89A0;
	sub_82A74330(ctx, base);
loc_829C89A0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,11616
	ctx.r7.s64 = ctx.r10.s64 + 11616;
	// lwz r11,-24936(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24936);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c89dc
	if (!ctx.cr6.eq) goto loc_829C89DC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a744a0
	ctx.lr = 0x829C89D4;
	sub_82A744A0(ctx, base);
	// stw r3,-24936(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24936, ctx.r3.u32);
	// bl 0x82a74550
	ctx.lr = 0x829C89DC;
	sub_82A74550(ctx, base);
loc_829C89DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24932(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24932);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c89fc
	if (!ctx.cr6.eq) goto loc_829C89FC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a746c0
	ctx.lr = 0x829C89F4;
	sub_82A746C0(ctx, base);
	// stw r3,-24932(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24932, ctx.r3.u32);
	// bl 0x82a74770
	ctx.lr = 0x829C89FC;
	sub_82A74770(ctx, base);
loc_829C89FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24928(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24928);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8a1c
	if (!ctx.cr6.eq) goto loc_829C8A1C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a748e0
	ctx.lr = 0x829C8A14;
	sub_82A748E0(ctx, base);
	// stw r3,-24928(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24928, ctx.r3.u32);
	// bl 0x82a74990
	ctx.lr = 0x829C8A1C;
	sub_82A74990(ctx, base);
loc_829C8A1C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23876(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23876);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8a3c
	if (!ctx.cr6.eq) goto loc_829C8A3C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b0cf08
	ctx.lr = 0x829C8A34;
	sub_82B0CF08(ctx, base);
	// stw r3,-23876(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23876, ctx.r3.u32);
	// bl 0x82b0cfb8
	ctx.lr = 0x829C8A3C;
	sub_82B0CFB8(ctx, base);
loc_829C8A3C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23652(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23652);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8a5c
	if (!ctx.cr6.eq) goto loc_829C8A5C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b308b0
	ctx.lr = 0x829C8A54;
	sub_82B308B0(ctx, base);
	// stw r3,-23652(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23652, ctx.r3.u32);
	// bl 0x82b30960
	ctx.lr = 0x829C8A5C;
	sub_82B30960(ctx, base);
loc_829C8A5C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23992(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23992);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8a7c
	if (!ctx.cr6.eq) goto loc_829C8A7C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82afe2c8
	ctx.lr = 0x829C8A74;
	sub_82AFE2C8(ctx, base);
	// stw r3,-23992(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23992, ctx.r3.u32);
	// bl 0x82afe378
	ctx.lr = 0x829C8A7C;
	sub_82AFE378(ctx, base);
loc_829C8A7C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14136
	ctx.r7.s64 = ctx.r10.s64 + 14136;
	// lwz r11,-25544(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25544);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8ab8
	if (!ctx.cr6.eq) goto loc_829C8AB8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829fdb98
	ctx.lr = 0x829C8AB0;
	sub_829FDB98(ctx, base);
	// stw r3,-25544(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25544, ctx.r3.u32);
	// bl 0x829fdc48
	ctx.lr = 0x829C8AB8;
	sub_829FDC48(ctx, base);
loc_829C8AB8:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14256
	ctx.r7.s64 = ctx.r10.s64 + 14256;
	// lwz r11,-24096(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24096);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8af4
	if (!ctx.cr6.eq) goto loc_829C8AF4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aee2f8
	ctx.lr = 0x829C8AEC;
	sub_82AEE2F8(ctx, base);
	// stw r3,-24096(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24096, ctx.r3.u32);
	// bl 0x82aee3a8
	ctx.lr = 0x829C8AF4;
	sub_82AEE3A8(ctx, base);
loc_829C8AF4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25536(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25536);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8b14
	if (!ctx.cr6.eq) goto loc_829C8B14;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829fdfd8
	ctx.lr = 0x829C8B0C;
	sub_829FDFD8(ctx, base);
	// stw r3,-25536(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25536, ctx.r3.u32);
	// bl 0x829fe088
	ctx.lr = 0x829C8B14;
	sub_829FE088(ctx, base);
loc_829C8B14:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24100);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8b34
	if (!ctx.cr6.eq) goto loc_829C8B34;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aee0d8
	ctx.lr = 0x829C8B2C;
	sub_82AEE0D8(ctx, base);
	// stw r3,-24100(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24100, ctx.r3.u32);
	// bl 0x82aee188
	ctx.lr = 0x829C8B34;
	sub_82AEE188(ctx, base);
loc_829C8B34:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14376
	ctx.r7.s64 = ctx.r10.s64 + 14376;
	// lwz r11,-24180(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24180);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8b70
	if (!ctx.cr6.eq) goto loc_829C8B70;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae31b0
	ctx.lr = 0x829C8B68;
	sub_82AE31B0(ctx, base);
	// stw r3,-24180(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24180, ctx.r3.u32);
	// bl 0x82ae3260
	ctx.lr = 0x829C8B70;
	sub_82AE3260(ctx, base);
loc_829C8B70:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25628(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25628);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8b90
	if (!ctx.cr6.eq) goto loc_829C8B90;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829e1ed0
	ctx.lr = 0x829C8B88;
	sub_829E1ED0(ctx, base);
	// stw r3,-25628(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25628, ctx.r3.u32);
	// bl 0x829e1f80
	ctx.lr = 0x829C8B90;
	sub_829E1F80(ctx, base);
loc_829C8B90:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14496
	ctx.r7.s64 = ctx.r10.s64 + 14496;
	// lwz r11,-24184(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24184);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8bcc
	if (!ctx.cr6.eq) goto loc_829C8BCC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae2f90
	ctx.lr = 0x829C8BC4;
	sub_82AE2F90(ctx, base);
	// stw r3,-24184(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24184, ctx.r3.u32);
	// bl 0x82ae3040
	ctx.lr = 0x829C8BCC;
	sub_82AE3040(ctx, base);
loc_829C8BCC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14616
	ctx.r7.s64 = ctx.r10.s64 + 14616;
	// lwz r11,-24104(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24104);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8c08
	if (!ctx.cr6.eq) goto loc_829C8C08;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aedeb8
	ctx.lr = 0x829C8C00;
	sub_82AEDEB8(ctx, base);
	// stw r3,-24104(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24104, ctx.r3.u32);
	// bl 0x82aedf68
	ctx.lr = 0x829C8C08;
	sub_82AEDF68(ctx, base);
loc_829C8C08:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14736
	ctx.r7.s64 = ctx.r10.s64 + 14736;
	// lwz r11,-25540(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25540);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8c44
	if (!ctx.cr6.eq) goto loc_829C8C44;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829fddb8
	ctx.lr = 0x829C8C3C;
	sub_829FDDB8(ctx, base);
	// stw r3,-25540(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25540, ctx.r3.u32);
	// bl 0x829fde68
	ctx.lr = 0x829C8C44;
	sub_829FDE68(ctx, base);
loc_829C8C44:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14856
	ctx.r7.s64 = ctx.r10.s64 + 14856;
	// lwz r11,-24448(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24448);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8c80
	if (!ctx.cr6.eq) goto loc_829C8C80;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82abd2f8
	ctx.lr = 0x829C8C78;
	sub_82ABD2F8(ctx, base);
	// stw r3,-24448(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24448, ctx.r3.u32);
	// bl 0x82abd3a8
	ctx.lr = 0x829C8C80;
	sub_82ABD3A8(ctx, base);
loc_829C8C80:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24444(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24444);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8ca0
	if (!ctx.cr6.eq) goto loc_829C8CA0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82abd518
	ctx.lr = 0x829C8C98;
	sub_82ABD518(ctx, base);
	// stw r3,-24444(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24444, ctx.r3.u32);
	// bl 0x82abd5c8
	ctx.lr = 0x829C8CA0;
	sub_82ABD5C8(ctx, base);
loc_829C8CA0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25380(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25380);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8cc0
	if (!ctx.cr6.eq) goto loc_829C8CC0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a28808
	ctx.lr = 0x829C8CB8;
	sub_82A28808(ctx, base);
	// stw r3,-25380(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25380, ctx.r3.u32);
	// bl 0x82a288b8
	ctx.lr = 0x829C8CC0;
	sub_82A288B8(ctx, base);
loc_829C8CC0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14976
	ctx.r7.s64 = ctx.r10.s64 + 14976;
	// lwz r11,-25384(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25384);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8cfc
	if (!ctx.cr6.eq) goto loc_829C8CFC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a285e8
	ctx.lr = 0x829C8CF4;
	sub_82A285E8(ctx, base);
	// stw r3,-25384(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25384, ctx.r3.u32);
	// bl 0x82a28698
	ctx.lr = 0x829C8CFC;
	sub_82A28698(ctx, base);
loc_829C8CFC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15096
	ctx.r7.s64 = ctx.r10.s64 + 15096;
	// lwz r11,-25252(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25252);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8d38
	if (!ctx.cr6.eq) goto loc_829C8D38;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a46bd8
	ctx.lr = 0x829C8D30;
	sub_82A46BD8(ctx, base);
	// stw r3,-25252(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25252, ctx.r3.u32);
	// bl 0x82a46c88
	ctx.lr = 0x829C8D38;
	sub_82A46C88(ctx, base);
loc_829C8D38:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15216
	ctx.r7.s64 = ctx.r10.s64 + 15216;
	// lwz r11,-23476(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23476);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8d74
	if (!ctx.cr6.eq) goto loc_829C8D74;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b4d6e0
	ctx.lr = 0x829C8D6C;
	sub_82B4D6E0(ctx, base);
	// stw r3,-23476(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23476, ctx.r3.u32);
	// bl 0x82b4d790
	ctx.lr = 0x829C8D74;
	sub_82B4D790(ctx, base);
loc_829C8D74:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23788(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23788);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8d94
	if (!ctx.cr6.eq) goto loc_829C8D94;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b1a048
	ctx.lr = 0x829C8D8C;
	sub_82B1A048(ctx, base);
	// stw r3,-23788(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23788, ctx.r3.u32);
	// bl 0x82b1a0f8
	ctx.lr = 0x829C8D94;
	sub_82B1A0F8(ctx, base);
loc_829C8D94:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23636(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23636);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8db4
	if (!ctx.cr6.eq) goto loc_829C8DB4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b32c20
	ctx.lr = 0x829C8DAC;
	sub_82B32C20(ctx, base);
	// stw r3,-23636(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23636, ctx.r3.u32);
	// bl 0x82b32cd0
	ctx.lr = 0x829C8DB4;
	sub_82B32CD0(ctx, base);
loc_829C8DB4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24760(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24760);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8dd4
	if (!ctx.cr6.eq) goto loc_829C8DD4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8fce8
	ctx.lr = 0x829C8DCC;
	sub_82A8FCE8(ctx, base);
	// stw r3,-24760(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24760, ctx.r3.u32);
	// bl 0x82a8fd98
	ctx.lr = 0x829C8DD4;
	sub_82A8FD98(ctx, base);
loc_829C8DD4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23524(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23524);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8df4
	if (!ctx.cr6.eq) goto loc_829C8DF4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b46160
	ctx.lr = 0x829C8DEC;
	sub_82B46160(ctx, base);
	// stw r3,-23524(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23524, ctx.r3.u32);
	// bl 0x82b46210
	ctx.lr = 0x829C8DF4;
	sub_82B46210(ctx, base);
loc_829C8DF4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24304(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24304);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8e14
	if (!ctx.cr6.eq) goto loc_829C8E14;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad1890
	ctx.lr = 0x829C8E0C;
	sub_82AD1890(ctx, base);
	// stw r3,-24304(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24304, ctx.r3.u32);
	// bl 0x82ad1940
	ctx.lr = 0x829C8E14;
	sub_82AD1940(ctx, base);
loc_829C8E14:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24796(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24796);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8e34
	if (!ctx.cr6.eq) goto loc_829C8E34;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8bdf0
	ctx.lr = 0x829C8E2C;
	sub_82A8BDF0(ctx, base);
	// stw r3,-24796(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24796, ctx.r3.u32);
	// bl 0x82a8bea0
	ctx.lr = 0x829C8E34;
	sub_82A8BEA0(ctx, base);
loc_829C8E34:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24480(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24480);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8e54
	if (!ctx.cr6.eq) goto loc_829C8E54;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ab9f78
	ctx.lr = 0x829C8E4C;
	sub_82AB9F78(ctx, base);
	// stw r3,-24480(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24480, ctx.r3.u32);
	// bl 0x82aba028
	ctx.lr = 0x829C8E54;
	sub_82ABA028(ctx, base);
loc_829C8E54:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23616(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23616);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8e74
	if (!ctx.cr6.eq) goto loc_829C8E74;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b36e40
	ctx.lr = 0x829C8E6C;
	sub_82B36E40(ctx, base);
	// stw r3,-23616(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23616, ctx.r3.u32);
	// bl 0x82b36ef0
	ctx.lr = 0x829C8E74;
	sub_82B36EF0(ctx, base);
loc_829C8E74:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23764(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23764);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8e94
	if (!ctx.cr6.eq) goto loc_829C8E94;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b1f738
	ctx.lr = 0x829C8E8C;
	sub_82B1F738(ctx, base);
	// stw r3,-23764(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23764, ctx.r3.u32);
	// bl 0x82b1f7e8
	ctx.lr = 0x829C8E94;
	sub_82B1F7E8(ctx, base);
loc_829C8E94:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24748(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24748);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8eb4
	if (!ctx.cr6.eq) goto loc_829C8EB4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a90348
	ctx.lr = 0x829C8EAC;
	sub_82A90348(ctx, base);
	// stw r3,-24748(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24748, ctx.r3.u32);
	// bl 0x82a903f8
	ctx.lr = 0x829C8EB4;
	sub_82A903F8(ctx, base);
loc_829C8EB4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24296(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24296);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8ed4
	if (!ctx.cr6.eq) goto loc_829C8ED4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad2c68
	ctx.lr = 0x829C8ECC;
	sub_82AD2C68(ctx, base);
	// stw r3,-24296(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24296, ctx.r3.u32);
	// bl 0x82ad2d18
	ctx.lr = 0x829C8ED4;
	sub_82AD2D18(ctx, base);
loc_829C8ED4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,11736
	ctx.r7.s64 = ctx.r10.s64 + 11736;
	// lwz r11,-24696(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24696);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8f10
	if (!ctx.cr6.eq) goto loc_829C8F10;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a967b8
	ctx.lr = 0x829C8F08;
	sub_82A967B8(ctx, base);
	// stw r3,-24696(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24696, ctx.r3.u32);
	// bl 0x82a96868
	ctx.lr = 0x829C8F10;
	sub_82A96868(ctx, base);
loc_829C8F10:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24704(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24704);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8f30
	if (!ctx.cr6.eq) goto loc_829C8F30;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a96378
	ctx.lr = 0x829C8F28;
	sub_82A96378(ctx, base);
	// stw r3,-24704(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24704, ctx.r3.u32);
	// bl 0x82a96428
	ctx.lr = 0x829C8F30;
	sub_82A96428(ctx, base);
loc_829C8F30:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23848(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23848);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8f50
	if (!ctx.cr6.eq) goto loc_829C8F50;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b0fd98
	ctx.lr = 0x829C8F48;
	sub_82B0FD98(ctx, base);
	// stw r3,-23848(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23848, ctx.r3.u32);
	// bl 0x82b0fe48
	ctx.lr = 0x829C8F50;
	sub_82B0FE48(ctx, base);
loc_829C8F50:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,11856
	ctx.r7.s64 = ctx.r10.s64 + 11856;
	// lwz r11,-23564(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23564);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8f8c
	if (!ctx.cr6.eq) goto loc_829C8F8C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b3d988
	ctx.lr = 0x829C8F84;
	sub_82B3D988(ctx, base);
	// stw r3,-23564(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23564, ctx.r3.u32);
	// bl 0x82b3da38
	ctx.lr = 0x829C8F8C;
	sub_82B3DA38(ctx, base);
loc_829C8F8C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,11976
	ctx.r7.s64 = ctx.r10.s64 + 11976;
	// lwz r11,-25176(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25176);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c8fc8
	if (!ctx.cr6.eq) goto loc_829C8FC8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4e8f0
	ctx.lr = 0x829C8FC0;
	sub_82A4E8F0(ctx, base);
	// stw r3,-25176(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25176, ctx.r3.u32);
	// bl 0x82a4e9a0
	ctx.lr = 0x829C8FC8;
	sub_82A4E9A0(ctx, base);
loc_829C8FC8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23424(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23424);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c8fe8
	if (!ctx.cr6.eq) goto loc_829C8FE8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b598f8
	ctx.lr = 0x829C8FE0;
	sub_82B598F8(ctx, base);
	// stw r3,-23424(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23424, ctx.r3.u32);
	// bl 0x82b599a8
	ctx.lr = 0x829C8FE8;
	sub_82B599A8(ctx, base);
loc_829C8FE8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25172(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25172);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9008
	if (!ctx.cr6.eq) goto loc_829C9008;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4eb10
	ctx.lr = 0x829C9000;
	sub_82A4EB10(ctx, base);
	// stw r3,-25172(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25172, ctx.r3.u32);
	// bl 0x82a4ebc0
	ctx.lr = 0x829C9008;
	sub_82A4EBC0(ctx, base);
loc_829C9008:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23732(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23732);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9028
	if (!ctx.cr6.eq) goto loc_829C9028;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b250e0
	ctx.lr = 0x829C9020;
	sub_82B250E0(ctx, base);
	// stw r3,-23732(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23732, ctx.r3.u32);
	// bl 0x82b25190
	ctx.lr = 0x829C9028;
	sub_82B25190(ctx, base);
loc_829C9028:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23728(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23728);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9048
	if (!ctx.cr6.eq) goto loc_829C9048;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b25300
	ctx.lr = 0x829C9040;
	sub_82B25300(ctx, base);
	// stw r3,-23728(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23728, ctx.r3.u32);
	// bl 0x82b253b0
	ctx.lr = 0x829C9048;
	sub_82B253B0(ctx, base);
loc_829C9048:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24188(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24188);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9068
	if (!ctx.cr6.eq) goto loc_829C9068;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae2a00
	ctx.lr = 0x829C9060;
	sub_82AE2A00(ctx, base);
	// stw r3,-24188(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24188, ctx.r3.u32);
	// bl 0x82ae2ab0
	ctx.lr = 0x829C9068;
	sub_82AE2AB0(ctx, base);
loc_829C9068:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24776(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24776);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9088
	if (!ctx.cr6.eq) goto loc_829C9088;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8ec08
	ctx.lr = 0x829C9080;
	sub_82A8EC08(ctx, base);
	// stw r3,-24776(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24776, ctx.r3.u32);
	// bl 0x82a8ecb8
	ctx.lr = 0x829C9088;
	sub_82A8ECB8(ctx, base);
loc_829C9088:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24084(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24084);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c90a8
	if (!ctx.cr6.eq) goto loc_829C90A8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82af8368
	ctx.lr = 0x829C90A0;
	sub_82AF8368(ctx, base);
	// stw r3,-24084(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24084, ctx.r3.u32);
	// bl 0x82af8418
	ctx.lr = 0x829C90A8;
	sub_82AF8418(ctx, base);
loc_829C90A8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23544(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23544);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c90c8
	if (!ctx.cr6.eq) goto loc_829C90C8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b40e28
	ctx.lr = 0x829C90C0;
	sub_82B40E28(ctx, base);
	// stw r3,-23544(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23544, ctx.r3.u32);
	// bl 0x82b40ed8
	ctx.lr = 0x829C90C8;
	sub_82B40ED8(ctx, base);
loc_829C90C8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24248(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24248);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c90e8
	if (!ctx.cr6.eq) goto loc_829C90E8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82add960
	ctx.lr = 0x829C90E0;
	sub_82ADD960(ctx, base);
	// stw r3,-24248(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24248, ctx.r3.u32);
	// bl 0x82adda10
	ctx.lr = 0x829C90E8;
	sub_82ADDA10(ctx, base);
loc_829C90E8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24068(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24068);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9108
	if (!ctx.cr6.eq) goto loc_829C9108;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82af94f0
	ctx.lr = 0x829C9100;
	sub_82AF94F0(ctx, base);
	// stw r3,-24068(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24068, ctx.r3.u32);
	// bl 0x82af95a0
	ctx.lr = 0x829C9108;
	sub_82AF95A0(ctx, base);
loc_829C9108:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24312(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24312);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9128
	if (!ctx.cr6.eq) goto loc_829C9128;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad1450
	ctx.lr = 0x829C9120;
	sub_82AD1450(ctx, base);
	// stw r3,-24312(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24312, ctx.r3.u32);
	// bl 0x82ad1500
	ctx.lr = 0x829C9128;
	sub_82AD1500(ctx, base);
loc_829C9128:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23632(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23632);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9148
	if (!ctx.cr6.eq) goto loc_829C9148;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b33438
	ctx.lr = 0x829C9140;
	sub_82B33438(ctx, base);
	// stw r3,-23632(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23632, ctx.r3.u32);
	// bl 0x82b334e8
	ctx.lr = 0x829C9148;
	sub_82B334E8(ctx, base);
loc_829C9148:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23608(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23608);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9168
	if (!ctx.cr6.eq) goto loc_829C9168;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b38050
	ctx.lr = 0x829C9160;
	sub_82B38050(ctx, base);
	// stw r3,-23608(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23608, ctx.r3.u32);
	// bl 0x82b38100
	ctx.lr = 0x829C9168;
	sub_82B38100(ctx, base);
loc_829C9168:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23468(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23468);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9188
	if (!ctx.cr6.eq) goto loc_829C9188;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b4f318
	ctx.lr = 0x829C9180;
	sub_82B4F318(ctx, base);
	// stw r3,-23468(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23468, ctx.r3.u32);
	// bl 0x82b4f3c8
	ctx.lr = 0x829C9188;
	sub_82B4F3C8(ctx, base);
loc_829C9188:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24300(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24300);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c91a8
	if (!ctx.cr6.eq) goto loc_829C91A8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad25c8
	ctx.lr = 0x829C91A0;
	sub_82AD25C8(ctx, base);
	// stw r3,-24300(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24300, ctx.r3.u32);
	// bl 0x82ad2678
	ctx.lr = 0x829C91A8;
	sub_82AD2678(ctx, base);
loc_829C91A8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24744(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24744);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c91c8
	if (!ctx.cr6.eq) goto loc_829C91C8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a90568
	ctx.lr = 0x829C91C0;
	sub_82A90568(ctx, base);
	// stw r3,-24744(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24744, ctx.r3.u32);
	// bl 0x82a90618
	ctx.lr = 0x829C91C8;
	sub_82A90618(ctx, base);
loc_829C91C8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24752(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24752);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c91e8
	if (!ctx.cr6.eq) goto loc_829C91E8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a90128
	ctx.lr = 0x829C91E0;
	sub_82A90128(ctx, base);
	// stw r3,-24752(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24752, ctx.r3.u32);
	// bl 0x82a901d8
	ctx.lr = 0x829C91E8;
	sub_82A901D8(ctx, base);
loc_829C91E8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23588(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23588);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9208
	if (!ctx.cr6.eq) goto loc_829C9208;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b3a178
	ctx.lr = 0x829C9200;
	sub_82B3A178(ctx, base);
	// stw r3,-23588(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23588, ctx.r3.u32);
	// bl 0x82b3a228
	ctx.lr = 0x829C9208;
	sub_82B3A228(ctx, base);
loc_829C9208:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25148(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25148);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9228
	if (!ctx.cr6.eq) goto loc_829C9228;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a60788
	ctx.lr = 0x829C9220;
	sub_82A60788(ctx, base);
	// stw r3,-25148(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25148, ctx.r3.u32);
	// bl 0x82a60838
	ctx.lr = 0x829C9228;
	sub_82A60838(ctx, base);
loc_829C9228:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23592(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23592);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9248
	if (!ctx.cr6.eq) goto loc_829C9248;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b38fc8
	ctx.lr = 0x829C9240;
	sub_82B38FC8(ctx, base);
	// stw r3,-23592(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23592, ctx.r3.u32);
	// bl 0x82b39078
	ctx.lr = 0x829C9248;
	sub_82B39078(ctx, base);
loc_829C9248:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23736(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23736);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9268
	if (!ctx.cr6.eq) goto loc_829C9268;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b24430
	ctx.lr = 0x829C9260;
	sub_82B24430(ctx, base);
	// stw r3,-23736(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23736, ctx.r3.u32);
	// bl 0x82b244e0
	ctx.lr = 0x829C9268;
	sub_82B244E0(ctx, base);
loc_829C9268:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24308(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24308);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9288
	if (!ctx.cr6.eq) goto loc_829C9288;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad1670
	ctx.lr = 0x829C9280;
	sub_82AD1670(ctx, base);
	// stw r3,-24308(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24308, ctx.r3.u32);
	// bl 0x82ad1720
	ctx.lr = 0x829C9288;
	sub_82AD1720(ctx, base);
loc_829C9288:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25788(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25788);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c92a8
	if (!ctx.cr6.eq) goto loc_829C92A8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d08a8
	ctx.lr = 0x829C92A0;
	sub_829D08A8(ctx, base);
	// stw r3,-25788(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25788, ctx.r3.u32);
	// bl 0x829d0958
	ctx.lr = 0x829C92A8;
	sub_829D0958(ctx, base);
loc_829C92A8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24168(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24168);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c92c8
	if (!ctx.cr6.eq) goto loc_829C92C8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae78b8
	ctx.lr = 0x829C92C0;
	sub_82AE78B8(ctx, base);
	// stw r3,-24168(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24168, ctx.r3.u32);
	// bl 0x82ae7968
	ctx.lr = 0x829C92C8;
	sub_82AE7968(ctx, base);
loc_829C92C8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25156(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25156);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c92e8
	if (!ctx.cr6.eq) goto loc_829C92E8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a60348
	ctx.lr = 0x829C92E0;
	sub_82A60348(ctx, base);
	// stw r3,-25156(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25156, ctx.r3.u32);
	// bl 0x82a603f8
	ctx.lr = 0x829C92E8;
	sub_82A603F8(ctx, base);
loc_829C92E8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25152(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25152);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9308
	if (!ctx.cr6.eq) goto loc_829C9308;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a60568
	ctx.lr = 0x829C9300;
	sub_82A60568(ctx, base);
	// stw r3,-25152(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25152, ctx.r3.u32);
	// bl 0x82a60618
	ctx.lr = 0x829C9308;
	sub_82A60618(ctx, base);
loc_829C9308:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25140(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25140);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9328
	if (!ctx.cr6.eq) goto loc_829C9328;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a60bc8
	ctx.lr = 0x829C9320;
	sub_82A60BC8(ctx, base);
	// stw r3,-25140(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25140, ctx.r3.u32);
	// bl 0x82a60c78
	ctx.lr = 0x829C9328;
	sub_82A60C78(ctx, base);
loc_829C9328:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12096
	ctx.r7.s64 = ctx.r10.s64 + 12096;
	// lwz r11,-25144(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25144);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9364
	if (!ctx.cr6.eq) goto loc_829C9364;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a609a8
	ctx.lr = 0x829C935C;
	sub_82A609A8(ctx, base);
	// stw r3,-25144(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25144, ctx.r3.u32);
	// bl 0x82a60a58
	ctx.lr = 0x829C9364;
	sub_82A60A58(ctx, base);
loc_829C9364:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12216
	ctx.r7.s64 = ctx.r10.s64 + 12216;
	// lwz r11,-23492(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23492);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c93a0
	if (!ctx.cr6.eq) goto loc_829C93A0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b4b5f0
	ctx.lr = 0x829C9398;
	sub_82B4B5F0(ctx, base);
	// stw r3,-23492(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23492, ctx.r3.u32);
	// bl 0x82b4b6a0
	ctx.lr = 0x829C93A0;
	sub_82B4B6A0(ctx, base);
loc_829C93A0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23832(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23832);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c93c0
	if (!ctx.cr6.eq) goto loc_829C93C0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b15298
	ctx.lr = 0x829C93B8;
	sub_82B15298(ctx, base);
	// stw r3,-23832(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23832, ctx.r3.u32);
	// bl 0x82b15348
	ctx.lr = 0x829C93C0;
	sub_82B15348(ctx, base);
loc_829C93C0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23824(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23824);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c93e0
	if (!ctx.cr6.eq) goto loc_829C93E0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b156d8
	ctx.lr = 0x829C93D8;
	sub_82B156D8(ctx, base);
	// stw r3,-23824(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23824, ctx.r3.u32);
	// bl 0x82b15788
	ctx.lr = 0x829C93E0;
	sub_82B15788(ctx, base);
loc_829C93E0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25792(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25792);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9400
	if (!ctx.cr6.eq) goto loc_829C9400;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d0688
	ctx.lr = 0x829C93F8;
	sub_829D0688(ctx, base);
	// stw r3,-25792(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25792, ctx.r3.u32);
	// bl 0x829d0738
	ctx.lr = 0x829C9400;
	sub_829D0738(ctx, base);
loc_829C9400:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23828(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23828);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9420
	if (!ctx.cr6.eq) goto loc_829C9420;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b154b8
	ctx.lr = 0x829C9418;
	sub_82B154B8(ctx, base);
	// stw r3,-23828(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23828, ctx.r3.u32);
	// bl 0x82b15568
	ctx.lr = 0x829C9420;
	sub_82B15568(ctx, base);
loc_829C9420:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25248(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25248);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9440
	if (!ctx.cr6.eq) goto loc_829C9440;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a49018
	ctx.lr = 0x829C9438;
	sub_82A49018(ctx, base);
	// stw r3,-25248(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25248, ctx.r3.u32);
	// bl 0x82a490c8
	ctx.lr = 0x829C9440;
	sub_82A490C8(ctx, base);
loc_829C9440:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24756(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24756);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9460
	if (!ctx.cr6.eq) goto loc_829C9460;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8ff08
	ctx.lr = 0x829C9458;
	sub_82A8FF08(ctx, base);
	// stw r3,-24756(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24756, ctx.r3.u32);
	// bl 0x82a8ffb8
	ctx.lr = 0x829C9460;
	sub_82A8FFB8(ctx, base);
loc_829C9460:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23772(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23772);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9480
	if (!ctx.cr6.eq) goto loc_829C9480;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b1f070
	ctx.lr = 0x829C9478;
	sub_82B1F070(ctx, base);
	// stw r3,-23772(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23772, ctx.r3.u32);
	// bl 0x82b1f120
	ctx.lr = 0x829C9480;
	sub_82B1F120(ctx, base);
loc_829C9480:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12336
	ctx.r7.s64 = ctx.r10.s64 + 12336;
	// lwz r11,-23996(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23996);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c94bc
	if (!ctx.cr6.eq) goto loc_829C94BC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82afddd0
	ctx.lr = 0x829C94B4;
	sub_82AFDDD0(ctx, base);
	// stw r3,-23996(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23996, ctx.r3.u32);
	// bl 0x82afde80
	ctx.lr = 0x829C94BC;
	sub_82AFDE80(ctx, base);
loc_829C94BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23744(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23744);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c94dc
	if (!ctx.cr6.eq) goto loc_829C94DC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b23780
	ctx.lr = 0x829C94D4;
	sub_82B23780(ctx, base);
	// stw r3,-23744(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23744, ctx.r3.u32);
	// bl 0x82b23830
	ctx.lr = 0x829C94DC;
	sub_82B23830(ctx, base);
loc_829C94DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23516(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23516);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c94fc
	if (!ctx.cr6.eq) goto loc_829C94FC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b468f8
	ctx.lr = 0x829C94F4;
	sub_82B468F8(ctx, base);
	// stw r3,-23516(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23516, ctx.r3.u32);
	// bl 0x82b469a8
	ctx.lr = 0x829C94FC;
	sub_82B469A8(ctx, base);
loc_829C94FC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12456
	ctx.r7.s64 = ctx.r10.s64 + 12456;
	// lwz r11,-23644(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23644);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9538
	if (!ctx.cr6.eq) goto loc_829C9538;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b32330
	ctx.lr = 0x829C9530;
	sub_82B32330(ctx, base);
	// stw r3,-23644(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23644, ctx.r3.u32);
	// bl 0x82b323e0
	ctx.lr = 0x829C9538;
	sub_82B323E0(ctx, base);
loc_829C9538:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25084(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25084);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9558
	if (!ctx.cr6.eq) goto loc_829C9558;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a66fb0
	ctx.lr = 0x829C9550;
	sub_82A66FB0(ctx, base);
	// stw r3,-25084(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25084, ctx.r3.u32);
	// bl 0x82a67060
	ctx.lr = 0x829C9558;
	sub_82A67060(ctx, base);
loc_829C9558:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12576
	ctx.r7.s64 = ctx.r10.s64 + 12576;
	// lwz r11,-25784(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25784);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9594
	if (!ctx.cr6.eq) goto loc_829C9594;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d0ac8
	ctx.lr = 0x829C958C;
	sub_829D0AC8(ctx, base);
	// stw r3,-25784(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25784, ctx.r3.u32);
	// bl 0x829d0b78
	ctx.lr = 0x829C9594;
	sub_829D0B78(ctx, base);
loc_829C9594:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25208(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25208);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c95b4
	if (!ctx.cr6.eq) goto loc_829C95B4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4c128
	ctx.lr = 0x829C95AC;
	sub_82A4C128(ctx, base);
	// stw r3,-25208(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25208, ctx.r3.u32);
	// bl 0x82a4c1d8
	ctx.lr = 0x829C95B4;
	sub_82A4C1D8(ctx, base);
loc_829C95B4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23748(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23748);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c95d4
	if (!ctx.cr6.eq) goto loc_829C95D4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b23420
	ctx.lr = 0x829C95CC;
	sub_82B23420(ctx, base);
	// stw r3,-23748(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23748, ctx.r3.u32);
	// bl 0x82b234d0
	ctx.lr = 0x829C95D4;
	sub_82B234D0(ctx, base);
loc_829C95D4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23532(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23532);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c95f4
	if (!ctx.cr6.eq) goto loc_829C95F4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b429d0
	ctx.lr = 0x829C95EC;
	sub_82B429D0(ctx, base);
	// stw r3,-23532(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23532, ctx.r3.u32);
	// bl 0x82b42a80
	ctx.lr = 0x829C95F4;
	sub_82B42A80(ctx, base);
loc_829C95F4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12696
	ctx.r7.s64 = ctx.r10.s64 + 12696;
	// lwz r11,-25212(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25212);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9630
	if (!ctx.cr6.eq) goto loc_829C9630;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4b3a8
	ctx.lr = 0x829C9628;
	sub_82A4B3A8(ctx, base);
	// stw r3,-25212(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25212, ctx.r3.u32);
	// bl 0x82a4b458
	ctx.lr = 0x829C9630;
	sub_82A4B458(ctx, base);
loc_829C9630:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25216(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25216);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9650
	if (!ctx.cr6.eq) goto loc_829C9650;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4b188
	ctx.lr = 0x829C9648;
	sub_82A4B188(ctx, base);
	// stw r3,-25216(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25216, ctx.r3.u32);
	// bl 0x82a4b238
	ctx.lr = 0x829C9650;
	sub_82A4B238(ctx, base);
loc_829C9650:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25200(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25200);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9670
	if (!ctx.cr6.eq) goto loc_829C9670;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4c568
	ctx.lr = 0x829C9668;
	sub_82A4C568(ctx, base);
	// stw r3,-25200(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25200, ctx.r3.u32);
	// bl 0x82a4c618
	ctx.lr = 0x829C9670;
	sub_82A4C618(ctx, base);
loc_829C9670:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23808(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23808);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9690
	if (!ctx.cr6.eq) goto loc_829C9690;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b17af8
	ctx.lr = 0x829C9688;
	sub_82B17AF8(ctx, base);
	// stw r3,-23808(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23808, ctx.r3.u32);
	// bl 0x82b17ba8
	ctx.lr = 0x829C9690;
	sub_82B17BA8(ctx, base);
loc_829C9690:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25100);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c96b0
	if (!ctx.cr6.eq) goto loc_829C96B0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a64ff8
	ctx.lr = 0x829C96A8;
	sub_82A64FF8(ctx, base);
	// stw r3,-25100(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25100, ctx.r3.u32);
	// bl 0x82a650a8
	ctx.lr = 0x829C96B0;
	sub_82A650A8(ctx, base);
loc_829C96B0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12816
	ctx.r7.s64 = ctx.r10.s64 + 12816;
	// lwz r11,-23444(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23444);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c96ec
	if (!ctx.cr6.eq) goto loc_829C96EC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b50ab0
	ctx.lr = 0x829C96E4;
	sub_82B50AB0(ctx, base);
	// stw r3,-23444(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23444, ctx.r3.u32);
	// bl 0x82b50b60
	ctx.lr = 0x829C96EC;
	sub_82B50B60(ctx, base);
loc_829C96EC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,12936
	ctx.r7.s64 = ctx.r10.s64 + 12936;
	// lwz r11,-23508(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23508);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9728
	if (!ctx.cr6.eq) goto loc_829C9728;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b47160
	ctx.lr = 0x829C9720;
	sub_82B47160(ctx, base);
	// stw r3,-23508(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23508, ctx.r3.u32);
	// bl 0x82b47210
	ctx.lr = 0x829C9728;
	sub_82B47210(ctx, base);
loc_829C9728:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25204(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25204);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9748
	if (!ctx.cr6.eq) goto loc_829C9748;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4c348
	ctx.lr = 0x829C9740;
	sub_82A4C348(ctx, base);
	// stw r3,-25204(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25204, ctx.r3.u32);
	// bl 0x82a4c3f8
	ctx.lr = 0x829C9748;
	sub_82A4C3F8(ctx, base);
loc_829C9748:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13056
	ctx.r7.s64 = ctx.r10.s64 + 13056;
	// lwz r11,-25556(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25556);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9784
	if (!ctx.cr6.eq) goto loc_829C9784;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829f6f58
	ctx.lr = 0x829C977C;
	sub_829F6F58(ctx, base);
	// stw r3,-25556(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25556, ctx.r3.u32);
	// bl 0x829f7008
	ctx.lr = 0x829C9784;
	sub_829F7008(ctx, base);
loc_829C9784:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23612(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23612);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c97a4
	if (!ctx.cr6.eq) goto loc_829C97A4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b37ba8
	ctx.lr = 0x829C979C;
	sub_82B37BA8(ctx, base);
	// stw r3,-23612(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23612, ctx.r3.u32);
	// bl 0x82b37c58
	ctx.lr = 0x829C97A4;
	sub_82B37C58(ctx, base);
loc_829C97A4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23872(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23872);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c97c4
	if (!ctx.cr6.eq) goto loc_829C97C4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b0ded8
	ctx.lr = 0x829C97BC;
	sub_82B0DED8(ctx, base);
	// stw r3,-23872(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23872, ctx.r3.u32);
	// bl 0x82b0df88
	ctx.lr = 0x829C97C4;
	sub_82B0DF88(ctx, base);
loc_829C97C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23864(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23864);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c97e4
	if (!ctx.cr6.eq) goto loc_829C97E4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b0e318
	ctx.lr = 0x829C97DC;
	sub_82B0E318(ctx, base);
	// stw r3,-23864(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23864, ctx.r3.u32);
	// bl 0x82b0e3c8
	ctx.lr = 0x829C97E4;
	sub_82B0E3C8(ctx, base);
loc_829C97E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23868(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23868);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9804
	if (!ctx.cr6.eq) goto loc_829C9804;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b0e0f8
	ctx.lr = 0x829C97FC;
	sub_82B0E0F8(ctx, base);
	// stw r3,-23868(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23868, ctx.r3.u32);
	// bl 0x82b0e1a8
	ctx.lr = 0x829C9804;
	sub_82B0E1A8(ctx, base);
loc_829C9804:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24220(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24220);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9824
	if (!ctx.cr6.eq) goto loc_829C9824;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82adfcb0
	ctx.lr = 0x829C981C;
	sub_82ADFCB0(ctx, base);
	// stw r3,-24220(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24220, ctx.r3.u32);
	// bl 0x82adfd60
	ctx.lr = 0x829C9824;
	sub_82ADFD60(ctx, base);
loc_829C9824:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25096(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25096);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9844
	if (!ctx.cr6.eq) goto loc_829C9844;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a65520
	ctx.lr = 0x829C983C;
	sub_82A65520(ctx, base);
	// stw r3,-25096(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25096, ctx.r3.u32);
	// bl 0x82a655d0
	ctx.lr = 0x829C9844;
	sub_82A655D0(ctx, base);
loc_829C9844:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13176
	ctx.r7.s64 = ctx.r10.s64 + 13176;
	// lwz r11,-24116(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24116);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9880
	if (!ctx.cr6.eq) goto loc_829C9880;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aebcc0
	ctx.lr = 0x829C9878;
	sub_82AEBCC0(ctx, base);
	// stw r3,-24116(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24116, ctx.r3.u32);
	// bl 0x82aebd70
	ctx.lr = 0x829C9880;
	sub_82AEBD70(ctx, base);
loc_829C9880:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13296
	ctx.r7.s64 = ctx.r10.s64 + 13296;
	// lwz r11,-25244(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25244);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c98bc
	if (!ctx.cr6.eq) goto loc_829C98BC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a49318
	ctx.lr = 0x829C98B4;
	sub_82A49318(ctx, base);
	// stw r3,-25244(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25244, ctx.r3.u32);
	// bl 0x82a493c8
	ctx.lr = 0x829C98BC;
	sub_82A493C8(ctx, base);
loc_829C98BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23484(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23484);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c98dc
	if (!ctx.cr6.eq) goto loc_829C98DC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b4ce40
	ctx.lr = 0x829C98D4;
	sub_82B4CE40(ctx, base);
	// stw r3,-23484(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23484, ctx.r3.u32);
	// bl 0x82b4cef0
	ctx.lr = 0x829C98DC;
	sub_82B4CEF0(ctx, base);
loc_829C98DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25240(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25240);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c98fc
	if (!ctx.cr6.eq) goto loc_829C98FC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a49538
	ctx.lr = 0x829C98F4;
	sub_82A49538(ctx, base);
	// stw r3,-25240(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25240, ctx.r3.u32);
	// bl 0x82a495e8
	ctx.lr = 0x829C98FC;
	sub_82A495E8(ctx, base);
loc_829C98FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23968(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23968);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c991c
	if (!ctx.cr6.eq) goto loc_829C991C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b02a98
	ctx.lr = 0x829C9914;
	sub_82B02A98(ctx, base);
	// stw r3,-23968(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23968, ctx.r3.u32);
	// bl 0x82b02b48
	ctx.lr = 0x829C991C;
	sub_82B02B48(ctx, base);
loc_829C991C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25196(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25196);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c993c
	if (!ctx.cr6.eq) goto loc_829C993C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4c788
	ctx.lr = 0x829C9934;
	sub_82A4C788(ctx, base);
	// stw r3,-25196(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25196, ctx.r3.u32);
	// bl 0x82a4c838
	ctx.lr = 0x829C993C;
	sub_82A4C838(ctx, base);
loc_829C993C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23520(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23520);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c995c
	if (!ctx.cr6.eq) goto loc_829C995C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b46568
	ctx.lr = 0x829C9954;
	sub_82B46568(ctx, base);
	// stw r3,-23520(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23520, ctx.r3.u32);
	// bl 0x82b46618
	ctx.lr = 0x829C995C;
	sub_82B46618(ctx, base);
loc_829C995C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25236(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25236);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c997c
	if (!ctx.cr6.eq) goto loc_829C997C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4a408
	ctx.lr = 0x829C9974;
	sub_82A4A408(ctx, base);
	// stw r3,-25236(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25236, ctx.r3.u32);
	// bl 0x82a4a4b8
	ctx.lr = 0x829C997C;
	sub_82A4A4B8(ctx, base);
loc_829C997C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25232(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25232);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c999c
	if (!ctx.cr6.eq) goto loc_829C999C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4a628
	ctx.lr = 0x829C9994;
	sub_82A4A628(ctx, base);
	// stw r3,-25232(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25232, ctx.r3.u32);
	// bl 0x82a4a6d8
	ctx.lr = 0x829C999C;
	sub_82A4A6D8(ctx, base);
loc_829C999C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25228);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c99bc
	if (!ctx.cr6.eq) goto loc_829C99BC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4ab28
	ctx.lr = 0x829C99B4;
	sub_82A4AB28(ctx, base);
	// stw r3,-25228(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25228, ctx.r3.u32);
	// bl 0x82a4abd8
	ctx.lr = 0x829C99BC;
	sub_82A4ABD8(ctx, base);
loc_829C99BC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25220(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25220);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c99dc
	if (!ctx.cr6.eq) goto loc_829C99DC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4af68
	ctx.lr = 0x829C99D4;
	sub_82A4AF68(ctx, base);
	// stw r3,-25220(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25220, ctx.r3.u32);
	// bl 0x82a4b018
	ctx.lr = 0x829C99DC;
	sub_82A4B018(ctx, base);
loc_829C99DC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25224(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25224);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c99fc
	if (!ctx.cr6.eq) goto loc_829C99FC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a4ad48
	ctx.lr = 0x829C99F4;
	sub_82A4AD48(ctx, base);
	// stw r3,-25224(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25224, ctx.r3.u32);
	// bl 0x82a4adf8
	ctx.lr = 0x829C99FC;
	sub_82A4ADF8(ctx, base);
loc_829C99FC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23452(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23452);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9a1c
	if (!ctx.cr6.eq) goto loc_829C9A1C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b500c8
	ctx.lr = 0x829C9A14;
	sub_82B500C8(ctx, base);
	// stw r3,-23452(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23452, ctx.r3.u32);
	// bl 0x82b50178
	ctx.lr = 0x829C9A1C;
	sub_82B50178(ctx, base);
loc_829C9A1C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24288(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24288);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9a3c
	if (!ctx.cr6.eq) goto loc_829C9A3C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad3970
	ctx.lr = 0x829C9A34;
	sub_82AD3970(ctx, base);
	// stw r3,-24288(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24288, ctx.r3.u32);
	// bl 0x82ad3a20
	ctx.lr = 0x829C9A3C;
	sub_82AD3A20(ctx, base);
loc_829C9A3C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23640(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23640);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9a5c
	if (!ctx.cr6.eq) goto loc_829C9A5C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b327b8
	ctx.lr = 0x829C9A54;
	sub_82B327B8(ctx, base);
	// stw r3,-23640(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23640, ctx.r3.u32);
	// bl 0x82b32868
	ctx.lr = 0x829C9A5C;
	sub_82B32868(ctx, base);
loc_829C9A5C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24700(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24700);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9a7c
	if (!ctx.cr6.eq) goto loc_829C9A7C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a96598
	ctx.lr = 0x829C9A74;
	sub_82A96598(ctx, base);
	// stw r3,-24700(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24700, ctx.r3.u32);
	// bl 0x82a96648
	ctx.lr = 0x829C9A7C;
	sub_82A96648(ctx, base);
loc_829C9A7C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23436(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23436);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9a9c
	if (!ctx.cr6.eq) goto loc_829C9A9C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b514d8
	ctx.lr = 0x829C9A94;
	sub_82B514D8(ctx, base);
	// stw r3,-23436(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23436, ctx.r3.u32);
	// bl 0x82b51588
	ctx.lr = 0x829C9A9C;
	sub_82B51588(ctx, base);
loc_829C9A9C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24292(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24292);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9abc
	if (!ctx.cr6.eq) goto loc_829C9ABC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad2e88
	ctx.lr = 0x829C9AB4;
	sub_82AD2E88(ctx, base);
	// stw r3,-24292(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24292, ctx.r3.u32);
	// bl 0x82ad2f38
	ctx.lr = 0x829C9ABC;
	sub_82AD2F38(ctx, base);
loc_829C9ABC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24140(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24140);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9adc
	if (!ctx.cr6.eq) goto loc_829C9ADC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae8ef0
	ctx.lr = 0x829C9AD4;
	sub_82AE8EF0(ctx, base);
	// stw r3,-24140(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24140, ctx.r3.u32);
	// bl 0x82ae8fa0
	ctx.lr = 0x829C9ADC;
	sub_82AE8FA0(ctx, base);
loc_829C9ADC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24164(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24164);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9afc
	if (!ctx.cr6.eq) goto loc_829C9AFC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae7cf8
	ctx.lr = 0x829C9AF4;
	sub_82AE7CF8(ctx, base);
	// stw r3,-24164(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24164, ctx.r3.u32);
	// bl 0x82ae7da8
	ctx.lr = 0x829C9AFC;
	sub_82AE7DA8(ctx, base);
loc_829C9AFC:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24152(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24152);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9b1c
	if (!ctx.cr6.eq) goto loc_829C9B1C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae8358
	ctx.lr = 0x829C9B14;
	sub_82AE8358(ctx, base);
	// stw r3,-24152(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24152, ctx.r3.u32);
	// bl 0x82ae8408
	ctx.lr = 0x829C9B1C;
	sub_82AE8408(ctx, base);
loc_829C9B1C:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24804(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24804);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9b3c
	if (!ctx.cr6.eq) goto loc_829C9B3C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a8ad28
	ctx.lr = 0x829C9B34;
	sub_82A8AD28(ctx, base);
	// stw r3,-24804(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24804, ctx.r3.u32);
	// bl 0x82a8add8
	ctx.lr = 0x829C9B3C;
	sub_82A8ADD8(ctx, base);
loc_829C9B3C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13416
	ctx.r7.s64 = ctx.r10.s64 + 13416;
	// lwz r11,-23408(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23408);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9b78
	if (!ctx.cr6.eq) goto loc_829C9B78;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b5b8a0
	ctx.lr = 0x829C9B70;
	sub_82B5B8A0(ctx, base);
	// stw r3,-23408(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23408, ctx.r3.u32);
	// bl 0x82b5b950
	ctx.lr = 0x829C9B78;
	sub_82B5B950(ctx, base);
loc_829C9B78:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24632(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24632);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9b98
	if (!ctx.cr6.eq) goto loc_829C9B98;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a9dec0
	ctx.lr = 0x829C9B90;
	sub_82A9DEC0(ctx, base);
	// stw r3,-24632(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24632, ctx.r3.u32);
	// bl 0x82a9df70
	ctx.lr = 0x829C9B98;
	sub_82A9DF70(ctx, base);
loc_829C9B98:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13536
	ctx.r7.s64 = ctx.r10.s64 + 13536;
	// lwz r11,-24156(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24156);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9bd4
	if (!ctx.cr6.eq) goto loc_829C9BD4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae8138
	ctx.lr = 0x829C9BCC;
	sub_82AE8138(ctx, base);
	// stw r3,-24156(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24156, ctx.r3.u32);
	// bl 0x82ae81e8
	ctx.lr = 0x829C9BD4;
	sub_82AE81E8(ctx, base);
loc_829C9BD4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24644(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24644);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9bf4
	if (!ctx.cr6.eq) goto loc_829C9BF4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a98370
	ctx.lr = 0x829C9BEC;
	sub_82A98370(ctx, base);
	// stw r3,-24644(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24644, ctx.r3.u32);
	// bl 0x82a98420
	ctx.lr = 0x829C9BF4;
	sub_82A98420(ctx, base);
loc_829C9BF4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24136(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24136);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9c14
	if (!ctx.cr6.eq) goto loc_829C9C14;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae9748
	ctx.lr = 0x829C9C0C;
	sub_82AE9748(ctx, base);
	// stw r3,-24136(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24136, ctx.r3.u32);
	// bl 0x82ae97f8
	ctx.lr = 0x829C9C14;
	sub_82AE97F8(ctx, base);
loc_829C9C14:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24148(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24148);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9c34
	if (!ctx.cr6.eq) goto loc_829C9C34;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae8578
	ctx.lr = 0x829C9C2C;
	sub_82AE8578(ctx, base);
	// stw r3,-24148(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24148, ctx.r3.u32);
	// bl 0x82ae8628
	ctx.lr = 0x829C9C34;
	sub_82AE8628(ctx, base);
loc_829C9C34:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23428(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23428);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9c54
	if (!ctx.cr6.eq) goto loc_829C9C54;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b59578
	ctx.lr = 0x829C9C4C;
	sub_82B59578(ctx, base);
	// stw r3,-23428(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23428, ctx.r3.u32);
	// bl 0x82b59628
	ctx.lr = 0x829C9C54;
	sub_82B59628(ctx, base);
loc_829C9C54:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13656
	ctx.r7.s64 = ctx.r10.s64 + 13656;
	// lwz r11,-24324(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24324);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9c90
	if (!ctx.cr6.eq) goto loc_829C9C90;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad0920
	ctx.lr = 0x829C9C88;
	sub_82AD0920(ctx, base);
	// stw r3,-24324(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24324, ctx.r3.u32);
	// bl 0x82ad09d0
	ctx.lr = 0x829C9C90;
	sub_82AD09D0(ctx, base);
loc_829C9C90:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13776
	ctx.r7.s64 = ctx.r10.s64 + 13776;
	// lwz r11,-24320(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24320);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9ccc
	if (!ctx.cr6.eq) goto loc_829C9CCC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ad0b40
	ctx.lr = 0x829C9CC4;
	sub_82AD0B40(ctx, base);
	// stw r3,-24320(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24320, ctx.r3.u32);
	// bl 0x82ad0bf0
	ctx.lr = 0x829C9CCC;
	sub_82AD0BF0(ctx, base);
loc_829C9CCC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,13896
	ctx.r7.s64 = ctx.r10.s64 + 13896;
	// lwz r11,-24160(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24160);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9d08
	if (!ctx.cr6.eq) goto loc_829C9D08;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82ae7f18
	ctx.lr = 0x829C9D00;
	sub_82AE7F18(ctx, base);
	// stw r3,-24160(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24160, ctx.r3.u32);
	// bl 0x82ae7fc8
	ctx.lr = 0x829C9D08;
	sub_82AE7FC8(ctx, base);
loc_829C9D08:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24452(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24452);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9d28
	if (!ctx.cr6.eq) goto loc_829C9D28;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82abcd48
	ctx.lr = 0x829C9D20;
	sub_82ABCD48(ctx, base);
	// stw r3,-24452(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24452, ctx.r3.u32);
	// bl 0x82abcdf8
	ctx.lr = 0x829C9D28;
	sub_82ABCDF8(ctx, base);
loc_829C9D28:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,14016
	ctx.r7.s64 = ctx.r10.s64 + 14016;
	// lwz r11,-24712(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24712);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9d64
	if (!ctx.cr6.eq) goto loc_829C9D64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a95f38
	ctx.lr = 0x829C9D5C;
	sub_82A95F38(ctx, base);
	// stw r3,-24712(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24712, ctx.r3.u32);
	// bl 0x82a95fe8
	ctx.lr = 0x829C9D64;
	sub_82A95FE8(ctx, base);
loc_829C9D64:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24720(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24720);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9d84
	if (!ctx.cr6.eq) goto loc_829C9D84;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a95af8
	ctx.lr = 0x829C9D7C;
	sub_82A95AF8(ctx, base);
	// stw r3,-24720(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24720, ctx.r3.u32);
	// bl 0x82a95ba8
	ctx.lr = 0x829C9D84;
	sub_82A95BA8(ctx, base);
loc_829C9D84:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24688(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24688);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9da4
	if (!ctx.cr6.eq) goto loc_829C9DA4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a96bf8
	ctx.lr = 0x829C9D9C;
	sub_82A96BF8(ctx, base);
	// stw r3,-24688(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24688, ctx.r3.u32);
	// bl 0x82a96ca8
	ctx.lr = 0x829C9DA4;
	sub_82A96CA8(ctx, base);
loc_829C9DA4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24716(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24716);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9dc4
	if (!ctx.cr6.eq) goto loc_829C9DC4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a95d18
	ctx.lr = 0x829C9DBC;
	sub_82A95D18(ctx, base);
	// stw r3,-24716(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24716, ctx.r3.u32);
	// bl 0x82a95dc8
	ctx.lr = 0x829C9DC4;
	sub_82A95DC8(ctx, base);
loc_829C9DC4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24708(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24708);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9de4
	if (!ctx.cr6.eq) goto loc_829C9DE4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a96158
	ctx.lr = 0x829C9DDC;
	sub_82A96158(ctx, base);
	// stw r3,-24708(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24708, ctx.r3.u32);
	// bl 0x82a96208
	ctx.lr = 0x829C9DE4;
	sub_82A96208(ctx, base);
loc_829C9DE4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24660(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24660);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9e04
	if (!ctx.cr6.eq) goto loc_829C9E04;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a97af0
	ctx.lr = 0x829C9DFC;
	sub_82A97AF0(ctx, base);
	// stw r3,-24660(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24660, ctx.r3.u32);
	// bl 0x82a97ba0
	ctx.lr = 0x829C9E04;
	sub_82A97BA0(ctx, base);
loc_829C9E04:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25452(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25452);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9e24
	if (!ctx.cr6.eq) goto loc_829C9E24;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a14e60
	ctx.lr = 0x829C9E1C;
	sub_82A14E60(ctx, base);
	// stw r3,-25452(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25452, ctx.r3.u32);
	// bl 0x82a14f10
	ctx.lr = 0x829C9E24;
	sub_82A14F10(ctx, base);
loc_829C9E24:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24724(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24724);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9e44
	if (!ctx.cr6.eq) goto loc_829C9E44;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a958d8
	ctx.lr = 0x829C9E3C;
	sub_82A958D8(ctx, base);
	// stw r3,-24724(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24724, ctx.r3.u32);
	// bl 0x82a95988
	ctx.lr = 0x829C9E44;
	sub_82A95988(ctx, base);
loc_829C9E44:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-23860(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -23860);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9e64
	if (!ctx.cr6.eq) goto loc_829C9E64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b0ec10
	ctx.lr = 0x829C9E5C;
	sub_82B0EC10(ctx, base);
	// stw r3,-23860(r30)
	PPC_STORE_U32(ctx.r30.u32 + -23860, ctx.r3.u32);
	// bl 0x82b0ecc0
	ctx.lr = 0x829C9E64;
	sub_82B0ECC0(ctx, base);
loc_829C9E64:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15336
	ctx.r7.s64 = ctx.r10.s64 + 15336;
	// lwz r11,-24736(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24736);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9ea0
	if (!ctx.cr6.eq) goto loc_829C9EA0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a912f8
	ctx.lr = 0x829C9E98;
	sub_82A912F8(ctx, base);
	// stw r3,-24736(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24736, ctx.r3.u32);
	// bl 0x82a913a8
	ctx.lr = 0x829C9EA0;
	sub_82A913A8(ctx, base);
loc_829C9EA0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15456
	ctx.r7.s64 = ctx.r10.s64 + 15456;
	// lwz r11,-24552(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24552);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9edc
	if (!ctx.cr6.eq) goto loc_829C9EDC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aabea8
	ctx.lr = 0x829C9ED4;
	sub_82AABEA8(ctx, base);
	// stw r3,-24552(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24552, ctx.r3.u32);
	// bl 0x82aabf58
	ctx.lr = 0x829C9EDC;
	sub_82AABF58(ctx, base);
loc_829C9EDC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15576
	ctx.r7.s64 = ctx.r10.s64 + 15576;
	// lwz r11,-24548(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24548);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9f18
	if (!ctx.cr6.eq) goto loc_829C9F18;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aac0c8
	ctx.lr = 0x829C9F10;
	sub_82AAC0C8(ctx, base);
	// stw r3,-24548(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24548, ctx.r3.u32);
	// bl 0x82aac178
	ctx.lr = 0x829C9F18;
	sub_82AAC178(ctx, base);
loc_829C9F18:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15696
	ctx.r7.s64 = ctx.r10.s64 + 15696;
	// lwz r11,-24544(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24544);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9f54
	if (!ctx.cr6.eq) goto loc_829C9F54;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aac2e8
	ctx.lr = 0x829C9F4C;
	sub_82AAC2E8(ctx, base);
	// stw r3,-24544(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24544, ctx.r3.u32);
	// bl 0x82aac398
	ctx.lr = 0x829C9F54;
	sub_82AAC398(ctx, base);
loc_829C9F54:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15816
	ctx.r7.s64 = ctx.r10.s64 + 15816;
	// lwz r11,-24540(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24540);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829c9f90
	if (!ctx.cr6.eq) goto loc_829C9F90;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aac508
	ctx.lr = 0x829C9F88;
	sub_82AAC508(ctx, base);
	// stw r3,-24540(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24540, ctx.r3.u32);
	// bl 0x82aac5b8
	ctx.lr = 0x829C9F90;
	sub_82AAC5B8(ctx, base);
loc_829C9F90:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24528(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24528);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9fb0
	if (!ctx.cr6.eq) goto loc_829C9FB0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aacb68
	ctx.lr = 0x829C9FA8;
	sub_82AACB68(ctx, base);
	// stw r3,-24528(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24528, ctx.r3.u32);
	// bl 0x82aacc18
	ctx.lr = 0x829C9FB0;
	sub_82AACC18(ctx, base);
loc_829C9FB0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24532(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24532);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9fd0
	if (!ctx.cr6.eq) goto loc_829C9FD0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aac948
	ctx.lr = 0x829C9FC8;
	sub_82AAC948(ctx, base);
	// stw r3,-24532(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24532, ctx.r3.u32);
	// bl 0x82aac9f8
	ctx.lr = 0x829C9FD0;
	sub_82AAC9F8(ctx, base);
loc_829C9FD0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24536(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24536);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829c9ff0
	if (!ctx.cr6.eq) goto loc_829C9FF0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aac728
	ctx.lr = 0x829C9FE8;
	sub_82AAC728(ctx, base);
	// stw r3,-24536(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24536, ctx.r3.u32);
	// bl 0x82aac7d8
	ctx.lr = 0x829C9FF0;
	sub_82AAC7D8(ctx, base);
loc_829C9FF0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24732(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24732);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829ca010
	if (!ctx.cr6.eq) goto loc_829CA010;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a91518
	ctx.lr = 0x829CA008;
	sub_82A91518(ctx, base);
	// stw r3,-24732(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24732, ctx.r3.u32);
	// bl 0x82a915c8
	ctx.lr = 0x829CA010;
	sub_82A915C8(ctx, base);
loc_829CA010:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,15936
	ctx.r7.s64 = ctx.r10.s64 + 15936;
	// lwz r11,-24740(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24740);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829ca04c
	if (!ctx.cr6.eq) goto loc_829CA04C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a910d8
	ctx.lr = 0x829CA044;
	sub_82A910D8(ctx, base);
	// stw r3,-24740(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24740, ctx.r3.u32);
	// bl 0x82a91188
	ctx.lr = 0x829CA04C;
	sub_82A91188(ctx, base);
loc_829CA04C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,16056
	ctx.r7.s64 = ctx.r10.s64 + 16056;
	// lwz r11,-24464(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24464);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829ca088
	if (!ctx.cr6.eq) goto loc_829CA088;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82abaaa8
	ctx.lr = 0x829CA080;
	sub_82ABAAA8(ctx, base);
	// stw r3,-24464(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24464, ctx.r3.u32);
	// bl 0x82abab58
	ctx.lr = 0x829CA088;
	sub_82ABAB58(ctx, base);
loc_829CA088:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,16176
	ctx.r7.s64 = ctx.r10.s64 + 16176;
	// lwz r11,-24460(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24460);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829ca0c4
	if (!ctx.cr6.eq) goto loc_829CA0C4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82abacc8
	ctx.lr = 0x829CA0BC;
	sub_82ABACC8(ctx, base);
	// stw r3,-24460(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24460, ctx.r3.u32);
	// bl 0x82abad78
	ctx.lr = 0x829CA0C4;
	sub_82ABAD78(ctx, base);
loc_829CA0C4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24456(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24456);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829ca0e4
	if (!ctx.cr6.eq) goto loc_829CA0E4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82abaee8
	ctx.lr = 0x829CA0DC;
	sub_82ABAEE8(ctx, base);
	// stw r3,-24456(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24456, ctx.r3.u32);
	// bl 0x82abaf98
	ctx.lr = 0x829CA0E4;
	sub_82ABAF98(ctx, base);
loc_829CA0E4:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-24468(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24468);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829ca104
	if (!ctx.cr6.eq) goto loc_829CA104;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aba888
	ctx.lr = 0x829CA0FC;
	sub_82ABA888(ctx, base);
	// stw r3,-24468(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24468, ctx.r3.u32);
	// bl 0x82aba938
	ctx.lr = 0x829CA104;
	sub_82ABA938(ctx, base);
loc_829CA104:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,16296
	ctx.r7.s64 = ctx.r10.s64 + 16296;
	// lwz r11,-24472(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24472);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829ca140
	if (!ctx.cr6.eq) goto loc_829CA140;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aba668
	ctx.lr = 0x829CA138;
	sub_82ABA668(ctx, base);
	// stw r3,-24472(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24472, ctx.r3.u32);
	// bl 0x82aba718
	ctx.lr = 0x829CA140;
	sub_82ABA718(ctx, base);
loc_829CA140:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lis r10,-32100
	ctx.r10.s64 = -2103705600;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// addi r7,r10,16416
	ctx.r7.s64 = ctx.r10.s64 + 16416;
	// lwz r11,-24476(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -24476);
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stwx r7,r9,r28
	PPC_STORE_U32(ctx.r9.u32 + ctx.r28.u32, ctx.r7.u32);
	// bne cr6,0x829ca17c
	if (!ctx.cr6.eq) goto loc_829CA17C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82aba448
	ctx.lr = 0x829CA174;
	sub_82ABA448(ctx, base);
	// stw r3,-24476(r30)
	PPC_STORE_U32(ctx.r30.u32 + -24476, ctx.r3.u32);
	// bl 0x82aba4f8
	ctx.lr = 0x829CA17C;
	sub_82ABA4F8(ctx, base);
loc_829CA17C:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r11,-24728(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -24728);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829ca19c
	if (!ctx.cr6.eq) goto loc_829CA19C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a91738
	ctx.lr = 0x829CA194;
	sub_82A91738(ctx, base);
	// stw r3,-24728(r31)
	PPC_STORE_U32(ctx.r31.u32 + -24728, ctx.r3.u32);
	// bl 0x82a917e8
	ctx.lr = 0x829CA19C;
	sub_82A917E8(ctx, base);
loc_829CA19C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82cb1138
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829CA1A4"))) PPC_WEAK_FUNC(sub_829CA1A4);
PPC_FUNC_IMPL(__imp__sub_829CA1A4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829CA1A8"))) PPC_WEAK_FUNC(sub_829CA1A8);
PPC_FUNC_IMPL(__imp__sub_829CA1A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,5732
	ctx.r4.s64 = ctx.r11.s64 + 5732;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8233e028
	ctx.lr = 0x829CA1D4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r9,-2796
	ctx.r3.s64 = ctx.r9.s64 + -2796;
	// addi r4,r8,5772
	ctx.r4.s64 = ctx.r8.s64 + 5772;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2796(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2796, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8233e028
	ctx.lr = 0x829CA208;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r9,-3268
	ctx.r3.s64 = ctx.r9.s64 + -3268;
	// addi r4,r8,5792
	ctx.r4.s64 = ctx.r8.s64 + 5792;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3268(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3268, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8233e028
	ctx.lr = 0x829CA23C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r9,-3396
	ctx.r3.s64 = ctx.r9.s64 + -3396;
	// addi r4,r8,5844
	ctx.r4.s64 = ctx.r8.s64 + 5844;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3396(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3396, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8233e028
	ctx.lr = 0x829CA270;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r9,28
	ctx.r3.s64 = ctx.r9.s64 + 28;
	// addi r4,r8,5884
	ctx.r4.s64 = ctx.r8.s64 + 5884;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,28(r9)
	PPC_STORE_U32(ctx.r9.u32 + 28, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8233e028
	ctx.lr = 0x829CA2A4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r9,-1772
	ctx.r3.s64 = ctx.r9.s64 + -1772;
	// addi r4,r8,5900
	ctx.r4.s64 = ctx.r8.s64 + 5900;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1772(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1772, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8233e028
	ctx.lr = 0x829CA2D8;
	sub_8233E028(ctx, base);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r4,r10,5928
	ctx.r4.s64 = ctx.r10.s64 + 5928;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r8,r9,-2372
	ctx.r8.s64 = ctx.r9.s64 + -2372;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,-2372(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2372, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CA30C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,664
	ctx.r3.s64 = ctx.r5.s64 + 664;
	// addi r4,r4,5948
	ctx.r4.s64 = ctx.r4.s64 + 5948;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,664(r5)
	PPC_STORE_U32(ctx.r5.u32 + 664, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA340;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1176
	ctx.r3.s64 = ctx.r9.s64 + -1176;
	// addi r4,r8,5980
	ctx.r4.s64 = ctx.r8.s64 + 5980;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1176(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1176, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA374;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,224
	ctx.r3.s64 = ctx.r9.s64 + 224;
	// addi r4,r8,6016
	ctx.r4.s64 = ctx.r8.s64 + 6016;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,224(r9)
	PPC_STORE_U32(ctx.r9.u32 + 224, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA3A8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-632
	ctx.r3.s64 = ctx.r9.s64 + -632;
	// addi r4,r8,6056
	ctx.r4.s64 = ctx.r8.s64 + 6056;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-632(r9)
	PPC_STORE_U32(ctx.r9.u32 + -632, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA3DC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-340
	ctx.r3.s64 = ctx.r9.s64 + -340;
	// addi r4,r8,6100
	ctx.r4.s64 = ctx.r8.s64 + 6100;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-340(r9)
	PPC_STORE_U32(ctx.r9.u32 + -340, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA410;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r31,r9,-2500
	ctx.r31.s64 = ctx.r9.s64 + -2500;
	// addi r4,r8,6136
	ctx.r4.s64 = ctx.r8.s64 + 6136;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-2500(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2500, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CA444;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-1800
	ctx.r3.s64 = ctx.r5.s64 + -1800;
	// addi r4,r4,6176
	ctx.r4.s64 = ctx.r4.s64 + 6176;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1800(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1800, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA478;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1528
	ctx.r3.s64 = ctx.r9.s64 + -1528;
	// addi r4,r8,6228
	ctx.r4.s64 = ctx.r8.s64 + 6228;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1528(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1528, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA4AC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1692
	ctx.r3.s64 = ctx.r9.s64 + -1692;
	// addi r4,r8,6268
	ctx.r4.s64 = ctx.r8.s64 + 6268;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1692(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1692, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA4E0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2256
	ctx.r3.s64 = ctx.r9.s64 + -2256;
	// addi r4,r8,6304
	ctx.r4.s64 = ctx.r8.s64 + 6304;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2256(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2256, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA514;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2048
	ctx.r3.s64 = ctx.r9.s64 + -2048;
	// addi r4,r8,6328
	ctx.r4.s64 = ctx.r8.s64 + 6328;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2048(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2048, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA548;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,788
	ctx.r3.s64 = ctx.r9.s64 + 788;
	// addi r4,r8,6380
	ctx.r4.s64 = ctx.r8.s64 + 6380;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,788(r9)
	PPC_STORE_U32(ctx.r9.u32 + 788, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA57C;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r4,r11,6408
	ctx.r4.s64 = ctx.r11.s64 + 6408;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r8,r9,-400
	ctx.r8.s64 = ctx.r9.s64 + -400;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-400(r9)
	PPC_STORE_U32(ctx.r9.u32 + -400, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CA5B0;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-1584
	ctx.r3.s64 = ctx.r5.s64 + -1584;
	// addi r4,r4,6436
	ctx.r4.s64 = ctx.r4.s64 + 6436;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1584(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1584, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA5E4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-960
	ctx.r3.s64 = ctx.r9.s64 + -960;
	// addi r4,r8,6484
	ctx.r4.s64 = ctx.r8.s64 + 6484;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-960(r9)
	PPC_STORE_U32(ctx.r9.u32 + -960, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA618;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1056
	ctx.r3.s64 = ctx.r9.s64 + 1056;
	// addi r4,r8,6500
	ctx.r4.s64 = ctx.r8.s64 + 6500;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1056(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1056, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA64C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2296
	ctx.r3.s64 = ctx.r9.s64 + -2296;
	// addi r4,r8,6516
	ctx.r4.s64 = ctx.r8.s64 + 6516;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2296(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2296, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA680;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2328
	ctx.r3.s64 = ctx.r9.s64 + -2328;
	// addi r4,r8,6540
	ctx.r4.s64 = ctx.r8.s64 + 6540;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2328(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2328, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA6B4;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,6588
	ctx.r4.s64 = ctx.r11.s64 + 6588;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r8,r9,-96
	ctx.r8.s64 = ctx.r9.s64 + -96;
	// stw r11,-96(r9)
	PPC_STORE_U32(ctx.r9.u32 + -96, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CA6E8;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,1196
	ctx.r3.s64 = ctx.r5.s64 + 1196;
	// addi r4,r4,6616
	ctx.r4.s64 = ctx.r4.s64 + 6616;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1196(r5)
	PPC_STORE_U32(ctx.r5.u32 + 1196, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA71C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1060
	ctx.r3.s64 = ctx.r9.s64 + -1060;
	// addi r4,r8,6644
	ctx.r4.s64 = ctx.r8.s64 + 6644;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1060(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1060, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA750;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1972
	ctx.r3.s64 = ctx.r9.s64 + -1972;
	// addi r4,r8,6680
	ctx.r4.s64 = ctx.r8.s64 + 6680;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1972(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1972, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA784;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,284
	ctx.r3.s64 = ctx.r9.s64 + 284;
	// addi r4,r8,6708
	ctx.r4.s64 = ctx.r8.s64 + 6708;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,284(r9)
	PPC_STORE_U32(ctx.r9.u32 + 284, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA7B8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1204
	ctx.r3.s64 = ctx.r9.s64 + 1204;
	// addi r4,r8,6752
	ctx.r4.s64 = ctx.r8.s64 + 6752;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1204(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1204, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA7EC;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// addi r4,r11,6796
	ctx.r4.s64 = ctx.r11.s64 + 6796;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,-2804
	ctx.r8.s64 = ctx.r9.s64 + -2804;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-2804(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2804, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CA820;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,208
	ctx.r3.s64 = ctx.r5.s64 + 208;
	// addi r4,r4,6820
	ctx.r4.s64 = ctx.r4.s64 + 6820;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,208(r5)
	PPC_STORE_U32(ctx.r5.u32 + 208, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA854;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1408
	ctx.r3.s64 = ctx.r9.s64 + -1408;
	// addi r4,r8,6856
	ctx.r4.s64 = ctx.r8.s64 + 6856;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1408(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1408, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA888;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3476
	ctx.r3.s64 = ctx.r9.s64 + -3476;
	// addi r4,r8,6896
	ctx.r4.s64 = ctx.r8.s64 + 6896;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3476(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3476, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA8BC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1628
	ctx.r3.s64 = ctx.r9.s64 + -1628;
	// addi r4,r8,6936
	ctx.r4.s64 = ctx.r8.s64 + 6936;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1628(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1628, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA8F0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,360
	ctx.r3.s64 = ctx.r9.s64 + 360;
	// addi r4,r8,6980
	ctx.r4.s64 = ctx.r8.s64 + 6980;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,360(r9)
	PPC_STORE_U32(ctx.r9.u32 + 360, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA924;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r8,7000
	ctx.r4.s64 = ctx.r8.s64 + 7000;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-36(r9)
	PPC_STORE_U32(ctx.r9.u32 + -36, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r11,r9,-36
	ctx.r11.s64 = ctx.r9.s64 + -36;
	// stw r10,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CA958;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1144
	ctx.r3.s64 = ctx.r9.s64 + -1144;
	// addi r4,r8,7044
	ctx.r4.s64 = ctx.r8.s64 + 7044;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1144(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1144, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA98C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2464
	ctx.r3.s64 = ctx.r9.s64 + -2464;
	// addi r4,r8,7084
	ctx.r4.s64 = ctx.r8.s64 + 7084;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2464(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2464, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA9C0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,636
	ctx.r3.s64 = ctx.r9.s64 + 636;
	// addi r4,r8,7128
	ctx.r4.s64 = ctx.r8.s64 + 7128;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,636(r9)
	PPC_STORE_U32(ctx.r9.u32 + 636, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CA9F4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3184
	ctx.r3.s64 = ctx.r9.s64 + -3184;
	// addi r4,r8,7160
	ctx.r4.s64 = ctx.r8.s64 + 7160;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3184(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3184, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAA28;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1152
	ctx.r3.s64 = ctx.r9.s64 + -1152;
	// addi r4,r8,7232
	ctx.r4.s64 = ctx.r8.s64 + 7232;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1152(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1152, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAA5C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2816
	ctx.r3.s64 = ctx.r9.s64 + -2816;
	// addi r4,r8,7268
	ctx.r4.s64 = ctx.r8.s64 + 7268;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2816(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2816, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAA90;
	sub_8233E028(ctx, base);
	// lis r9,-32230
	ctx.r9.s64 = -2112225280;
	// lis r8,-31882
	ctx.r8.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r9,7292
	ctx.r4.s64 = ctx.r9.s64 + 7292;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r9,r8,-3100
	ctx.r9.s64 = ctx.r8.s64 + -3100;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3100(r8)
	PPC_STORE_U32(ctx.r8.u32 + -3100, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CAAC4;
	sub_8233E028(ctx, base);
	// lis r8,-31882
	ctx.r8.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r7,-32230
	ctx.r7.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r8,-2360
	ctx.r3.s64 = ctx.r8.s64 + -2360;
	// addi r4,r7,7336
	ctx.r4.s64 = ctx.r7.s64 + 7336;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2360(r8)
	PPC_STORE_U32(ctx.r8.u32 + -2360, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAAF8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-932
	ctx.r3.s64 = ctx.r9.s64 + -932;
	// addi r4,r8,7380
	ctx.r4.s64 = ctx.r8.s64 + 7380;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-932(r9)
	PPC_STORE_U32(ctx.r9.u32 + -932, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAB2C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,844
	ctx.r3.s64 = ctx.r9.s64 + 844;
	// addi r4,r8,7416
	ctx.r4.s64 = ctx.r8.s64 + 7416;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,844(r9)
	PPC_STORE_U32(ctx.r9.u32 + 844, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAB60;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1844
	ctx.r3.s64 = ctx.r9.s64 + -1844;
	// addi r4,r8,7448
	ctx.r4.s64 = ctx.r8.s64 + 7448;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1844(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1844, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAB94;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-652
	ctx.r3.s64 = ctx.r9.s64 + -652;
	// addi r4,r8,7476
	ctx.r4.s64 = ctx.r8.s64 + 7476;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-652(r9)
	PPC_STORE_U32(ctx.r9.u32 + -652, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CABC8;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,7508
	ctx.r4.s64 = ctx.r11.s64 + 7508;
	// li r6,1
	ctx.r6.s64 = 1;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r8,r9,-392
	ctx.r8.s64 = ctx.r9.s64 + -392;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-392(r9)
	PPC_STORE_U32(ctx.r9.u32 + -392, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CABFC;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,644
	ctx.r3.s64 = ctx.r5.s64 + 644;
	// addi r4,r4,7528
	ctx.r4.s64 = ctx.r4.s64 + 7528;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,644(r5)
	PPC_STORE_U32(ctx.r5.u32 + 644, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAC30;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,124
	ctx.r3.s64 = ctx.r9.s64 + 124;
	// addi r4,r8,7548
	ctx.r4.s64 = ctx.r8.s64 + 7548;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,124(r9)
	PPC_STORE_U32(ctx.r9.u32 + 124, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAC64;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3124
	ctx.r3.s64 = ctx.r9.s64 + -3124;
	// addi r4,r8,7576
	ctx.r4.s64 = ctx.r8.s64 + 7576;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3124(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3124, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAC98;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,948
	ctx.r3.s64 = ctx.r9.s64 + 948;
	// addi r4,r8,7604
	ctx.r4.s64 = ctx.r8.s64 + 7604;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,948(r9)
	PPC_STORE_U32(ctx.r9.u32 + 948, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CACCC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3576
	ctx.r3.s64 = ctx.r9.s64 + -3576;
	// addi r4,r8,7636
	ctx.r4.s64 = ctx.r8.s64 + 7636;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3576(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3576, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAD00;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,7672
	ctx.r4.s64 = ctx.r11.s64 + 7672;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,-808
	ctx.r8.s64 = ctx.r9.s64 + -808;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-808(r9)
	PPC_STORE_U32(ctx.r9.u32 + -808, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CAD34;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,348
	ctx.r3.s64 = ctx.r5.s64 + 348;
	// addi r4,r4,7700
	ctx.r4.s64 = ctx.r4.s64 + 7700;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,348(r5)
	PPC_STORE_U32(ctx.r5.u32 + 348, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAD68;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1568
	ctx.r3.s64 = ctx.r9.s64 + -1568;
	// addi r4,r8,7736
	ctx.r4.s64 = ctx.r8.s64 + 7736;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1568(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1568, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAD9C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-916
	ctx.r3.s64 = ctx.r9.s64 + -916;
	// addi r4,r8,7760
	ctx.r4.s64 = ctx.r8.s64 + 7760;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-916(r9)
	PPC_STORE_U32(ctx.r9.u32 + -916, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CADD0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1108
	ctx.r3.s64 = ctx.r9.s64 + 1108;
	// addi r4,r8,7796
	ctx.r4.s64 = ctx.r8.s64 + 7796;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1108(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1108, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAE04;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2232
	ctx.r3.s64 = ctx.r9.s64 + -2232;
	// addi r4,r8,7840
	ctx.r4.s64 = ctx.r8.s64 + 7840;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2232(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2232, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAE38;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r10,-31882
	ctx.r10.s64 = -2089418752;
	// lis r9,-32230
	ctx.r9.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r9,7872
	ctx.r4.s64 = ctx.r9.s64 + 7872;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-1488(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1488, ctx.r11.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r10,-1488
	ctx.r8.s64 = ctx.r10.s64 + -1488;
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r11.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CAE6C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-3040
	ctx.r3.s64 = ctx.r5.s64 + -3040;
	// addi r4,r4,7908
	ctx.r4.s64 = ctx.r4.s64 + 7908;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3040(r5)
	PPC_STORE_U32(ctx.r5.u32 + -3040, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAEA0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3148
	ctx.r3.s64 = ctx.r9.s64 + -3148;
	// addi r4,r8,7936
	ctx.r4.s64 = ctx.r8.s64 + 7936;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3148(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3148, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAED4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3200
	ctx.r3.s64 = ctx.r9.s64 + -3200;
	// addi r4,r8,7956
	ctx.r4.s64 = ctx.r8.s64 + 7956;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3200(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3200, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAF08;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1128
	ctx.r3.s64 = ctx.r9.s64 + -1128;
	// addi r4,r8,7996
	ctx.r4.s64 = ctx.r8.s64 + 7996;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1128(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1128, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAF3C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-864
	ctx.r3.s64 = ctx.r9.s64 + -864;
	// addi r4,r8,8032
	ctx.r4.s64 = ctx.r8.s64 + 8032;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-864(r9)
	PPC_STORE_U32(ctx.r9.u32 + -864, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAF70;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,736
	ctx.r3.s64 = ctx.r9.s64 + 736;
	// addi r4,r8,8044
	ctx.r4.s64 = ctx.r8.s64 + 8044;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,736(r9)
	PPC_STORE_U32(ctx.r9.u32 + 736, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAFA4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r9,424
	ctx.r3.s64 = ctx.r9.s64 + 424;
	// addi r4,r8,8076
	ctx.r4.s64 = ctx.r8.s64 + 8076;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,424(r9)
	PPC_STORE_U32(ctx.r9.u32 + 424, ctx.r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CAFD8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2920
	ctx.r3.s64 = ctx.r9.s64 + -2920;
	// addi r4,r8,32704
	ctx.r4.s64 = ctx.r8.s64 + 32704;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2920(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2920, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB00C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-200
	ctx.r3.s64 = ctx.r9.s64 + -200;
	// addi r4,r8,8104
	ctx.r4.s64 = ctx.r8.s64 + 8104;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-200(r9)
	PPC_STORE_U32(ctx.r9.u32 + -200, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB040;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1684
	ctx.r3.s64 = ctx.r9.s64 + -1684;
	// addi r4,r8,8132
	ctx.r4.s64 = ctx.r8.s64 + 8132;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1684(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1684, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB074;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2776
	ctx.r3.s64 = ctx.r9.s64 + -2776;
	// addi r4,r8,8172
	ctx.r4.s64 = ctx.r8.s64 + 8172;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2776(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2776, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB0A8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2672
	ctx.r3.s64 = ctx.r9.s64 + -2672;
	// addi r4,r8,8216
	ctx.r4.s64 = ctx.r8.s64 + 8216;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2672(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2672, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB0DC;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,8256
	ctx.r4.s64 = ctx.r11.s64 + 8256;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r8,r9,908
	ctx.r8.s64 = ctx.r9.s64 + 908;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,908(r9)
	PPC_STORE_U32(ctx.r9.u32 + 908, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CB110;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-212
	ctx.r3.s64 = ctx.r5.s64 + -212;
	// addi r4,r4,8292
	ctx.r4.s64 = ctx.r4.s64 + 8292;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-212(r5)
	PPC_STORE_U32(ctx.r5.u32 + -212, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB144;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2988
	ctx.r3.s64 = ctx.r9.s64 + -2988;
	// addi r4,r8,8320
	ctx.r4.s64 = ctx.r8.s64 + 8320;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2988(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2988, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB178;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,496
	ctx.r3.s64 = ctx.r9.s64 + 496;
	// addi r4,r8,8348
	ctx.r4.s64 = ctx.r8.s64 + 8348;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,496(r9)
	PPC_STORE_U32(ctx.r9.u32 + 496, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB1AC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3292
	ctx.r3.s64 = ctx.r9.s64 + -3292;
	// addi r4,r8,8384
	ctx.r4.s64 = ctx.r8.s64 + 8384;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3292(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3292, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB1E0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1212
	ctx.r3.s64 = ctx.r9.s64 + 1212;
	// addi r4,r8,8416
	ctx.r4.s64 = ctx.r8.s64 + 8416;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1212(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1212, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB214;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-4
	ctx.r8.s64 = ctx.r9.s64 + -4;
	// stw r11,-4(r9)
	PPC_STORE_U32(ctx.r9.u32 + -4, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32230
	ctx.r6.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,8448
	ctx.r4.s64 = ctx.r6.s64 + 8448;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB248;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-1960
	ctx.r3.s64 = ctx.r5.s64 + -1960;
	// addi r4,r4,8496
	ctx.r4.s64 = ctx.r4.s64 + 8496;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1960(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1960, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB27C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1836
	ctx.r3.s64 = ctx.r9.s64 + -1836;
	// addi r4,r8,8528
	ctx.r4.s64 = ctx.r8.s64 + 8528;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1836(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1836, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB2B0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1192
	ctx.r3.s64 = ctx.r9.s64 + -1192;
	// addi r4,r8,8564
	ctx.r4.s64 = ctx.r8.s64 + 8564;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1192(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1192, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB2E4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1748
	ctx.r3.s64 = ctx.r9.s64 + -1748;
	// addi r4,r8,8604
	ctx.r4.s64 = ctx.r8.s64 + 8604;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1748(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1748, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB318;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1652
	ctx.r3.s64 = ctx.r9.s64 + -1652;
	// addi r4,r8,8620
	ctx.r4.s64 = ctx.r8.s64 + 8620;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1652(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1652, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB34C;
	sub_8233E028(ctx, base);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r10,8644
	ctx.r4.s64 = ctx.r10.s64 + 8644;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,-3140
	ctx.r8.s64 = ctx.r9.s64 + -3140;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-3140(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3140, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CB380;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-2900
	ctx.r3.s64 = ctx.r5.s64 + -2900;
	// addi r4,r4,-21320
	ctx.r4.s64 = ctx.r4.s64 + -21320;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2900(r5)
	PPC_STORE_U32(ctx.r5.u32 + -2900, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB3B4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2244
	ctx.r3.s64 = ctx.r9.s64 + -2244;
	// addi r4,r8,8688
	ctx.r4.s64 = ctx.r8.s64 + 8688;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2244(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2244, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB3E8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2396
	ctx.r3.s64 = ctx.r9.s64 + -2396;
	// addi r4,r8,8740
	ctx.r4.s64 = ctx.r8.s64 + 8740;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2396(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2396, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB41C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1780
	ctx.r3.s64 = ctx.r9.s64 + -1780;
	// addi r4,r8,8776
	ctx.r4.s64 = ctx.r8.s64 + 8776;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1780(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1780, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB450;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3424
	ctx.r3.s64 = ctx.r9.s64 + -3424;
	// addi r4,r8,8808
	ctx.r4.s64 = ctx.r8.s64 + 8808;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3424(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3424, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB484;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r31,r9,-144
	ctx.r31.s64 = ctx.r9.s64 + -144;
	// addi r4,r8,8836
	ctx.r4.s64 = ctx.r8.s64 + 8836;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-144(r9)
	PPC_STORE_U32(ctx.r9.u32 + -144, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CB4B8;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-220
	ctx.r3.s64 = ctx.r5.s64 + -220;
	// addi r4,r4,8872
	ctx.r4.s64 = ctx.r4.s64 + 8872;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-220(r5)
	PPC_STORE_U32(ctx.r5.u32 + -220, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB4EC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2732
	ctx.r3.s64 = ctx.r9.s64 + -2732;
	// addi r4,r8,8908
	ctx.r4.s64 = ctx.r8.s64 + 8908;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2732(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2732, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB520;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3032
	ctx.r3.s64 = ctx.r9.s64 + -3032;
	// addi r4,r8,8964
	ctx.r4.s64 = ctx.r8.s64 + 8964;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3032(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3032, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB554;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-544
	ctx.r3.s64 = ctx.r9.s64 + -544;
	// addi r4,r8,9024
	ctx.r4.s64 = ctx.r8.s64 + 9024;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-544(r9)
	PPC_STORE_U32(ctx.r9.u32 + -544, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB588;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,388
	ctx.r3.s64 = ctx.r9.s64 + 388;
	// addi r4,r8,9044
	ctx.r4.s64 = ctx.r8.s64 + 9044;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,388(r9)
	PPC_STORE_U32(ctx.r9.u32 + 388, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB5BC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1076
	ctx.r3.s64 = ctx.r9.s64 + -1076;
	// addi r4,r8,9072
	ctx.r4.s64 = ctx.r8.s64 + 9072;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1076(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1076, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB5F0;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r4,r11,9096
	ctx.r4.s64 = ctx.r11.s64 + 9096;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r8,r9,780
	ctx.r8.s64 = ctx.r9.s64 + 780;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,780(r9)
	PPC_STORE_U32(ctx.r9.u32 + 780, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CB624;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,64
	ctx.r3.s64 = ctx.r5.s64 + 64;
	// addi r4,r4,9132
	ctx.r4.s64 = ctx.r4.s64 + 9132;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,64(r5)
	PPC_STORE_U32(ctx.r5.u32 + 64, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB658;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1052
	ctx.r3.s64 = ctx.r9.s64 + -1052;
	// addi r4,r8,9160
	ctx.r4.s64 = ctx.r8.s64 + 9160;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1052(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1052, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB68C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,672
	ctx.r3.s64 = ctx.r9.s64 + 672;
	// addi r4,r8,9208
	ctx.r4.s64 = ctx.r8.s64 + 9208;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,672(r9)
	PPC_STORE_U32(ctx.r9.u32 + 672, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB6C0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3176
	ctx.r3.s64 = ctx.r9.s64 + -3176;
	// addi r4,r8,9248
	ctx.r4.s64 = ctx.r8.s64 + 9248;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3176(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3176, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB6F4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,616
	ctx.r3.s64 = ctx.r9.s64 + 616;
	// addi r4,r8,9280
	ctx.r4.s64 = ctx.r8.s64 + 9280;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,616(r9)
	PPC_STORE_U32(ctx.r9.u32 + 616, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB728;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,9304
	ctx.r4.s64 = ctx.r11.s64 + 9304;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r8,r9,-1856
	ctx.r8.s64 = ctx.r9.s64 + -1856;
	// stw r11,-1856(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1856, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CB75C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,1096
	ctx.r3.s64 = ctx.r5.s64 + 1096;
	// addi r4,r4,9336
	ctx.r4.s64 = ctx.r4.s64 + 9336;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1096(r5)
	PPC_STORE_U32(ctx.r5.u32 + 1096, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB790;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,44
	ctx.r3.s64 = ctx.r9.s64 + 44;
	// addi r4,r8,9364
	ctx.r4.s64 = ctx.r8.s64 + 9364;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,44(r9)
	PPC_STORE_U32(ctx.r9.u32 + 44, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB7C4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1244
	ctx.r3.s64 = ctx.r9.s64 + 1244;
	// addi r4,r8,9424
	ctx.r4.s64 = ctx.r8.s64 + 9424;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1244(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1244, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB7F8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2128
	ctx.r3.s64 = ctx.r9.s64 + -2128;
	// addi r4,r8,9460
	ctx.r4.s64 = ctx.r8.s64 + 9460;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2128(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2128, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB82C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,692
	ctx.r3.s64 = ctx.r9.s64 + 692;
	// addi r4,r8,9488
	ctx.r4.s64 = ctx.r8.s64 + 9488;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,692(r9)
	PPC_STORE_U32(ctx.r9.u32 + 692, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB860;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// addi r4,r11,9520
	ctx.r4.s64 = ctx.r11.s64 + 9520;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,-64
	ctx.r8.s64 = ctx.r9.s64 + -64;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-64(r9)
	PPC_STORE_U32(ctx.r9.u32 + -64, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CB894;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-1348
	ctx.r3.s64 = ctx.r5.s64 + -1348;
	// addi r4,r4,9560
	ctx.r4.s64 = ctx.r4.s64 + 9560;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1348(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1348, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB8C8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2488
	ctx.r3.s64 = ctx.r9.s64 + -2488;
	// addi r4,r8,9592
	ctx.r4.s64 = ctx.r8.s64 + 9592;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2488(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2488, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB8FC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,936
	ctx.r3.s64 = ctx.r9.s64 + 936;
	// addi r4,r8,9632
	ctx.r4.s64 = ctx.r8.s64 + 9632;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,936(r9)
	PPC_STORE_U32(ctx.r9.u32 + 936, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB930;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1576
	ctx.r3.s64 = ctx.r9.s64 + -1576;
	// addi r4,r8,9652
	ctx.r4.s64 = ctx.r8.s64 + 9652;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1576(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1576, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB964;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2584
	ctx.r3.s64 = ctx.r9.s64 + -2584;
	// addi r4,r8,9676
	ctx.r4.s64 = ctx.r8.s64 + 9676;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2584(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2584, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CB998;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r8,9708
	ctx.r4.s64 = ctx.r8.s64 + 9708;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1228(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1228, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r11,r9,1228
	ctx.r11.s64 = ctx.r9.s64 + 1228;
	// stw r10,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CB9CC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-576
	ctx.r3.s64 = ctx.r9.s64 + -576;
	// addi r4,r8,9724
	ctx.r4.s64 = ctx.r8.s64 + 9724;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-576(r9)
	PPC_STORE_U32(ctx.r9.u32 + -576, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBA00;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-972
	ctx.r3.s64 = ctx.r9.s64 + -972;
	// addi r4,r8,-31996
	ctx.r4.s64 = ctx.r8.s64 + -31996;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-972(r9)
	PPC_STORE_U32(ctx.r9.u32 + -972, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBA34;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1712
	ctx.r3.s64 = ctx.r9.s64 + -1712;
	// addi r4,r8,9744
	ctx.r4.s64 = ctx.r8.s64 + 9744;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1712(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1712, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBA68;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-896
	ctx.r3.s64 = ctx.r9.s64 + -896;
	// addi r4,r8,9764
	ctx.r4.s64 = ctx.r8.s64 + 9764;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-896(r9)
	PPC_STORE_U32(ctx.r9.u32 + -896, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBA9C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,292
	ctx.r3.s64 = ctx.r9.s64 + 292;
	// addi r4,r8,9796
	ctx.r4.s64 = ctx.r8.s64 + 9796;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,292(r9)
	PPC_STORE_U32(ctx.r9.u32 + 292, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBAD0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2940
	ctx.r3.s64 = ctx.r9.s64 + -2940;
	// addi r4,r8,9840
	ctx.r4.s64 = ctx.r8.s64 + 9840;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2940(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2940, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBB04;
	sub_8233E028(ctx, base);
	// lis r9,-32230
	ctx.r9.s64 = -2112225280;
	// lis r8,-31882
	ctx.r8.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r9,9892
	ctx.r4.s64 = ctx.r9.s64 + 9892;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r9,r8,524
	ctx.r9.s64 = ctx.r8.s64 + 524;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,524(r8)
	PPC_STORE_U32(ctx.r8.u32 + 524, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CBB38;
	sub_8233E028(ctx, base);
	// lis r8,-31882
	ctx.r8.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r7,-32230
	ctx.r7.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r8,488
	ctx.r3.s64 = ctx.r8.s64 + 488;
	// addi r4,r7,9928
	ctx.r4.s64 = ctx.r7.s64 + 9928;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,488(r8)
	PPC_STORE_U32(ctx.r8.u32 + 488, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBB6C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2100
	ctx.r3.s64 = ctx.r9.s64 + -2100;
	// addi r4,r8,9948
	ctx.r4.s64 = ctx.r8.s64 + 9948;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2100(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2100, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBBA0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3216
	ctx.r3.s64 = ctx.r9.s64 + -3216;
	// addi r4,r8,9992
	ctx.r4.s64 = ctx.r8.s64 + 9992;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3216(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3216, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBBD4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1392
	ctx.r3.s64 = ctx.r9.s64 + -1392;
	// addi r4,r8,10008
	ctx.r4.s64 = ctx.r8.s64 + 10008;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1392(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1392, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBC08;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,400
	ctx.r3.s64 = ctx.r9.s64 + 400;
	// addi r4,r8,10032
	ctx.r4.s64 = ctx.r8.s64 + 10032;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,400(r9)
	PPC_STORE_U32(ctx.r9.u32 + 400, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBC3C;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,10076
	ctx.r4.s64 = ctx.r11.s64 + 10076;
	// li r6,1
	ctx.r6.s64 = 1;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r8,r9,-2456
	ctx.r8.s64 = ctx.r9.s64 + -2456;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-2456(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2456, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CBC70;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-1420
	ctx.r3.s64 = ctx.r5.s64 + -1420;
	// addi r4,r4,10120
	ctx.r4.s64 = ctx.r4.s64 + 10120;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1420(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1420, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBCA4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3052
	ctx.r3.s64 = ctx.r9.s64 + -3052;
	// addi r4,r8,10164
	ctx.r4.s64 = ctx.r8.s64 + 10164;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3052(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3052, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBCD8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1552
	ctx.r3.s64 = ctx.r9.s64 + -1552;
	// addi r4,r8,10212
	ctx.r4.s64 = ctx.r8.s64 + 10212;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1552(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1552, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBD0C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-848
	ctx.r3.s64 = ctx.r9.s64 + -848;
	// addi r4,r8,10260
	ctx.r4.s64 = ctx.r8.s64 + 10260;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-848(r9)
	PPC_STORE_U32(ctx.r9.u32 + -848, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBD40;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,140
	ctx.r3.s64 = ctx.r9.s64 + 140;
	// addi r4,r8,10308
	ctx.r4.s64 = ctx.r8.s64 + 10308;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,140(r9)
	PPC_STORE_U32(ctx.r9.u32 + 140, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBD74;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,10356
	ctx.r4.s64 = ctx.r11.s64 + 10356;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,-2416
	ctx.r8.s64 = ctx.r9.s64 + -2416;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-2416(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2416, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CBDA8;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-384
	ctx.r3.s64 = ctx.r5.s64 + -384;
	// addi r4,r4,10408
	ctx.r4.s64 = ctx.r4.s64 + 10408;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-384(r5)
	PPC_STORE_U32(ctx.r5.u32 + -384, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBDDC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2192
	ctx.r3.s64 = ctx.r9.s64 + -2192;
	// addi r4,r8,10460
	ctx.r4.s64 = ctx.r8.s64 + 10460;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2192(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2192, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBE10;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3444
	ctx.r3.s64 = ctx.r9.s64 + -3444;
	// addi r4,r8,10492
	ctx.r4.s64 = ctx.r8.s64 + 10492;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3444(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3444, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBE44;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1252
	ctx.r3.s64 = ctx.r9.s64 + 1252;
	// addi r4,r8,10524
	ctx.r4.s64 = ctx.r8.s64 + 10524;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1252(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1252, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBE78;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2692
	ctx.r3.s64 = ctx.r9.s64 + -2692;
	// addi r4,r8,10572
	ctx.r4.s64 = ctx.r8.s64 + 10572;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2692(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2692, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBEAC;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r10,-31882
	ctx.r10.s64 = -2089418752;
	// lis r9,-32230
	ctx.r9.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r9,10616
	ctx.r4.s64 = ctx.r9.s64 + 10616;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-2040(r10)
	PPC_STORE_U32(ctx.r10.u32 + -2040, ctx.r11.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r10,-2040
	ctx.r8.s64 = ctx.r10.s64 + -2040;
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r11.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CBEE0;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-3468
	ctx.r3.s64 = ctx.r5.s64 + -3468;
	// addi r4,r4,10668
	ctx.r4.s64 = ctx.r4.s64 + 10668;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3468(r5)
	PPC_STORE_U32(ctx.r5.u32 + -3468, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBF14;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1544
	ctx.r3.s64 = ctx.r9.s64 + -1544;
	// addi r4,r8,-31272
	ctx.r4.s64 = ctx.r8.s64 + -31272;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1544(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1544, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBF48;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-744
	ctx.r3.s64 = ctx.r9.s64 + -744;
	// addi r4,r8,10700
	ctx.r4.s64 = ctx.r8.s64 + 10700;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-744(r9)
	PPC_STORE_U32(ctx.r9.u32 + -744, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBF7C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,876
	ctx.r3.s64 = ctx.r9.s64 + 876;
	// addi r4,r8,10732
	ctx.r4.s64 = ctx.r8.s64 + 10732;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,876(r9)
	PPC_STORE_U32(ctx.r9.u32 + 876, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBFB0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-244
	ctx.r3.s64 = ctx.r9.s64 + -244;
	// addi r4,r8,10768
	ctx.r4.s64 = ctx.r8.s64 + 10768;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-244(r9)
	PPC_STORE_U32(ctx.r9.u32 + -244, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CBFE4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2616
	ctx.r3.s64 = ctx.r9.s64 + -2616;
	// addi r4,r8,10824
	ctx.r4.s64 = ctx.r8.s64 + 10824;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2616(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2616, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC018;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r9,-3084
	ctx.r3.s64 = ctx.r9.s64 + -3084;
	// addi r4,r8,10856
	ctx.r4.s64 = ctx.r8.s64 + 10856;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,-3084(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3084, ctx.r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC04C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2208
	ctx.r3.s64 = ctx.r9.s64 + -2208;
	// addi r4,r8,10892
	ctx.r4.s64 = ctx.r8.s64 + 10892;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2208(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2208, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC080;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1380
	ctx.r3.s64 = ctx.r9.s64 + -1380;
	// addi r4,r8,10940
	ctx.r4.s64 = ctx.r8.s64 + 10940;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1380(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1380, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC0B4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-924
	ctx.r3.s64 = ctx.r9.s64 + -924;
	// addi r4,r8,10984
	ctx.r4.s64 = ctx.r8.s64 + 10984;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-924(r9)
	PPC_STORE_U32(ctx.r9.u32 + -924, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC0E8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-308
	ctx.r3.s64 = ctx.r9.s64 + -308;
	// addi r4,r8,11056
	ctx.r4.s64 = ctx.r8.s64 + 11056;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-308(r9)
	PPC_STORE_U32(ctx.r9.u32 + -308, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC11C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,480
	ctx.r3.s64 = ctx.r9.s64 + 480;
	// addi r4,r8,11124
	ctx.r4.s64 = ctx.r8.s64 + 11124;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,480(r9)
	PPC_STORE_U32(ctx.r9.u32 + 480, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC150;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,11156
	ctx.r4.s64 = ctx.r11.s64 + 11156;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r8,r9,-1340
	ctx.r8.s64 = ctx.r9.s64 + -1340;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-1340(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1340, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CC184;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-3316
	ctx.r3.s64 = ctx.r5.s64 + -3316;
	// addi r4,r4,11196
	ctx.r4.s64 = ctx.r4.s64 + 11196;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3316(r5)
	PPC_STORE_U32(ctx.r5.u32 + -3316, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC1B8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,368
	ctx.r3.s64 = ctx.r9.s64 + 368;
	// addi r4,r8,11244
	ctx.r4.s64 = ctx.r8.s64 + 11244;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,368(r9)
	PPC_STORE_U32(ctx.r9.u32 + 368, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC1EC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1020
	ctx.r3.s64 = ctx.r9.s64 + -1020;
	// addi r4,r8,11292
	ctx.r4.s64 = ctx.r8.s64 + 11292;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1020(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1020, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC220;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1064
	ctx.r3.s64 = ctx.r9.s64 + 1064;
	// addi r4,r8,11328
	ctx.r4.s64 = ctx.r8.s64 + 11328;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1064(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1064, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC254;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,592
	ctx.r3.s64 = ctx.r9.s64 + 592;
	// addi r4,r8,-22300
	ctx.r4.s64 = ctx.r8.s64 + -22300;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,592(r9)
	PPC_STORE_U32(ctx.r9.u32 + 592, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC288;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-2288
	ctx.r8.s64 = ctx.r9.s64 + -2288;
	// stw r11,-2288(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2288, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32230
	ctx.r6.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,11376
	ctx.r4.s64 = ctx.r6.s64 + 11376;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC2BC;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-3260
	ctx.r3.s64 = ctx.r5.s64 + -3260;
	// addi r4,r4,11396
	ctx.r4.s64 = ctx.r4.s64 + 11396;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3260(r5)
	PPC_STORE_U32(ctx.r5.u32 + -3260, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC2F0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1700
	ctx.r3.s64 = ctx.r9.s64 + -1700;
	// addi r4,r8,-25504
	ctx.r4.s64 = ctx.r8.s64 + -25504;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1700(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1700, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC324;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,900
	ctx.r3.s64 = ctx.r9.s64 + 900;
	// addi r4,r8,11424
	ctx.r4.s64 = ctx.r8.s64 + 11424;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,900(r9)
	PPC_STORE_U32(ctx.r9.u32 + 900, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC358;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-596
	ctx.r3.s64 = ctx.r9.s64 + -596;
	// addi r4,r8,11472
	ctx.r4.s64 = ctx.r8.s64 + 11472;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-596(r9)
	PPC_STORE_U32(ctx.r9.u32 + -596, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC38C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,540
	ctx.r3.s64 = ctx.r9.s64 + 540;
	// addi r4,r8,11544
	ctx.r4.s64 = ctx.r8.s64 + 11544;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,540(r9)
	PPC_STORE_U32(ctx.r9.u32 + 540, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC3C0;
	sub_8233E028(ctx, base);
	// lis r10,-32243
	ctx.r10.s64 = -2113077248;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r10,-22176
	ctx.r4.s64 = ctx.r10.s64 + -22176;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,-3496
	ctx.r8.s64 = ctx.r9.s64 + -3496;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-3496(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3496, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CC3F4;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-3364
	ctx.r3.s64 = ctx.r5.s64 + -3364;
	// addi r4,r4,11616
	ctx.r4.s64 = ctx.r4.s64 + 11616;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3364(r5)
	PPC_STORE_U32(ctx.r5.u32 + -3364, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC428;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,824
	ctx.r3.s64 = ctx.r9.s64 + 824;
	// addi r4,r8,11644
	ctx.r4.s64 = ctx.r8.s64 + 11644;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,824(r9)
	PPC_STORE_U32(ctx.r9.u32 + 824, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC45C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-232
	ctx.r3.s64 = ctx.r9.s64 + -232;
	// addi r4,r8,11680
	ctx.r4.s64 = ctx.r8.s64 + 11680;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-232(r9)
	PPC_STORE_U32(ctx.r9.u32 + -232, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC490;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1032
	ctx.r3.s64 = ctx.r9.s64 + 1032;
	// addi r4,r8,-25468
	ctx.r4.s64 = ctx.r8.s64 + -25468;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1032(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1032, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC4C4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2652
	ctx.r3.s64 = ctx.r9.s64 + -2652;
	// addi r4,r8,11712
	ctx.r4.s64 = ctx.r8.s64 + 11712;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2652(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2652, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC4F8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r31,r9,624
	ctx.r31.s64 = ctx.r9.s64 + 624;
	// addi r4,r8,11752
	ctx.r4.s64 = ctx.r8.s64 + 11752;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,624(r9)
	PPC_STORE_U32(ctx.r9.u32 + 624, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CC52C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-2720
	ctx.r3.s64 = ctx.r5.s64 + -2720;
	// addi r4,r4,11796
	ctx.r4.s64 = ctx.r4.s64 + 11796;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2720(r5)
	PPC_STORE_U32(ctx.r5.u32 + -2720, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC560;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2136
	ctx.r3.s64 = ctx.r9.s64 + -2136;
	// addi r4,r8,11832
	ctx.r4.s64 = ctx.r8.s64 + 11832;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2136(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2136, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC594;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2024
	ctx.r3.s64 = ctx.r9.s64 + -2024;
	// addi r4,r8,11860
	ctx.r4.s64 = ctx.r8.s64 + 11860;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2024(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2024, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC5C8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-284
	ctx.r3.s64 = ctx.r9.s64 + -284;
	// addi r4,r8,11888
	ctx.r4.s64 = ctx.r8.s64 + 11888;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-284(r9)
	PPC_STORE_U32(ctx.r9.u32 + -284, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC5FC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-516
	ctx.r3.s64 = ctx.r9.s64 + -516;
	// addi r4,r8,11924
	ctx.r4.s64 = ctx.r8.s64 + 11924;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-516(r9)
	PPC_STORE_U32(ctx.r9.u32 + -516, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC630;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1872
	ctx.r3.s64 = ctx.r9.s64 + -1872;
	// addi r4,r8,-29004
	ctx.r4.s64 = ctx.r8.s64 + -29004;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1872(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1872, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC664;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r4,r11,11968
	ctx.r4.s64 = ctx.r11.s64 + 11968;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r8,r9,-3000
	ctx.r8.s64 = ctx.r9.s64 + -3000;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-3000(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3000, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CC698;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,980
	ctx.r3.s64 = ctx.r5.s64 + 980;
	// addi r4,r4,12000
	ctx.r4.s64 = ctx.r4.s64 + 12000;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,980(r5)
	PPC_STORE_U32(ctx.r5.u32 + 980, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC6CC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1244
	ctx.r3.s64 = ctx.r9.s64 + -1244;
	// addi r4,r8,12040
	ctx.r4.s64 = ctx.r8.s64 + 12040;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1244(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1244, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC700;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,216
	ctx.r3.s64 = ctx.r9.s64 + 216;
	// addi r4,r8,12056
	ctx.r4.s64 = ctx.r8.s64 + 12056;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,216(r9)
	PPC_STORE_U32(ctx.r9.u32 + 216, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC734;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3460
	ctx.r3.s64 = ctx.r9.s64 + -3460;
	// addi r4,r8,12084
	ctx.r4.s64 = ctx.r8.s64 + 12084;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3460(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3460, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC768;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,96
	ctx.r3.s64 = ctx.r9.s64 + 96;
	// addi r4,r8,12112
	ctx.r4.s64 = ctx.r8.s64 + 12112;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,96(r9)
	PPC_STORE_U32(ctx.r9.u32 + 96, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC79C;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,12136
	ctx.r4.s64 = ctx.r11.s64 + 12136;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r8,r9,-188
	ctx.r8.s64 = ctx.r9.s64 + -188;
	// stw r11,-188(r9)
	PPC_STORE_U32(ctx.r9.u32 + -188, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CC7D0;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-112
	ctx.r3.s64 = ctx.r5.s64 + -112;
	// addi r4,r4,12168
	ctx.r4.s64 = ctx.r4.s64 + 12168;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-112(r5)
	PPC_STORE_U32(ctx.r5.u32 + -112, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC804;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-668
	ctx.r3.s64 = ctx.r9.s64 + -668;
	// addi r4,r8,12200
	ctx.r4.s64 = ctx.r8.s64 + 12200;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-668(r9)
	PPC_STORE_U32(ctx.r9.u32 + -668, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC838;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1908
	ctx.r3.s64 = ctx.r9.s64 + -1908;
	// addi r4,r8,12236
	ctx.r4.s64 = ctx.r8.s64 + 12236;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1908(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1908, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC86C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1788
	ctx.r3.s64 = ctx.r9.s64 + -1788;
	// addi r4,r8,12276
	ctx.r4.s64 = ctx.r8.s64 + 12276;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1788(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1788, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC8A0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-356
	ctx.r3.s64 = ctx.r9.s64 + -356;
	// addi r4,r8,12332
	ctx.r4.s64 = ctx.r8.s64 + 12332;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-356(r9)
	PPC_STORE_U32(ctx.r9.u32 + -356, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC8D4;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// addi r4,r11,12388
	ctx.r4.s64 = ctx.r11.s64 + 12388;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,-348
	ctx.r8.s64 = ctx.r9.s64 + -348;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,-348(r9)
	PPC_STORE_U32(ctx.r9.u32 + -348, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CC908;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-3384
	ctx.r3.s64 = ctx.r5.s64 + -3384;
	// addi r4,r4,-21196
	ctx.r4.s64 = ctx.r4.s64 + -21196;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3384(r5)
	PPC_STORE_U32(ctx.r5.u32 + -3384, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC93C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,432
	ctx.r3.s64 = ctx.r9.s64 + 432;
	// addi r4,r8,12420
	ctx.r4.s64 = ctx.r8.s64 + 12420;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,432(r9)
	PPC_STORE_U32(ctx.r9.u32 + 432, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC970;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-888
	ctx.r3.s64 = ctx.r9.s64 + -888;
	// addi r4,r8,12444
	ctx.r4.s64 = ctx.r8.s64 + 12444;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-888(r9)
	PPC_STORE_U32(ctx.r9.u32 + -888, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC9A4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3012
	ctx.r3.s64 = ctx.r9.s64 + -3012;
	// addi r4,r8,12476
	ctx.r4.s64 = ctx.r8.s64 + 12476;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3012(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3012, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CC9D8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1816
	ctx.r3.s64 = ctx.r9.s64 + -1816;
	// addi r4,r8,12504
	ctx.r4.s64 = ctx.r8.s64 + 12504;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1816(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1816, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCA0C;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r8,12544
	ctx.r4.s64 = ctx.r8.s64 + 12544;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,916(r9)
	PPC_STORE_U32(ctx.r9.u32 + 916, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r11,r9,916
	ctx.r11.s64 = ctx.r9.s64 + 916;
	// stw r10,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CCA40;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1308
	ctx.r3.s64 = ctx.r9.s64 + -1308;
	// addi r4,r8,12588
	ctx.r4.s64 = ctx.r8.s64 + 12588;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1308(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1308, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCA74;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1008
	ctx.r3.s64 = ctx.r9.s64 + 1008;
	// addi r4,r8,-21864
	ctx.r4.s64 = ctx.r8.s64 + -21864;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1008(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1008, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCAA8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-180
	ctx.r3.s64 = ctx.r9.s64 + -180;
	// addi r4,r8,12632
	ctx.r4.s64 = ctx.r8.s64 + 12632;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-180(r9)
	PPC_STORE_U32(ctx.r9.u32 + -180, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCADC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-268
	ctx.r3.s64 = ctx.r9.s64 + -268;
	// addi r4,r8,12668
	ctx.r4.s64 = ctx.r8.s64 + 12668;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-268(r9)
	PPC_STORE_U32(ctx.r9.u32 + -268, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCB10;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,104
	ctx.r3.s64 = ctx.r9.s64 + 104;
	// addi r4,r8,12720
	ctx.r4.s64 = ctx.r8.s64 + 12720;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,104(r9)
	PPC_STORE_U32(ctx.r9.u32 + 104, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCB44;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-856
	ctx.r3.s64 = ctx.r9.s64 + -856;
	// addi r4,r8,12752
	ctx.r4.s64 = ctx.r8.s64 + 12752;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-856(r9)
	PPC_STORE_U32(ctx.r9.u32 + -856, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCB78;
	sub_8233E028(ctx, base);
	// lis r9,-32230
	ctx.r9.s64 = -2112225280;
	// lis r8,-31882
	ctx.r8.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r9,12780
	ctx.r4.s64 = ctx.r9.s64 + 12780;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r9,r8,-464
	ctx.r9.s64 = ctx.r8.s64 + -464;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-464(r8)
	PPC_STORE_U32(ctx.r8.u32 + -464, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CCBAC;
	sub_8233E028(ctx, base);
	// lis r8,-31882
	ctx.r8.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r7,-32230
	ctx.r7.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r8,-1516
	ctx.r3.s64 = ctx.r8.s64 + -1516;
	// addi r4,r7,12824
	ctx.r4.s64 = ctx.r7.s64 + 12824;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1516(r8)
	PPC_STORE_U32(ctx.r8.u32 + -1516, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCBE0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2684
	ctx.r3.s64 = ctx.r9.s64 + -2684;
	// addi r4,r8,12860
	ctx.r4.s64 = ctx.r8.s64 + 12860;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2684(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2684, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCC14;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,956
	ctx.r3.s64 = ctx.r9.s64 + 956;
	// addi r4,r8,12884
	ctx.r4.s64 = ctx.r8.s64 + 12884;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,956(r9)
	PPC_STORE_U32(ctx.r9.u32 + 956, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCC48;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-700
	ctx.r3.s64 = ctx.r9.s64 + -700;
	// addi r4,r8,12912
	ctx.r4.s64 = ctx.r8.s64 + 12912;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-700(r9)
	PPC_STORE_U32(ctx.r9.u32 + -700, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCC7C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1756
	ctx.r3.s64 = ctx.r9.s64 + -1756;
	// addi r4,r8,12944
	ctx.r4.s64 = ctx.r8.s64 + 12944;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1756(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1756, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCCB0;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,12964
	ctx.r4.s64 = ctx.r11.s64 + 12964;
	// li r6,1
	ctx.r6.s64 = 1;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r8,r9,-324
	ctx.r8.s64 = ctx.r9.s64 + -324;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-324(r9)
	PPC_STORE_U32(ctx.r9.u32 + -324, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CCCE4;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-3560
	ctx.r3.s64 = ctx.r5.s64 + -3560;
	// addi r4,r4,13024
	ctx.r4.s64 = ctx.r4.s64 + 13024;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3560(r5)
	PPC_STORE_U32(ctx.r5.u32 + -3560, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCD18;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3488
	ctx.r3.s64 = ctx.r9.s64 + -3488;
	// addi r4,r8,13076
	ctx.r4.s64 = ctx.r8.s64 + 13076;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3488(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3488, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCD4C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,764
	ctx.r3.s64 = ctx.r9.s64 + 764;
	// addi r4,r8,13100
	ctx.r4.s64 = ctx.r8.s64 + 13100;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,764(r9)
	PPC_STORE_U32(ctx.r9.u32 + 764, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCD80;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,468
	ctx.r3.s64 = ctx.r9.s64 + 468;
	// addi r4,r8,13120
	ctx.r4.s64 = ctx.r8.s64 + 13120;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,468(r9)
	PPC_STORE_U32(ctx.r9.u32 + 468, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCDB4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1728
	ctx.r3.s64 = ctx.r9.s64 + -1728;
	// addi r4,r8,13136
	ctx.r4.s64 = ctx.r8.s64 + 13136;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1728(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1728, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCDE8;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,13180
	ctx.r4.s64 = ctx.r11.s64 + 13180;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,192
	ctx.r8.s64 = ctx.r9.s64 + 192;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,192(r9)
	PPC_STORE_U32(ctx.r9.u32 + 192, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CCE1C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,1220
	ctx.r3.s64 = ctx.r5.s64 + 1220;
	// addi r4,r4,13224
	ctx.r4.s64 = ctx.r4.s64 + 13224;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1220(r5)
	PPC_STORE_U32(ctx.r5.u32 + 1220, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCE50;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1992
	ctx.r3.s64 = ctx.r9.s64 + -1992;
	// addi r4,r8,13240
	ctx.r4.s64 = ctx.r8.s64 + 13240;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1992(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1992, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCE84;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-480
	ctx.r3.s64 = ctx.r9.s64 + -480;
	// addi r4,r8,13272
	ctx.r4.s64 = ctx.r8.s64 + 13272;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-480(r9)
	PPC_STORE_U32(ctx.r9.u32 + -480, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCEB8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2832
	ctx.r3.s64 = ctx.r9.s64 + -2832;
	// addi r4,r8,13292
	ctx.r4.s64 = ctx.r8.s64 + 13292;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2832(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2832, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCEEC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3356
	ctx.r3.s64 = ctx.r9.s64 + -3356;
	// addi r4,r8,13320
	ctx.r4.s64 = ctx.r8.s64 + 13320;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3356(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3356, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCF20;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r10,-31882
	ctx.r10.s64 = -2089418752;
	// lis r9,-32230
	ctx.r9.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r9,13364
	ctx.r4.s64 = ctx.r9.s64 + 13364;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-2788(r10)
	PPC_STORE_U32(ctx.r10.u32 + -2788, ctx.r11.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r10,-2788
	ctx.r8.s64 = ctx.r10.s64 + -2788;
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r11.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CCF54;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-1736
	ctx.r3.s64 = ctx.r5.s64 + -1736;
	// addi r4,r4,13392
	ctx.r4.s64 = ctx.r4.s64 + 13392;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1736(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1736, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCF88;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2948
	ctx.r3.s64 = ctx.r9.s64 + -2948;
	// addi r4,r8,13428
	ctx.r4.s64 = ctx.r8.s64 + 13428;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2948(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2948, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCFBC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3516
	ctx.r3.s64 = ctx.r9.s64 + -3516;
	// addi r4,r8,13456
	ctx.r4.s64 = ctx.r8.s64 + 13456;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3516(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3516, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CCFF0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2860
	ctx.r3.s64 = ctx.r9.s64 + -2860;
	// addi r4,r8,13480
	ctx.r4.s64 = ctx.r8.s64 + 13480;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2860(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2860, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD024;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1932
	ctx.r3.s64 = ctx.r9.s64 + -1932;
	// addi r4,r8,13512
	ctx.r4.s64 = ctx.r8.s64 + 13512;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1932(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1932, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD058;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-536
	ctx.r3.s64 = ctx.r9.s64 + -536;
	// addi r4,r8,13540
	ctx.r4.s64 = ctx.r8.s64 + 13540;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-536(r9)
	PPC_STORE_U32(ctx.r9.u32 + -536, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD08C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r9,1128
	ctx.r3.s64 = ctx.r9.s64 + 1128;
	// addi r4,r8,13560
	ctx.r4.s64 = ctx.r8.s64 + 13560;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,1128(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1128, ctx.r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD0C0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1232
	ctx.r3.s64 = ctx.r9.s64 + -1232;
	// addi r4,r8,13580
	ctx.r4.s64 = ctx.r8.s64 + 13580;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1232(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1232, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD0F4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2112
	ctx.r3.s64 = ctx.r9.s64 + -2112;
	// addi r4,r8,13620
	ctx.r4.s64 = ctx.r8.s64 + 13620;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2112(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2112, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD128;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3408
	ctx.r3.s64 = ctx.r9.s64 + -3408;
	// addi r4,r8,13652
	ctx.r4.s64 = ctx.r8.s64 + 13652;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3408(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3408, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD15C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,232
	ctx.r3.s64 = ctx.r9.s64 + 232;
	// addi r4,r8,13680
	ctx.r4.s64 = ctx.r8.s64 + 13680;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,232(r9)
	PPC_STORE_U32(ctx.r9.u32 + 232, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD190;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-260
	ctx.r3.s64 = ctx.r9.s64 + -260;
	// addi r4,r8,13724
	ctx.r4.s64 = ctx.r8.s64 + 13724;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-260(r9)
	PPC_STORE_U32(ctx.r9.u32 + -260, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD1C4;
	sub_8233E028(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r11,13760
	ctx.r4.s64 = ctx.r11.s64 + 13760;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r8,r9,852
	ctx.r8.s64 = ctx.r9.s64 + 852;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,852(r9)
	PPC_STORE_U32(ctx.r9.u32 + 852, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CD1F8;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-2220
	ctx.r3.s64 = ctx.r5.s64 + -2220;
	// addi r4,r4,13800
	ctx.r4.s64 = ctx.r4.s64 + 13800;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2220(r5)
	PPC_STORE_U32(ctx.r5.u32 + -2220, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD22C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-772
	ctx.r3.s64 = ctx.r9.s64 + -772;
	// addi r4,r8,13828
	ctx.r4.s64 = ctx.r8.s64 + 13828;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-772(r9)
	PPC_STORE_U32(ctx.r9.u32 + -772, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD260;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2016
	ctx.r3.s64 = ctx.r9.s64 + -2016;
	// addi r4,r8,13860
	ctx.r4.s64 = ctx.r8.s64 + 13860;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2016(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2016, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD294;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1300
	ctx.r3.s64 = ctx.r9.s64 + -1300;
	// addi r4,r8,13916
	ctx.r4.s64 = ctx.r8.s64 + 13916;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1300(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1300, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD2C8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-872
	ctx.r3.s64 = ctx.r9.s64 + -872;
	// addi r4,r8,13952
	ctx.r4.s64 = ctx.r8.s64 + 13952;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-872(r9)
	PPC_STORE_U32(ctx.r9.u32 + -872, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD2FC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-1596
	ctx.r8.s64 = ctx.r9.s64 + -1596;
	// stw r11,-1596(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1596, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32230
	ctx.r6.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,14000
	ctx.r4.s64 = ctx.r6.s64 + 14000;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD330;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-1112
	ctx.r3.s64 = ctx.r5.s64 + -1112;
	// addi r4,r4,14044
	ctx.r4.s64 = ctx.r4.s64 + 14044;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1112(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1112, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD364;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2272
	ctx.r3.s64 = ctx.r9.s64 + -2272;
	// addi r4,r8,14076
	ctx.r4.s64 = ctx.r8.s64 + 14076;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2272(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2272, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD398;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-72
	ctx.r3.s64 = ctx.r9.s64 + -72;
	// addi r4,r8,14116
	ctx.r4.s64 = ctx.r8.s64 + 14116;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-72(r9)
	PPC_STORE_U32(ctx.r9.u32 + -72, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD3CC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-164
	ctx.r3.s64 = ctx.r9.s64 + -164;
	// addi r4,r8,14168
	ctx.r4.s64 = ctx.r8.s64 + 14168;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-164(r9)
	PPC_STORE_U32(ctx.r9.u32 + -164, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD400;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-724
	ctx.r3.s64 = ctx.r9.s64 + -724;
	// addi r4,r8,14212
	ctx.r4.s64 = ctx.r8.s64 + 14212;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-724(r9)
	PPC_STORE_U32(ctx.r9.u32 + -724, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD434;
	sub_8233E028(ctx, base);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r10,14236
	ctx.r4.s64 = ctx.r10.s64 + 14236;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r8,r9,248
	ctx.r8.s64 = ctx.r9.s64 + 248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,248(r9)
	PPC_STORE_U32(ctx.r9.u32 + 248, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CD468;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r5,-552
	ctx.r3.s64 = ctx.r5.s64 + -552;
	// addi r4,r4,14292
	ctx.r4.s64 = ctx.r4.s64 + 14292;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-552(r5)
	PPC_STORE_U32(ctx.r5.u32 + -552, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD49C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,652
	ctx.r3.s64 = ctx.r9.s64 + 652;
	// addi r4,r8,14324
	ctx.r4.s64 = ctx.r8.s64 + 14324;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,652(r9)
	PPC_STORE_U32(ctx.r9.u32 + 652, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD4D0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,716
	ctx.r3.s64 = ctx.r9.s64 + 716;
	// addi r4,r8,14372
	ctx.r4.s64 = ctx.r8.s64 + 14372;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,716(r9)
	PPC_STORE_U32(ctx.r9.u32 + 716, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD504;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2636
	ctx.r3.s64 = ctx.r9.s64 + -2636;
	// addi r4,r8,14392
	ctx.r4.s64 = ctx.r8.s64 + 14392;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2636(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2636, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD538;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2592
	ctx.r3.s64 = ctx.r9.s64 + -2592;
	// addi r4,r8,14448
	ctx.r4.s64 = ctx.r8.s64 + 14448;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2592(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2592, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD56C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r31,r9,-3324
	ctx.r31.s64 = ctx.r9.s64 + -3324;
	// addi r4,r8,14480
	ctx.r4.s64 = ctx.r8.s64 + 14480;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-3324(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3324, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CD5A0;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-28
	ctx.r3.s64 = ctx.r5.s64 + -28;
	// addi r4,r4,14508
	ctx.r4.s64 = ctx.r4.s64 + 14508;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-28(r5)
	PPC_STORE_U32(ctx.r5.u32 + -28, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD5D4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3300
	ctx.r3.s64 = ctx.r9.s64 + -3300;
	// addi r4,r8,14544
	ctx.r4.s64 = ctx.r8.s64 + 14544;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3300(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3300, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD608;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3332
	ctx.r3.s64 = ctx.r9.s64 + -3332;
	// addi r4,r8,14596
	ctx.r4.s64 = ctx.r8.s64 + 14596;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3332(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3332, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD63C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,772
	ctx.r3.s64 = ctx.r9.s64 + 772;
	// addi r4,r8,14616
	ctx.r4.s64 = ctx.r8.s64 + 14616;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,772(r9)
	PPC_STORE_U32(ctx.r9.u32 + 772, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD670;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3060
	ctx.r3.s64 = ctx.r9.s64 + -3060;
	// addi r4,r8,14652
	ctx.r4.s64 = ctx.r8.s64 + 14652;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3060(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3060, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD6A4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3452
	ctx.r3.s64 = ctx.r9.s64 + -3452;
	// addi r4,r8,14692
	ctx.r4.s64 = ctx.r8.s64 + 14692;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3452(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3452, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD6D8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// addi r8,r9,-2544
	ctx.r8.s64 = ctx.r9.s64 + -2544;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r6,-32230
	ctx.r6.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,14732
	ctx.r4.s64 = ctx.r6.s64 + 14732;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,-2544(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2544, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CD70C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-3432
	ctx.r3.s64 = ctx.r5.s64 + -3432;
	// addi r4,r4,14760
	ctx.r4.s64 = ctx.r4.s64 + 14760;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3432(r5)
	PPC_STORE_U32(ctx.r5.u32 + -3432, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD740;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1500
	ctx.r3.s64 = ctx.r9.s64 + -1500;
	// addi r4,r8,14780
	ctx.r4.s64 = ctx.r8.s64 + 14780;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1500(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1500, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD774;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2572
	ctx.r3.s64 = ctx.r9.s64 + -2572;
	// addi r4,r8,14812
	ctx.r4.s64 = ctx.r8.s64 + 14812;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2572(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2572, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD7A8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2536
	ctx.r3.s64 = ctx.r9.s64 + -2536;
	// addi r4,r8,14844
	ctx.r4.s64 = ctx.r8.s64 + 14844;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2536(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2536, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD7DC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2160
	ctx.r3.s64 = ctx.r9.s64 + -2160;
	// addi r4,r8,14868
	ctx.r4.s64 = ctx.r8.s64 + 14868;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2160(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2160, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD810;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-3416
	ctx.r8.s64 = ctx.r9.s64 + -3416;
	// stw r11,-3416(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3416, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32230
	ctx.r6.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,14888
	ctx.r4.s64 = ctx.r6.s64 + 14888;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD844;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-2088
	ctx.r3.s64 = ctx.r5.s64 + -2088;
	// addi r4,r4,14948
	ctx.r4.s64 = ctx.r4.s64 + 14948;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2088(r5)
	PPC_STORE_U32(ctx.r5.u32 + -2088, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD878;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,860
	ctx.r3.s64 = ctx.r9.s64 + 860;
	// addi r4,r8,15008
	ctx.r4.s64 = ctx.r8.s64 + 15008;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,860(r9)
	PPC_STORE_U32(ctx.r9.u32 + 860, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD8AC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-12
	ctx.r3.s64 = ctx.r9.s64 + -12;
	// addi r4,r8,15036
	ctx.r4.s64 = ctx.r8.s64 + 15036;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-12(r9)
	PPC_STORE_U32(ctx.r9.u32 + -12, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD8E0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,460
	ctx.r3.s64 = ctx.r9.s64 + 460;
	// addi r4,r8,15100
	ctx.r4.s64 = ctx.r8.s64 + 15100;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,460(r9)
	PPC_STORE_U32(ctx.r9.u32 + 460, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD914;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,272
	ctx.r3.s64 = ctx.r9.s64 + 272;
	// addi r4,r8,15124
	ctx.r4.s64 = ctx.r8.s64 + 15124;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,272(r9)
	PPC_STORE_U32(ctx.r9.u32 + 272, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD948;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r7,r9,-2168
	ctx.r7.s64 = ctx.r9.s64 + -2168;
	// addi r4,r8,15140
	ctx.r4.s64 = ctx.r8.s64 + 15140;
	// stw r11,-2168(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2168, ctx.r11.u32);
	// stw r10,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r10.u32);
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD97C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-2664
	ctx.r3.s64 = ctx.r5.s64 + -2664;
	// addi r4,r4,15172
	ctx.r4.s64 = ctx.r4.s64 + 15172;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2664(r5)
	PPC_STORE_U32(ctx.r5.u32 + -2664, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD9B0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,312
	ctx.r3.s64 = ctx.r9.s64 + 312;
	// addi r4,r8,15204
	ctx.r4.s64 = ctx.r8.s64 + 15204;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,312(r9)
	PPC_STORE_U32(ctx.r9.u32 + 312, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CD9E4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3252
	ctx.r3.s64 = ctx.r9.s64 + -3252;
	// addi r4,r8,15260
	ctx.r4.s64 = ctx.r8.s64 + 15260;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3252(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3252, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDA18;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-376
	ctx.r3.s64 = ctx.r9.s64 + -376;
	// addi r4,r8,15280
	ctx.r4.s64 = ctx.r8.s64 + 15280;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-376(r9)
	PPC_STORE_U32(ctx.r9.u32 + -376, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDA4C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,440
	ctx.r3.s64 = ctx.r9.s64 + 440;
	// addi r4,r8,15316
	ctx.r4.s64 = ctx.r8.s64 + 15316;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,440(r9)
	PPC_STORE_U32(ctx.r9.u32 + 440, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDA80;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-688
	ctx.r3.s64 = ctx.r9.s64 + -688;
	// addi r4,r8,15336
	ctx.r4.s64 = ctx.r8.s64 + 15336;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-688(r9)
	PPC_STORE_U32(ctx.r9.u32 + -688, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDAB4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2152
	ctx.r3.s64 = ctx.r9.s64 + -2152;
	// addi r4,r8,15384
	ctx.r4.s64 = ctx.r8.s64 + 15384;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2152(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2152, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDAE8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1204
	ctx.r3.s64 = ctx.r9.s64 + -1204;
	// addi r4,r8,15404
	ctx.r4.s64 = ctx.r8.s64 + 15404;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1204(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1204, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDB1C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-784
	ctx.r3.s64 = ctx.r9.s64 + -784;
	// addi r4,r8,15420
	ctx.r4.s64 = ctx.r8.s64 + 15420;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-784(r9)
	PPC_STORE_U32(ctx.r9.u32 + -784, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDB50;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1276
	ctx.r3.s64 = ctx.r9.s64 + -1276;
	// addi r4,r8,15460
	ctx.r4.s64 = ctx.r8.s64 + 15460;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1276(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1276, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDB84;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1224
	ctx.r3.s64 = ctx.r9.s64 + -1224;
	// addi r4,r8,15496
	ctx.r4.s64 = ctx.r8.s64 + 15496;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1224(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1224, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDBB8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,748
	ctx.r3.s64 = ctx.r9.s64 + 748;
	// addi r4,r8,15536
	ctx.r4.s64 = ctx.r8.s64 + 15536;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,748(r9)
	PPC_STORE_U32(ctx.r9.u32 + 748, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDBEC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,-3508
	ctx.r8.s64 = ctx.r9.s64 + -3508;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r6,-32230
	ctx.r6.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,15568
	ctx.r4.s64 = ctx.r6.s64 + 15568;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3508(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3508, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDC20;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-2888
	ctx.r3.s64 = ctx.r5.s64 + -2888;
	// addi r4,r4,15592
	ctx.r4.s64 = ctx.r4.s64 + 15592;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2888(r5)
	PPC_STORE_U32(ctx.r5.u32 + -2888, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDC54;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,572
	ctx.r3.s64 = ctx.r9.s64 + 572;
	// addi r4,r8,15632
	ctx.r4.s64 = ctx.r8.s64 + 15632;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,572(r9)
	PPC_STORE_U32(ctx.r9.u32 + 572, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDC88;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-504
	ctx.r3.s64 = ctx.r9.s64 + -504;
	// addi r4,r8,15668
	ctx.r4.s64 = ctx.r8.s64 + 15668;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-504(r9)
	PPC_STORE_U32(ctx.r9.u32 + -504, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDCBC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2316
	ctx.r3.s64 = ctx.r9.s64 + -2316;
	// addi r4,r8,1096
	ctx.r4.s64 = ctx.r8.s64 + 1096;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2316(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2316, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDCF0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,340
	ctx.r3.s64 = ctx.r9.s64 + 340;
	// addi r4,r8,15712
	ctx.r4.s64 = ctx.r8.s64 + 15712;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,340(r9)
	PPC_STORE_U32(ctx.r9.u32 + 340, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDD24;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r10,-31882
	ctx.r10.s64 = -2089418752;
	// addi r9,r10,-2880
	ctx.r9.s64 = ctx.r10.s64 + -2880;
	// stw r11,-2880(r10)
	PPC_STORE_U32(ctx.r10.u32 + -2880, ctx.r11.u32);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r8,15744
	ctx.r4.s64 = ctx.r8.s64 + 15744;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDD58;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,160
	ctx.r3.s64 = ctx.r5.s64 + 160;
	// addi r4,r4,15768
	ctx.r4.s64 = ctx.r4.s64 + 15768;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,160(r5)
	PPC_STORE_U32(ctx.r5.u32 + 160, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDD8C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,924
	ctx.r3.s64 = ctx.r9.s64 + 924;
	// addi r4,r8,15820
	ctx.r4.s64 = ctx.r8.s64 + 15820;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,924(r9)
	PPC_STORE_U32(ctx.r9.u32 + 924, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDDC0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1152
	ctx.r3.s64 = ctx.r9.s64 + 1152;
	// addi r4,r8,15836
	ctx.r4.s64 = ctx.r8.s64 + 15836;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1152(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1152, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDDF4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2068
	ctx.r3.s64 = ctx.r9.s64 + -2068;
	// addi r4,r8,15864
	ctx.r4.s64 = ctx.r8.s64 + 15864;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2068(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2068, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDE28;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3548
	ctx.r3.s64 = ctx.r9.s64 + -3548;
	// addi r4,r8,15904
	ctx.r4.s64 = ctx.r8.s64 + 15904;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3548(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3548, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDE5C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r7,r9,-2760
	ctx.r7.s64 = ctx.r9.s64 + -2760;
	// stw r11,-2760(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2760, ctx.r11.u32);
	// stw r10,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r10.u32);
	// addi r4,r8,15928
	ctx.r4.s64 = ctx.r8.s64 + 15928;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDE90;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,816
	ctx.r3.s64 = ctx.r5.s64 + 816;
	// addi r4,r4,15964
	ctx.r4.s64 = ctx.r4.s64 + 15964;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,816(r5)
	PPC_STORE_U32(ctx.r5.u32 + 816, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDEC4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2644
	ctx.r3.s64 = ctx.r9.s64 + -2644;
	// addi r4,r8,15996
	ctx.r4.s64 = ctx.r8.s64 + 15996;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2644(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2644, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDEF8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-44
	ctx.r3.s64 = ctx.r9.s64 + -44;
	// addi r4,r8,16028
	ctx.r4.s64 = ctx.r8.s64 + 16028;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-44(r9)
	PPC_STORE_U32(ctx.r9.u32 + -44, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDF2C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2308
	ctx.r3.s64 = ctx.r9.s64 + -2308;
	// addi r4,r8,16060
	ctx.r4.s64 = ctx.r8.s64 + 16060;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2308(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2308, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDF60;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1176
	ctx.r3.s64 = ctx.r9.s64 + 1176;
	// addi r4,r8,16092
	ctx.r4.s64 = ctx.r8.s64 + 16092;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1176(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1176, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDF94;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r5,r9,-1264
	ctx.r5.s64 = ctx.r9.s64 + -1264;
	// addi r4,r8,16144
	ctx.r4.s64 = ctx.r8.s64 + 16144;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1264(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1264, ctx.r11.u32);
	// stw r10,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r10.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDFC8;
	sub_8233E028(ctx, base);
	// lis r3,-31882
	ctx.r3.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-32230
	ctx.r9.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r3,580
	ctx.r8.s64 = ctx.r3.s64 + 580;
	// addi r4,r9,16176
	ctx.r4.s64 = ctx.r9.s64 + 16176;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,580(r3)
	PPC_STORE_U32(ctx.r3.u32 + 580, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CDFFC;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-1808
	ctx.r3.s64 = ctx.r5.s64 + -1808;
	// addi r4,r4,16208
	ctx.r4.s64 = ctx.r4.s64 + 16208;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1808(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1808, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE030;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,700
	ctx.r3.s64 = ctx.r9.s64 + 700;
	// addi r4,r8,16240
	ctx.r4.s64 = ctx.r8.s64 + 16240;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,700(r9)
	PPC_STORE_U32(ctx.r9.u32 + 700, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE064;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-816
	ctx.r3.s64 = ctx.r9.s64 + -816;
	// addi r4,r8,16272
	ctx.r4.s64 = ctx.r8.s64 + 16272;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-816(r9)
	PPC_STORE_U32(ctx.r9.u32 + -816, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE098;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,968
	ctx.r3.s64 = ctx.r9.s64 + 968;
	// addi r4,r8,16300
	ctx.r4.s64 = ctx.r8.s64 + 16300;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,968(r9)
	PPC_STORE_U32(ctx.r9.u32 + 968, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE0CC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2980
	ctx.r3.s64 = ctx.r9.s64 + -2980;
	// addi r4,r8,16340
	ctx.r4.s64 = ctx.r8.s64 + 16340;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2980(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2980, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE100;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r9,-2528
	ctx.r3.s64 = ctx.r9.s64 + -2528;
	// addi r4,r8,16372
	ctx.r4.s64 = ctx.r8.s64 + 16372;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,-2528(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2528, ctx.r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE134;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1636
	ctx.r3.s64 = ctx.r9.s64 + -1636;
	// addi r4,r8,16412
	ctx.r4.s64 = ctx.r8.s64 + 16412;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1636(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1636, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE168;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3192
	ctx.r3.s64 = ctx.r9.s64 + -3192;
	// addi r4,r8,16444
	ctx.r4.s64 = ctx.r8.s64 + 16444;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3192(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3192, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE19C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-564
	ctx.r3.s64 = ctx.r9.s64 + -564;
	// addi r4,r8,16472
	ctx.r4.s64 = ctx.r8.s64 + 16472;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-564(r9)
	PPC_STORE_U32(ctx.r9.u32 + -564, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE1D0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-432
	ctx.r3.s64 = ctx.r9.s64 + -432;
	// addi r4,r8,16492
	ctx.r4.s64 = ctx.r8.s64 + 16492;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-432(r9)
	PPC_STORE_U32(ctx.r9.u32 + -432, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE204;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,84
	ctx.r3.s64 = ctx.r9.s64 + 84;
	// addi r4,r8,16516
	ctx.r4.s64 = ctx.r8.s64 + 16516;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,84(r9)
	PPC_STORE_U32(ctx.r9.u32 + 84, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE238;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,8
	ctx.r8.s64 = ctx.r9.s64 + 8;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r6,-32230
	ctx.r6.s64 = -2112225280;
	// stw r11,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, ctx.r11.u32);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,16544
	ctx.r4.s64 = ctx.r6.s64 + 16544;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE26C;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-1292
	ctx.r3.s64 = ctx.r5.s64 + -1292;
	// addi r4,r4,16628
	ctx.r4.s64 = ctx.r4.s64 + 16628;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1292(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1292, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE2A0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,304
	ctx.r3.s64 = ctx.r9.s64 + 304;
	// addi r4,r8,16660
	ctx.r4.s64 = ctx.r8.s64 + 16660;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,304(r9)
	PPC_STORE_U32(ctx.r9.u32 + 304, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE2D4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2604
	ctx.r3.s64 = ctx.r9.s64 + -2604;
	// addi r4,r8,16696
	ctx.r4.s64 = ctx.r8.s64 + 16696;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2604(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2604, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE308;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,172
	ctx.r3.s64 = ctx.r9.s64 + 172;
	// addi r4,r8,16732
	ctx.r4.s64 = ctx.r8.s64 + 16732;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,172(r9)
	PPC_STORE_U32(ctx.r9.u32 + 172, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE33C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3528
	ctx.r3.s64 = ctx.r9.s64 + -3528;
	// addi r4,r8,16768
	ctx.r4.s64 = ctx.r8.s64 + 16768;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3528(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3528, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE370;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-3540
	ctx.r8.s64 = ctx.r9.s64 + -3540;
	// stw r11,-3540(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3540, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32230
	ctx.r6.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,16796
	ctx.r4.s64 = ctx.r6.s64 + 16796;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE3A4;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-1952
	ctx.r3.s64 = ctx.r5.s64 + -1952;
	// addi r4,r4,16820
	ctx.r4.s64 = ctx.r4.s64 + 16820;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1952(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1952, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE3D8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-300
	ctx.r3.s64 = ctx.r9.s64 + -300;
	// addi r4,r8,16848
	ctx.r4.s64 = ctx.r8.s64 + 16848;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-300(r9)
	PPC_STORE_U32(ctx.r9.u32 + -300, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE40C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1436
	ctx.r3.s64 = ctx.r9.s64 + -1436;
	// addi r4,r8,16884
	ctx.r4.s64 = ctx.r8.s64 + 16884;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1436(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1436, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE440;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-152
	ctx.r3.s64 = ctx.r9.s64 + -152;
	// addi r4,r8,16908
	ctx.r4.s64 = ctx.r8.s64 + 16908;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-152(r9)
	PPC_STORE_U32(ctx.r9.u32 + -152, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE474;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1216
	ctx.r3.s64 = ctx.r9.s64 + -1216;
	// addi r4,r8,16952
	ctx.r4.s64 = ctx.r8.s64 + 16952;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1216(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1216, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE4A8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r6,r9,-2972
	ctx.r6.s64 = ctx.r9.s64 + -2972;
	// addi r4,r8,17004
	ctx.r4.s64 = ctx.r8.s64 + 17004;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,-2972(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2972, ctx.r11.u32);
	// stw r10,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r10.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE4DC;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-716
	ctx.r3.s64 = ctx.r5.s64 + -716;
	// addi r4,r4,17020
	ctx.r4.s64 = ctx.r4.s64 + 17020;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-716(r5)
	PPC_STORE_U32(ctx.r5.u32 + -716, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE510;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,684
	ctx.r3.s64 = ctx.r9.s64 + 684;
	// addi r4,r8,17064
	ctx.r4.s64 = ctx.r8.s64 + 17064;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,684(r9)
	PPC_STORE_U32(ctx.r9.u32 + 684, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE544;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2564
	ctx.r3.s64 = ctx.r9.s64 + -2564;
	// addi r4,r8,17116
	ctx.r4.s64 = ctx.r8.s64 + 17116;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2564(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2564, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE578;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2424
	ctx.r3.s64 = ctx.r9.s64 + -2424;
	// addi r4,r8,17156
	ctx.r4.s64 = ctx.r8.s64 + 17156;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2424(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2424, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE5AC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-448
	ctx.r3.s64 = ctx.r9.s64 + -448;
	// addi r4,r8,17212
	ctx.r4.s64 = ctx.r8.s64 + 17212;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-448(r9)
	PPC_STORE_U32(ctx.r9.u32 + -448, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE5E0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r9,-120
	ctx.r3.s64 = ctx.r9.s64 + -120;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r8,17260
	ctx.r4.s64 = ctx.r8.s64 + 17260;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-120(r9)
	PPC_STORE_U32(ctx.r9.u32 + -120, ctx.r11.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CE614;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2004
	ctx.r3.s64 = ctx.r9.s64 + -2004;
	// addi r4,r8,17296
	ctx.r4.s64 = ctx.r8.s64 + 17296;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2004(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2004, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE648;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,996
	ctx.r3.s64 = ctx.r9.s64 + 996;
	// addi r4,r8,17348
	ctx.r4.s64 = ctx.r8.s64 + 17348;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,996(r9)
	PPC_STORE_U32(ctx.r9.u32 + 996, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE67C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2752
	ctx.r3.s64 = ctx.r9.s64 + -2752;
	// addi r4,r8,17392
	ctx.r4.s64 = ctx.r8.s64 + 17392;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2752(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2752, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE6B0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1004
	ctx.r3.s64 = ctx.r9.s64 + -1004;
	// addi r4,r8,17420
	ctx.r4.s64 = ctx.r8.s64 + 17420;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1004(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1004, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE6E4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1644
	ctx.r3.s64 = ctx.r9.s64 + -1644;
	// addi r4,r8,17452
	ctx.r4.s64 = ctx.r8.s64 + 17452;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1644(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1644, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE718;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,884
	ctx.r3.s64 = ctx.r9.s64 + 884;
	// addi r4,r8,17496
	ctx.r4.s64 = ctx.r8.s64 + 17496;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,884(r9)
	PPC_STORE_U32(ctx.r9.u32 + 884, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE74C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// addi r8,r9,412
	ctx.r8.s64 = ctx.r9.s64 + 412;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r6,-32230
	ctx.r6.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,17568
	ctx.r4.s64 = ctx.r6.s64 + 17568;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,412(r9)
	PPC_STORE_U32(ctx.r9.u32 + 412, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CE780;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-1920
	ctx.r3.s64 = ctx.r5.s64 + -1920;
	// addi r4,r4,17596
	ctx.r4.s64 = ctx.r4.s64 + 17596;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1920(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1920, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE7B4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3164
	ctx.r3.s64 = ctx.r9.s64 + -3164;
	// addi r4,r8,17640
	ctx.r4.s64 = ctx.r8.s64 + 17640;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3164(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3164, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE7E8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-440
	ctx.r3.s64 = ctx.r9.s64 + -440;
	// addi r4,r8,17692
	ctx.r4.s64 = ctx.r8.s64 + 17692;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-440(r9)
	PPC_STORE_U32(ctx.r9.u32 + -440, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE81C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3116
	ctx.r3.s64 = ctx.r9.s64 + -3116;
	// addi r4,r8,17740
	ctx.r4.s64 = ctx.r8.s64 + 17740;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3116(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3116, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE850;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1168
	ctx.r3.s64 = ctx.r9.s64 + 1168;
	// addi r4,r8,17788
	ctx.r4.s64 = ctx.r8.s64 + 17788;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1168(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1168, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE884;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-980
	ctx.r8.s64 = ctx.r9.s64 + -980;
	// stw r11,-980(r9)
	PPC_STORE_U32(ctx.r9.u32 + -980, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32230
	ctx.r6.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,17824
	ctx.r4.s64 = ctx.r6.s64 + 17824;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE8B8;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-1508
	ctx.r3.s64 = ctx.r5.s64 + -1508;
	// addi r4,r4,17884
	ctx.r4.s64 = ctx.r4.s64 + 17884;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1508(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1508, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE8EC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-488
	ctx.r3.s64 = ctx.r9.s64 + -488;
	// addi r4,r8,17936
	ctx.r4.s64 = ctx.r8.s64 + 17936;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-488(r9)
	PPC_STORE_U32(ctx.r9.u32 + -488, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE920;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3072
	ctx.r3.s64 = ctx.r9.s64 + -3072;
	// addi r4,r8,17960
	ctx.r4.s64 = ctx.r8.s64 + 17960;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3072(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3072, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE954;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,508
	ctx.r3.s64 = ctx.r9.s64 + 508;
	// addi r4,r8,18000
	ctx.r4.s64 = ctx.r8.s64 + 18000;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,508(r9)
	PPC_STORE_U32(ctx.r9.u32 + 508, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE988;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2440
	ctx.r3.s64 = ctx.r9.s64 + -2440;
	// addi r4,r8,18024
	ctx.r4.s64 = ctx.r8.s64 + 18024;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2440(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2440, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE9BC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r7,r9,-1824
	ctx.r7.s64 = ctx.r9.s64 + -1824;
	// addi r4,r8,18104
	ctx.r4.s64 = ctx.r8.s64 + 18104;
	// stw r11,-1824(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1824, ctx.r11.u32);
	// stw r10,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r10.u32);
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CE9F0;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-1184
	ctx.r3.s64 = ctx.r5.s64 + -1184;
	// addi r4,r4,18188
	ctx.r4.s64 = ctx.r4.s64 + 18188;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1184(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1184, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEA24;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-644
	ctx.r3.s64 = ctx.r9.s64 + -644;
	// addi r4,r8,18232
	ctx.r4.s64 = ctx.r8.s64 + 18232;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-644(r9)
	PPC_STORE_U32(ctx.r9.u32 + -644, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEA58;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2768
	ctx.r3.s64 = ctx.r9.s64 + -2768;
	// addi r4,r8,18272
	ctx.r4.s64 = ctx.r8.s64 + 18272;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2768(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2768, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEA8C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-88
	ctx.r3.s64 = ctx.r9.s64 + -88;
	// addi r4,r8,18292
	ctx.r4.s64 = ctx.r8.s64 + 18292;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-88(r9)
	PPC_STORE_U32(ctx.r9.u32 + -88, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEAC0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2628
	ctx.r3.s64 = ctx.r9.s64 + -2628;
	// addi r4,r8,18348
	ctx.r4.s64 = ctx.r8.s64 + 18348;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2628(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2628, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEAF4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2348
	ctx.r3.s64 = ctx.r9.s64 + -2348;
	// addi r4,r8,18392
	ctx.r4.s64 = ctx.r8.s64 + 18392;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2348(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2348, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEB28;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2932
	ctx.r3.s64 = ctx.r9.s64 + -2932;
	// addi r4,r8,18460
	ctx.r4.s64 = ctx.r8.s64 + 18460;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2932(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2932, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEB5C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2512
	ctx.r3.s64 = ctx.r9.s64 + -2512;
	// addi r4,r8,18500
	ctx.r4.s64 = ctx.r8.s64 + 18500;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2512(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2512, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEB90;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,756
	ctx.r3.s64 = ctx.r9.s64 + 756;
	// addi r4,r8,18528
	ctx.r4.s64 = ctx.r8.s64 + 18528;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,756(r9)
	PPC_STORE_U32(ctx.r9.u32 + 756, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEBC4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1120
	ctx.r3.s64 = ctx.r9.s64 + -1120;
	// addi r4,r8,18560
	ctx.r4.s64 = ctx.r8.s64 + 18560;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1120(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1120, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEBF8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,36
	ctx.r3.s64 = ctx.r9.s64 + 36;
	// addi r4,r8,18592
	ctx.r4.s64 = ctx.r8.s64 + 18592;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,36(r9)
	PPC_STORE_U32(ctx.r9.u32 + 36, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEC2C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2076
	ctx.r3.s64 = ctx.r9.s64 + -2076;
	// addi r4,r8,18624
	ctx.r4.s64 = ctx.r8.s64 + 18624;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2076(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2076, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEC60;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,-1616
	ctx.r8.s64 = ctx.r9.s64 + -1616;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r6,-32230
	ctx.r6.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,18652
	ctx.r4.s64 = ctx.r6.s64 + 18652;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1616(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1616, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEC94;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-952
	ctx.r3.s64 = ctx.r5.s64 + -952;
	// addi r4,r4,18684
	ctx.r4.s64 = ctx.r4.s64 + 18684;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-952(r5)
	PPC_STORE_U32(ctx.r5.u32 + -952, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CECC8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1360
	ctx.r3.s64 = ctx.r9.s64 + -1360;
	// addi r4,r8,18712
	ctx.r4.s64 = ctx.r8.s64 + 18712;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1360(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1360, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CECFC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1448
	ctx.r3.s64 = ctx.r9.s64 + -1448;
	// addi r4,r8,18720
	ctx.r4.s64 = ctx.r8.s64 + 18720;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1448(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1448, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CED30;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1044
	ctx.r3.s64 = ctx.r9.s64 + 1044;
	// addi r4,r8,18744
	ctx.r4.s64 = ctx.r8.s64 + 18744;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1044(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1044, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CED64;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-52
	ctx.r3.s64 = ctx.r9.s64 + -52;
	// addi r4,r8,18768
	ctx.r4.s64 = ctx.r8.s64 + 18768;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-52(r9)
	PPC_STORE_U32(ctx.r9.u32 + -52, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CED98;
	sub_8233E028(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r10,-31882
	ctx.r10.s64 = -2089418752;
	// addi r9,r10,-1480
	ctx.r9.s64 = ctx.r10.s64 + -1480;
	// stw r11,-1480(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1480, ctx.r11.u32);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r8,18804
	ctx.r4.s64 = ctx.r8.s64 + 18804;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r11.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEDCC;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-608
	ctx.r3.s64 = ctx.r5.s64 + -608;
	// addi r4,r4,18816
	ctx.r4.s64 = ctx.r4.s64 + 18816;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-608(r5)
	PPC_STORE_U32(ctx.r5.u32 + -608, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEE00;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2912
	ctx.r3.s64 = ctx.r9.s64 + -2912;
	// addi r4,r8,18860
	ctx.r4.s64 = ctx.r8.s64 + 18860;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2912(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2912, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEE34;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-524
	ctx.r3.s64 = ctx.r9.s64 + -524;
	// addi r4,r8,18904
	ctx.r4.s64 = ctx.r8.s64 + 18904;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-524(r9)
	PPC_STORE_U32(ctx.r9.u32 + -524, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEE68;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1608
	ctx.r3.s64 = ctx.r9.s64 + -1608;
	// addi r4,r8,18924
	ctx.r4.s64 = ctx.r8.s64 + 18924;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1608(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1608, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEE9C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2956
	ctx.r3.s64 = ctx.r9.s64 + -2956;
	// addi r4,r8,18972
	ctx.r4.s64 = ctx.r8.s64 + 18972;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2956(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2956, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEED0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r7,r9,-3244
	ctx.r7.s64 = ctx.r9.s64 + -3244;
	// stw r11,-3244(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3244, ctx.r11.u32);
	// stw r10,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r10.u32);
	// addi r4,r8,19000
	ctx.r4.s64 = ctx.r8.s64 + 19000;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEF04;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,452
	ctx.r3.s64 = ctx.r5.s64 + 452;
	// addi r4,r4,19032
	ctx.r4.s64 = ctx.r4.s64 + 19032;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,452(r5)
	PPC_STORE_U32(ctx.r5.u32 + 452, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEF38;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-104
	ctx.r3.s64 = ctx.r9.s64 + -104;
	// addi r4,r8,19076
	ctx.r4.s64 = ctx.r8.s64 + 19076;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-104(r9)
	PPC_STORE_U32(ctx.r9.u32 + -104, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEF6C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,800
	ctx.r3.s64 = ctx.r9.s64 + 800;
	// addi r4,r8,19104
	ctx.r4.s64 = ctx.r8.s64 + 19104;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,800(r9)
	PPC_STORE_U32(ctx.r9.u32 + 800, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEFA0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-676
	ctx.r3.s64 = ctx.r9.s64 + -676;
	// addi r4,r8,19136
	ctx.r4.s64 = ctx.r8.s64 + 19136;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-676(r9)
	PPC_STORE_U32(ctx.r9.u32 + -676, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CEFD4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-80
	ctx.r3.s64 = ctx.r9.s64 + -80;
	// addi r4,r8,19160
	ctx.r4.s64 = ctx.r8.s64 + 19160;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-80(r9)
	PPC_STORE_U32(ctx.r9.u32 + -80, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF008;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r5,r9,-2868
	ctx.r5.s64 = ctx.r9.s64 + -2868;
	// addi r4,r8,19192
	ctx.r4.s64 = ctx.r8.s64 + 19192;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2868(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2868, ctx.r11.u32);
	// stw r10,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r10.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF03C;
	sub_8233E028(ctx, base);
	// lis r3,-31882
	ctx.r3.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r9,-32230
	ctx.r9.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r3,-3236
	ctx.r8.s64 = ctx.r3.s64 + -3236;
	// addi r4,r9,19216
	ctx.r4.s64 = ctx.r9.s64 + 19216;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3236(r3)
	PPC_STORE_U32(ctx.r3.u32 + -3236, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF070;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,1088
	ctx.r3.s64 = ctx.r5.s64 + 1088;
	// addi r4,r4,19252
	ctx.r4.s64 = ctx.r4.s64 + 19252;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1088(r5)
	PPC_STORE_U32(ctx.r5.u32 + 1088, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF0A4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,52
	ctx.r3.s64 = ctx.r9.s64 + 52;
	// addi r4,r8,19300
	ctx.r4.s64 = ctx.r8.s64 + 19300;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,52(r9)
	PPC_STORE_U32(ctx.r9.u32 + 52, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF0D8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3208
	ctx.r3.s64 = ctx.r9.s64 + -3208;
	// addi r4,r8,19336
	ctx.r4.s64 = ctx.r8.s64 + 19336;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3208(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3208, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF10C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2704
	ctx.r3.s64 = ctx.r9.s64 + -2704;
	// addi r4,r8,19376
	ctx.r4.s64 = ctx.r8.s64 + 19376;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2704(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2704, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF140;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,728
	ctx.r3.s64 = ctx.r9.s64 + 728;
	// addi r4,r8,19404
	ctx.r4.s64 = ctx.r8.s64 + 19404;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,728(r9)
	PPC_STORE_U32(ctx.r9.u32 + 728, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF174;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r9,-944
	ctx.r3.s64 = ctx.r9.s64 + -944;
	// addi r4,r8,19428
	ctx.r4.s64 = ctx.r8.s64 + 19428;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,-944(r9)
	PPC_STORE_U32(ctx.r9.u32 + -944, ctx.r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF1A8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1892
	ctx.r3.s64 = ctx.r9.s64 + -1892;
	// addi r4,r8,19464
	ctx.r4.s64 = ctx.r8.s64 + 19464;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1892(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1892, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF1DC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,552
	ctx.r3.s64 = ctx.r9.s64 + 552;
	// addi r4,r8,19492
	ctx.r4.s64 = ctx.r8.s64 + 19492;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,552(r9)
	PPC_STORE_U32(ctx.r9.u32 + 552, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF210;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1044
	ctx.r3.s64 = ctx.r9.s64 + -1044;
	// addi r4,r8,19540
	ctx.r4.s64 = ctx.r8.s64 + 19540;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1044(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1044, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF244;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2380
	ctx.r3.s64 = ctx.r9.s64 + -2380;
	// addi r4,r8,19556
	ctx.r4.s64 = ctx.r8.s64 + 19556;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2380(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2380, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF278;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,604
	ctx.r3.s64 = ctx.r9.s64 + 604;
	// addi r4,r8,19592
	ctx.r4.s64 = ctx.r8.s64 + 19592;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,604(r9)
	PPC_STORE_U32(ctx.r9.u32 + 604, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF2AC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r8,r9,148
	ctx.r8.s64 = ctx.r9.s64 + 148;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r6,-32230
	ctx.r6.s64 = -2112225280;
	// stw r11,148(r9)
	PPC_STORE_U32(ctx.r9.u32 + 148, ctx.r11.u32);
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,19628
	ctx.r4.s64 = ctx.r6.s64 + 19628;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF2E0;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-2740
	ctx.r3.s64 = ctx.r5.s64 + -2740;
	// addi r4,r4,19668
	ctx.r4.s64 = ctx.r4.s64 + 19668;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2740(r5)
	PPC_STORE_U32(ctx.r5.u32 + -2740, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF314;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1012
	ctx.r3.s64 = ctx.r9.s64 + -1012;
	// addi r4,r8,19696
	ctx.r4.s64 = ctx.r8.s64 + 19696;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1012(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1012, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF348;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1460
	ctx.r3.s64 = ctx.r9.s64 + -1460;
	// addi r4,r8,19740
	ctx.r4.s64 = ctx.r8.s64 + 19740;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1460(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1460, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF37C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1676
	ctx.r3.s64 = ctx.r9.s64 + -1676;
	// addi r4,r8,19768
	ctx.r4.s64 = ctx.r8.s64 + 19768;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1676(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1676, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF3B0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3280
	ctx.r3.s64 = ctx.r9.s64 + -3280;
	// addi r4,r8,19804
	ctx.r4.s64 = ctx.r8.s64 + 19804;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3280(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3280, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF3E4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-584
	ctx.r8.s64 = ctx.r9.s64 + -584;
	// stw r11,-584(r9)
	PPC_STORE_U32(ctx.r9.u32 + -584, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lis r6,-32230
	ctx.r6.s64 = -2112225280;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r4,r6,19824
	ctx.r4.s64 = ctx.r6.s64 + 19824;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF418;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-988
	ctx.r3.s64 = ctx.r5.s64 + -988;
	// addi r4,r4,19876
	ctx.r4.s64 = ctx.r4.s64 + 19876;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-988(r5)
	PPC_STORE_U32(ctx.r5.u32 + -988, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF44C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1092
	ctx.r3.s64 = ctx.r9.s64 + -1092;
	// addi r4,r8,19908
	ctx.r4.s64 = ctx.r8.s64 + 19908;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1092(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1092, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF480;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2176
	ctx.r3.s64 = ctx.r9.s64 + -2176;
	// addi r4,r8,19936
	ctx.r4.s64 = ctx.r8.s64 + 19936;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2176(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2176, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF4B4;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32243
	ctx.r8.s64 = -2113077248;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2060
	ctx.r3.s64 = ctx.r9.s64 + -2060;
	// addi r4,r8,-28084
	ctx.r4.s64 = ctx.r8.s64 + -28084;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2060(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2060, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF4E8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-416
	ctx.r3.s64 = ctx.r9.s64 + -416;
	// addi r4,r8,19964
	ctx.r4.s64 = ctx.r8.s64 + 19964;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-416(r9)
	PPC_STORE_U32(ctx.r9.u32 + -416, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF51C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r6,r9,-1880
	ctx.r6.s64 = ctx.r9.s64 + -1880;
	// addi r4,r8,19992
	ctx.r4.s64 = ctx.r8.s64 + 19992;
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,-1880(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1880, ctx.r11.u32);
	// stw r10,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r10.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF550;
	sub_8233E028(ctx, base);
	// lis r5,-31882
	ctx.r5.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r5,-1368
	ctx.r3.s64 = ctx.r5.s64 + -1368;
	// addi r4,r4,20032
	ctx.r4.s64 = ctx.r4.s64 + 20032;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1368(r5)
	PPC_STORE_U32(ctx.r5.u32 + -1368, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF584;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,112
	ctx.r3.s64 = ctx.r9.s64 + 112;
	// addi r4,r8,20076
	ctx.r4.s64 = ctx.r8.s64 + 20076;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,112(r9)
	PPC_STORE_U32(ctx.r9.u32 + 112, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF5B8;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-3024
	ctx.r3.s64 = ctx.r9.s64 + -3024;
	// addi r4,r8,20096
	ctx.r4.s64 = ctx.r8.s64 + 20096;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-3024(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3024, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF5EC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-316
	ctx.r3.s64 = ctx.r9.s64 + -316;
	// addi r4,r8,20128
	ctx.r4.s64 = ctx.r8.s64 + 20128;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-316(r9)
	PPC_STORE_U32(ctx.r9.u32 + -316, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF620;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,184
	ctx.r3.s64 = ctx.r9.s64 + 184;
	// addi r4,r8,20156
	ctx.r4.s64 = ctx.r8.s64 + 20156;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,184(r9)
	PPC_STORE_U32(ctx.r9.u32 + 184, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF654;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r9,-368
	ctx.r3.s64 = ctx.r9.s64 + -368;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r4,r8,20200
	ctx.r4.s64 = ctx.r8.s64 + 20200;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,-368(r9)
	PPC_STORE_U32(ctx.r9.u32 + -368, ctx.r11.u32);
	// bl 0x8233e028
	ctx.lr = 0x829CF688;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1864
	ctx.r3.s64 = ctx.r9.s64 + -1864;
	// addi r4,r8,20228
	ctx.r4.s64 = ctx.r8.s64 + 20228;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1864(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1864, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF6BC;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-1468
	ctx.r3.s64 = ctx.r9.s64 + -1468;
	// addi r4,r8,20272
	ctx.r4.s64 = ctx.r8.s64 + 20272;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-1468(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1468, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF6F0;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2472
	ctx.r3.s64 = ctx.r9.s64 + -2472;
	// addi r4,r8,20316
	ctx.r4.s64 = ctx.r8.s64 + 20316;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2472(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2472, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF724;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,1024
	ctx.r3.s64 = ctx.r9.s64 + 1024;
	// addi r4,r8,20352
	ctx.r4.s64 = ctx.r8.s64 + 20352;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,1024(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1024, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF758;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r3,r9,-2712
	ctx.r3.s64 = ctx.r9.s64 + -2712;
	// addi r4,r8,20380
	ctx.r4.s64 = ctx.r8.s64 + 20380;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,-2712(r9)
	PPC_STORE_U32(ctx.r9.u32 + -2712, ctx.r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829CF78C;
	sub_8233E028(ctx, base);
	// lis r9,-31882
	ctx.r9.s64 = -2089418752;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r9,-764
	ctx.r8.s64 = ctx.r9.s64 + -764;
	// stw r11,-764(r9)
	PPC_STORE_U32(ctx.r9.u32 + -764, ctx.r11.u32);
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829CF7B8"))) PPC_WEAK_FUNC(sub_829CF7B8);
PPC_FUNC_IMPL(__imp__sub_829CF7B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829CF7D0;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829cf854
	if (ctx.cr6.eq) goto loc_829CF854;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20412
	ctx.r11.s64 = ctx.r8.s64 + 20412;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-11616
	ctx.r6.s64 = ctx.r5.s64 + -11616;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,104
	ctx.r5.s64 = 104;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829CF844;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829CF854:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829CF868"))) PPC_WEAK_FUNC(sub_829CF868);
PPC_FUNC_IMPL(__imp__sub_829CF868) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829CF870;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r29,r11,14476
	ctx.r29.s64 = ctx.r11.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829cf8a0
	if (!ctx.cr6.eq) goto loc_829CF8A0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x822aace8
	ctx.lr = 0x829CF894;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829CF89C;
	sub_822AADA8(ctx, base);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829CF8A0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25820(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25820);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829cf8c4
	if (ctx.cr6.eq) goto loc_829CF8C4;
	// bl 0x822955c8
	ctx.lr = 0x829CF8B4;
	sub_822955C8(ctx, base);
	// lwz r11,-25820(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25820);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829cf8cc
	goto loc_829CF8CC;
loc_829CF8C4:
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r9,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r9.u32);
loc_829CF8CC:
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829cf8ec
	if (!ctx.cr6.eq) goto loc_829CF8EC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x822aace8
	ctx.lr = 0x829CF8DC;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829CF8E4;
	sub_822AADA8(ctx, base);
	// lwz r11,-25820(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25820);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829CF8EC:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829cf918
	if (!ctx.cr6.eq) goto loc_829CF918;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82398580
	ctx.lr = 0x829CF908;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829CF910;
	sub_82398640(ctx, base);
	// lwz r11,-25820(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25820);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829CF918:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829cf950
	if (ctx.cr6.eq) goto loc_829CF950;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829CF934;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829cf950
	if (!ctx.cr6.eq) goto loc_829CF950;
	// lwz r3,-25820(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25820);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829CF950;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829CF950:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829CF958"))) PPC_WEAK_FUNC(sub_829CF958);
PPC_FUNC_IMPL(__imp__sub_829CF958) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829CF960"))) PPC_WEAK_FUNC(sub_829CF960);
PPC_FUNC_IMPL(__imp__sub_829CF960) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,25216(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829cf9a4
	if (!ctx.cr6.eq) goto loc_829CF9A4;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14476
	ctx.r3.s64 = ctx.r11.s64 + 14476;
	// bl 0x822aace8
	ctx.lr = 0x829CF998;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829CF9A0;
	sub_822AADA8(ctx, base);
	// lwz r11,25216(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829CF9A4:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829CF9CC"))) PPC_WEAK_FUNC(sub_829CF9CC);
PPC_FUNC_IMPL(__imp__sub_829CF9CC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829CF9D0"))) PPC_WEAK_FUNC(sub_829CF9D0);
PPC_FUNC_IMPL(__imp__sub_829CF9D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829CF9E8;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829cfa6c
	if (ctx.cr6.eq) goto loc_829CFA6C;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20448
	ctx.r11.s64 = ctx.r8.s64 + 20448;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-11912
	ctx.r6.s64 = ctx.r5.s64 + -11912;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,496
	ctx.r5.s64 = 496;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829CFA5C;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829CFA6C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829CFA80"))) PPC_WEAK_FUNC(sub_829CFA80);
PPC_FUNC_IMPL(__imp__sub_829CFA80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829CFA88;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-28808(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28808);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829cfab4
	if (!ctx.cr6.eq) goto loc_829CFAB4;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x825ff3d0
	ctx.lr = 0x829CFAA8;
	sub_825FF3D0(ctx, base);
	// stw r3,-28808(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28808, ctx.r3.u32);
	// bl 0x825ff490
	ctx.lr = 0x829CFAB0;
	sub_825FF490(ctx, base);
	// lwz r10,-28808(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28808);
loc_829CFAB4:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25816(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25816);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829cfad4
	if (ctx.cr6.eq) goto loc_829CFAD4;
	// bl 0x82316058
	ctx.lr = 0x829CFAC8;
	sub_82316058(ctx, base);
	// lwz r11,-25816(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25816);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829cfadc
	goto loc_829CFADC;
loc_829CFAD4:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829CFADC:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829cfb0c
	if (!ctx.cr6.eq) goto loc_829CFB0C;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829CFAFC;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829CFB04;
	sub_822AADA8(ctx, base);
	// lwz r11,-25816(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25816);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829CFB0C:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829cfb38
	if (!ctx.cr6.eq) goto loc_829CFB38;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829CFB28;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829CFB30;
	sub_82398640(ctx, base);
	// lwz r11,-25816(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25816);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829CFB38:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829cfb70
	if (ctx.cr6.eq) goto loc_829CFB70;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829CFB54;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829cfb70
	if (!ctx.cr6.eq) goto loc_829CFB70;
	// lwz r3,-25816(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25816);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829CFB70;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829CFB70:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829CFB78"))) PPC_WEAK_FUNC(sub_829CFB78);
PPC_FUNC_IMPL(__imp__sub_829CFB78) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829CFB80"))) PPC_WEAK_FUNC(sub_829CFB80);
PPC_FUNC_IMPL(__imp__sub_829CFB80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-28808(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28808);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829cfbc4
	if (!ctx.cr6.eq) goto loc_829CFBC4;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x825ff3d0
	ctx.lr = 0x829CFBB8;
	sub_825FF3D0(ctx, base);
	// stw r3,-28808(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28808, ctx.r3.u32);
	// bl 0x825ff490
	ctx.lr = 0x829CFBC0;
	sub_825FF490(ctx, base);
	// lwz r11,-28808(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28808);
loc_829CFBC4:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829CFBEC"))) PPC_WEAK_FUNC(sub_829CFBEC);
PPC_FUNC_IMPL(__imp__sub_829CFBEC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829CFBF0"))) PPC_WEAK_FUNC(sub_829CFBF0);
PPC_FUNC_IMPL(__imp__sub_829CFBF0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829CFC08;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829cfc8c
	if (ctx.cr6.eq) goto loc_829CFC8C;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20504
	ctx.r11.s64 = ctx.r8.s64 + 20504;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-12192
	ctx.r6.s64 = ctx.r5.s64 + -12192;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,60
	ctx.r5.s64 = 60;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829CFC7C;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829CFC8C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829CFCA0"))) PPC_WEAK_FUNC(sub_829CFCA0);
PPC_FUNC_IMPL(__imp__sub_829CFCA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829CFCA8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r29,r11,14476
	ctx.r29.s64 = ctx.r11.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829cfcd8
	if (!ctx.cr6.eq) goto loc_829CFCD8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x822aace8
	ctx.lr = 0x829CFCCC;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829CFCD4;
	sub_822AADA8(ctx, base);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829CFCD8:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25812(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25812);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829cfcfc
	if (ctx.cr6.eq) goto loc_829CFCFC;
	// bl 0x822955c8
	ctx.lr = 0x829CFCEC;
	sub_822955C8(ctx, base);
	// lwz r11,-25812(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25812);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829cfd04
	goto loc_829CFD04;
loc_829CFCFC:
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r9,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r9.u32);
loc_829CFD04:
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829cfd24
	if (!ctx.cr6.eq) goto loc_829CFD24;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x822aace8
	ctx.lr = 0x829CFD14;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829CFD1C;
	sub_822AADA8(ctx, base);
	// lwz r11,-25812(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25812);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829CFD24:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829cfd50
	if (!ctx.cr6.eq) goto loc_829CFD50;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82398580
	ctx.lr = 0x829CFD40;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829CFD48;
	sub_82398640(ctx, base);
	// lwz r11,-25812(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25812);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829CFD50:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829cfd88
	if (ctx.cr6.eq) goto loc_829CFD88;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829CFD6C;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829cfd88
	if (!ctx.cr6.eq) goto loc_829CFD88;
	// lwz r3,-25812(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25812);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829CFD88;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829CFD88:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829CFD90"))) PPC_WEAK_FUNC(sub_829CFD90);
PPC_FUNC_IMPL(__imp__sub_829CFD90) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829CFD98"))) PPC_WEAK_FUNC(sub_829CFD98);
PPC_FUNC_IMPL(__imp__sub_829CFD98) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,25216(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829cfddc
	if (!ctx.cr6.eq) goto loc_829CFDDC;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14476
	ctx.r3.s64 = ctx.r11.s64 + 14476;
	// bl 0x822aace8
	ctx.lr = 0x829CFDD0;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829CFDD8;
	sub_822AADA8(ctx, base);
	// lwz r11,25216(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829CFDDC:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829CFE04"))) PPC_WEAK_FUNC(sub_829CFE04);
PPC_FUNC_IMPL(__imp__sub_829CFE04) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829CFE08"))) PPC_WEAK_FUNC(sub_829CFE08);
PPC_FUNC_IMPL(__imp__sub_829CFE08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829CFE20;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829cfea4
	if (ctx.cr6.eq) goto loc_829CFEA4;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20528
	ctx.r11.s64 = ctx.r8.s64 + 20528;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-13912
	ctx.r6.s64 = ctx.r5.s64 + -13912;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,564
	ctx.r5.s64 = 564;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829CFE94;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829CFEA4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829CFEB8"))) PPC_WEAK_FUNC(sub_829CFEB8);
PPC_FUNC_IMPL(__imp__sub_829CFEB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829CFEC0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-28640(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28640);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829cfeec
	if (!ctx.cr6.eq) goto loc_829CFEEC;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82604fa0
	ctx.lr = 0x829CFEE0;
	sub_82604FA0(ctx, base);
	// stw r3,-28640(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28640, ctx.r3.u32);
	// bl 0x82605060
	ctx.lr = 0x829CFEE8;
	sub_82605060(ctx, base);
	// lwz r10,-28640(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28640);
loc_829CFEEC:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25808(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25808);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829cff0c
	if (ctx.cr6.eq) goto loc_829CFF0C;
	// bl 0x82313628
	ctx.lr = 0x829CFF00;
	sub_82313628(ctx, base);
	// lwz r11,-25808(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25808);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829cff14
	goto loc_829CFF14;
loc_829CFF0C:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829CFF14:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829cff44
	if (!ctx.cr6.eq) goto loc_829CFF44;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829CFF34;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829CFF3C;
	sub_822AADA8(ctx, base);
	// lwz r11,-25808(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25808);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829CFF44:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829cff70
	if (!ctx.cr6.eq) goto loc_829CFF70;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829CFF60;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829CFF68;
	sub_82398640(ctx, base);
	// lwz r11,-25808(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25808);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829CFF70:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829cffa8
	if (ctx.cr6.eq) goto loc_829CFFA8;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829CFF8C;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829cffa8
	if (!ctx.cr6.eq) goto loc_829CFFA8;
	// lwz r3,-25808(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25808);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829CFFA8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829CFFA8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829CFFB0"))) PPC_WEAK_FUNC(sub_829CFFB0);
PPC_FUNC_IMPL(__imp__sub_829CFFB0) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829CFFB8"))) PPC_WEAK_FUNC(sub_829CFFB8);
PPC_FUNC_IMPL(__imp__sub_829CFFB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-28640(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28640);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829cfffc
	if (!ctx.cr6.eq) goto loc_829CFFFC;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82604fa0
	ctx.lr = 0x829CFFF0;
	sub_82604FA0(ctx, base);
	// stw r3,-28640(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28640, ctx.r3.u32);
	// bl 0x82605060
	ctx.lr = 0x829CFFF8;
	sub_82605060(ctx, base);
	// lwz r11,-28640(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28640);
loc_829CFFFC:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0024"))) PPC_WEAK_FUNC(sub_829D0024);
PPC_FUNC_IMPL(__imp__sub_829D0024) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D0028"))) PPC_WEAK_FUNC(sub_829D0028);
PPC_FUNC_IMPL(__imp__sub_829D0028) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D0040;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d00c4
	if (ctx.cr6.eq) goto loc_829D00C4;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20556
	ctx.r11.s64 = ctx.r8.s64 + 20556;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-14656
	ctx.r6.s64 = ctx.r5.s64 + -14656;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,2049
	ctx.r6.s64 = 2049;
	// li r5,844
	ctx.r5.s64 = 844;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D00B4;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D00C4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D00D8"))) PPC_WEAK_FUNC(sub_829D00D8);
PPC_FUNC_IMPL(__imp__sub_829D00D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D00E0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-28544(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28544);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d010c
	if (!ctx.cr6.eq) goto loc_829D010C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82608418
	ctx.lr = 0x829D0100;
	sub_82608418(ctx, base);
	// stw r3,-28544(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28544, ctx.r3.u32);
	// bl 0x826084d8
	ctx.lr = 0x829D0108;
	sub_826084D8(ctx, base);
	// lwz r10,-28544(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28544);
loc_829D010C:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25804(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25804);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d012c
	if (ctx.cr6.eq) goto loc_829D012C;
	// bl 0x82312688
	ctx.lr = 0x829D0120;
	sub_82312688(ctx, base);
	// lwz r11,-25804(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25804);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d0134
	goto loc_829D0134;
loc_829D012C:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D0134:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d0164
	if (!ctx.cr6.eq) goto loc_829D0164;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D0154;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D015C;
	sub_822AADA8(ctx, base);
	// lwz r11,-25804(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25804);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D0164:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d0190
	if (!ctx.cr6.eq) goto loc_829D0190;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D0180;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D0188;
	sub_82398640(ctx, base);
	// lwz r11,-25804(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25804);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D0190:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d01c8
	if (ctx.cr6.eq) goto loc_829D01C8;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D01AC;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d01c8
	if (!ctx.cr6.eq) goto loc_829D01C8;
	// lwz r3,-25804(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25804);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D01C8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D01C8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D01D0"))) PPC_WEAK_FUNC(sub_829D01D0);
PPC_FUNC_IMPL(__imp__sub_829D01D0) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D01D8"))) PPC_WEAK_FUNC(sub_829D01D8);
PPC_FUNC_IMPL(__imp__sub_829D01D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-28544(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28544);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d021c
	if (!ctx.cr6.eq) goto loc_829D021C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82608418
	ctx.lr = 0x829D0210;
	sub_82608418(ctx, base);
	// stw r3,-28544(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28544, ctx.r3.u32);
	// bl 0x826084d8
	ctx.lr = 0x829D0218;
	sub_826084D8(ctx, base);
	// lwz r11,-28544(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28544);
loc_829D021C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0244"))) PPC_WEAK_FUNC(sub_829D0244);
PPC_FUNC_IMPL(__imp__sub_829D0244) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D0248"))) PPC_WEAK_FUNC(sub_829D0248);
PPC_FUNC_IMPL(__imp__sub_829D0248) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D0260;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d02e4
	if (ctx.cr6.eq) goto loc_829D02E4;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20592
	ctx.r11.s64 = ctx.r8.s64 + 20592;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-15080
	ctx.r6.s64 = ctx.r5.s64 + -15080;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,508
	ctx.r5.s64 = 508;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D02D4;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D02E4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D02F8"))) PPC_WEAK_FUNC(sub_829D02F8);
PPC_FUNC_IMPL(__imp__sub_829D02F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D0300;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-28640(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28640);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d032c
	if (!ctx.cr6.eq) goto loc_829D032C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82604fa0
	ctx.lr = 0x829D0320;
	sub_82604FA0(ctx, base);
	// stw r3,-28640(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28640, ctx.r3.u32);
	// bl 0x82605060
	ctx.lr = 0x829D0328;
	sub_82605060(ctx, base);
	// lwz r10,-28640(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28640);
loc_829D032C:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25800(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25800);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d034c
	if (ctx.cr6.eq) goto loc_829D034C;
	// bl 0x82313628
	ctx.lr = 0x829D0340;
	sub_82313628(ctx, base);
	// lwz r11,-25800(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25800);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d0354
	goto loc_829D0354;
loc_829D034C:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D0354:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d0384
	if (!ctx.cr6.eq) goto loc_829D0384;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D0374;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D037C;
	sub_822AADA8(ctx, base);
	// lwz r11,-25800(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25800);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D0384:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d03b0
	if (!ctx.cr6.eq) goto loc_829D03B0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D03A0;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D03A8;
	sub_82398640(ctx, base);
	// lwz r11,-25800(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25800);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D03B0:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d03e8
	if (ctx.cr6.eq) goto loc_829D03E8;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D03CC;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d03e8
	if (!ctx.cr6.eq) goto loc_829D03E8;
	// lwz r3,-25800(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25800);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D03E8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D03E8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D03F0"))) PPC_WEAK_FUNC(sub_829D03F0);
PPC_FUNC_IMPL(__imp__sub_829D03F0) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D03F8"))) PPC_WEAK_FUNC(sub_829D03F8);
PPC_FUNC_IMPL(__imp__sub_829D03F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-28640(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28640);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d043c
	if (!ctx.cr6.eq) goto loc_829D043C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82604fa0
	ctx.lr = 0x829D0430;
	sub_82604FA0(ctx, base);
	// stw r3,-28640(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28640, ctx.r3.u32);
	// bl 0x82605060
	ctx.lr = 0x829D0438;
	sub_82605060(ctx, base);
	// lwz r11,-28640(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28640);
loc_829D043C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0464"))) PPC_WEAK_FUNC(sub_829D0464);
PPC_FUNC_IMPL(__imp__sub_829D0464) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D0468"))) PPC_WEAK_FUNC(sub_829D0468);
PPC_FUNC_IMPL(__imp__sub_829D0468) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D0480;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d0504
	if (ctx.cr6.eq) goto loc_829D0504;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20624
	ctx.r11.s64 = ctx.r8.s64 + 20624;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-16488
	ctx.r6.s64 = ctx.r5.s64 + -16488;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,-988
	ctx.r10.s64 = ctx.r4.s64 + -988;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,4
	ctx.r6.s64 = 4;
	// li r5,2108
	ctx.r5.s64 = 2108;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D04F4;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D0504:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0518"))) PPC_WEAK_FUNC(sub_829D0518);
PPC_FUNC_IMPL(__imp__sub_829D0518) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D0520;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-24360(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -24360);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d054c
	if (!ctx.cr6.eq) goto loc_829D054C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11336
	ctx.r3.s64 = ctx.r11.s64 + 11336;
	// bl 0x82acb618
	ctx.lr = 0x829D0540;
	sub_82ACB618(ctx, base);
	// stw r3,-24360(r31)
	PPC_STORE_U32(ctx.r31.u32 + -24360, ctx.r3.u32);
	// bl 0x82acb6c8
	ctx.lr = 0x829D0548;
	sub_82ACB6C8(ctx, base);
	// lwz r10,-24360(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -24360);
loc_829D054C:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25796(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25796);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d056c
	if (ctx.cr6.eq) goto loc_829D056C;
	// bl 0x82982650
	ctx.lr = 0x829D0560;
	sub_82982650(ctx, base);
	// lwz r11,-25796(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25796);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d0574
	goto loc_829D0574;
loc_829D056C:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D0574:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d05a4
	if (!ctx.cr6.eq) goto loc_829D05A4;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D0594;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D059C;
	sub_822AADA8(ctx, base);
	// lwz r11,-25796(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25796);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D05A4:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d05d0
	if (!ctx.cr6.eq) goto loc_829D05D0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D05C0;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D05C8;
	sub_82398640(ctx, base);
	// lwz r11,-25796(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25796);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D05D0:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d0608
	if (ctx.cr6.eq) goto loc_829D0608;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D05EC;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d0608
	if (!ctx.cr6.eq) goto loc_829D0608;
	// lwz r3,-25796(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25796);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D0608;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D0608:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D0610"))) PPC_WEAK_FUNC(sub_829D0610);
PPC_FUNC_IMPL(__imp__sub_829D0610) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0618"))) PPC_WEAK_FUNC(sub_829D0618);
PPC_FUNC_IMPL(__imp__sub_829D0618) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-24360(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -24360);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d065c
	if (!ctx.cr6.eq) goto loc_829D065C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11336
	ctx.r3.s64 = ctx.r11.s64 + 11336;
	// bl 0x82acb618
	ctx.lr = 0x829D0650;
	sub_82ACB618(ctx, base);
	// stw r3,-24360(r31)
	PPC_STORE_U32(ctx.r31.u32 + -24360, ctx.r3.u32);
	// bl 0x82acb6c8
	ctx.lr = 0x829D0658;
	sub_82ACB6C8(ctx, base);
	// lwz r11,-24360(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -24360);
loc_829D065C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0684"))) PPC_WEAK_FUNC(sub_829D0684);
PPC_FUNC_IMPL(__imp__sub_829D0684) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D0688"))) PPC_WEAK_FUNC(sub_829D0688);
PPC_FUNC_IMPL(__imp__sub_829D0688) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D06A0;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d0724
	if (ctx.cr6.eq) goto loc_829D0724;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20672
	ctx.r11.s64 = ctx.r8.s64 + 20672;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-17040
	ctx.r6.s64 = ctx.r5.s64 + -17040;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,196
	ctx.r5.s64 = 196;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D0714;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D0724:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0738"))) PPC_WEAK_FUNC(sub_829D0738);
PPC_FUNC_IMPL(__imp__sub_829D0738) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D0740;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-30832(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30832);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d076c
	if (!ctx.cr6.eq) goto loc_829D076C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82499cc0
	ctx.lr = 0x829D0760;
	sub_82499CC0(ctx, base);
	// stw r3,-30832(r31)
	PPC_STORE_U32(ctx.r31.u32 + -30832, ctx.r3.u32);
	// bl 0x82499d80
	ctx.lr = 0x829D0768;
	sub_82499D80(ctx, base);
	// lwz r10,-30832(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30832);
loc_829D076C:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25792(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25792);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d078c
	if (ctx.cr6.eq) goto loc_829D078C;
	// bl 0x822d2490
	ctx.lr = 0x829D0780;
	sub_822D2490(ctx, base);
	// lwz r11,-25792(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25792);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d0794
	goto loc_829D0794;
loc_829D078C:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D0794:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d07c4
	if (!ctx.cr6.eq) goto loc_829D07C4;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D07B4;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D07BC;
	sub_822AADA8(ctx, base);
	// lwz r11,-25792(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25792);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D07C4:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d07f0
	if (!ctx.cr6.eq) goto loc_829D07F0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D07E0;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D07E8;
	sub_82398640(ctx, base);
	// lwz r11,-25792(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25792);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D07F0:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d0828
	if (ctx.cr6.eq) goto loc_829D0828;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D080C;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d0828
	if (!ctx.cr6.eq) goto loc_829D0828;
	// lwz r3,-25792(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25792);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D0828;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D0828:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D0830"))) PPC_WEAK_FUNC(sub_829D0830);
PPC_FUNC_IMPL(__imp__sub_829D0830) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0838"))) PPC_WEAK_FUNC(sub_829D0838);
PPC_FUNC_IMPL(__imp__sub_829D0838) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-30832(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30832);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d087c
	if (!ctx.cr6.eq) goto loc_829D087C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82499cc0
	ctx.lr = 0x829D0870;
	sub_82499CC0(ctx, base);
	// stw r3,-30832(r31)
	PPC_STORE_U32(ctx.r31.u32 + -30832, ctx.r3.u32);
	// bl 0x82499d80
	ctx.lr = 0x829D0878;
	sub_82499D80(ctx, base);
	// lwz r11,-30832(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30832);
loc_829D087C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D08A4"))) PPC_WEAK_FUNC(sub_829D08A4);
PPC_FUNC_IMPL(__imp__sub_829D08A4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D08A8"))) PPC_WEAK_FUNC(sub_829D08A8);
PPC_FUNC_IMPL(__imp__sub_829D08A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D08C0;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d0944
	if (ctx.cr6.eq) goto loc_829D0944;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20704
	ctx.r11.s64 = ctx.r8.s64 + 20704;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-18032
	ctx.r6.s64 = ctx.r5.s64 + -18032;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,236
	ctx.r5.s64 = 236;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D0934;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D0944:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0958"))) PPC_WEAK_FUNC(sub_829D0958);
PPC_FUNC_IMPL(__imp__sub_829D0958) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D0960;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-30836(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30836);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d098c
	if (!ctx.cr6.eq) goto loc_829D098C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82499a90
	ctx.lr = 0x829D0980;
	sub_82499A90(ctx, base);
	// stw r3,-30836(r31)
	PPC_STORE_U32(ctx.r31.u32 + -30836, ctx.r3.u32);
	// bl 0x82499b50
	ctx.lr = 0x829D0988;
	sub_82499B50(ctx, base);
	// lwz r10,-30836(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30836);
loc_829D098C:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25788(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25788);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d09ac
	if (ctx.cr6.eq) goto loc_829D09AC;
	// bl 0x822d0580
	ctx.lr = 0x829D09A0;
	sub_822D0580(ctx, base);
	// lwz r11,-25788(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25788);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d09b4
	goto loc_829D09B4;
loc_829D09AC:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D09B4:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d09e4
	if (!ctx.cr6.eq) goto loc_829D09E4;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D09D4;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D09DC;
	sub_822AADA8(ctx, base);
	// lwz r11,-25788(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25788);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D09E4:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d0a10
	if (!ctx.cr6.eq) goto loc_829D0A10;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D0A00;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D0A08;
	sub_82398640(ctx, base);
	// lwz r11,-25788(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25788);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D0A10:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d0a48
	if (ctx.cr6.eq) goto loc_829D0A48;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D0A2C;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d0a48
	if (!ctx.cr6.eq) goto loc_829D0A48;
	// lwz r3,-25788(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25788);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D0A48;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D0A48:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D0A50"))) PPC_WEAK_FUNC(sub_829D0A50);
PPC_FUNC_IMPL(__imp__sub_829D0A50) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0A58"))) PPC_WEAK_FUNC(sub_829D0A58);
PPC_FUNC_IMPL(__imp__sub_829D0A58) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-30836(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30836);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d0a9c
	if (!ctx.cr6.eq) goto loc_829D0A9C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82499a90
	ctx.lr = 0x829D0A90;
	sub_82499A90(ctx, base);
	// stw r3,-30836(r31)
	PPC_STORE_U32(ctx.r31.u32 + -30836, ctx.r3.u32);
	// bl 0x82499b50
	ctx.lr = 0x829D0A98;
	sub_82499B50(ctx, base);
	// lwz r11,-30836(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30836);
loc_829D0A9C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0AC4"))) PPC_WEAK_FUNC(sub_829D0AC4);
PPC_FUNC_IMPL(__imp__sub_829D0AC4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D0AC8"))) PPC_WEAK_FUNC(sub_829D0AC8);
PPC_FUNC_IMPL(__imp__sub_829D0AC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D0AE0;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d0b64
	if (ctx.cr6.eq) goto loc_829D0B64;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20740
	ctx.r11.s64 = ctx.r8.s64 + 20740;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-18352
	ctx.r6.s64 = ctx.r5.s64 + -18352;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,232
	ctx.r5.s64 = 232;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D0B54;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D0B64:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0B78"))) PPC_WEAK_FUNC(sub_829D0B78);
PPC_FUNC_IMPL(__imp__sub_829D0B78) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D0B80;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-30828(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30828);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d0bac
	if (!ctx.cr6.eq) goto loc_829D0BAC;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82499ef0
	ctx.lr = 0x829D0BA0;
	sub_82499EF0(ctx, base);
	// stw r3,-30828(r31)
	PPC_STORE_U32(ctx.r31.u32 + -30828, ctx.r3.u32);
	// bl 0x82499fb0
	ctx.lr = 0x829D0BA8;
	sub_82499FB0(ctx, base);
	// lwz r10,-30828(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30828);
loc_829D0BAC:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25784(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25784);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d0bcc
	if (ctx.cr6.eq) goto loc_829D0BCC;
	// bl 0x822d2990
	ctx.lr = 0x829D0BC0;
	sub_822D2990(ctx, base);
	// lwz r11,-25784(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25784);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d0bd4
	goto loc_829D0BD4;
loc_829D0BCC:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D0BD4:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d0c04
	if (!ctx.cr6.eq) goto loc_829D0C04;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D0BF4;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D0BFC;
	sub_822AADA8(ctx, base);
	// lwz r11,-25784(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25784);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D0C04:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d0c30
	if (!ctx.cr6.eq) goto loc_829D0C30;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D0C20;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D0C28;
	sub_82398640(ctx, base);
	// lwz r11,-25784(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25784);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D0C30:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d0c68
	if (ctx.cr6.eq) goto loc_829D0C68;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D0C4C;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d0c68
	if (!ctx.cr6.eq) goto loc_829D0C68;
	// lwz r3,-25784(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25784);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D0C68;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D0C68:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D0C70"))) PPC_WEAK_FUNC(sub_829D0C70);
PPC_FUNC_IMPL(__imp__sub_829D0C70) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0C78"))) PPC_WEAK_FUNC(sub_829D0C78);
PPC_FUNC_IMPL(__imp__sub_829D0C78) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-30828(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30828);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d0cbc
	if (!ctx.cr6.eq) goto loc_829D0CBC;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82499ef0
	ctx.lr = 0x829D0CB0;
	sub_82499EF0(ctx, base);
	// stw r3,-30828(r31)
	PPC_STORE_U32(ctx.r31.u32 + -30828, ctx.r3.u32);
	// bl 0x82499fb0
	ctx.lr = 0x829D0CB8;
	sub_82499FB0(ctx, base);
	// lwz r11,-30828(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30828);
loc_829D0CBC:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0CE4"))) PPC_WEAK_FUNC(sub_829D0CE4);
PPC_FUNC_IMPL(__imp__sub_829D0CE4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D0CE8"))) PPC_WEAK_FUNC(sub_829D0CE8);
PPC_FUNC_IMPL(__imp__sub_829D0CE8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D0D00;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d0d84
	if (ctx.cr6.eq) goto loc_829D0D84;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20804
	ctx.r11.s64 = ctx.r8.s64 + 20804;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-18688
	ctx.r6.s64 = ctx.r5.s64 + -18688;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,500
	ctx.r5.s64 = 500;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D0D74;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D0D84:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0D98"))) PPC_WEAK_FUNC(sub_829D0D98);
PPC_FUNC_IMPL(__imp__sub_829D0D98) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D0DA0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-29908(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29908);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d0dcc
	if (!ctx.cr6.eq) goto loc_829D0DCC;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x8250fb80
	ctx.lr = 0x829D0DC0;
	sub_8250FB80(ctx, base);
	// stw r3,-29908(r31)
	PPC_STORE_U32(ctx.r31.u32 + -29908, ctx.r3.u32);
	// bl 0x8250fc40
	ctx.lr = 0x829D0DC8;
	sub_8250FC40(ctx, base);
	// lwz r10,-29908(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29908);
loc_829D0DCC:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25780(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25780);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d0dec
	if (ctx.cr6.eq) goto loc_829D0DEC;
	// bl 0x822d4330
	ctx.lr = 0x829D0DE0;
	sub_822D4330(ctx, base);
	// lwz r11,-25780(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25780);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d0df4
	goto loc_829D0DF4;
loc_829D0DEC:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D0DF4:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d0e24
	if (!ctx.cr6.eq) goto loc_829D0E24;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D0E14;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D0E1C;
	sub_822AADA8(ctx, base);
	// lwz r11,-25780(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25780);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D0E24:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d0e50
	if (!ctx.cr6.eq) goto loc_829D0E50;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D0E40;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D0E48;
	sub_82398640(ctx, base);
	// lwz r11,-25780(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25780);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D0E50:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d0e88
	if (ctx.cr6.eq) goto loc_829D0E88;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D0E6C;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d0e88
	if (!ctx.cr6.eq) goto loc_829D0E88;
	// lwz r3,-25780(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25780);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D0E88;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D0E88:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D0E90"))) PPC_WEAK_FUNC(sub_829D0E90);
PPC_FUNC_IMPL(__imp__sub_829D0E90) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0E98"))) PPC_WEAK_FUNC(sub_829D0E98);
PPC_FUNC_IMPL(__imp__sub_829D0E98) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-29908(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29908);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d0edc
	if (!ctx.cr6.eq) goto loc_829D0EDC;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x8250fb80
	ctx.lr = 0x829D0ED0;
	sub_8250FB80(ctx, base);
	// stw r3,-29908(r31)
	PPC_STORE_U32(ctx.r31.u32 + -29908, ctx.r3.u32);
	// bl 0x8250fc40
	ctx.lr = 0x829D0ED8;
	sub_8250FC40(ctx, base);
	// lwz r11,-29908(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29908);
loc_829D0EDC:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0F04"))) PPC_WEAK_FUNC(sub_829D0F04);
PPC_FUNC_IMPL(__imp__sub_829D0F04) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D0F08"))) PPC_WEAK_FUNC(sub_829D0F08);
PPC_FUNC_IMPL(__imp__sub_829D0F08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D0F20;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d0fa4
	if (ctx.cr6.eq) goto loc_829D0FA4;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20828
	ctx.r11.s64 = ctx.r8.s64 + 20828;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-18744
	ctx.r6.s64 = ctx.r5.s64 + -18744;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,508
	ctx.r5.s64 = 508;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D0F94;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D0FA4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D0FB8"))) PPC_WEAK_FUNC(sub_829D0FB8);
PPC_FUNC_IMPL(__imp__sub_829D0FB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D0FC0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-29904(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29904);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d0fec
	if (!ctx.cr6.eq) goto loc_829D0FEC;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x8250fdb0
	ctx.lr = 0x829D0FE0;
	sub_8250FDB0(ctx, base);
	// stw r3,-29904(r31)
	PPC_STORE_U32(ctx.r31.u32 + -29904, ctx.r3.u32);
	// bl 0x8250fe70
	ctx.lr = 0x829D0FE8;
	sub_8250FE70(ctx, base);
	// lwz r10,-29904(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29904);
loc_829D0FEC:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25776(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25776);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d100c
	if (ctx.cr6.eq) goto loc_829D100C;
	// bl 0x822d4380
	ctx.lr = 0x829D1000;
	sub_822D4380(ctx, base);
	// lwz r11,-25776(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25776);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d1014
	goto loc_829D1014;
loc_829D100C:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D1014:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1044
	if (!ctx.cr6.eq) goto loc_829D1044;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D1034;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D103C;
	sub_822AADA8(ctx, base);
	// lwz r11,-25776(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25776);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D1044:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1070
	if (!ctx.cr6.eq) goto loc_829D1070;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D1060;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D1068;
	sub_82398640(ctx, base);
	// lwz r11,-25776(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25776);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D1070:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d10a8
	if (ctx.cr6.eq) goto loc_829D10A8;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D108C;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d10a8
	if (!ctx.cr6.eq) goto loc_829D10A8;
	// lwz r3,-25776(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25776);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D10A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D10A8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D10B0"))) PPC_WEAK_FUNC(sub_829D10B0);
PPC_FUNC_IMPL(__imp__sub_829D10B0) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D10B8"))) PPC_WEAK_FUNC(sub_829D10B8);
PPC_FUNC_IMPL(__imp__sub_829D10B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-29904(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29904);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d10fc
	if (!ctx.cr6.eq) goto loc_829D10FC;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x8250fdb0
	ctx.lr = 0x829D10F0;
	sub_8250FDB0(ctx, base);
	// stw r3,-29904(r31)
	PPC_STORE_U32(ctx.r31.u32 + -29904, ctx.r3.u32);
	// bl 0x8250fe70
	ctx.lr = 0x829D10F8;
	sub_8250FE70(ctx, base);
	// lwz r11,-29904(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29904);
loc_829D10FC:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1124"))) PPC_WEAK_FUNC(sub_829D1124);
PPC_FUNC_IMPL(__imp__sub_829D1124) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D1128"))) PPC_WEAK_FUNC(sub_829D1128);
PPC_FUNC_IMPL(__imp__sub_829D1128) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D1140;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d11c4
	if (ctx.cr6.eq) goto loc_829D11C4;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20868
	ctx.r11.s64 = ctx.r8.s64 + 20868;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-19296
	ctx.r6.s64 = ctx.r5.s64 + -19296;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,508
	ctx.r5.s64 = 508;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D11B4;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D11C4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D11D8"))) PPC_WEAK_FUNC(sub_829D11D8);
PPC_FUNC_IMPL(__imp__sub_829D11D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D11E0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-25776(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25776);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d120c
	if (!ctx.cr6.eq) goto loc_829D120C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11336
	ctx.r3.s64 = ctx.r11.s64 + 11336;
	// bl 0x829d0f08
	ctx.lr = 0x829D1200;
	sub_829D0F08(ctx, base);
	// stw r3,-25776(r31)
	PPC_STORE_U32(ctx.r31.u32 + -25776, ctx.r3.u32);
	// bl 0x829d0fb8
	ctx.lr = 0x829D1208;
	sub_829D0FB8(ctx, base);
	// lwz r10,-25776(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25776);
loc_829D120C:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25772(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25772);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d122c
	if (ctx.cr6.eq) goto loc_829D122C;
	// bl 0x8298e210
	ctx.lr = 0x829D1220;
	sub_8298E210(ctx, base);
	// lwz r11,-25772(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25772);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d1234
	goto loc_829D1234;
loc_829D122C:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D1234:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1264
	if (!ctx.cr6.eq) goto loc_829D1264;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D1254;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D125C;
	sub_822AADA8(ctx, base);
	// lwz r11,-25772(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25772);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D1264:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1290
	if (!ctx.cr6.eq) goto loc_829D1290;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D1280;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D1288;
	sub_82398640(ctx, base);
	// lwz r11,-25772(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25772);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D1290:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d12c8
	if (ctx.cr6.eq) goto loc_829D12C8;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D12AC;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d12c8
	if (!ctx.cr6.eq) goto loc_829D12C8;
	// lwz r3,-25772(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25772);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D12C8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D12C8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D12D0"))) PPC_WEAK_FUNC(sub_829D12D0);
PPC_FUNC_IMPL(__imp__sub_829D12D0) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D12D8"))) PPC_WEAK_FUNC(sub_829D12D8);
PPC_FUNC_IMPL(__imp__sub_829D12D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-25776(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25776);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d131c
	if (!ctx.cr6.eq) goto loc_829D131C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11336
	ctx.r3.s64 = ctx.r11.s64 + 11336;
	// bl 0x829d0f08
	ctx.lr = 0x829D1310;
	sub_829D0F08(ctx, base);
	// stw r3,-25776(r31)
	PPC_STORE_U32(ctx.r31.u32 + -25776, ctx.r3.u32);
	// bl 0x829d0fb8
	ctx.lr = 0x829D1318;
	sub_829D0FB8(ctx, base);
	// lwz r11,-25776(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25776);
loc_829D131C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1344"))) PPC_WEAK_FUNC(sub_829D1344);
PPC_FUNC_IMPL(__imp__sub_829D1344) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D1348"))) PPC_WEAK_FUNC(sub_829D1348);
PPC_FUNC_IMPL(__imp__sub_829D1348) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D1360;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d13e4
	if (ctx.cr6.eq) goto loc_829D13E4;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20900
	ctx.r11.s64 = ctx.r8.s64 + 20900;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-19616
	ctx.r6.s64 = ctx.r5.s64 + -19616;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,68
	ctx.r5.s64 = 68;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D13D4;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D13E4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D13F8"))) PPC_WEAK_FUNC(sub_829D13F8);
PPC_FUNC_IMPL(__imp__sub_829D13F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D1400;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-30844(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30844);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d142c
	if (!ctx.cr6.eq) goto loc_829D142C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82486ea0
	ctx.lr = 0x829D1420;
	sub_82486EA0(ctx, base);
	// stw r3,-30844(r31)
	PPC_STORE_U32(ctx.r31.u32 + -30844, ctx.r3.u32);
	// bl 0x82486f60
	ctx.lr = 0x829D1428;
	sub_82486F60(ctx, base);
	// lwz r10,-30844(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30844);
loc_829D142C:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25768(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25768);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d144c
	if (ctx.cr6.eq) goto loc_829D144C;
	// bl 0x822cd3e8
	ctx.lr = 0x829D1440;
	sub_822CD3E8(ctx, base);
	// lwz r11,-25768(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25768);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d1454
	goto loc_829D1454;
loc_829D144C:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D1454:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1484
	if (!ctx.cr6.eq) goto loc_829D1484;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D1474;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D147C;
	sub_822AADA8(ctx, base);
	// lwz r11,-25768(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25768);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D1484:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d14b0
	if (!ctx.cr6.eq) goto loc_829D14B0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D14A0;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D14A8;
	sub_82398640(ctx, base);
	// lwz r11,-25768(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25768);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D14B0:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d14e8
	if (ctx.cr6.eq) goto loc_829D14E8;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D14CC;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d14e8
	if (!ctx.cr6.eq) goto loc_829D14E8;
	// lwz r3,-25768(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25768);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D14E8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D14E8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D14F0"))) PPC_WEAK_FUNC(sub_829D14F0);
PPC_FUNC_IMPL(__imp__sub_829D14F0) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D14F8"))) PPC_WEAK_FUNC(sub_829D14F8);
PPC_FUNC_IMPL(__imp__sub_829D14F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-30844(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30844);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d153c
	if (!ctx.cr6.eq) goto loc_829D153C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82486ea0
	ctx.lr = 0x829D1530;
	sub_82486EA0(ctx, base);
	// stw r3,-30844(r31)
	PPC_STORE_U32(ctx.r31.u32 + -30844, ctx.r3.u32);
	// bl 0x82486f60
	ctx.lr = 0x829D1538;
	sub_82486F60(ctx, base);
	// lwz r11,-30844(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -30844);
loc_829D153C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1564"))) PPC_WEAK_FUNC(sub_829D1564);
PPC_FUNC_IMPL(__imp__sub_829D1564) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D1568"))) PPC_WEAK_FUNC(sub_829D1568);
PPC_FUNC_IMPL(__imp__sub_829D1568) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D1580;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d1604
	if (ctx.cr6.eq) goto loc_829D1604;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20956
	ctx.r11.s64 = ctx.r8.s64 + 20956;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-19912
	ctx.r6.s64 = ctx.r5.s64 + -19912;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,-988
	ctx.r10.s64 = ctx.r4.s64 + -988;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,5
	ctx.r6.s64 = 5;
	// li r5,1316
	ctx.r5.s64 = 1316;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D15F4;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D1604:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1618"))) PPC_WEAK_FUNC(sub_829D1618);
PPC_FUNC_IMPL(__imp__sub_829D1618) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D1620;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-25356(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25356);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d164c
	if (!ctx.cr6.eq) goto loc_829D164C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11336
	ctx.r3.s64 = ctx.r11.s64 + 11336;
	// bl 0x82a2d958
	ctx.lr = 0x829D1640;
	sub_82A2D958(ctx, base);
	// stw r3,-25356(r31)
	PPC_STORE_U32(ctx.r31.u32 + -25356, ctx.r3.u32);
	// bl 0x82a2da08
	ctx.lr = 0x829D1648;
	sub_82A2DA08(ctx, base);
	// lwz r10,-25356(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25356);
loc_829D164C:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25764(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25764);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d166c
	if (ctx.cr6.eq) goto loc_829D166C;
	// bl 0x829945c8
	ctx.lr = 0x829D1660;
	sub_829945C8(ctx, base);
	// lwz r11,-25764(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25764);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d1674
	goto loc_829D1674;
loc_829D166C:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D1674:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d16a4
	if (!ctx.cr6.eq) goto loc_829D16A4;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D1694;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D169C;
	sub_822AADA8(ctx, base);
	// lwz r11,-25764(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25764);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D16A4:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d16d0
	if (!ctx.cr6.eq) goto loc_829D16D0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D16C0;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D16C8;
	sub_82398640(ctx, base);
	// lwz r11,-25764(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25764);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D16D0:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d1708
	if (ctx.cr6.eq) goto loc_829D1708;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D16EC;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d1708
	if (!ctx.cr6.eq) goto loc_829D1708;
	// lwz r3,-25764(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25764);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D1708;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D1708:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D1710"))) PPC_WEAK_FUNC(sub_829D1710);
PPC_FUNC_IMPL(__imp__sub_829D1710) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1718"))) PPC_WEAK_FUNC(sub_829D1718);
PPC_FUNC_IMPL(__imp__sub_829D1718) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-25356(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25356);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d175c
	if (!ctx.cr6.eq) goto loc_829D175C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11336
	ctx.r3.s64 = ctx.r11.s64 + 11336;
	// bl 0x82a2d958
	ctx.lr = 0x829D1750;
	sub_82A2D958(ctx, base);
	// stw r3,-25356(r31)
	PPC_STORE_U32(ctx.r31.u32 + -25356, ctx.r3.u32);
	// bl 0x82a2da08
	ctx.lr = 0x829D1758;
	sub_82A2DA08(ctx, base);
	// lwz r11,-25356(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25356);
loc_829D175C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1784"))) PPC_WEAK_FUNC(sub_829D1784);
PPC_FUNC_IMPL(__imp__sub_829D1784) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D1788"))) PPC_WEAK_FUNC(sub_829D1788);
PPC_FUNC_IMPL(__imp__sub_829D1788) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D17A0;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d1824
	if (ctx.cr6.eq) goto loc_829D1824;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,20984
	ctx.r11.s64 = ctx.r8.s64 + 20984;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-20272
	ctx.r6.s64 = ctx.r5.s64 + -20272;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,2048
	ctx.r6.s64 = 2048;
	// li r5,724
	ctx.r5.s64 = 724;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D1814;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D1824:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1838"))) PPC_WEAK_FUNC(sub_829D1838);
PPC_FUNC_IMPL(__imp__sub_829D1838) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D1840;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-28632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d186c
	if (!ctx.cr6.eq) goto loc_829D186C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82605400
	ctx.lr = 0x829D1860;
	sub_82605400(ctx, base);
	// stw r3,-28632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28632, ctx.r3.u32);
	// bl 0x826054c0
	ctx.lr = 0x829D1868;
	sub_826054C0(ctx, base);
	// lwz r10,-28632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28632);
loc_829D186C:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25760(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25760);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d188c
	if (ctx.cr6.eq) goto loc_829D188C;
	// bl 0x82312188
	ctx.lr = 0x829D1880;
	sub_82312188(ctx, base);
	// lwz r11,-25760(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25760);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d1894
	goto loc_829D1894;
loc_829D188C:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D1894:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d18c4
	if (!ctx.cr6.eq) goto loc_829D18C4;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D18B4;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D18BC;
	sub_822AADA8(ctx, base);
	// lwz r11,-25760(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25760);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D18C4:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d18f0
	if (!ctx.cr6.eq) goto loc_829D18F0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D18E0;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D18E8;
	sub_82398640(ctx, base);
	// lwz r11,-25760(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25760);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D18F0:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d1928
	if (ctx.cr6.eq) goto loc_829D1928;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D190C;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d1928
	if (!ctx.cr6.eq) goto loc_829D1928;
	// lwz r3,-25760(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25760);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D1928;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D1928:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D1930"))) PPC_WEAK_FUNC(sub_829D1930);
PPC_FUNC_IMPL(__imp__sub_829D1930) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1938"))) PPC_WEAK_FUNC(sub_829D1938);
PPC_FUNC_IMPL(__imp__sub_829D1938) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-28632(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28632);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d197c
	if (!ctx.cr6.eq) goto loc_829D197C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82605400
	ctx.lr = 0x829D1970;
	sub_82605400(ctx, base);
	// stw r3,-28632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28632, ctx.r3.u32);
	// bl 0x826054c0
	ctx.lr = 0x829D1978;
	sub_826054C0(ctx, base);
	// lwz r11,-28632(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28632);
loc_829D197C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D19A4"))) PPC_WEAK_FUNC(sub_829D19A4);
PPC_FUNC_IMPL(__imp__sub_829D19A4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D19A8"))) PPC_WEAK_FUNC(sub_829D19A8);
PPC_FUNC_IMPL(__imp__sub_829D19A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D19C0;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d1a44
	if (ctx.cr6.eq) goto loc_829D1A44;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,21036
	ctx.r11.s64 = ctx.r8.s64 + 21036;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-20584
	ctx.r6.s64 = ctx.r5.s64 + -20584;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,2049
	ctx.r6.s64 = 2049;
	// li r5,496
	ctx.r5.s64 = 496;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D1A34;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D1A44:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1A58"))) PPC_WEAK_FUNC(sub_829D1A58);
PPC_FUNC_IMPL(__imp__sub_829D1A58) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D1A60;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-28636(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28636);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1a8c
	if (!ctx.cr6.eq) goto loc_829D1A8C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826051d0
	ctx.lr = 0x829D1A80;
	sub_826051D0(ctx, base);
	// stw r3,-28636(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28636, ctx.r3.u32);
	// bl 0x82605290
	ctx.lr = 0x829D1A88;
	sub_82605290(ctx, base);
	// lwz r10,-28636(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28636);
loc_829D1A8C:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25756(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25756);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d1aac
	if (ctx.cr6.eq) goto loc_829D1AAC;
	// bl 0x82311b48
	ctx.lr = 0x829D1AA0;
	sub_82311B48(ctx, base);
	// lwz r11,-25756(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25756);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d1ab4
	goto loc_829D1AB4;
loc_829D1AAC:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D1AB4:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1ae4
	if (!ctx.cr6.eq) goto loc_829D1AE4;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D1AD4;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D1ADC;
	sub_822AADA8(ctx, base);
	// lwz r11,-25756(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25756);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D1AE4:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1b10
	if (!ctx.cr6.eq) goto loc_829D1B10;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D1B00;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D1B08;
	sub_82398640(ctx, base);
	// lwz r11,-25756(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25756);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D1B10:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d1b48
	if (ctx.cr6.eq) goto loc_829D1B48;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D1B2C;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d1b48
	if (!ctx.cr6.eq) goto loc_829D1B48;
	// lwz r3,-25756(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25756);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D1B48;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D1B48:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D1B50"))) PPC_WEAK_FUNC(sub_829D1B50);
PPC_FUNC_IMPL(__imp__sub_829D1B50) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1B58"))) PPC_WEAK_FUNC(sub_829D1B58);
PPC_FUNC_IMPL(__imp__sub_829D1B58) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-28636(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28636);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d1b9c
	if (!ctx.cr6.eq) goto loc_829D1B9C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826051d0
	ctx.lr = 0x829D1B90;
	sub_826051D0(ctx, base);
	// stw r3,-28636(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28636, ctx.r3.u32);
	// bl 0x82605290
	ctx.lr = 0x829D1B98;
	sub_82605290(ctx, base);
	// lwz r11,-28636(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28636);
loc_829D1B9C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1BC4"))) PPC_WEAK_FUNC(sub_829D1BC4);
PPC_FUNC_IMPL(__imp__sub_829D1BC4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D1BC8"))) PPC_WEAK_FUNC(sub_829D1BC8);
PPC_FUNC_IMPL(__imp__sub_829D1BC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D1BE0;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d1c64
	if (ctx.cr6.eq) goto loc_829D1C64;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,21088
	ctx.r11.s64 = ctx.r8.s64 + 21088;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-20880
	ctx.r6.s64 = ctx.r5.s64 + -20880;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,1068
	ctx.r5.s64 = 1068;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D1C54;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D1C64:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1C78"))) PPC_WEAK_FUNC(sub_829D1C78);
PPC_FUNC_IMPL(__imp__sub_829D1C78) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D1C80;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-25652(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25652);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1cac
	if (!ctx.cr6.eq) goto loc_829D1CAC;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11336
	ctx.r3.s64 = ctx.r11.s64 + 11336;
	// bl 0x829dd7f0
	ctx.lr = 0x829D1CA0;
	sub_829DD7F0(ctx, base);
	// stw r3,-25652(r31)
	PPC_STORE_U32(ctx.r31.u32 + -25652, ctx.r3.u32);
	// bl 0x829dd8a0
	ctx.lr = 0x829D1CA8;
	sub_829DD8A0(ctx, base);
	// lwz r10,-25652(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25652);
loc_829D1CAC:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25752(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25752);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d1ccc
	if (ctx.cr6.eq) goto loc_829D1CCC;
	// bl 0x823679c8
	ctx.lr = 0x829D1CC0;
	sub_823679C8(ctx, base);
	// lwz r11,-25752(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25752);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d1cd4
	goto loc_829D1CD4;
loc_829D1CCC:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D1CD4:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1d04
	if (!ctx.cr6.eq) goto loc_829D1D04;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D1CF4;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D1CFC;
	sub_822AADA8(ctx, base);
	// lwz r11,-25752(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25752);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D1D04:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1d30
	if (!ctx.cr6.eq) goto loc_829D1D30;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D1D20;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D1D28;
	sub_82398640(ctx, base);
	// lwz r11,-25752(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25752);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D1D30:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d1d68
	if (ctx.cr6.eq) goto loc_829D1D68;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D1D4C;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d1d68
	if (!ctx.cr6.eq) goto loc_829D1D68;
	// lwz r3,-25752(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25752);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D1D68;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D1D68:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D1D70"))) PPC_WEAK_FUNC(sub_829D1D70);
PPC_FUNC_IMPL(__imp__sub_829D1D70) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1D78"))) PPC_WEAK_FUNC(sub_829D1D78);
PPC_FUNC_IMPL(__imp__sub_829D1D78) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-25652(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25652);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d1dbc
	if (!ctx.cr6.eq) goto loc_829D1DBC;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11336
	ctx.r3.s64 = ctx.r11.s64 + 11336;
	// bl 0x829dd7f0
	ctx.lr = 0x829D1DB0;
	sub_829DD7F0(ctx, base);
	// stw r3,-25652(r31)
	PPC_STORE_U32(ctx.r31.u32 + -25652, ctx.r3.u32);
	// bl 0x829dd8a0
	ctx.lr = 0x829D1DB8;
	sub_829DD8A0(ctx, base);
	// lwz r11,-25652(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25652);
loc_829D1DBC:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1DE4"))) PPC_WEAK_FUNC(sub_829D1DE4);
PPC_FUNC_IMPL(__imp__sub_829D1DE4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D1DE8"))) PPC_WEAK_FUNC(sub_829D1DE8);
PPC_FUNC_IMPL(__imp__sub_829D1DE8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D1E00;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d1e84
	if (ctx.cr6.eq) goto loc_829D1E84;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,21124
	ctx.r11.s64 = ctx.r8.s64 + 21124;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-21496
	ctx.r6.s64 = ctx.r5.s64 + -21496;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,-988
	ctx.r10.s64 = ctx.r4.s64 + -988;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,8
	ctx.r6.s64 = 8;
	// li r5,340
	ctx.r5.s64 = 340;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D1E74;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D1E84:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1E98"))) PPC_WEAK_FUNC(sub_829D1E98);
PPC_FUNC_IMPL(__imp__sub_829D1E98) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D1EA0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r29,r11,14488
	ctx.r29.s64 = ctx.r11.s64 + 14488;
	// lwz r10,-28440(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28440);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1ed0
	if (!ctx.cr6.eq) goto loc_829D1ED0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8261c060
	ctx.lr = 0x829D1EC4;
	sub_8261C060(ctx, base);
	// stw r3,-28440(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28440, ctx.r3.u32);
	// bl 0x8261c120
	ctx.lr = 0x829D1ECC;
	sub_8261C120(ctx, base);
	// lwz r10,-28440(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28440);
loc_829D1ED0:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25748(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25748);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d1ef0
	if (ctx.cr6.eq) goto loc_829D1EF0;
	// bl 0x82313768
	ctx.lr = 0x829D1EE4;
	sub_82313768(ctx, base);
	// lwz r11,-25748(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25748);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d1ef8
	goto loc_829D1EF8;
loc_829D1EF0:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D1EF8:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lwz r10,25356(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25356);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1f20
	if (!ctx.cr6.eq) goto loc_829D1F20;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82306628
	ctx.lr = 0x829D1F10;
	sub_82306628(ctx, base);
	// stw r3,25356(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25356, ctx.r3.u32);
	// bl 0x823066e8
	ctx.lr = 0x829D1F18;
	sub_823066E8(ctx, base);
	// lwz r11,-25748(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25748);
	// lwz r10,25356(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25356);
loc_829D1F20:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d1f50
	if (!ctx.cr6.eq) goto loc_829D1F50;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14476
	ctx.r3.s64 = ctx.r11.s64 + 14476;
	// bl 0x82398580
	ctx.lr = 0x829D1F40;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D1F48;
	sub_82398640(ctx, base);
	// lwz r11,-25748(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25748);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D1F50:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d1f88
	if (ctx.cr6.eq) goto loc_829D1F88;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D1F6C;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d1f88
	if (!ctx.cr6.eq) goto loc_829D1F88;
	// lwz r3,-25748(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25748);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D1F88;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D1F88:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D1F90"))) PPC_WEAK_FUNC(sub_829D1F90);
PPC_FUNC_IMPL(__imp__sub_829D1F90) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-32098
	ctx.r11.s64 = -2103574528;
	// lis r10,-32213
	ctx.r10.s64 = -2111111168;
	// addi r9,r11,-21512
	ctx.r9.s64 = ctx.r11.s64 + -21512;
	// addi r8,r10,5760
	ctx.r8.s64 = ctx.r10.s64 + 5760;
	// subf r7,r9,r8
	ctx.r7.s64 = ctx.r8.s64 - ctx.r9.s64;
	// cntlzw r6,r7
	ctx.r6.u64 = ctx.r7.u32 == 0 ? 32 : __builtin_clz(ctx.r7.u32);
	// rlwinm r3,r6,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 27) & 0x1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D1FB0"))) PPC_WEAK_FUNC(sub_829D1FB0);
PPC_FUNC_IMPL(__imp__sub_829D1FB0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-28440(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28440);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d1ff4
	if (!ctx.cr6.eq) goto loc_829D1FF4;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x8261c060
	ctx.lr = 0x829D1FE8;
	sub_8261C060(ctx, base);
	// stw r3,-28440(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28440, ctx.r3.u32);
	// bl 0x8261c120
	ctx.lr = 0x829D1FF0;
	sub_8261C120(ctx, base);
	// lwz r11,-28440(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28440);
loc_829D1FF4:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D201C"))) PPC_WEAK_FUNC(sub_829D201C);
PPC_FUNC_IMPL(__imp__sub_829D201C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D2020"))) PPC_WEAK_FUNC(sub_829D2020);
PPC_FUNC_IMPL(__imp__sub_829D2020) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D2038;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d20bc
	if (ctx.cr6.eq) goto loc_829D20BC;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,21168
	ctx.r11.s64 = ctx.r8.s64 + 21168;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-21848
	ctx.r6.s64 = ctx.r5.s64 + -21848;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,536
	ctx.r5.s64 = 536;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D20AC;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D20BC:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D20D0"))) PPC_WEAK_FUNC(sub_829D20D0);
PPC_FUNC_IMPL(__imp__sub_829D20D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D20D8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-27928(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27928);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d2104
	if (!ctx.cr6.eq) goto loc_829D2104;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82697e80
	ctx.lr = 0x829D20F8;
	sub_82697E80(ctx, base);
	// stw r3,-27928(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27928, ctx.r3.u32);
	// bl 0x82697f40
	ctx.lr = 0x829D2100;
	sub_82697F40(ctx, base);
	// lwz r10,-27928(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27928);
loc_829D2104:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25744(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25744);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d2124
	if (ctx.cr6.eq) goto loc_829D2124;
	// bl 0x822d8130
	ctx.lr = 0x829D2118;
	sub_822D8130(ctx, base);
	// lwz r11,-25744(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25744);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d212c
	goto loc_829D212C;
loc_829D2124:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D212C:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d215c
	if (!ctx.cr6.eq) goto loc_829D215C;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D214C;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D2154;
	sub_822AADA8(ctx, base);
	// lwz r11,-25744(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25744);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D215C:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d2188
	if (!ctx.cr6.eq) goto loc_829D2188;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D2178;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D2180;
	sub_82398640(ctx, base);
	// lwz r11,-25744(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25744);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D2188:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d21c0
	if (ctx.cr6.eq) goto loc_829D21C0;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D21A4;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d21c0
	if (!ctx.cr6.eq) goto loc_829D21C0;
	// lwz r3,-25744(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25744);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D21C0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D21C0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D21C8"))) PPC_WEAK_FUNC(sub_829D21C8);
PPC_FUNC_IMPL(__imp__sub_829D21C8) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D21D0"))) PPC_WEAK_FUNC(sub_829D21D0);
PPC_FUNC_IMPL(__imp__sub_829D21D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-27928(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27928);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d2214
	if (!ctx.cr6.eq) goto loc_829D2214;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x82697e80
	ctx.lr = 0x829D2208;
	sub_82697E80(ctx, base);
	// stw r3,-27928(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27928, ctx.r3.u32);
	// bl 0x82697f40
	ctx.lr = 0x829D2210;
	sub_82697F40(ctx, base);
	// lwz r11,-27928(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27928);
loc_829D2214:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D223C"))) PPC_WEAK_FUNC(sub_829D223C);
PPC_FUNC_IMPL(__imp__sub_829D223C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D2240"))) PPC_WEAK_FUNC(sub_829D2240);
PPC_FUNC_IMPL(__imp__sub_829D2240) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D2258;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d22dc
	if (ctx.cr6.eq) goto loc_829D22DC;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,21228
	ctx.r11.s64 = ctx.r8.s64 + 21228;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-22312
	ctx.r6.s64 = ctx.r5.s64 + -22312;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,532
	ctx.r5.s64 = 532;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D22CC;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D22DC:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D22F0"))) PPC_WEAK_FUNC(sub_829D22F0);
PPC_FUNC_IMPL(__imp__sub_829D22F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D22F8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-28808(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28808);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d2324
	if (!ctx.cr6.eq) goto loc_829D2324;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x825ff3d0
	ctx.lr = 0x829D2318;
	sub_825FF3D0(ctx, base);
	// stw r3,-28808(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28808, ctx.r3.u32);
	// bl 0x825ff490
	ctx.lr = 0x829D2320;
	sub_825FF490(ctx, base);
	// lwz r10,-28808(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28808);
loc_829D2324:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25740(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25740);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d2344
	if (ctx.cr6.eq) goto loc_829D2344;
	// bl 0x82316058
	ctx.lr = 0x829D2338;
	sub_82316058(ctx, base);
	// lwz r11,-25740(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25740);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d234c
	goto loc_829D234C;
loc_829D2344:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D234C:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d237c
	if (!ctx.cr6.eq) goto loc_829D237C;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D236C;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D2374;
	sub_822AADA8(ctx, base);
	// lwz r11,-25740(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25740);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D237C:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d23a8
	if (!ctx.cr6.eq) goto loc_829D23A8;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D2398;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D23A0;
	sub_82398640(ctx, base);
	// lwz r11,-25740(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25740);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D23A8:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d23e0
	if (ctx.cr6.eq) goto loc_829D23E0;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D23C4;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d23e0
	if (!ctx.cr6.eq) goto loc_829D23E0;
	// lwz r3,-25740(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25740);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D23E0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D23E0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D23E8"))) PPC_WEAK_FUNC(sub_829D23E8);
PPC_FUNC_IMPL(__imp__sub_829D23E8) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D23F0"))) PPC_WEAK_FUNC(sub_829D23F0);
PPC_FUNC_IMPL(__imp__sub_829D23F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-28808(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28808);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d2434
	if (!ctx.cr6.eq) goto loc_829D2434;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x825ff3d0
	ctx.lr = 0x829D2428;
	sub_825FF3D0(ctx, base);
	// stw r3,-28808(r31)
	PPC_STORE_U32(ctx.r31.u32 + -28808, ctx.r3.u32);
	// bl 0x825ff490
	ctx.lr = 0x829D2430;
	sub_825FF490(ctx, base);
	// lwz r11,-28808(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -28808);
loc_829D2434:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D245C"))) PPC_WEAK_FUNC(sub_829D245C);
PPC_FUNC_IMPL(__imp__sub_829D245C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D2460"))) PPC_WEAK_FUNC(sub_829D2460);
PPC_FUNC_IMPL(__imp__sub_829D2460) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D2478;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d24fc
	if (ctx.cr6.eq) goto loc_829D24FC;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,21276
	ctx.r11.s64 = ctx.r8.s64 + 21276;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-23880
	ctx.r6.s64 = ctx.r5.s64 + -23880;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,1076
	ctx.r5.s64 = 1076;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D24EC;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D24FC:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D2510"))) PPC_WEAK_FUNC(sub_829D2510);
PPC_FUNC_IMPL(__imp__sub_829D2510) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D2518;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-25652(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25652);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d2544
	if (!ctx.cr6.eq) goto loc_829D2544;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11336
	ctx.r3.s64 = ctx.r11.s64 + 11336;
	// bl 0x829dd7f0
	ctx.lr = 0x829D2538;
	sub_829DD7F0(ctx, base);
	// stw r3,-25652(r31)
	PPC_STORE_U32(ctx.r31.u32 + -25652, ctx.r3.u32);
	// bl 0x829dd8a0
	ctx.lr = 0x829D2540;
	sub_829DD8A0(ctx, base);
	// lwz r10,-25652(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25652);
loc_829D2544:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25736(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25736);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d2564
	if (ctx.cr6.eq) goto loc_829D2564;
	// bl 0x823679c8
	ctx.lr = 0x829D2558;
	sub_823679C8(ctx, base);
	// lwz r11,-25736(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25736);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d256c
	goto loc_829D256C;
loc_829D2564:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D256C:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d259c
	if (!ctx.cr6.eq) goto loc_829D259C;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D258C;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D2594;
	sub_822AADA8(ctx, base);
	// lwz r11,-25736(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25736);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D259C:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d25c8
	if (!ctx.cr6.eq) goto loc_829D25C8;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D25B8;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D25C0;
	sub_82398640(ctx, base);
	// lwz r11,-25736(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25736);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D25C8:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d2600
	if (ctx.cr6.eq) goto loc_829D2600;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D25E4;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d2600
	if (!ctx.cr6.eq) goto loc_829D2600;
	// lwz r3,-25736(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25736);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D2600;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D2600:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D2608"))) PPC_WEAK_FUNC(sub_829D2608);
PPC_FUNC_IMPL(__imp__sub_829D2608) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D2610"))) PPC_WEAK_FUNC(sub_829D2610);
PPC_FUNC_IMPL(__imp__sub_829D2610) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-25652(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25652);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d2654
	if (!ctx.cr6.eq) goto loc_829D2654;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11336
	ctx.r3.s64 = ctx.r11.s64 + 11336;
	// bl 0x829dd7f0
	ctx.lr = 0x829D2648;
	sub_829DD7F0(ctx, base);
	// stw r3,-25652(r31)
	PPC_STORE_U32(ctx.r31.u32 + -25652, ctx.r3.u32);
	// bl 0x829dd8a0
	ctx.lr = 0x829D2650;
	sub_829DD8A0(ctx, base);
	// lwz r11,-25652(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -25652);
loc_829D2654:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D267C"))) PPC_WEAK_FUNC(sub_829D267C);
PPC_FUNC_IMPL(__imp__sub_829D267C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D2680"))) PPC_WEAK_FUNC(sub_829D2680);
PPC_FUNC_IMPL(__imp__sub_829D2680) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D2698;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d271c
	if (ctx.cr6.eq) goto loc_829D271C;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,21316
	ctx.r11.s64 = ctx.r8.s64 + 21316;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-24320
	ctx.r6.s64 = ctx.r5.s64 + -24320;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,84
	ctx.r5.s64 = 84;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D270C;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D271C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D2730"))) PPC_WEAK_FUNC(sub_829D2730);
PPC_FUNC_IMPL(__imp__sub_829D2730) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D2738;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r29,r11,14476
	ctx.r29.s64 = ctx.r11.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d2768
	if (!ctx.cr6.eq) goto loc_829D2768;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D275C;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D2764;
	sub_822AADA8(ctx, base);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D2768:
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-25732(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25732);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d278c
	if (ctx.cr6.eq) goto loc_829D278C;
	// bl 0x822955c8
	ctx.lr = 0x829D277C;
	sub_822955C8(ctx, base);
	// lwz r11,-25732(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25732);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d2794
	goto loc_829D2794;
loc_829D278C:
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r9,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r9.u32);
loc_829D2794:
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d27b4
	if (!ctx.cr6.eq) goto loc_829D27B4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D27A4;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D27AC;
	sub_822AADA8(ctx, base);
	// lwz r11,-25732(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25732);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D27B4:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d27e0
	if (!ctx.cr6.eq) goto loc_829D27E0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82398580
	ctx.lr = 0x829D27D0;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D27D8;
	sub_82398640(ctx, base);
	// lwz r11,-25732(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25732);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D27E0:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d2818
	if (ctx.cr6.eq) goto loc_829D2818;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D27FC;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d2818
	if (!ctx.cr6.eq) goto loc_829D2818;
	// lwz r3,-25732(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25732);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D2818;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D2818:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D2820"))) PPC_WEAK_FUNC(sub_829D2820);
PPC_FUNC_IMPL(__imp__sub_829D2820) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D2828"))) PPC_WEAK_FUNC(sub_829D2828);
PPC_FUNC_IMPL(__imp__sub_829D2828) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,25216(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d286c
	if (!ctx.cr6.eq) goto loc_829D286C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14476
	ctx.r3.s64 = ctx.r11.s64 + 14476;
	// bl 0x822aace8
	ctx.lr = 0x829D2860;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D2868;
	sub_822AADA8(ctx, base);
	// lwz r11,25216(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D286C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D2894"))) PPC_WEAK_FUNC(sub_829D2894);
PPC_FUNC_IMPL(__imp__sub_829D2894) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D2898"))) PPC_WEAK_FUNC(sub_829D2898);
PPC_FUNC_IMPL(__imp__sub_829D2898) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,8
	ctx.r4.s64 = 8;
	// li r3,380
	ctx.r3.s64 = 380;
	// bl 0x822959a8
	ctx.lr = 0x829D28B0;
	sub_822959A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d2934
	if (ctx.cr6.eq) goto loc_829D2934;
	// lis r11,1032
	ctx.r11.s64 = 67633152;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// ori r9,r11,16516
	ctx.r9.u64 = ctx.r11.u64 | 16516;
	// lis r7,-32214
	ctx.r7.s64 = -2111176704;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r6,-32214
	ctx.r6.s64 = -2111176704;
	// addi r11,r8,21344
	ctx.r11.s64 = ctx.r8.s64 + 21344;
	// lis r5,-32098
	ctx.r5.s64 = -2103574528;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// addi r8,r7,-20912
	ctx.r8.s64 = ctx.r7.s64 + -20912;
	// addi r7,r6,-20920
	ctx.r7.s64 = ctx.r6.s64 + -20920;
	// addi r6,r5,-24616
	ctx.r6.s64 = ctx.r5.s64 + -24616;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
	// lis r4,-32246
	ctx.r4.s64 = -2113273856;
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// addi r10,r4,14488
	ctx.r10.s64 = ctx.r4.s64 + 14488;
	// addi r9,r9,11336
	ctx.r9.s64 = ctx.r9.s64 + 11336;
	// addi r8,r11,2
	ctx.r8.s64 = ctx.r11.s64 + 2;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,552
	ctx.r5.s64 = 552;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82398460
	ctx.lr = 0x829D2924;
	sub_82398460(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D2934:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D2948"))) PPC_WEAK_FUNC(sub_829D2948);
PPC_FUNC_IMPL(__imp__sub_829D2948) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D2950;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,-27924(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27924);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d297c
	if (!ctx.cr6.eq) goto loc_829D297C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826980b0
	ctx.lr = 0x829D2970;
	sub_826980B0(ctx, base);
	// stw r3,-27924(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27924, ctx.r3.u32);
	// bl 0x82698170
	ctx.lr = 0x829D2978;
	sub_82698170(ctx, base);
	// lwz r10,-27924(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27924);
loc_829D297C:
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// lwz r11,-25728(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25728);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d299c
	if (ctx.cr6.eq) goto loc_829D299C;
	// bl 0x822d8510
	ctx.lr = 0x829D2990;
	sub_822D8510(ctx, base);
	// lwz r11,-25728(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25728);
	// stw r3,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r3.u32);
	// b 0x829d29a4
	goto loc_829D29A4;
loc_829D299C:
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
loc_829D29A4:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r30,r10,14476
	ctx.r30.s64 = ctx.r10.s64 + 14476;
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d29d4
	if (!ctx.cr6.eq) goto loc_829D29D4;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822aace8
	ctx.lr = 0x829D29C4;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D29CC;
	sub_822AADA8(ctx, base);
	// lwz r11,-25728(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25728);
	// lwz r10,25216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D29D4:
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// stw r10,196(r11)
	PPC_STORE_U32(ctx.r11.u32 + 196, ctx.r10.u32);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d2a00
	if (!ctx.cr6.eq) goto loc_829D2A00;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82398580
	ctx.lr = 0x829D29F0;
	sub_82398580(ctx, base);
	// stw r3,-31632(r31)
	PPC_STORE_U32(ctx.r31.u32 + -31632, ctx.r3.u32);
	// bl 0x82398640
	ctx.lr = 0x829D29F8;
	sub_82398640(ctx, base);
	// lwz r11,-25728(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25728);
	// lwz r10,-31632(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + -31632);
loc_829D2A00:
	// lis r9,-31884
	ctx.r9.s64 = -2089549824;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// lwz r9,25076(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 25076);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d2a38
	if (ctx.cr6.eq) goto loc_829D2A38;
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// bl 0x822949a0
	ctx.lr = 0x829D2A1C;
	sub_822949A0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d2a38
	if (!ctx.cr6.eq) goto loc_829D2A38;
	// lwz r3,-25728(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -25728);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D2A38;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D2A38:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D2A40"))) PPC_WEAK_FUNC(sub_829D2A40);
PPC_FUNC_IMPL(__imp__sub_829D2A40) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D2A48"))) PPC_WEAK_FUNC(sub_829D2A48);
PPC_FUNC_IMPL(__imp__sub_829D2A48) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31883
	ctx.r31.s64 = -2089484288;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,-27924(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27924);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d2a8c
	if (!ctx.cr6.eq) goto loc_829D2A8C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14488
	ctx.r3.s64 = ctx.r11.s64 + 14488;
	// bl 0x826980b0
	ctx.lr = 0x829D2A80;
	sub_826980B0(ctx, base);
	// stw r3,-27924(r31)
	PPC_STORE_U32(ctx.r31.u32 + -27924, ctx.r3.u32);
	// bl 0x82698170
	ctx.lr = 0x829D2A88;
	sub_82698170(ctx, base);
	// lwz r11,-27924(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -27924);
loc_829D2A8C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r3,r9,1
	ctx.r3.u64 = ctx.r9.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D2AB4"))) PPC_WEAK_FUNC(sub_829D2AB4);
PPC_FUNC_IMPL(__imp__sub_829D2AB4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D2AB8"))) PPC_WEAK_FUNC(sub_829D2AB8);
PPC_FUNC_IMPL(__imp__sub_829D2AB8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10b0
	ctx.lr = 0x829D2AC0;
	__savegprlr_14(ctx, base);
	// stfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -160, ctx.f31.u64);
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31881
	ctx.r31.s64 = -2089353216;
	// stw r4,284(r1)
	PPC_STORE_U32(ctx.r1.u32 + 284, ctx.r4.u32);
	// lis r11,-31881
	ctx.r11.s64 = -2089353216;
	// stw r5,292(r1)
	PPC_STORE_U32(ctx.r1.u32 + 292, ctx.r5.u32);
	// li r29,0
	ctx.r29.s64 = 0;
	// stw r7,308(r1)
	PPC_STORE_U32(ctx.r1.u32 + 308, ctx.r7.u32);
	// addi r30,r11,-18296
	ctx.r30.s64 = ctx.r11.s64 + -18296;
	// mr r17,r3
	ctx.r17.u64 = ctx.r3.u64;
	// lwz r11,-18288(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -18288);
	// mr r14,r6
	ctx.r14.u64 = ctx.r6.u64;
	// mr r16,r29
	ctx.r16.u64 = ctx.r29.u64;
	// clrlwi r10,r11,31
	ctx.r10.u64 = ctx.r11.u32 & 0x1;
	// mr r15,r29
	ctx.r15.u64 = ctx.r29.u64;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d2b2c
	if (!ctx.cr6.eq) goto loc_829D2B2C;
	// ori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 | 1;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// stw r11,-18288(r31)
	PPC_STORE_U32(ctx.r31.u32 + -18288, ctx.r11.u32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r4,r10,21412
	ctx.r4.s64 = ctx.r10.s64 + 21412;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8233e028
	ctx.lr = 0x829D2B28;
	sub_8233E028(ctx, base);
	// lwz r11,-18288(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -18288);
loc_829D2B2C:
	// rlwinm r9,r11,0,30,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x2;
	// lis r10,-31881
	ctx.r10.s64 = -2089353216;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// addi r18,r10,-18304
	ctx.r18.s64 = ctx.r10.s64 + -18304;
	// bne cr6,0x829d2b68
	if (!ctx.cr6.eq) goto loc_829D2B68;
	// ori r11,r11,2
	ctx.r11.u64 = ctx.r11.u64 | 2;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// stw r11,-18288(r31)
	PPC_STORE_U32(ctx.r31.u32 + -18288, ctx.r11.u32);
	// mr r3,r18
	ctx.r3.u64 = ctx.r18.u64;
	// addi r4,r10,21436
	ctx.r4.s64 = ctx.r10.s64 + 21436;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8233e028
	ctx.lr = 0x829D2B64;
	sub_8233E028(ctx, base);
	// lwz r11,-18288(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -18288);
loc_829D2B68:
	// rlwinm r9,r11,0,29,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x4;
	// lis r10,-31881
	ctx.r10.s64 = -2089353216;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// addi r19,r10,-18312
	ctx.r19.s64 = ctx.r10.s64 + -18312;
	// bne cr6,0x829d2ba4
	if (!ctx.cr6.eq) goto loc_829D2BA4;
	// ori r11,r11,4
	ctx.r11.u64 = ctx.r11.u64 | 4;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// stw r11,-18288(r31)
	PPC_STORE_U32(ctx.r31.u32 + -18288, ctx.r11.u32);
	// mr r3,r19
	ctx.r3.u64 = ctx.r19.u64;
	// addi r4,r10,21452
	ctx.r4.s64 = ctx.r10.s64 + 21452;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8233e028
	ctx.lr = 0x829D2BA0;
	sub_8233E028(ctx, base);
	// lwz r11,-18288(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -18288);
loc_829D2BA4:
	// rlwinm r9,r11,0,28,28
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x8;
	// lis r10,-31881
	ctx.r10.s64 = -2089353216;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// addi r20,r10,-18320
	ctx.r20.s64 = ctx.r10.s64 + -18320;
	// bne cr6,0x829d2be0
	if (!ctx.cr6.eq) goto loc_829D2BE0;
	// ori r11,r11,8
	ctx.r11.u64 = ctx.r11.u64 | 8;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// stw r11,-18288(r31)
	PPC_STORE_U32(ctx.r31.u32 + -18288, ctx.r11.u32);
	// mr r3,r20
	ctx.r3.u64 = ctx.r20.u64;
	// addi r4,r10,21468
	ctx.r4.s64 = ctx.r10.s64 + 21468;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8233e028
	ctx.lr = 0x829D2BDC;
	sub_8233E028(ctx, base);
	// lwz r11,-18288(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -18288);
loc_829D2BE0:
	// rlwinm r9,r11,0,27,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x10;
	// lis r10,-31881
	ctx.r10.s64 = -2089353216;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// addi r21,r10,-18328
	ctx.r21.s64 = ctx.r10.s64 + -18328;
	// bne cr6,0x829d2c1c
	if (!ctx.cr6.eq) goto loc_829D2C1C;
	// ori r11,r11,16
	ctx.r11.u64 = ctx.r11.u64 | 16;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// stw r11,-18288(r31)
	PPC_STORE_U32(ctx.r31.u32 + -18288, ctx.r11.u32);
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// addi r4,r10,21480
	ctx.r4.s64 = ctx.r10.s64 + 21480;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8233e028
	ctx.lr = 0x829D2C18;
	sub_8233E028(ctx, base);
	// lwz r11,-18288(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -18288);
loc_829D2C1C:
	// rlwinm r9,r11,0,26,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x20;
	// lis r10,-31881
	ctx.r10.s64 = -2089353216;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// addi r22,r10,-18336
	ctx.r22.s64 = ctx.r10.s64 + -18336;
	// bne cr6,0x829d2c58
	if (!ctx.cr6.eq) goto loc_829D2C58;
	// ori r11,r11,32
	ctx.r11.u64 = ctx.r11.u64 | 32;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// stw r11,-18288(r31)
	PPC_STORE_U32(ctx.r31.u32 + -18288, ctx.r11.u32);
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// addi r4,r10,21492
	ctx.r4.s64 = ctx.r10.s64 + 21492;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8233e028
	ctx.lr = 0x829D2C54;
	sub_8233E028(ctx, base);
	// lwz r11,-18288(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -18288);
loc_829D2C58:
	// rlwinm r9,r11,0,25,25
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x40;
	// lis r10,-31881
	ctx.r10.s64 = -2089353216;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// addi r23,r10,-18344
	ctx.r23.s64 = ctx.r10.s64 + -18344;
	// bne cr6,0x829d2c94
	if (!ctx.cr6.eq) goto loc_829D2C94;
	// ori r11,r11,64
	ctx.r11.u64 = ctx.r11.u64 | 64;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// stw r11,-18288(r31)
	PPC_STORE_U32(ctx.r31.u32 + -18288, ctx.r11.u32);
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// addi r4,r10,21508
	ctx.r4.s64 = ctx.r10.s64 + 21508;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8233e028
	ctx.lr = 0x829D2C90;
	sub_8233E028(ctx, base);
	// lwz r11,-18288(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -18288);
loc_829D2C94:
	// rlwinm r9,r11,0,24,24
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x80;
	// lis r10,-31881
	ctx.r10.s64 = -2089353216;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// addi r24,r10,-18352
	ctx.r24.s64 = ctx.r10.s64 + -18352;
	// bne cr6,0x829d2cd0
	if (!ctx.cr6.eq) goto loc_829D2CD0;
	// ori r11,r11,128
	ctx.r11.u64 = ctx.r11.u64 | 128;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// stw r11,-18288(r31)
	PPC_STORE_U32(ctx.r31.u32 + -18288, ctx.r11.u32);
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r4,r10,21532
	ctx.r4.s64 = ctx.r10.s64 + 21532;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8233e028
	ctx.lr = 0x829D2CCC;
	sub_8233E028(ctx, base);
	// lwz r11,-18288(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -18288);
loc_829D2CD0:
	// rlwinm r9,r11,0,23,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x100;
	// lis r10,-31881
	ctx.r10.s64 = -2089353216;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// addi r25,r10,-18360
	ctx.r25.s64 = ctx.r10.s64 + -18360;
	// bne cr6,0x829d2d0c
	if (!ctx.cr6.eq) goto loc_829D2D0C;
	// ori r11,r11,256
	ctx.r11.u64 = ctx.r11.u64 | 256;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// stw r11,-18288(r31)
	PPC_STORE_U32(ctx.r31.u32 + -18288, ctx.r11.u32);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r4,r10,21564
	ctx.r4.s64 = ctx.r10.s64 + 21564;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8233e028
	ctx.lr = 0x829D2D08;
	sub_8233E028(ctx, base);
	// lwz r11,-18288(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -18288);
loc_829D2D0C:
	// rlwinm r9,r11,0,22,22
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x200;
	// lis r10,-31881
	ctx.r10.s64 = -2089353216;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// addi r26,r10,-18368
	ctx.r26.s64 = ctx.r10.s64 + -18368;
	// bne cr6,0x829d2d48
	if (!ctx.cr6.eq) goto loc_829D2D48;
	// ori r11,r11,512
	ctx.r11.u64 = ctx.r11.u64 | 512;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// stw r11,-18288(r31)
	PPC_STORE_U32(ctx.r31.u32 + -18288, ctx.r11.u32);
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// addi r4,r10,21584
	ctx.r4.s64 = ctx.r10.s64 + 21584;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8233e028
	ctx.lr = 0x829D2D44;
	sub_8233E028(ctx, base);
	// lwz r11,-18288(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -18288);
loc_829D2D48:
	// rlwinm r9,r11,0,21,21
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x400;
	// lis r10,-31881
	ctx.r10.s64 = -2089353216;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// addi r27,r10,-18376
	ctx.r27.s64 = ctx.r10.s64 + -18376;
	// bne cr6,0x829d2d84
	if (!ctx.cr6.eq) goto loc_829D2D84;
	// ori r11,r11,1024
	ctx.r11.u64 = ctx.r11.u64 | 1024;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// stw r11,-18288(r31)
	PPC_STORE_U32(ctx.r31.u32 + -18288, ctx.r11.u32);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// addi r4,r10,21608
	ctx.r4.s64 = ctx.r10.s64 + 21608;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8233e028
	ctx.lr = 0x829D2D80;
	sub_8233E028(ctx, base);
	// lwz r11,-18288(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -18288);
loc_829D2D84:
	// rlwinm r9,r11,0,20,20
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x800;
	// lis r10,-31881
	ctx.r10.s64 = -2089353216;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// addi r28,r10,-18384
	ctx.r28.s64 = ctx.r10.s64 + -18384;
	// bne cr6,0x829d2dbc
	if (!ctx.cr6.eq) goto loc_829D2DBC;
	// ori r11,r11,2048
	ctx.r11.u64 = ctx.r11.u64 | 2048;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// stw r11,-18288(r31)
	PPC_STORE_U32(ctx.r31.u32 + -18288, ctx.r11.u32);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r4,r10,21640
	ctx.r4.s64 = ctx.r10.s64 + 21640;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8233e028
	ctx.lr = 0x829D2DBC;
	sub_8233E028(ctx, base);
loc_829D2DBC:
	// lwz r11,284(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 284);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d2dd8
	if (ctx.cr6.eq) goto loc_829D2DD8;
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// lwz r3,496(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 496);
	// bl 0x829d9128
	ctx.lr = 0x829D2DD4;
	sub_829D9128(ctx, base);
	// mr r16,r3
	ctx.r16.u64 = ctx.r3.u64;
loc_829D2DD8:
	// lwz r11,292(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 292);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d2df4
	if (ctx.cr6.eq) goto loc_829D2DF4;
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// lwz r3,496(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 496);
	// bl 0x829d9128
	ctx.lr = 0x829D2DF0;
	sub_829D9128(ctx, base);
	// mr r15,r3
	ctx.r15.u64 = ctx.r3.u64;
loc_829D2DF4:
	// cmplwi cr6,r16,0
	ctx.cr6.compare<uint32_t>(ctx.r16.u32, 0, ctx.xer);
	// beq cr6,0x829d2e34
	if (ctx.cr6.eq) goto loc_829D2E34;
	// cmplwi cr6,r15,0
	ctx.cr6.compare<uint32_t>(ctx.r15.u32, 0, ctx.xer);
	// beq cr6,0x829d2e34
	if (ctx.cr6.eq) goto loc_829D2E34;
	// cmplw cr6,r16,r15
	ctx.cr6.compare<uint32_t>(ctx.r16.u32, ctx.r15.u32, ctx.xer);
	// beq cr6,0x829d2e34
	if (ctx.cr6.eq) goto loc_829D2E34;
	// lwz r11,492(r17)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r17.u32 + 492);
	// rlwinm r10,r11,0,2,2
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d2e2c
	if (ctx.cr6.eq) goto loc_829D2E2C;
	// lwz r11,552(r16)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r16.u32 + 552);
	// lwz r10,552(r15)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r15.u32 + 552);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x829d2e34
	if (ctx.cr6.eq) goto loc_829D2E34;
loc_829D2E2C:
	// li r31,1
	ctx.r31.s64 = 1;
	// b 0x829d2e38
	goto loc_829D2E38;
loc_829D2E34:
	// mr r31,r29
	ctx.r31.u64 = ctx.r29.u64;
loc_829D2E38:
	// cmplwi cr6,r15,0
	ctx.cr6.compare<uint32_t>(ctx.r15.u32, 0, ctx.xer);
	// beq cr6,0x829d2ec4
	if (ctx.cr6.eq) goto loc_829D2EC4;
	// lwz r11,644(r15)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r15.u32 + 644);
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// bgt cr6,0x829d2e50
	if (ctx.cr6.gt) goto loc_829D2E50;
	// stw r29,644(r15)
	PPC_STORE_U32(ctx.r15.u32 + 644, ctx.r29.u32);
loc_829D2E50:
	// cmplwi cr6,r16,0
	ctx.cr6.compare<uint32_t>(ctx.r16.u32, 0, ctx.xer);
	// beq cr6,0x829d2ec4
	if (ctx.cr6.eq) goto loc_829D2EC4;
	// lwz r11,0(r16)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r16.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r16
	ctx.r3.u64 = ctx.r16.u64;
	// lwz r10,996(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 996);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D2E70;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,776(r17)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r17.u32 + 776);
	// rlwinm r9,r11,0,13,13
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x40000;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x829d2e90
	if (!ctx.cr6.eq) goto loc_829D2E90;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x829d2e90
	if (ctx.cr6.eq) goto loc_829D2E90;
	// oris r11,r11,4
	ctx.r11.u64 = ctx.r11.u64 | 262144;
	// stw r11,776(r17)
	PPC_STORE_U32(ctx.r17.u32 + 776, ctx.r11.u32);
loc_829D2E90:
	// cmplw cr6,r16,r15
	ctx.cr6.compare<uint32_t>(ctx.r16.u32, ctx.r15.u32, ctx.xer);
	// beq cr6,0x829d2ec4
	if (ctx.cr6.eq) goto loc_829D2EC4;
	// lwz r11,492(r17)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r17.u32 + 492);
	// rlwinm r10,r11,0,2,2
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d2eb8
	if (ctx.cr6.eq) goto loc_829D2EB8;
	// lwz r11,552(r15)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r15.u32 + 552);
	// lwz r10,552(r16)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r16.u32 + 552);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// bne cr6,0x829d2ec4
	if (!ctx.cr6.eq) goto loc_829D2EC4;
loc_829D2EB8:
	// lwz r11,644(r16)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r16.u32 + 644);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,644(r16)
	PPC_STORE_U32(ctx.r16.u32 + 644, ctx.r11.u32);
loc_829D2EC4:
	// cmplwi cr6,r14,0
	ctx.cr6.compare<uint32_t>(ctx.r14.u32, 0, ctx.xer);
	// beq cr6,0x829d362c
	if (ctx.cr6.eq) goto loc_829D362C;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x829d91a8
	ctx.lr = 0x829D2ED4;
	sub_829D91A8(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x829d2fb4
	if (ctx.cr6.eq) goto loc_829D2FB4;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,1944(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1944);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d2fb4
	if (!ctx.cr6.eq) goto loc_829D2FB4;
	// lwz r10,1948(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1948);
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d2fb4
	if (!ctx.cr6.eq) goto loc_829D2FB4;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21652
	ctx.r4.s64 = ctx.r11.s64 + 21652;
	// bl 0x822960c0
	ctx.lr = 0x829D2F10;
	sub_822960C0(ctx, base);
	// lwz r3,2140(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 2140);
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f1,-32444(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -32444);
	ctx.f1.f64 = double(temp.f32);
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D2F30;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D2F38;
	sub_82299080(ctx, base);
	// li r29,3
	ctx.r29.s64 = 3;
loc_829D2F3C:
	// lwz r30,308(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 308);
loc_829D2F40:
	// lwz r28,284(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 284);
loc_829D2F44:
	// bl 0x829b8dc8
	ctx.lr = 0x829D2F48;
	sub_829B8DC8(ctx, base);
	// lwz r11,52(r14)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r14.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d2f68
	if (ctx.cr6.eq) goto loc_829D2F68;
loc_829D2F54:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d2f78
	if (ctx.cr6.eq) goto loc_829D2F78;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d2f54
	if (!ctx.cr6.eq) goto loc_829D2F54;
loc_829D2F68:
	// cntlzw r11,r3
	ctx.r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d34f4
	if (ctx.cr6.eq) goto loc_829D34F4;
loc_829D2F78:
	// bl 0x829b9460
	ctx.lr = 0x829D2F7C;
	sub_829B9460(ctx, base);
	// lwz r11,52(r14)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r14.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d2f9c
	if (ctx.cr6.eq) goto loc_829D2F9C;
loc_829D2F88:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d2fac
	if (ctx.cr6.eq) goto loc_829D2FAC;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d2f88
	if (!ctx.cr6.eq) goto loc_829D2F88;
loc_829D2F9C:
	// cntlzw r11,r3
	ctx.r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d343c
	if (ctx.cr6.eq) goto loc_829D343C;
loc_829D2FAC:
	// li r29,18
	ctx.r29.s64 = 18;
	// b 0x829d347c
	goto loc_829D347C;
loc_829D2FB4:
	// bl 0x82987600
	ctx.lr = 0x829D2FB8;
	sub_82987600(ctx, base);
	// lwz r11,52(r14)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r14.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d2fd8
	if (ctx.cr6.eq) goto loc_829D2FD8;
loc_829D2FC4:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d2fe8
	if (ctx.cr6.eq) goto loc_829D2FE8;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d2fc4
	if (!ctx.cr6.eq) goto loc_829D2FC4;
loc_829D2FD8:
	// cntlzw r11,r3
	ctx.r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d2f3c
	if (ctx.cr6.eq) goto loc_829D2F3C;
loc_829D2FE8:
	// bl 0x82980778
	ctx.lr = 0x829D2FEC;
	sub_82980778(ctx, base);
	// lwz r30,308(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 308);
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x829d3010
	if (ctx.cr6.eq) goto loc_829D3010;
loc_829D2FFC:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d3038
	if (ctx.cr6.eq) goto loc_829D3038;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d2ffc
	if (!ctx.cr6.eq) goto loc_829D2FFC;
loc_829D3010:
	// bl 0x82980a58
	ctx.lr = 0x829D3014;
	sub_82980A58(ctx, base);
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x829d3074
	if (ctx.cr6.eq) goto loc_829D3074;
loc_829D3020:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d3044
	if (ctx.cr6.eq) goto loc_829D3044;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d3020
	if (!ctx.cr6.eq) goto loc_829D3020;
	// b 0x829d3074
	goto loc_829D3074;
loc_829D3038:
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r4,r11,21680
	ctx.r4.s64 = ctx.r11.s64 + 21680;
	// b 0x829d304c
	goto loc_829D304C;
loc_829D3044:
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r4,r11,21708
	ctx.r4.s64 = ctx.r11.s64 + 21708;
loc_829D304C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x822960c0
	ctx.lr = 0x829D3054;
	sub_822960C0(ctx, base);
	// lwz r3,2148(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 2148);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,1000(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1000);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D306C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3074;
	sub_82299080(ctx, base);
loc_829D3074:
	// lwz r11,0(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 0);
	// lwz r10,1944(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1944);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d30e8
	if (!ctx.cr6.eq) goto loc_829D30E8;
	// lwz r10,1948(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1948);
	// lwz r11,4(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 4);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d30e8
	if (!ctx.cr6.eq) goto loc_829D30E8;
	// lwz r28,284(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 284);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x829d30e0
	if (ctx.cr6.eq) goto loc_829D30E0;
	// lwz r11,508(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 508);
	// rlwinm r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d30e0
	if (ctx.cr6.eq) goto loc_829D30E0;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21736
	ctx.r4.s64 = ctx.r11.s64 + 21736;
	// bl 0x822960c0
	ctx.lr = 0x829D30C0;
	sub_822960C0(ctx, base);
	// lwz r3,2148(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 2148);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,1000(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1000);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D30D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D30E0;
	sub_82299080(ctx, base);
loc_829D30E0:
	// li r29,4
	ctx.r29.s64 = 4;
	// b 0x829d2f44
	goto loc_829D2F44;
loc_829D30E8:
	// lwz r10,1944(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1944);
	// lwz r11,0(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 0);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d315c
	if (!ctx.cr6.eq) goto loc_829D315C;
	// lwz r10,1948(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1948);
	// lwz r11,4(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 4);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d315c
	if (!ctx.cr6.eq) goto loc_829D315C;
	// lwz r28,284(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 284);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x829d3154
	if (ctx.cr6.eq) goto loc_829D3154;
	// lwz r11,508(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 508);
	// rlwinm r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d3154
	if (ctx.cr6.eq) goto loc_829D3154;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21756
	ctx.r4.s64 = ctx.r11.s64 + 21756;
	// bl 0x822960c0
	ctx.lr = 0x829D3134;
	sub_822960C0(ctx, base);
	// lwz r3,2148(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 2148);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,1000(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1000);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D314C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3154;
	sub_82299080(ctx, base);
loc_829D3154:
	// li r29,5
	ctx.r29.s64 = 5;
	// b 0x829d2f44
	goto loc_829D2F44;
loc_829D315C:
	// lwz r10,1944(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1944);
	// lwz r11,0(r20)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r20.u32 + 0);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d3184
	if (!ctx.cr6.eq) goto loc_829D3184;
	// lwz r10,1948(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1948);
	// lwz r11,4(r20)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r20.u32 + 4);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d3184
	if (!ctx.cr6.eq) goto loc_829D3184;
	// li r29,6
	ctx.r29.s64 = 6;
	// b 0x829d2f40
	goto loc_829D2F40;
loc_829D3184:
	// lwz r10,1944(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1944);
	// lwz r11,0(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 0);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d31ac
	if (!ctx.cr6.eq) goto loc_829D31AC;
	// lwz r10,1948(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1948);
	// lwz r11,4(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 4);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d31ac
	if (!ctx.cr6.eq) goto loc_829D31AC;
	// li r29,7
	ctx.r29.s64 = 7;
	// b 0x829d2f40
	goto loc_829D2F40;
loc_829D31AC:
	// lwz r10,1944(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1944);
	// lwz r11,0(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d3278
	if (!ctx.cr6.eq) goto loc_829D3278;
	// lwz r10,1948(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1948);
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d3278
	if (!ctx.cr6.eq) goto loc_829D3278;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21784
	ctx.r4.s64 = ctx.r11.s64 + 21784;
	// li r29,8
	ctx.r29.s64 = 8;
	// bl 0x822960c0
	ctx.lr = 0x829D31E0;
	sub_822960C0(ctx, base);
	// lwz r3,2140(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 2140);
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D3204;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D320C;
	sub_82299080(ctx, base);
	// lis r7,-32230
	ctx.r7.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r7,21812
	ctx.r4.s64 = ctx.r7.s64 + 21812;
	// bl 0x822960c0
	ctx.lr = 0x829D321C;
	sub_822960C0(ctx, base);
	// lwz r3,2140(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r5,1020(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 1020);
	// mtctr r5
	ctx.ctr.u64 = ctx.r5.u64;
	// bctrl 
	ctx.lr = 0x829D3238;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3240;
	sub_82299080(ctx, base);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r4,21840
	ctx.r4.s64 = ctx.r4.s64 + 21840;
	// bl 0x822960c0
	ctx.lr = 0x829D3250;
	sub_822960C0(ctx, base);
	// lwz r3,2140(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,1020(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1020);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D326C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3274;
	sub_82299080(ctx, base);
	// b 0x829d2f40
	goto loc_829D2F40;
loc_829D3278:
	// lwz r10,1944(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1944);
	// lwz r11,0(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 0);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d3298
	if (!ctx.cr6.eq) goto loc_829D3298;
	// lwz r10,1948(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1948);
	// lwz r11,4(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 4);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// beq cr6,0x829d3434
	if (ctx.cr6.eq) goto loc_829D3434;
loc_829D3298:
	// lwz r10,1944(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1944);
	// lwz r11,0(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d32b8
	if (!ctx.cr6.eq) goto loc_829D32B8;
	// lwz r10,1948(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1948);
	// lwz r11,4(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 4);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// beq cr6,0x829d3434
	if (ctx.cr6.eq) goto loc_829D3434;
loc_829D32B8:
	// lwz r10,1944(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1944);
	// lwz r11,0(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 0);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d32e0
	if (!ctx.cr6.eq) goto loc_829D32E0;
	// lwz r10,1948(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1948);
	// lwz r11,4(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 4);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d32e0
	if (!ctx.cr6.eq) goto loc_829D32E0;
	// li r29,10
	ctx.r29.s64 = 10;
	// b 0x829d2f40
	goto loc_829D2F40;
loc_829D32E0:
	// lwz r10,1944(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1944);
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d3308
	if (!ctx.cr6.eq) goto loc_829D3308;
	// lwz r10,1948(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1948);
	// lwz r11,4(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 4);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d3308
	if (!ctx.cr6.eq) goto loc_829D3308;
	// li r29,11
	ctx.r29.s64 = 11;
	// b 0x829d2f40
	goto loc_829D2F40;
loc_829D3308:
	// lwz r10,1944(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1944);
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d3330
	if (!ctx.cr6.eq) goto loc_829D3330;
	// lwz r10,1948(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1948);
	// lwz r11,4(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d3330
	if (!ctx.cr6.eq) goto loc_829D3330;
	// li r29,12
	ctx.r29.s64 = 12;
	// b 0x829d2f40
	goto loc_829D2F40;
loc_829D3330:
	// lwz r10,1944(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1944);
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d3358
	if (!ctx.cr6.eq) goto loc_829D3358;
	// lwz r10,1948(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1948);
	// lwz r11,4(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x829d3358
	if (!ctx.cr6.eq) goto loc_829D3358;
	// li r29,13
	ctx.r29.s64 = 13;
	// b 0x829d2f40
	goto loc_829D2F40;
loc_829D3358:
	// bl 0x829876f0
	ctx.lr = 0x829D335C;
	sub_829876F0(ctx, base);
	// lwz r11,52(r14)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r14.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d337c
	if (ctx.cr6.eq) goto loc_829D337C;
loc_829D3368:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d338c
	if (ctx.cr6.eq) goto loc_829D338C;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d3368
	if (!ctx.cr6.eq) goto loc_829D3368;
loc_829D337C:
	// cntlzw r11,r3
	ctx.r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d33e0
	if (ctx.cr6.eq) goto loc_829D33E0;
loc_829D338C:
	// lwz r28,284(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 284);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x829d33d8
	if (ctx.cr6.eq) goto loc_829D33D8;
	// lwz r11,508(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 508);
	// rlwinm r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d33d8
	if (ctx.cr6.eq) goto loc_829D33D8;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21872
	ctx.r4.s64 = ctx.r11.s64 + 21872;
	// bl 0x822960c0
	ctx.lr = 0x829D33B8;
	sub_822960C0(ctx, base);
	// lwz r3,2148(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 2148);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,1000(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1000);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D33D0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D33D8;
	sub_82299080(ctx, base);
loc_829D33D8:
	// li r29,14
	ctx.r29.s64 = 14;
	// b 0x829d2f44
	goto loc_829D2F44;
loc_829D33E0:
	// lwz r28,284(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 284);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x829d342c
	if (ctx.cr6.eq) goto loc_829D342C;
	// lwz r11,508(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 508);
	// rlwinm r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d342c
	if (ctx.cr6.eq) goto loc_829D342C;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21872
	ctx.r4.s64 = ctx.r11.s64 + 21872;
	// bl 0x822960c0
	ctx.lr = 0x829D340C;
	sub_822960C0(ctx, base);
	// lwz r3,2148(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 2148);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,1000(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1000);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D3424;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D342C;
	sub_82299080(ctx, base);
loc_829D342C:
	// li r29,15
	ctx.r29.s64 = 15;
	// b 0x829d2f44
	goto loc_829D2F44;
loc_829D3434:
	// li r29,9
	ctx.r29.s64 = 9;
	// b 0x829d2f40
	goto loc_829D2F40;
loc_829D343C:
	// bl 0x829ba218
	ctx.lr = 0x829D3440;
	sub_829BA218(ctx, base);
	// lwz r11,52(r14)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r14.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d3460
	if (ctx.cr6.eq) goto loc_829D3460;
loc_829D344C:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d3470
	if (ctx.cr6.eq) goto loc_829D3470;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d344c
	if (!ctx.cr6.eq) goto loc_829D344C;
loc_829D3460:
	// cntlzw r11,r3
	ctx.r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d3478
	if (ctx.cr6.eq) goto loc_829D3478;
loc_829D3470:
	// li r29,16
	ctx.r29.s64 = 16;
	// b 0x829d347c
	goto loc_829D347C;
loc_829D3478:
	// li r29,17
	ctx.r29.s64 = 17;
loc_829D347C:
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x829d3530
	if (ctx.cr6.eq) goto loc_829D3530;
	// lwz r11,508(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 508);
	// rlwinm r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d34f4
	if (ctx.cr6.eq) goto loc_829D34F4;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21896
	ctx.r4.s64 = ctx.r11.s64 + 21896;
	// bl 0x822960c0
	ctx.lr = 0x829D34A4;
	sub_822960C0(ctx, base);
	// lwz r3,2148(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 2148);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,1000(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1000);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D34BC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D34C4;
	sub_82299080(ctx, base);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r8,21916
	ctx.r4.s64 = ctx.r8.s64 + 21916;
	// bl 0x822960c0
	ctx.lr = 0x829D34D4;
	sub_822960C0(ctx, base);
	// lwz r3,2148(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 2148);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,1000(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1000);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x829D34EC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D34F4;
	sub_82299080(ctx, base);
loc_829D34F4:
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x829d3530
	if (ctx.cr6.eq) goto loc_829D3530;
	// lwz r11,508(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 508);
	// rlwinm r10,r11,0,0,0
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d3530
	if (ctx.cr6.eq) goto loc_829D3530;
	// lwz r11,0(r17)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r17.u32 + 0);
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// mr r6,r15
	ctx.r6.u64 = ctx.r15.u64;
	// mr r5,r16
	ctx.r5.u64 = ctx.r16.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r17
	ctx.r3.u64 = ctx.r17.u64;
	// lwz r10,1024(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1024);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// b 0x829d3608
	goto loc_829D3608;
loc_829D3530:
	// bl 0x829809b8
	ctx.lr = 0x829D3534;
	sub_829809B8(ctx, base);
	// cmplw cr6,r30,r3
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x829d360c
	if (!ctx.cr6.eq) goto loc_829D360C;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x829d9228
	ctx.lr = 0x829D3544;
	sub_829D9228(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x829d92a8
	ctx.lr = 0x829D3550;
	sub_829D92A8(ctx, base);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x829d3568
	if (ctx.cr6.eq) goto loc_829D3568;
	// lwz r11,2048(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2048);
	// rlwinm r10,r11,0,13,13
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x40000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d3580
	if (!ctx.cr6.eq) goto loc_829D3580;
loc_829D3568:
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d35a0
	if (ctx.cr6.eq) goto loc_829D35A0;
	// lwz r11,1320(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1320);
	// rlwinm r10,r11,0,6,6
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x2000000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d35a0
	if (ctx.cr6.eq) goto loc_829D35A0;
loc_829D3580:
	// lwz r31,0(r17)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r17.u32 + 0);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x829d3598
	if (ctx.cr6.eq) goto loc_829D3598;
	// bl 0x82980688
	ctx.lr = 0x829D3590;
	sub_82980688(ctx, base);
	// mr r5,r16
	ctx.r5.u64 = ctx.r16.u64;
	// b 0x829d35f0
	goto loc_829D35F0;
loc_829D3598:
	// bl 0x82980688
	ctx.lr = 0x829D359C;
	sub_82980688(ctx, base);
	// b 0x829d35ec
	goto loc_829D35EC;
loc_829D35A0:
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x829d35b8
	if (ctx.cr6.eq) goto loc_829D35B8;
	// lwz r11,2048(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2048);
	// rlwinm r10,r11,0,14,14
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d35d0
	if (!ctx.cr6.eq) goto loc_829D35D0;
loc_829D35B8:
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d360c
	if (ctx.cr6.eq) goto loc_829D360C;
	// lbz r11,1320(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 1320);
	// clrlwi r10,r11,31
	ctx.r10.u64 = ctx.r11.u32 & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d360c
	if (ctx.cr6.eq) goto loc_829D360C;
loc_829D35D0:
	// lwz r31,0(r17)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r17.u32 + 0);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x829d35e8
	if (ctx.cr6.eq) goto loc_829D35E8;
	// bl 0x82980728
	ctx.lr = 0x829D35E0;
	sub_82980728(ctx, base);
	// mr r5,r16
	ctx.r5.u64 = ctx.r16.u64;
	// b 0x829d35f0
	goto loc_829D35F0;
loc_829D35E8:
	// bl 0x82980728
	ctx.lr = 0x829D35EC;
	sub_82980728(ctx, base);
loc_829D35EC:
	// li r5,0
	ctx.r5.s64 = 0;
loc_829D35F0:
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// lwz r11,1024(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1024);
	// mr r3,r17
	ctx.r3.u64 = ctx.r17.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r6,r15
	ctx.r6.u64 = ctx.r15.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
loc_829D3608:
	// bctrl 
	ctx.lr = 0x829D360C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D360C:
	// lwz r11,0(r17)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r17.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r5,292(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 292);
	// mr r3,r17
	ctx.r3.u64 = ctx.r17.u64;
	// lwz r10,1032(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1032);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D3628;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x829d3634
	goto loc_829D3634;
loc_829D362C:
	// lwz r30,308(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 308);
	// lwz r28,284(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 284);
loc_829D3634:
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// lwz r5,292(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 292);
	// mr r6,r14
	ctx.r6.u64 = ctx.r14.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r17
	ctx.r3.u64 = ctx.r17.u64;
	// bl 0x825d2eb0
	ctx.lr = 0x829D364C;
	sub_825D2EB0(ctx, base);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82cb1100
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D3658"))) PPC_WEAK_FUNC(sub_829D3658);
PPC_FUNC_IMPL(__imp__sub_829D3658) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10d8
	ctx.lr = 0x829D3660;
	__savegprlr_24(ctx, base);
	// stfd f31,-80(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -80, ctx.f31.u64);
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r30,r11,11272
	ctx.r30.s64 = ctx.r11.s64 + 11272;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r25,r5
	ctx.r25.u64 = ctx.r5.u64;
	// mr r24,r6
	ctx.r24.u64 = ctx.r6.u64;
	// mr r26,r7
	ctx.r26.u64 = ctx.r7.u64;
	// bl 0x822960c0
	ctx.lr = 0x829D3690;
	sub_822960C0(ctx, base);
	// lwz r11,2140(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d3aa8
	if (ctx.cr6.eq) goto loc_829D3AA8;
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bne cr6,0x829d36b8
	if (!ctx.cr6.eq) goto loc_829D36B8;
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// addi r4,r11,-27584
	ctx.r4.s64 = ctx.r11.s64 + -27584;
	// bl 0x822960c0
	ctx.lr = 0x829D36B4;
	sub_822960C0(ctx, base);
	// b 0x829d36dc
	goto loc_829D36DC;
loc_829D36B8:
	// lwz r11,4(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x829d36d4
	if (!ctx.cr6.eq) goto loc_829D36D4;
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// addi r4,r11,-19580
	ctx.r4.s64 = ctx.r11.s64 + -19580;
	// bl 0x822960c0
	ctx.lr = 0x829D36D0;
	sub_822960C0(ctx, base);
	// b 0x829d36dc
	goto loc_829D36DC;
loc_829D36D4:
	// addi r4,r26,44
	ctx.r4.s64 = ctx.r26.s64 + 44;
	// bl 0x8233e1a0
	ctx.lr = 0x829D36DC;
	sub_8233E1A0(ctx, base);
loc_829D36DC:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82295908
	ctx.lr = 0x829D36E8;
	sub_82295908(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D36F0;
	sub_82299080(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21940
	ctx.r4.s64 = ctx.r11.s64 + 21940;
	// bl 0x82295680
	ctx.lr = 0x829D3700;
	sub_82295680(ctx, base);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x829d375c
	if (ctx.cr6.eq) goto loc_829D375C;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r4,r11
	ctx.r4.u64 = ctx.r11.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d3764
	if (ctx.cr6.eq) goto loc_829D3764;
loc_829D371C:
	// lwz r27,100(r1)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r28,96(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r27,0
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 0, ctx.xer);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bne cr6,0x829d3734
	if (!ctx.cr6.eq) goto loc_829D3734;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
loc_829D3734:
	// bl 0x82cafee0
	ctx.lr = 0x829D3738;
	sub_82CAFEE0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d3764
	if (ctx.cr6.eq) goto loc_829D3764;
	// cmpwi cr6,r27,0
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 0, ctx.xer);
	// mr r11,r28
	ctx.r11.u64 = ctx.r28.u64;
	// bne cr6,0x829d3750
	if (!ctx.cr6.eq) goto loc_829D3750;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_829D3750:
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// srawi r30,r11,1
	ctx.xer.ca = (ctx.r11.s32 < 0) & ((ctx.r11.u32 & 0x1) != 0);
	ctx.r30.s64 = ctx.r11.s32 >> 1;
	// b 0x829d3768
	goto loc_829D3768;
loc_829D375C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// b 0x829d371c
	goto loc_829D371C;
loc_829D3764:
	// li r30,-1
	ctx.r30.s64 = -1;
loc_829D3768:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3770;
	sub_82299080(ctx, base);
	// lis r6,32767
	ctx.r6.s64 = 2147418112;
	// addi r5,r30,1
	ctx.r5.s64 = ctx.r30.s64 + 1;
	// ori r6,r6,65535
	ctx.r6.u64 = ctx.r6.u64 | 65535;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x822b1c78
	ctx.lr = 0x829D3788;
	sub_822B1C78(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82295908
	ctx.lr = 0x829D3794;
	sub_82295908(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D379C;
	sub_82299080(ctx, base);
	// cmpwi cr6,r29,3
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 3, ctx.xer);
	// bne cr6,0x829d37dc
	if (!ctx.cr6.eq) goto loc_829D37DC;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21944
	ctx.r4.s64 = ctx.r11.s64 + 21944;
	// bl 0x82295680
	ctx.lr = 0x829D37B4;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f1,-32444(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -32444);
	ctx.f1.f64 = double(temp.f32);
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D37D4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// b 0x829d3aa4
	goto loc_829D3AA4;
loc_829D37DC:
	// cmpwi cr6,r29,13
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 13, ctx.xer);
	// bne cr6,0x829d381c
	if (!ctx.cr6.eq) goto loc_829D381C;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21960
	ctx.r4.s64 = ctx.r11.s64 + 21960;
	// bl 0x82295680
	ctx.lr = 0x829D37F4;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f1,-32444(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -32444);
	ctx.f1.f64 = double(temp.f32);
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D3814;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// b 0x829d3aa4
	goto loc_829D3AA4;
loc_829D381C:
	// cmpwi cr6,r29,16
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 16, ctx.xer);
	// bne cr6,0x829d38e8
	if (!ctx.cr6.eq) goto loc_829D38E8;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21812
	ctx.r4.s64 = ctx.r11.s64 + 21812;
	// bl 0x822960c0
	ctx.lr = 0x829D3834;
	sub_822960C0(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D3858;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3860;
	sub_82299080(ctx, base);
	// lis r7,-32230
	ctx.r7.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r7,21976
	ctx.r4.s64 = ctx.r7.s64 + 21976;
	// bl 0x82295680
	ctx.lr = 0x829D3870;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r5,1020(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 1020);
	// mtctr r5
	ctx.ctr.u64 = ctx.r5.u64;
	// bctrl 
	ctx.lr = 0x829D388C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3894;
	sub_82299080(ctx, base);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r4,-20236
	ctx.r4.s64 = ctx.r4.s64 + -20236;
	// addi r30,r1,96
	ctx.r30.s64 = ctx.r1.s64 + 96;
	// lwz r29,2140(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r28,0(r29)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D38B0;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D38C0;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,1020(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 1020);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x829D38D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D38E0;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// b 0x829d3aa4
	goto loc_829D3AA4;
loc_829D38E8:
	// cmpwi cr6,r29,17
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 17, ctx.xer);
	// bne cr6,0x829d3980
	if (!ctx.cr6.eq) goto loc_829D3980;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21976
	ctx.r4.s64 = ctx.r11.s64 + 21976;
	// bl 0x82295680
	ctx.lr = 0x829D3900;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D3924;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D392C;
	sub_82299080(ctx, base);
	// lis r7,-32243
	ctx.r7.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r7,-20236
	ctx.r4.s64 = ctx.r7.s64 + -20236;
	// addi r30,r1,96
	ctx.r30.s64 = ctx.r1.s64 + 96;
	// lwz r29,2140(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r28,0(r29)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D3948;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D3958;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r6,1020(r28)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r28.u32 + 1020);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x829D3970;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D3978;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// b 0x829d3aa4
	goto loc_829D3AA4;
loc_829D3980:
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// cmpwi cr6,r29,14
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 14, ctx.xer);
	// addi r30,r11,21996
	ctx.r30.s64 = ctx.r11.s64 + 21996;
	// bne cr6,0x829d3b10
	if (!ctx.cr6.eq) goto loc_829D3B10;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21944
	ctx.r4.s64 = ctx.r11.s64 + 21944;
loc_829D399C:
	// bl 0x82295680
	ctx.lr = 0x829D39A0;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D39C4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D39CC;
	sub_82299080(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82295680
	ctx.lr = 0x829D39D8;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,1020(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1020);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x829D39F4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D39FC;
	sub_82299080(ctx, base);
	// lis r5,-32243
	ctx.r5.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r5,-20260
	ctx.r4.s64 = ctx.r5.s64 + -20260;
	// addi r29,r1,96
	ctx.r29.s64 = ctx.r1.s64 + 96;
	// lwz r28,2140(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r27,0(r28)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D3A18;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D3A28;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,1020(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 1020);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
loc_829D3A3C:
	// bctrl 
	ctx.lr = 0x829D3A40;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D3A48;
	sub_82299080(ctx, base);
loc_829D3A48:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3A50;
	sub_82299080(ctx, base);
	// lwz r11,2208(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2208);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d3aa8
	if (ctx.cr6.eq) goto loc_829D3AA8;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82295680
	ctx.lr = 0x829D3A68;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,1008(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1008);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D3A80;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r9,2208(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2208);
	// fctiwz f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.s64 = (ctx.f1.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f1.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lwz r11,1920(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1920);
	// stw r8,1924(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1924, ctx.r8.u32);
	// addi r7,r11,1
	ctx.r7.s64 = ctx.r11.s64 + 1;
	// stw r7,1920(r9)
	PPC_STORE_U32(ctx.r9.u32 + 1920, ctx.r7.u32);
loc_829D3AA4:
	// bl 0x82299080
	ctx.lr = 0x829D3AA8;
	sub_82299080(ctx, base);
loc_829D3AA8:
	// lwz r11,1996(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1996);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d3ad4
	if (ctx.cr6.eq) goto loc_829D3AD4;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,1000(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1000);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D3AD4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D3AD4:
	// lwz r10,104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r11.u32);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x829d3afc
	if (ctx.cr6.eq) goto loc_829D3AFC;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r11.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82294520
	ctx.lr = 0x829D3AFC;
	sub_82294520(ctx, base);
loc_829D3AFC:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82294cc8
	ctx.lr = 0x829D3B04;
	sub_82294CC8(ctx, base);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// lfd f31,-80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// b 0x82cb1128
	__restgprlr_24(ctx, base);
	return;
loc_829D3B10:
	// cmpwi cr6,r29,15
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 15, ctx.xer);
	// bne cr6,0x829d3b28
	if (!ctx.cr6.eq) goto loc_829D3B28;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21960
	ctx.r4.s64 = ctx.r11.s64 + 21960;
	// b 0x829d399c
	goto loc_829D399C;
loc_829D3B28:
	// cmpwi cr6,r29,2
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 2, ctx.xer);
	// bne cr6,0x829d3bc0
	if (!ctx.cr6.eq) goto loc_829D3BC0;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,22012
	ctx.r4.s64 = ctx.r11.s64 + 22012;
	// bl 0x82295680
	ctx.lr = 0x829D3B40;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D3B64;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3B6C;
	sub_82299080(ctx, base);
	// lis r7,-32243
	ctx.r7.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r7,-20312
	ctx.r4.s64 = ctx.r7.s64 + -20312;
	// addi r30,r1,96
	ctx.r30.s64 = ctx.r1.s64 + 96;
	// lwz r29,2140(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r28,0(r29)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D3B88;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D3B98;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r6,1020(r28)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r28.u32 + 1020);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x829D3BB0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D3BB8;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// b 0x829d3aa4
	goto loc_829D3AA4;
loc_829D3BC0:
	// cmpwi cr6,r29,19
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 19, ctx.xer);
	// bne cr6,0x829d3cac
	if (!ctx.cr6.eq) goto loc_829D3CAC;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21976
	ctx.r4.s64 = ctx.r11.s64 + 21976;
	// bl 0x82295680
	ctx.lr = 0x829D3BD8;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D3BFC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3C04;
	sub_82299080(ctx, base);
	// lis r7,-32243
	ctx.r7.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r7,-20316
	ctx.r4.s64 = ctx.r7.s64 + -20316;
	// addi r30,r1,96
	ctx.r30.s64 = ctx.r1.s64 + 96;
	// lwz r29,2140(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r28,0(r29)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D3C20;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D3C30;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r6,1020(r28)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r28.u32 + 1020);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x829D3C48;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D3C50;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3C58;
	sub_82299080(ctx, base);
	// lis r5,-32243
	ctx.r5.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r5,-20236
	ctx.r4.s64 = ctx.r5.s64 + -20236;
	// addi r30,r1,96
	ctx.r30.s64 = ctx.r1.s64 + 96;
	// lwz r29,2140(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r28,0(r29)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D3C74;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D3C84;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,1020(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 1020);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x829D3C9C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D3CA4;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// b 0x829d3aa4
	goto loc_829D3AA4;
loc_829D3CAC:
	// cmpwi cr6,r29,18
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 18, ctx.xer);
	// bne cr6,0x829d3dcc
	if (!ctx.cr6.eq) goto loc_829D3DCC;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,21944
	ctx.r4.s64 = ctx.r11.s64 + 21944;
	// bl 0x82295680
	ctx.lr = 0x829D3CC4;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D3CE8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3CF0;
	sub_82299080(ctx, base);
	// lis r7,-32230
	ctx.r7.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r7,21976
	ctx.r4.s64 = ctx.r7.s64 + 21976;
	// bl 0x82295680
	ctx.lr = 0x829D3D00;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r5,1020(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 1020);
	// mtctr r5
	ctx.ctr.u64 = ctx.r5.u64;
	// bctrl 
	ctx.lr = 0x829D3D1C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3D24;
	sub_82299080(ctx, base);
	// lis r4,-32243
	ctx.r4.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r4,-20316
	ctx.r4.s64 = ctx.r4.s64 + -20316;
	// addi r30,r1,96
	ctx.r30.s64 = ctx.r1.s64 + 96;
	// lwz r29,2140(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r28,0(r29)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D3D40;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D3D50;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,1020(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 1020);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x829D3D68;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D3D70;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3D78;
	sub_82299080(ctx, base);
	// lis r10,-32243
	ctx.r10.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r10,-20236
	ctx.r4.s64 = ctx.r10.s64 + -20236;
	// addi r30,r1,96
	ctx.r30.s64 = ctx.r1.s64 + 96;
	// lwz r29,2140(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r28,0(r29)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D3D94;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D3DA4;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r9,1020(r28)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r28.u32 + 1020);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D3DBC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D3DC4;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// b 0x829d3aa4
	goto loc_829D3AA4;
loc_829D3DCC:
	// cmpwi cr6,r29,4
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 4, ctx.xer);
	// bne cr6,0x829d3ec4
	if (!ctx.cr6.eq) goto loc_829D3EC4;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82295680
	ctx.lr = 0x829D3DE0;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r9,1020(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1020);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D3E04;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3E0C;
	sub_82299080(ctx, base);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r8,21944
	ctx.r4.s64 = ctx.r8.s64 + 21944;
	// bl 0x82295680
	ctx.lr = 0x829D3E1C;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,1020(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1020);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x829D3E38;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3E40;
	sub_82299080(ctx, base);
	// lis r5,-32243
	ctx.r5.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r5,-20260
	ctx.r4.s64 = ctx.r5.s64 + -20260;
	// addi r29,r1,96
	ctx.r29.s64 = ctx.r1.s64 + 96;
	// lwz r28,2140(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r27,0(r28)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D3E5C;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D3E6C;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,1020(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 1020);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x829D3E84;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D3E8C;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3E94;
	sub_82299080(ctx, base);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r10,22032
	ctx.r4.s64 = ctx.r10.s64 + 22032;
	// bl 0x82295680
	ctx.lr = 0x829D3EA4;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D3EC0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x829d3a48
	goto loc_829D3A48;
loc_829D3EC4:
	// cmpwi cr6,r29,5
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 5, ctx.xer);
	// bne cr6,0x829d3fbc
	if (!ctx.cr6.eq) goto loc_829D3FBC;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82295680
	ctx.lr = 0x829D3ED8;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r9,1020(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1020);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D3EFC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3F04;
	sub_82299080(ctx, base);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r8,21944
	ctx.r4.s64 = ctx.r8.s64 + 21944;
	// bl 0x82295680
	ctx.lr = 0x829D3F14;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,1020(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1020);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x829D3F30;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3F38;
	sub_82299080(ctx, base);
	// lis r5,-32243
	ctx.r5.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r5,-20260
	ctx.r4.s64 = ctx.r5.s64 + -20260;
	// addi r29,r1,96
	ctx.r29.s64 = ctx.r1.s64 + 96;
	// lwz r28,2140(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r27,0(r28)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D3F54;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D3F64;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,1020(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 1020);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x829D3F7C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D3F84;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3F8C;
	sub_82299080(ctx, base);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r10,22044
	ctx.r4.s64 = ctx.r10.s64 + 22044;
	// bl 0x82295680
	ctx.lr = 0x829D3F9C;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D3FB8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x829d3a48
	goto loc_829D3A48;
loc_829D3FBC:
	// cmpwi cr6,r29,6
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 6, ctx.xer);
	// bne cr6,0x829d40b4
	if (!ctx.cr6.eq) goto loc_829D40B4;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82295680
	ctx.lr = 0x829D3FD0;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r9,1020(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1020);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D3FF4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D3FFC;
	sub_82299080(ctx, base);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r8,21944
	ctx.r4.s64 = ctx.r8.s64 + 21944;
	// bl 0x82295680
	ctx.lr = 0x829D400C;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,1020(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1020);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x829D4028;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D4030;
	sub_82299080(ctx, base);
	// lis r5,-32243
	ctx.r5.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r5,-20260
	ctx.r4.s64 = ctx.r5.s64 + -20260;
	// addi r29,r1,96
	ctx.r29.s64 = ctx.r1.s64 + 96;
	// lwz r28,2140(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r27,0(r28)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D404C;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D405C;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,1020(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 1020);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x829D4074;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D407C;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D4084;
	sub_82299080(ctx, base);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r10,22060
	ctx.r4.s64 = ctx.r10.s64 + 22060;
	// bl 0x82295680
	ctx.lr = 0x829D4094;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D40B0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x829d3a48
	goto loc_829D3A48;
loc_829D40B4:
	// cmpwi cr6,r29,7
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 7, ctx.xer);
	// bne cr6,0x829d41ac
	if (!ctx.cr6.eq) goto loc_829D41AC;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82295680
	ctx.lr = 0x829D40C8;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r9,1020(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1020);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D40EC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D40F4;
	sub_82299080(ctx, base);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r8,21944
	ctx.r4.s64 = ctx.r8.s64 + 21944;
	// bl 0x82295680
	ctx.lr = 0x829D4104;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,1020(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1020);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x829D4120;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D4128;
	sub_82299080(ctx, base);
	// lis r5,-32243
	ctx.r5.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r5,-20260
	ctx.r4.s64 = ctx.r5.s64 + -20260;
	// addi r29,r1,96
	ctx.r29.s64 = ctx.r1.s64 + 96;
	// lwz r28,2140(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r27,0(r28)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D4144;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D4154;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,1020(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 1020);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x829D416C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D4174;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D417C;
	sub_82299080(ctx, base);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r10,22072
	ctx.r4.s64 = ctx.r10.s64 + 22072;
	// bl 0x82295680
	ctx.lr = 0x829D418C;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D41A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x829d3a48
	goto loc_829D3A48;
loc_829D41AC:
	// cmpwi cr6,r29,10
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 10, ctx.xer);
	// bne cr6,0x829d42a4
	if (!ctx.cr6.eq) goto loc_829D42A4;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82295680
	ctx.lr = 0x829D41C0;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r9,1020(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1020);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D41E4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D41EC;
	sub_82299080(ctx, base);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r8,21944
	ctx.r4.s64 = ctx.r8.s64 + 21944;
	// bl 0x82295680
	ctx.lr = 0x829D41FC;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,1020(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1020);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x829D4218;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D4220;
	sub_82299080(ctx, base);
	// lis r5,-32243
	ctx.r5.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r5,-20260
	ctx.r4.s64 = ctx.r5.s64 + -20260;
	// addi r29,r1,96
	ctx.r29.s64 = ctx.r1.s64 + 96;
	// lwz r28,2140(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r27,0(r28)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D423C;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D424C;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,1020(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 1020);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x829D4264;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D426C;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D4274;
	sub_82299080(ctx, base);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r10,22088
	ctx.r4.s64 = ctx.r10.s64 + 22088;
	// bl 0x82295680
	ctx.lr = 0x829D4284;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D42A0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x829d3a48
	goto loc_829D3A48;
loc_829D42A4:
	// cmpwi cr6,r29,8
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 8, ctx.xer);
	// bne cr6,0x829d42f4
	if (!ctx.cr6.eq) goto loc_829D42F4;
	// lwz r29,2140(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-20260
	ctx.r4.s64 = ctx.r11.s64 + -20260;
	// addi r28,r1,96
	ctx.r28.s64 = ctx.r1.s64 + 96;
	// lwz r27,0(r29)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D42C8;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D42D8;
	sub_822952C8(ctx, base);
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r9,1020(r27)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r27.u32 + 1020);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lfs f1,-32444(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -32444);
	ctx.f1.f64 = double(temp.f32);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// b 0x829d3a3c
	goto loc_829D3A3C;
loc_829D42F4:
	// cmpwi cr6,r29,11
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 11, ctx.xer);
	// bne cr6,0x829d43ec
	if (!ctx.cr6.eq) goto loc_829D43EC;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82295680
	ctx.lr = 0x829D4308;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r9,1020(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1020);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D432C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D4334;
	sub_82299080(ctx, base);
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r8,21944
	ctx.r4.s64 = ctx.r8.s64 + 21944;
	// bl 0x82295680
	ctx.lr = 0x829D4344;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,1020(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1020);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x829D4360;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D4368;
	sub_82299080(ctx, base);
	// lis r5,-32243
	ctx.r5.s64 = -2113077248;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r5,-20260
	ctx.r4.s64 = ctx.r5.s64 + -20260;
	// addi r29,r1,96
	ctx.r29.s64 = ctx.r1.s64 + 96;
	// lwz r28,2140(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lwz r27,0(r28)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// bl 0x822960c0
	ctx.lr = 0x829D4384;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D4394;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,1020(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 1020);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x829D43AC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D43B4;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D43BC;
	sub_82299080(ctx, base);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r10,22104
	ctx.r4.s64 = ctx.r10.s64 + 22104;
	// bl 0x82295680
	ctx.lr = 0x829D43CC;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D43E8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x829d3a48
	goto loc_829D3A48;
loc_829D43EC:
	// cmpwi cr6,r29,12
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 12, ctx.xer);
	// bne cr6,0x829d4498
	if (!ctx.cr6.eq) goto loc_829D4498;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,22116
	ctx.r4.s64 = ctx.r11.s64 + 22116;
	// bl 0x82295680
	ctx.lr = 0x829D4404;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D4428;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D4430;
	sub_82299080(ctx, base);
	// lis r7,-32230
	ctx.r7.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r7,22132
	ctx.r4.s64 = ctx.r7.s64 + 22132;
	// bl 0x82295680
	ctx.lr = 0x829D4440;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r5,1020(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 1020);
	// mtctr r5
	ctx.ctr.u64 = ctx.r5.u64;
	// bctrl 
	ctx.lr = 0x829D445C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D4464;
	sub_82299080(ctx, base);
	// lis r4,-32230
	ctx.r4.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r4,21944
	ctx.r4.s64 = ctx.r4.s64 + 21944;
	// bl 0x82295680
	ctx.lr = 0x829D4474;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,1020(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1020);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D4490;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// b 0x829d3aa4
	goto loc_829D3AA4;
loc_829D4498:
	// cmpwi cr6,r29,9
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 9, ctx.xer);
	// bne cr6,0x829d3aa8
	if (!ctx.cr6.eq) goto loc_829D3AA8;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,22132
	ctx.r4.s64 = ctx.r11.s64 + 22132;
	// bl 0x82295680
	ctx.lr = 0x829D44B0;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lfs f31,-32444(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r8,1020(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1020);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x829D44D4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D44DC;
	sub_82299080(ctx, base);
	// lis r7,-32230
	ctx.r7.s64 = -2112225280;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r7,21944
	ctx.r4.s64 = ctx.r7.s64 + 21944;
	// bl 0x82295680
	ctx.lr = 0x829D44EC;
	sub_82295680(ctx, base);
	// lwz r3,2140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2140);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r5,1020(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 1020);
	// mtctr r5
	ctx.ctr.u64 = ctx.r5.u64;
	// bctrl 
	ctx.lr = 0x829D4508;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// b 0x829d3aa4
	goto loc_829D3AA4;
}

__attribute__((alias("__imp__sub_829D4510"))) PPC_WEAK_FUNC(sub_829D4510);
PPC_FUNC_IMPL(__imp__sub_829D4510) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10ec
	ctx.lr = 0x829D4518;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x829d4568
	if (ctx.cr6.eq) goto loc_829D4568;
	// lwz r11,496(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 496);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d4568
	if (ctx.cr6.eq) goto loc_829D4568;
	// lwz r10,508(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,508(r11)
	PPC_STORE_U32(ctx.r11.u32 + 508, ctx.r10.u32);
	// lwz r9,616(r30)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r30.u32 + 616);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// ble cr6,0x829d4568
	if (!ctx.cr6.gt) goto loc_829D4568;
	// cmpw cr6,r10,r9
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, ctx.xer);
	// blt cr6,0x829d4568
	if (ctx.cr6.lt) goto loc_829D4568;
	// lwz r10,560(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 560);
	// oris r9,r10,512
	ctx.r9.u64 = ctx.r10.u64 | 33554432;
	// stw r9,560(r11)
	PPC_STORE_U32(ctx.r11.u32 + 560, ctx.r9.u32);
loc_829D4568:
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x825d3020
	ctx.lr = 0x829D4578;
	sub_825D3020(ctx, base);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x829d46b8
	if (ctx.cr6.eq) goto loc_829D46B8;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x829d46b8
	if (ctx.cr6.eq) goto loc_829D46B8;
	// lwz r11,776(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 776);
	// rlwinm r10,r11,0,22,22
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d46b8
	if (ctx.cr6.eq) goto loc_829D46B8;
	// lwz r11,492(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 492);
	// rlwinm r10,r11,0,2,2
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d46b8
	if (!ctx.cr6.eq) goto loc_829D46B8;
	// bl 0x823121d8
	ctx.lr = 0x829D45AC;
	sub_823121D8(ctx, base);
	// lwz r11,52(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d45cc
	if (ctx.cr6.eq) goto loc_829D45CC;
loc_829D45B8:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d4610
	if (ctx.cr6.eq) goto loc_829D4610;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d45b8
	if (!ctx.cr6.eq) goto loc_829D45B8;
loc_829D45CC:
	// cntlzw r11,r3
	ctx.r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d4610
	if (!ctx.cr6.eq) goto loc_829D4610;
	// bl 0x823121d8
	ctx.lr = 0x829D45E0;
	sub_823121D8(ctx, base);
	// lwz r11,52(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d4600
	if (ctx.cr6.eq) goto loc_829D4600;
loc_829D45EC:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d4610
	if (ctx.cr6.eq) goto loc_829D4610;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d45ec
	if (!ctx.cr6.eq) goto loc_829D45EC;
loc_829D4600:
	// cntlzw r11,r3
	ctx.r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d46b8
	if (ctx.cr6.eq) goto loc_829D46B8;
loc_829D4610:
	// bl 0x822cb180
	ctx.lr = 0x829D4614;
	sub_822CB180(ctx, base);
	// lwz r11,52(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d4634
	if (ctx.cr6.eq) goto loc_829D4634;
loc_829D4620:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d4644
	if (ctx.cr6.eq) goto loc_829D4644;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d4620
	if (!ctx.cr6.eq) goto loc_829D4620;
loc_829D4634:
	// cntlzw r11,r3
	ctx.r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d4664
	if (ctx.cr6.eq) goto loc_829D4664;
loc_829D4644:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// li r6,1
	ctx.r6.s64 = 1;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,1060(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1060);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D4664;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D4664:
	// bl 0x822cb180
	ctx.lr = 0x829D4668;
	sub_822CB180(ctx, base);
	// lwz r11,52(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d4688
	if (ctx.cr6.eq) goto loc_829D4688;
loc_829D4674:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d4698
	if (ctx.cr6.eq) goto loc_829D4698;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d4674
	if (!ctx.cr6.eq) goto loc_829D4674;
loc_829D4688:
	// cntlzw r11,r3
	ctx.r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d46b8
	if (ctx.cr6.eq) goto loc_829D46B8;
loc_829D4698:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,1060(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1060);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D46B8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D46B8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82cb113c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D46C0"))) PPC_WEAK_FUNC(sub_829D46C0);
PPC_FUNC_IMPL(__imp__sub_829D46C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	// cmplwi cr6,r6,0
	ctx.cr6.compare<uint32_t>(ctx.r6.u32, 0, ctx.xer);
	// lis r6,-32222
	ctx.r6.s64 = -2111700992;
	// lis r9,-32245
	ctx.r9.s64 = -2113208320;
	// lis r8,-32229
	ctx.r8.s64 = -2112159744;
	// addi r5,r6,-18304
	ctx.r5.s64 = ctx.r6.s64 + -18304;
	// beq cr6,0x829d476c
	if (ctx.cr6.eq) goto loc_829D476C;
	// lwz r11,1060(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1060);
	// lfs f0,-15120(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -15120);
	ctx.f0.f64 = double(temp.f32);
	// lfs f11,1056(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 1056);
	ctx.f11.f64 = double(temp.f32);
	// addi r10,r11,1
	ctx.r10.s64 = ctx.r11.s64 + 1;
	// addi r11,r9,-32444
	ctx.r11.s64 = ctx.r9.s64 + -32444;
	// extsw r7,r10
	ctx.r7.s64 = ctx.r10.s32;
	// stw r10,1060(r3)
	PPC_STORE_U32(ctx.r3.u32 + 1060, ctx.r10.u32);
	// lis r10,-32233
	ctx.r10.s64 = -2112421888;
	// std r7,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r7.u64);
	// lfd f10,-16(r1)
	ctx.f10.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// fcfid f9,f10
	ctx.f9.f64 = double(ctx.f10.s64);
	// frsp f8,f9
	ctx.f8.f64 = double(float(ctx.f9.f64));
	// lfs f13,-15612(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -15612);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,21152(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 21152);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f7,f8,f13
	ctx.f7.f64 = double(float(ctx.f8.f64 - ctx.f13.f64));
	// fcmpu cr6,f7,f0
	ctx.cr6.compare(ctx.f7.f64, ctx.f0.f64);
	// mfcr r9
	ctx.r9.u64 = ctx.cr0.lt ? 0x80000000 : 0;
	ctx.r9.u64 |= ctx.cr0.gt ? 0x40000000 : 0;
	ctx.r9.u64 |= ctx.cr0.eq ? 0x20000000 : 0;
	ctx.r9.u64 |= ctx.cr0.so ? 0x10000000 : 0;
	ctx.r9.u64 |= ctx.cr1.lt ? 0x8000000 : 0;
	ctx.r9.u64 |= ctx.cr1.gt ? 0x4000000 : 0;
	ctx.r9.u64 |= ctx.cr1.eq ? 0x2000000 : 0;
	ctx.r9.u64 |= ctx.cr1.so ? 0x1000000 : 0;
	ctx.r9.u64 |= ctx.cr2.lt ? 0x800000 : 0;
	ctx.r9.u64 |= ctx.cr2.gt ? 0x400000 : 0;
	ctx.r9.u64 |= ctx.cr2.eq ? 0x200000 : 0;
	ctx.r9.u64 |= ctx.cr2.so ? 0x100000 : 0;
	ctx.r9.u64 |= ctx.cr3.lt ? 0x80000 : 0;
	ctx.r9.u64 |= ctx.cr3.gt ? 0x40000 : 0;
	ctx.r9.u64 |= ctx.cr3.eq ? 0x20000 : 0;
	ctx.r9.u64 |= ctx.cr3.so ? 0x10000 : 0;
	ctx.r9.u64 |= ctx.cr4.lt ? 0x8000 : 0;
	ctx.r9.u64 |= ctx.cr4.gt ? 0x4000 : 0;
	ctx.r9.u64 |= ctx.cr4.eq ? 0x2000 : 0;
	ctx.r9.u64 |= ctx.cr4.so ? 0x1000 : 0;
	ctx.r9.u64 |= ctx.cr5.lt ? 0x800 : 0;
	ctx.r9.u64 |= ctx.cr5.gt ? 0x400 : 0;
	ctx.r9.u64 |= ctx.cr5.eq ? 0x200 : 0;
	ctx.r9.u64 |= ctx.cr5.so ? 0x100 : 0;
	ctx.r9.u64 |= ctx.cr6.lt ? 0x80 : 0;
	ctx.r9.u64 |= ctx.cr6.gt ? 0x40 : 0;
	ctx.r9.u64 |= ctx.cr6.eq ? 0x20 : 0;
	ctx.r9.u64 |= ctx.cr6.so ? 0x10 : 0;
	ctx.r9.u64 |= ctx.cr7.lt ? 0x8 : 0;
	ctx.r9.u64 |= ctx.cr7.gt ? 0x4 : 0;
	ctx.r9.u64 |= ctx.cr7.eq ? 0x2 : 0;
	ctx.r9.u64 |= ctx.cr7.so ? 0x1 : 0;
	// rlwinm r8,r9,27,29,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x4;
	// rlwinm r7,r9,30,29,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 30) & 0x4;
	// or r6,r8,r7
	ctx.r6.u64 = ctx.r8.u64 | ctx.r7.u64;
	// lfsx f6,r5,r6
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + ctx.r6.u32);
	ctx.f6.f64 = double(temp.f32);
	// fsel f5,f6,f13,f8
	ctx.f5.f64 = ctx.f6.f64 >= 0.0 ? ctx.f13.f64 : ctx.f8.f64;
	// fdivs f4,f12,f5
	ctx.f4.f64 = double(float(ctx.f12.f64 / ctx.f5.f64));
	// fsubs f3,f11,f4
	ctx.f3.f64 = double(float(ctx.f11.f64 - ctx.f4.f64));
	// fneg f2,f3
	ctx.f2.u64 = ctx.f3.u64 ^ 0x8000000000000000;
	// fcmpu cr6,f2,f0
	ctx.cr6.compare(ctx.f2.f64, ctx.f0.f64);
	// mfcr r10
	ctx.r10.u64 = ctx.cr0.lt ? 0x80000000 : 0;
	ctx.r10.u64 |= ctx.cr0.gt ? 0x40000000 : 0;
	ctx.r10.u64 |= ctx.cr0.eq ? 0x20000000 : 0;
	ctx.r10.u64 |= ctx.cr0.so ? 0x10000000 : 0;
	ctx.r10.u64 |= ctx.cr1.lt ? 0x8000000 : 0;
	ctx.r10.u64 |= ctx.cr1.gt ? 0x4000000 : 0;
	ctx.r10.u64 |= ctx.cr1.eq ? 0x2000000 : 0;
	ctx.r10.u64 |= ctx.cr1.so ? 0x1000000 : 0;
	ctx.r10.u64 |= ctx.cr2.lt ? 0x800000 : 0;
	ctx.r10.u64 |= ctx.cr2.gt ? 0x400000 : 0;
	ctx.r10.u64 |= ctx.cr2.eq ? 0x200000 : 0;
	ctx.r10.u64 |= ctx.cr2.so ? 0x100000 : 0;
	ctx.r10.u64 |= ctx.cr3.lt ? 0x80000 : 0;
	ctx.r10.u64 |= ctx.cr3.gt ? 0x40000 : 0;
	ctx.r10.u64 |= ctx.cr3.eq ? 0x20000 : 0;
	ctx.r10.u64 |= ctx.cr3.so ? 0x10000 : 0;
	ctx.r10.u64 |= ctx.cr4.lt ? 0x8000 : 0;
	ctx.r10.u64 |= ctx.cr4.gt ? 0x4000 : 0;
	ctx.r10.u64 |= ctx.cr4.eq ? 0x2000 : 0;
	ctx.r10.u64 |= ctx.cr4.so ? 0x1000 : 0;
	ctx.r10.u64 |= ctx.cr5.lt ? 0x800 : 0;
	ctx.r10.u64 |= ctx.cr5.gt ? 0x400 : 0;
	ctx.r10.u64 |= ctx.cr5.eq ? 0x200 : 0;
	ctx.r10.u64 |= ctx.cr5.so ? 0x100 : 0;
	ctx.r10.u64 |= ctx.cr6.lt ? 0x80 : 0;
	ctx.r10.u64 |= ctx.cr6.gt ? 0x40 : 0;
	ctx.r10.u64 |= ctx.cr6.eq ? 0x20 : 0;
	ctx.r10.u64 |= ctx.cr6.so ? 0x10 : 0;
	ctx.r10.u64 |= ctx.cr7.lt ? 0x8 : 0;
	ctx.r10.u64 |= ctx.cr7.gt ? 0x4 : 0;
	ctx.r10.u64 |= ctx.cr7.eq ? 0x2 : 0;
	ctx.r10.u64 |= ctx.cr7.so ? 0x1 : 0;
	// rlwinm r9,r10,27,29,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x4;
	// rlwinm r8,r10,30,29,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x4;
	// or r7,r9,r8
	ctx.r7.u64 = ctx.r9.u64 | ctx.r8.u64;
	// lfsx f1,r5,r7
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + ctx.r7.u32);
	ctx.f1.f64 = double(temp.f32);
	// fsel f0,f1,f0,f3
	ctx.f0.f64 = ctx.f1.f64 >= 0.0 ? ctx.f0.f64 : ctx.f3.f64;
	// stfs f0,1056(r3)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 1056, temp.u32);
	// lfs f13,760(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 760);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// ble cr6,0x829d4808
	if (!ctx.cr6.gt) goto loc_829D4808;
	// b 0x829d4804
	goto loc_829D4804;
loc_829D476C:
	// lwz r11,1064(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1064);
	// lfs f13,-15120(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -15120);
	ctx.f13.f64 = double(temp.f32);
	// lfs f10,1056(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 1056);
	ctx.f10.f64 = double(temp.f32);
	// addi r10,r11,1
	ctx.r10.s64 = ctx.r11.s64 + 1;
	// addi r11,r9,-32444
	ctx.r11.s64 = ctx.r9.s64 + -32444;
	// extsw r7,r10
	ctx.r7.s64 = ctx.r10.s32;
	// stw r10,1064(r3)
	PPC_STORE_U32(ctx.r3.u32 + 1064, ctx.r10.u32);
	// lis r10,-32233
	ctx.r10.s64 = -2112421888;
	// std r7,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r7.u64);
	// lis r9,-32222
	ctx.r9.s64 = -2111700992;
	// lfs f0,-15612(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -15612);
	ctx.f0.f64 = double(temp.f32);
	// lfs f11,21152(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 21152);
	ctx.f11.f64 = double(temp.f32);
	// lfs f12,-17844(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -17844);
	ctx.f12.f64 = double(temp.f32);
	// lfd f9,-16(r1)
	ctx.f9.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// fcfid f8,f9
	ctx.f8.f64 = double(ctx.f9.s64);
	// frsp f7,f8
	ctx.f7.f64 = double(float(ctx.f8.f64));
	// fsubs f6,f7,f0
	ctx.f6.f64 = double(float(ctx.f7.f64 - ctx.f0.f64));
	// fcmpu cr6,f6,f13
	ctx.cr6.compare(ctx.f6.f64, ctx.f13.f64);
	// mfcr r8
	ctx.r8.u64 = ctx.cr0.lt ? 0x80000000 : 0;
	ctx.r8.u64 |= ctx.cr0.gt ? 0x40000000 : 0;
	ctx.r8.u64 |= ctx.cr0.eq ? 0x20000000 : 0;
	ctx.r8.u64 |= ctx.cr0.so ? 0x10000000 : 0;
	ctx.r8.u64 |= ctx.cr1.lt ? 0x8000000 : 0;
	ctx.r8.u64 |= ctx.cr1.gt ? 0x4000000 : 0;
	ctx.r8.u64 |= ctx.cr1.eq ? 0x2000000 : 0;
	ctx.r8.u64 |= ctx.cr1.so ? 0x1000000 : 0;
	ctx.r8.u64 |= ctx.cr2.lt ? 0x800000 : 0;
	ctx.r8.u64 |= ctx.cr2.gt ? 0x400000 : 0;
	ctx.r8.u64 |= ctx.cr2.eq ? 0x200000 : 0;
	ctx.r8.u64 |= ctx.cr2.so ? 0x100000 : 0;
	ctx.r8.u64 |= ctx.cr3.lt ? 0x80000 : 0;
	ctx.r8.u64 |= ctx.cr3.gt ? 0x40000 : 0;
	ctx.r8.u64 |= ctx.cr3.eq ? 0x20000 : 0;
	ctx.r8.u64 |= ctx.cr3.so ? 0x10000 : 0;
	ctx.r8.u64 |= ctx.cr4.lt ? 0x8000 : 0;
	ctx.r8.u64 |= ctx.cr4.gt ? 0x4000 : 0;
	ctx.r8.u64 |= ctx.cr4.eq ? 0x2000 : 0;
	ctx.r8.u64 |= ctx.cr4.so ? 0x1000 : 0;
	ctx.r8.u64 |= ctx.cr5.lt ? 0x800 : 0;
	ctx.r8.u64 |= ctx.cr5.gt ? 0x400 : 0;
	ctx.r8.u64 |= ctx.cr5.eq ? 0x200 : 0;
	ctx.r8.u64 |= ctx.cr5.so ? 0x100 : 0;
	ctx.r8.u64 |= ctx.cr6.lt ? 0x80 : 0;
	ctx.r8.u64 |= ctx.cr6.gt ? 0x40 : 0;
	ctx.r8.u64 |= ctx.cr6.eq ? 0x20 : 0;
	ctx.r8.u64 |= ctx.cr6.so ? 0x10 : 0;
	ctx.r8.u64 |= ctx.cr7.lt ? 0x8 : 0;
	ctx.r8.u64 |= ctx.cr7.gt ? 0x4 : 0;
	ctx.r8.u64 |= ctx.cr7.eq ? 0x2 : 0;
	ctx.r8.u64 |= ctx.cr7.so ? 0x1 : 0;
	// rlwinm r7,r8,27,29,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 27) & 0x4;
	// rlwinm r6,r8,30,29,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 30) & 0x4;
	// or r10,r7,r6
	ctx.r10.u64 = ctx.r7.u64 | ctx.r6.u64;
	// lfsx f5,r5,r10
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + ctx.r10.u32);
	ctx.f5.f64 = double(temp.f32);
	// fsel f4,f5,f0,f7
	ctx.f4.f64 = ctx.f5.f64 >= 0.0 ? ctx.f0.f64 : ctx.f7.f64;
	// fdivs f3,f11,f4
	ctx.f3.f64 = double(float(ctx.f11.f64 / ctx.f4.f64));
	// fadds f2,f3,f10
	ctx.f2.f64 = double(float(ctx.f3.f64 + ctx.f10.f64));
	// fsubs f1,f12,f2
	ctx.f1.f64 = double(float(ctx.f12.f64 - ctx.f2.f64));
	// fcmpu cr6,f1,f13
	ctx.cr6.compare(ctx.f1.f64, ctx.f13.f64);
	// mfcr r9
	ctx.r9.u64 = ctx.cr0.lt ? 0x80000000 : 0;
	ctx.r9.u64 |= ctx.cr0.gt ? 0x40000000 : 0;
	ctx.r9.u64 |= ctx.cr0.eq ? 0x20000000 : 0;
	ctx.r9.u64 |= ctx.cr0.so ? 0x10000000 : 0;
	ctx.r9.u64 |= ctx.cr1.lt ? 0x8000000 : 0;
	ctx.r9.u64 |= ctx.cr1.gt ? 0x4000000 : 0;
	ctx.r9.u64 |= ctx.cr1.eq ? 0x2000000 : 0;
	ctx.r9.u64 |= ctx.cr1.so ? 0x1000000 : 0;
	ctx.r9.u64 |= ctx.cr2.lt ? 0x800000 : 0;
	ctx.r9.u64 |= ctx.cr2.gt ? 0x400000 : 0;
	ctx.r9.u64 |= ctx.cr2.eq ? 0x200000 : 0;
	ctx.r9.u64 |= ctx.cr2.so ? 0x100000 : 0;
	ctx.r9.u64 |= ctx.cr3.lt ? 0x80000 : 0;
	ctx.r9.u64 |= ctx.cr3.gt ? 0x40000 : 0;
	ctx.r9.u64 |= ctx.cr3.eq ? 0x20000 : 0;
	ctx.r9.u64 |= ctx.cr3.so ? 0x10000 : 0;
	ctx.r9.u64 |= ctx.cr4.lt ? 0x8000 : 0;
	ctx.r9.u64 |= ctx.cr4.gt ? 0x4000 : 0;
	ctx.r9.u64 |= ctx.cr4.eq ? 0x2000 : 0;
	ctx.r9.u64 |= ctx.cr4.so ? 0x1000 : 0;
	ctx.r9.u64 |= ctx.cr5.lt ? 0x800 : 0;
	ctx.r9.u64 |= ctx.cr5.gt ? 0x400 : 0;
	ctx.r9.u64 |= ctx.cr5.eq ? 0x200 : 0;
	ctx.r9.u64 |= ctx.cr5.so ? 0x100 : 0;
	ctx.r9.u64 |= ctx.cr6.lt ? 0x80 : 0;
	ctx.r9.u64 |= ctx.cr6.gt ? 0x40 : 0;
	ctx.r9.u64 |= ctx.cr6.eq ? 0x20 : 0;
	ctx.r9.u64 |= ctx.cr6.so ? 0x10 : 0;
	ctx.r9.u64 |= ctx.cr7.lt ? 0x8 : 0;
	ctx.r9.u64 |= ctx.cr7.gt ? 0x4 : 0;
	ctx.r9.u64 |= ctx.cr7.eq ? 0x2 : 0;
	ctx.r9.u64 |= ctx.cr7.so ? 0x1 : 0;
	// rlwinm r8,r9,27,29,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x4;
	// rlwinm r7,r9,30,29,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 30) & 0x4;
	// or r6,r8,r7
	ctx.r6.u64 = ctx.r8.u64 | ctx.r7.u64;
	// lfsx f0,r5,r6
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + ctx.r6.u32);
	ctx.f0.f64 = double(temp.f32);
	// fsel f0,f0,f2,f12
	ctx.f0.f64 = ctx.f0.f64 >= 0.0 ? ctx.f2.f64 : ctx.f12.f64;
	// stfs f0,1056(r3)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 1056, temp.u32);
	// lfs f13,760(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 760);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// bge cr6,0x829d4808
	if (!ctx.cr6.lt) goto loc_829D4808;
loc_829D4804:
	// stfs f0,760(r4)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r4.u32 + 760, temp.u32);
loc_829D4808:
	// lfs f13,524(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 524);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,1056(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 1056);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f12,f0,f13
	ctx.f12.f64 = double(float(ctx.f0.f64 - ctx.f13.f64));
	// lfs f13,0(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fabs f11,f12
	ctx.f11.u64 = ctx.f12.u64 & ~0x8000000000000000;
	// fcmpu cr6,f11,f13
	ctx.cr6.compare(ctx.f11.f64, ctx.f13.f64);
	// bltlr cr6
	if (ctx.cr6.lt) return;
	// stfs f0,524(r3)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 524, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D482C"))) PPC_WEAK_FUNC(sub_829D482C);
PPC_FUNC_IMPL(__imp__sub_829D482C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D4830"))) PPC_WEAK_FUNC(sub_829D4830);
PPC_FUNC_IMPL(__imp__sub_829D4830) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10d4
	ctx.lr = 0x829D4838;
	__savegprlr_23(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// mr r25,r4
	ctx.r25.u64 = ctx.r4.u64;
	// mr r26,r5
	ctx.r26.u64 = ctx.r5.u64;
	// mr r24,r6
	ctx.r24.u64 = ctx.r6.u64;
	// lwz r11,-31264(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31264);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d4970
	if (ctx.cr6.eq) goto loc_829D4970;
	// lwz r11,80(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// lwz r10,132(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// ble cr6,0x829d4970
	if (!ctx.cr6.gt) goto loc_829D4970;
	// lwz r10,128(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 128);
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x829d4970
	if (ctx.cr6.eq) goto loc_829D4970;
	// lwz r10,132(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bgt cr6,0x829d4890
	if (ctx.cr6.gt) goto loc_829D4890;
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x829d4898
	goto loc_829D4898;
loc_829D4890:
	// lwz r11,128(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 128);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
loc_829D4898:
	// lwz r30,1008(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1008);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x829d4970
	if (ctx.cr6.eq) goto loc_829D4970;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// lis r27,-31883
	ctx.r27.s64 = -2089484288;
	// lis r29,-31883
	ctx.r29.s64 = -2089484288;
	// addi r28,r11,11336
	ctx.r28.s64 = ctx.r11.s64 + 11336;
loc_829D48B4:
	// lwz r11,492(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 492);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d4944
	if (ctx.cr6.eq) goto loc_829D4944;
	// lwz r11,-24808(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -24808);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d48dc
	if (!ctx.cr6.eq) goto loc_829D48DC;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82a8a860
	ctx.lr = 0x829D48D4;
	sub_82A8A860(ctx, base);
	// stw r3,-24808(r29)
	PPC_STORE_U32(ctx.r29.u32 + -24808, ctx.r3.u32);
	// bl 0x82a8a910
	ctx.lr = 0x829D48DC;
	sub_82A8A910(ctx, base);
loc_829D48DC:
	// lwz r11,492(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 492);
	// lwz r31,52(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mr r11,r31
	ctx.r11.u64 = ctx.r31.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x829d4908
	if (ctx.cr6.eq) goto loc_829D4908;
loc_829D48F0:
	// lwz r10,-24808(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + -24808);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x829d4964
	if (ctx.cr6.eq) goto loc_829D4964;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d48f0
	if (!ctx.cr6.eq) goto loc_829D48F0;
loc_829D4908:
	// lwz r11,-24808(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -24808);
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x829d4964
	if (!ctx.cr6.eq) goto loc_829D4964;
	// lwz r11,-24104(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -24104);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d4938
	if (!ctx.cr6.eq) goto loc_829D4938;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82aedeb8
	ctx.lr = 0x829D4930;
	sub_82AEDEB8(ctx, base);
	// stw r3,-24104(r27)
	PPC_STORE_U32(ctx.r27.u32 + -24104, ctx.r3.u32);
	// bl 0x82aedf68
	ctx.lr = 0x829D4938;
	sub_82AEDF68(ctx, base);
loc_829D4938:
	// lwz r11,-24104(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -24104);
	// cmplw cr6,r31,r11
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x829d4964
	if (ctx.cr6.eq) goto loc_829D4964;
loc_829D4944:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r6,r24
	ctx.r6.u64 = ctx.r24.u64;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,1024(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1024);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D4964;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D4964:
	// lwz r30,504(r30)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r30.u32 + 504);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x829d48b4
	if (!ctx.cr6.eq) goto loc_829D48B4;
loc_829D4970:
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// beq cr6,0x829d49d8
	if (ctx.cr6.eq) goto loc_829D49D8;
	// bl 0x82981a78
	ctx.lr = 0x829D497C;
	sub_82981A78(ctx, base);
	// lwz r11,52(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d499c
	if (ctx.cr6.eq) goto loc_829D499C;
loc_829D4988:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d49ac
	if (ctx.cr6.eq) goto loc_829D49AC;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d4988
	if (!ctx.cr6.eq) goto loc_829D4988;
loc_829D499C:
	// cntlzw r11,r3
	ctx.r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d49d8
	if (ctx.cr6.eq) goto loc_829D49D8;
loc_829D49AC:
	// lwz r11,776(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 776);
	// rlwinm r10,r11,0,26,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x20;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x829d49d8
	if (!ctx.cr6.eq) goto loc_829D49D8;
	// lis r11,-31884
	ctx.r11.s64 = -2089549824;
	// lwz r5,1860(r24)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r24.u32 + 1860);
	// li r6,41
	ctx.r6.s64 = 41;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// lwz r11,25348(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 25348);
	// lwz r3,72(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// bl 0x82700380
	ctx.lr = 0x829D49D8;
	sub_82700380(ctx, base);
loc_829D49D8:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82cb1124
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D49E0"))) PPC_WEAK_FUNC(sub_829D49E0);
PPC_FUNC_IMPL(__imp__sub_829D49E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10dc
	ctx.lr = 0x829D49E8;
	__savegprlr_25(ctx, base);
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// li r29,0
	ctx.r29.s64 = 0;
	// addi r26,r11,11272
	ctx.r26.s64 = ctx.r11.s64 + 11272;
	// lwz r9,2276(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2276);
	// addi r27,r10,22184
	ctx.r27.s64 = ctx.r10.s64 + 22184;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x829d4a84
	if (!ctx.cr6.eq) goto loc_829D4A84;
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// lwz r11,-31232(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31232);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d4a74
	if (!ctx.cr6.eq) goto loc_829D4A74;
	// stw r29,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r29.u32);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// stw r29,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r29.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r29,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r29.u32);
	// bl 0x822b2a20
	ctx.lr = 0x829D4A38;
	sub_822B2A20(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// addi r4,r11,22192
	ctx.r4.s64 = ctx.r11.s64 + 22192;
	// bl 0x822b3f98
	ctx.lr = 0x829D4A48;
	sub_822B3F98(ctx, base);
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r4,112(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bne cr6,0x829d4a5c
	if (!ctx.cr6.eq) goto loc_829D4A5C;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
loc_829D4A5C:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x822a7bf8
	ctx.lr = 0x829D4A68;
	sub_822A7BF8(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D4A70;
	sub_82299080(ctx, base);
	// lwz r11,-31232(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -31232);
loc_829D4A74:
	// ld r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// ori r9,r10,16384
	ctx.r9.u64 = ctx.r10.u64 | 16384;
	// std r9,8(r11)
	PPC_STORE_U64(ctx.r11.u32 + 8, ctx.r9.u64);
	// stw r11,2276(r31)
	PPC_STORE_U32(ctx.r31.u32 + 2276, ctx.r11.u32);
loc_829D4A84:
	// lis r25,-31883
	ctx.r25.s64 = -2089484288;
	// lwz r11,-27892(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -27892);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d4d88
	if (!ctx.cr6.eq) goto loc_829D4D88;
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-24656
	ctx.r4.s64 = ctx.r11.s64 + -24656;
	// bl 0x822960c0
	ctx.lr = 0x829D4AA4;
	sub_822960C0(ctx, base);
	// stw r29,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r29.u32);
	// stw r29,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r29.u32);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// stw r29,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r29.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x822b2a20
	ctx.lr = 0x829D4ABC;
	sub_822B2A20(ctx, base);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// addi r4,r10,22248
	ctx.r4.s64 = ctx.r10.s64 + 22248;
	// bl 0x82295680
	ctx.lr = 0x829D4ACC;
	sub_82295680(ctx, base);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x822b21c0
	ctx.lr = 0x829D4AD8;
	sub_822B21C0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82299080
	ctx.lr = 0x829D4AE4;
	sub_82299080(ctx, base);
	// lis r11,-31882
	ctx.r11.s64 = -2089418752;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// addi r28,r11,1364
	ctx.r28.s64 = ctx.r11.s64 + 1364;
	// beq cr6,0x829d4b00
	if (ctx.cr6.eq) goto loc_829D4B00;
	// lis r11,-31882
	ctx.r11.s64 = -2089418752;
	// addi r4,r11,1316
	ctx.r4.s64 = ctx.r11.s64 + 1316;
	// b 0x829d4c5c
	goto loc_829D4C5C;
loc_829D4B00:
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// addi r4,r11,22252
	ctx.r4.s64 = ctx.r11.s64 + 22252;
	// bl 0x82295680
	ctx.lr = 0x829D4B10;
	sub_82295680(ctx, base);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x822b21c0
	ctx.lr = 0x829D4B1C;
	sub_822B21C0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82299080
	ctx.lr = 0x829D4B28;
	sub_82299080(ctx, base);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x829d4b3c
	if (ctx.cr6.eq) goto loc_829D4B3C;
	// lis r11,-31882
	ctx.r11.s64 = -2089418752;
	// addi r4,r11,1328
	ctx.r4.s64 = ctx.r11.s64 + 1328;
	// b 0x829d4c5c
	goto loc_829D4C5C;
loc_829D4B3C:
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// addi r4,r11,22256
	ctx.r4.s64 = ctx.r11.s64 + 22256;
	// bl 0x82295680
	ctx.lr = 0x829D4B4C;
	sub_82295680(ctx, base);
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// li r31,1
	ctx.r31.s64 = 1;
	// bl 0x822b21c0
	ctx.lr = 0x829D4B5C;
	sub_822B21C0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d4bb8
	if (!ctx.cr6.eq) goto loc_829D4BB8;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// addi r4,r11,22260
	ctx.r4.s64 = ctx.r11.s64 + 22260;
	// bl 0x82295680
	ctx.lr = 0x829D4B74;
	sub_82295680(ctx, base);
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// li r31,3
	ctx.r31.s64 = 3;
	// bl 0x822b21c0
	ctx.lr = 0x829D4B84;
	sub_822B21C0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d4bb8
	if (!ctx.cr6.eq) goto loc_829D4BB8;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// addi r4,r11,22264
	ctx.r4.s64 = ctx.r11.s64 + 22264;
	// bl 0x82295680
	ctx.lr = 0x829D4B9C;
	sub_82295680(ctx, base);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// li r31,7
	ctx.r31.s64 = 7;
	// bl 0x822b21c0
	ctx.lr = 0x829D4BAC;
	sub_822B21C0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// mr r11,r29
	ctx.r11.u64 = ctx.r29.u64;
	// beq cr6,0x829d4bbc
	if (ctx.cr6.eq) goto loc_829D4BBC;
loc_829D4BB8:
	// li r11,1
	ctx.r11.s64 = 1;
loc_829D4BBC:
	// rlwinm r10,r31,0,29,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0x4;
	// clrlwi r30,r11,24
	ctx.r30.u64 = ctx.r11.u32 & 0xFF;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x829d4bd8
	if (ctx.cr6.eq) goto loc_829D4BD8;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// rlwinm r31,r31,0,30,28
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// bl 0x82299080
	ctx.lr = 0x829D4BD8;
	sub_82299080(ctx, base);
loc_829D4BD8:
	// rlwinm r11,r31,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0x2;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d4bf0
	if (ctx.cr6.eq) goto loc_829D4BF0;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// rlwinm r31,r31,0,31,29
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
	// bl 0x82299080
	ctx.lr = 0x829D4BF0;
	sub_82299080(ctx, base);
loc_829D4BF0:
	// clrlwi r11,r31,31
	ctx.r11.u64 = ctx.r31.u32 & 0x1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d4c04
	if (ctx.cr6.eq) goto loc_829D4C04;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82299080
	ctx.lr = 0x829D4C04;
	sub_82299080(ctx, base);
loc_829D4C04:
	// clrlwi r11,r30,24
	ctx.r11.u64 = ctx.r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d4c1c
	if (ctx.cr6.eq) goto loc_829D4C1C;
	// lis r11,-31882
	ctx.r11.s64 = -2089418752;
	// addi r4,r11,1340
	ctx.r4.s64 = ctx.r11.s64 + 1340;
	// b 0x829d4c5c
	goto loc_829D4C5C;
loc_829D4C1C:
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// addi r4,r11,22268
	ctx.r4.s64 = ctx.r11.s64 + 22268;
	// bl 0x82295680
	ctx.lr = 0x829D4C2C;
	sub_82295680(ctx, base);
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x822b21c0
	ctx.lr = 0x829D4C38;
	sub_822B21C0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82299080
	ctx.lr = 0x829D4C44;
	sub_82299080(ctx, base);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x829d4c58
	if (ctx.cr6.eq) goto loc_829D4C58;
	// lis r11,-31882
	ctx.r11.s64 = -2089418752;
	// addi r4,r11,1352
	ctx.r4.s64 = ctx.r11.s64 + 1352;
	// b 0x829d4c5c
	goto loc_829D4C5C;
loc_829D4C58:
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
loc_829D4C5C:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x822951d0
	ctx.lr = 0x829D4C64;
	sub_822951D0(ctx, base);
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r5,112(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x829d4c78
	if (!ctx.cr6.eq) goto loc_829D4C78;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
loc_829D4C78:
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// addi r4,r11,22272
	ctx.r4.s64 = ctx.r11.s64 + 22272;
	// bl 0x8232e868
	ctx.lr = 0x829D4C88;
	sub_8232E868(ctx, base);
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r3,144(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bne cr6,0x829d4c9c
	if (!ctx.cr6.eq) goto loc_829D4C9C;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_829D4C9C:
	// bl 0x82374390
	ctx.lr = 0x829D4CA0;
	sub_82374390(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// li r31,1
	ctx.r31.s64 = 1;
	// bgt cr6,0x829d4cb0
	if (ctx.cr6.gt) goto loc_829D4CB0;
	// mr r31,r29
	ctx.r31.u64 = ctx.r29.u64;
loc_829D4CB0:
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82299080
	ctx.lr = 0x829D4CB8;
	sub_82299080(ctx, base);
	// clrlwi r10,r31,24
	ctx.r10.u64 = ctx.r31.u32 & 0xFF;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// addi r31,r11,22340
	ctx.r31.s64 = ctx.r11.s64 + 22340;
	// beq cr6,0x829d4d14
	if (ctx.cr6.eq) goto loc_829D4D14;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82295ff0
	ctx.lr = 0x829D4CDC;
	sub_82295FF0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d4cf0
	if (ctx.cr6.eq) goto loc_829D4CF0;
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x829d4cf4
	goto loc_829D4CF4;
loc_829D4CF0:
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
loc_829D4CF4:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x822a7bf8
	ctx.lr = 0x829D4D00;
	sub_822A7BF8(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82299080
	ctx.lr = 0x829D4D0C;
	sub_82299080(ctx, base);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x829d4d68
	if (!ctx.cr6.eq) goto loc_829D4D68;
loc_829D4D14:
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x822b2a20
	ctx.lr = 0x829D4D20;
	sub_822B2A20(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x822951d0
	ctx.lr = 0x829D4D2C;
	sub_822951D0(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82295ff0
	ctx.lr = 0x829D4D3C;
	sub_82295FF0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d4d50
	if (ctx.cr6.eq) goto loc_829D4D50;
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x829d4d54
	goto loc_829D4D54;
loc_829D4D50:
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
loc_829D4D54:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x822a7bf8
	ctx.lr = 0x829D4D60;
	sub_822A7BF8(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82299080
	ctx.lr = 0x829D4D68;
	sub_82299080(ctx, base);
loc_829D4D68:
	// lwz r11,-27892(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -27892);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// ld r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// ori r9,r10,16384
	ctx.r9.u64 = ctx.r10.u64 | 16384;
	// std r9,8(r11)
	PPC_STORE_U64(ctx.r11.u32 + 8, ctx.r9.u64);
	// bl 0x82299080
	ctx.lr = 0x829D4D80;
	sub_82299080(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82299080
	ctx.lr = 0x829D4D88;
	sub_82299080(ctx, base);
loc_829D4D88:
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x82cb112c
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D4D90"))) PPC_WEAK_FUNC(sub_829D4D90);
PPC_FUNC_IMPL(__imp__sub_829D4D90) {
	PPC_FUNC_PROLOGUE();
	// b 0x8260cab8
	sub_8260CAB8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D4D94"))) PPC_WEAK_FUNC(sub_829D4D94);
PPC_FUNC_IMPL(__imp__sub_829D4D94) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D4D98"))) PPC_WEAK_FUNC(sub_829D4D98);
PPC_FUNC_IMPL(__imp__sub_829D4D98) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r10,948(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 948);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D4DBC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8229ba40
	ctx.lr = 0x829D4DC4;
	sub_8229BA40(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D4DD8"))) PPC_WEAK_FUNC(sub_829D4DD8);
PPC_FUNC_IMPL(__imp__sub_829D4DD8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// ld r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 8);
	// lwz r4,52(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// ori r10,r11,32
	ctx.r10.u64 = ctx.r11.u64 | 32;
	// std r10,8(r3)
	PPC_STORE_U64(ctx.r3.u32 + 8, ctx.r10.u64);
	// bl 0x822a1020
	ctx.lr = 0x829D4DF8;
	sub_822A1020(ctx, base);
	// lis r9,-31906
	ctx.r9.s64 = -2090991616;
	// li r11,99
	ctx.r11.s64 = 99;
	// stw r11,-1260(r9)
	PPC_STORE_U32(ctx.r9.u32 + -1260, ctx.r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D4E14"))) PPC_WEAK_FUNC(sub_829D4E14);
PPC_FUNC_IMPL(__imp__sub_829D4E14) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D4E18"))) PPC_WEAK_FUNC(sub_829D4E18);
PPC_FUNC_IMPL(__imp__sub_829D4E18) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// lwz r11,-31264(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31264);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// lwz r11,80(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// lwz r10,132(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bgt cr6,0x829d4e40
	if (ctx.cr6.gt) goto loc_829D4E40;
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x829d4e48
	goto loc_829D4E48;
loc_829D4E40:
	// lwz r11,128(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 128);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
loc_829D4E48:
	// lwz r11,980(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 980);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// lis r10,-31906
	ctx.r10.s64 = -2090991616;
	// li r11,0
	ctx.r11.s64 = 0;
	// addi r9,r10,-1268
	ctx.r9.s64 = ctx.r10.s64 + -1268;
	// stw r11,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D4E68"))) PPC_WEAK_FUNC(sub_829D4E68);
PPC_FUNC_IMPL(__imp__sub_829D4E68) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D4E6C"))) PPC_WEAK_FUNC(sub_829D4E6C);
PPC_FUNC_IMPL(__imp__sub_829D4E6C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D4E70"))) PPC_WEAK_FUNC(sub_829D4E70);
PPC_FUNC_IMPL(__imp__sub_829D4E70) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D4E74"))) PPC_WEAK_FUNC(sub_829D4E74);
PPC_FUNC_IMPL(__imp__sub_829D4E74) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D4E78"))) PPC_WEAK_FUNC(sub_829D4E78);
PPC_FUNC_IMPL(__imp__sub_829D4E78) {
	PPC_FUNC_PROLOGUE();
	// lis r10,-31883
	ctx.r10.s64 = -2089484288;
	// lwz r11,-31260(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31260);
	// cntlzw r9,r11
	ctx.r9.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r9,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// stw r11,-31260(r10)
	PPC_STORE_U32(ctx.r10.u32 + -31260, ctx.r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D4E90"))) PPC_WEAK_FUNC(sub_829D4E90);
PPC_FUNC_IMPL(__imp__sub_829D4E90) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-31905
	ctx.r11.s64 = -2090926080;
	// addi r3,r11,9536
	ctx.r3.s64 = ctx.r11.s64 + 9536;
	// lwz r11,9536(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 9536);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_829D4EA8"))) PPC_WEAK_FUNC(sub_829D4EA8);
PPC_FUNC_IMPL(__imp__sub_829D4EA8) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D4EAC"))) PPC_WEAK_FUNC(sub_829D4EAC);
PPC_FUNC_IMPL(__imp__sub_829D4EAC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D4EB0"))) PPC_WEAK_FUNC(sub_829D4EB0);
PPC_FUNC_IMPL(__imp__sub_829D4EB0) {
	PPC_FUNC_PROLOGUE();
	// b 0x82a0f178
	sub_82A0F178(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D4EB4"))) PPC_WEAK_FUNC(sub_829D4EB4);
PPC_FUNC_IMPL(__imp__sub_829D4EB4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D4EB8"))) PPC_WEAK_FUNC(sub_829D4EB8);
PPC_FUNC_IMPL(__imp__sub_829D4EB8) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-31884
	ctx.r11.s64 = -2089549824;
	// lwz r11,25344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 25344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d4ee4
	if (ctx.cr6.eq) goto loc_829D4EE4;
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 744);
	// cmpw cr6,r3,r10
	ctx.cr6.compare<int32_t>(ctx.r3.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x829d4ee4
	if (!ctx.cr6.lt) goto loc_829D4EE4;
	// lwz r11,740(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 740);
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r10.u32);
	// blr 
	return;
loc_829D4EE4:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D4EEC"))) PPC_WEAK_FUNC(sub_829D4EEC);
PPC_FUNC_IMPL(__imp__sub_829D4EEC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D4EF0"))) PPC_WEAK_FUNC(sub_829D4EF0);
PPC_FUNC_IMPL(__imp__sub_829D4EF0) {
	PPC_FUNC_PROLOGUE();
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// blt cr6,0x829d4f38
	if (ctx.cr6.lt) goto loc_829D4F38;
	// lis r11,-31884
	ctx.r11.s64 = -2089549824;
	// lwz r11,25344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 25344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d4f28
	if (ctx.cr6.eq) goto loc_829D4F28;
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 744);
	// cmpw cr6,r4,r10
	ctx.cr6.compare<int32_t>(ctx.r4.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x829d4f28
	if (!ctx.cr6.lt) goto loc_829D4F28;
	// lwz r11,740(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 740);
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d4f40
	if (!ctx.cr6.eq) goto loc_829D4F40;
loc_829D4F28:
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// bne cr6,0x829d4f38
	if (!ctx.cr6.eq) goto loc_829D4F38;
	// lwz r3,2220(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2220);
	// blr 
	return;
loc_829D4F38:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_829D4F40:
	// lwz r3,64(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// b 0x829d9328
	sub_829D9328(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D4F48"))) PPC_WEAK_FUNC(sub_829D4F48);
PPC_FUNC_IMPL(__imp__sub_829D4F48) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// blt cr6,0x829d4fc4
	if (ctx.cr6.lt) goto loc_829D4FC4;
	// lis r11,-31884
	ctx.r11.s64 = -2089549824;
	// lwz r11,25344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 25344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d4f9c
	if (ctx.cr6.eq) goto loc_829D4F9C;
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 744);
	// cmpw cr6,r31,r10
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x829d4f9c
	if (!ctx.cr6.lt) goto loc_829D4F9C;
	// lwz r11,740(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 740);
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d4fac
	if (!ctx.cr6.eq) goto loc_829D4FAC;
loc_829D4F9C:
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x829d4fc4
	if (!ctx.cr6.eq) goto loc_829D4FC4;
	// lwz r3,2220(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 2220);
	// b 0x829d4fb4
	goto loc_829D4FB4;
loc_829D4FAC:
	// lwz r3,64(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// bl 0x829d9328
	ctx.lr = 0x829D4FB4;
	sub_829D9328(ctx, base);
loc_829D4FB4:
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d4fcc
	if (!ctx.cr6.eq) goto loc_829D4FCC;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// beq cr6,0x829d4fe0
	if (ctx.cr6.eq) goto loc_829D4FE0;
loc_829D4FC4:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x829d4fe4
	goto loc_829D4FE4;
loc_829D4FCC:
	// lwz r3,1908(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1908);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d4fe4
	if (!ctx.cr6.eq) goto loc_829D4FE4;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x829d4fe4
	if (!ctx.cr6.eq) goto loc_829D4FE4;
loc_829D4FE0:
	// lwz r3,2212(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 2212);
loc_829D4FE4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D4FFC"))) PPC_WEAK_FUNC(sub_829D4FFC);
PPC_FUNC_IMPL(__imp__sub_829D4FFC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D5000"))) PPC_WEAK_FUNC(sub_829D5000);
PPC_FUNC_IMPL(__imp__sub_829D5000) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// blt cr6,0x829d507c
	if (ctx.cr6.lt) goto loc_829D507C;
	// lis r11,-31884
	ctx.r11.s64 = -2089549824;
	// lwz r11,25344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 25344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5054
	if (ctx.cr6.eq) goto loc_829D5054;
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 744);
	// cmpw cr6,r31,r10
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x829d5054
	if (!ctx.cr6.lt) goto loc_829D5054;
	// lwz r11,740(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 740);
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d5064
	if (!ctx.cr6.eq) goto loc_829D5064;
loc_829D5054:
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x829d507c
	if (!ctx.cr6.eq) goto loc_829D507C;
	// lwz r3,2220(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 2220);
	// b 0x829d506c
	goto loc_829D506C;
loc_829D5064:
	// lwz r3,64(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// bl 0x829d9328
	ctx.lr = 0x829D506C;
	sub_829D9328(ctx, base);
loc_829D506C:
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d5084
	if (!ctx.cr6.eq) goto loc_829D5084;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// beq cr6,0x829d5098
	if (ctx.cr6.eq) goto loc_829D5098;
loc_829D507C:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x829d509c
	goto loc_829D509C;
loc_829D5084:
	// lwz r3,1912(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1912);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d509c
	if (!ctx.cr6.eq) goto loc_829D509C;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x829d509c
	if (!ctx.cr6.eq) goto loc_829D509C;
loc_829D5098:
	// lwz r3,2216(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 2216);
loc_829D509C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D50B4"))) PPC_WEAK_FUNC(sub_829D50B4);
PPC_FUNC_IMPL(__imp__sub_829D50B4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D50B8"))) PPC_WEAK_FUNC(sub_829D50B8);
PPC_FUNC_IMPL(__imp__sub_829D50B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// blt cr6,0x829d5140
	if (ctx.cr6.lt) goto loc_829D5140;
	// lis r11,-31884
	ctx.r11.s64 = -2089549824;
	// lwz r11,25344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 25344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d510c
	if (ctx.cr6.eq) goto loc_829D510C;
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 744);
	// cmpw cr6,r31,r10
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x829d510c
	if (!ctx.cr6.lt) goto loc_829D510C;
	// lwz r11,740(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 740);
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d511c
	if (!ctx.cr6.eq) goto loc_829D511C;
loc_829D510C:
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x829d5140
	if (!ctx.cr6.eq) goto loc_829D5140;
	// lwz r3,2220(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 2220);
	// b 0x829d5124
	goto loc_829D5124;
loc_829D511C:
	// lwz r3,64(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// bl 0x829d9328
	ctx.lr = 0x829D5124;
	sub_829D9328(ctx, base);
loc_829D5124:
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d5148
	if (!ctx.cr6.eq) goto loc_829D5148;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x829d5140
	if (!ctx.cr6.eq) goto loc_829D5140;
	// lwz r11,776(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 776);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// b 0x829d5150
	goto loc_829D5150;
loc_829D5140:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x829d5150
	goto loc_829D5150;
loc_829D5148:
	// lwz r11,1916(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1916);
	// rlwinm r3,r11,1,31,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0x1;
loc_829D5150:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D5168"))) PPC_WEAK_FUNC(sub_829D5168);
PPC_FUNC_IMPL(__imp__sub_829D5168) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// blt cr6,0x829d51ec
	if (ctx.cr6.lt) goto loc_829D51EC;
	// lis r11,-31884
	ctx.r11.s64 = -2089549824;
	// lwz r11,25344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 25344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d51bc
	if (ctx.cr6.eq) goto loc_829D51BC;
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 744);
	// cmpw cr6,r31,r10
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x829d51bc
	if (!ctx.cr6.lt) goto loc_829D51BC;
	// lwz r11,740(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 740);
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d51cc
	if (!ctx.cr6.eq) goto loc_829D51CC;
loc_829D51BC:
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x829d51ec
	if (!ctx.cr6.eq) goto loc_829D51EC;
	// lwz r3,2220(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 2220);
	// b 0x829d51d4
	goto loc_829D51D4;
loc_829D51CC:
	// lwz r3,64(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// bl 0x829d9328
	ctx.lr = 0x829D51D4;
	sub_829D9328(ctx, base);
loc_829D51D4:
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d51f4
	if (!ctx.cr6.eq) goto loc_829D51F4;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x829d51ec
	if (!ctx.cr6.eq) goto loc_829D51EC;
	// lwz r3,2208(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 2208);
	// b 0x829d51fc
	goto loc_829D51FC;
loc_829D51EC:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x829d51fc
	goto loc_829D51FC;
loc_829D51F4:
	// lwz r3,856(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 856);
	// bl 0x829d93a8
	ctx.lr = 0x829D51FC;
	sub_829D93A8(ctx, base);
loc_829D51FC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D5214"))) PPC_WEAK_FUNC(sub_829D5214);
PPC_FUNC_IMPL(__imp__sub_829D5214) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D5218"))) PPC_WEAK_FUNC(sub_829D5218);
PPC_FUNC_IMPL(__imp__sub_829D5218) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// blt cr6,0x829d529c
	if (ctx.cr6.lt) goto loc_829D529C;
	// lis r11,-31884
	ctx.r11.s64 = -2089549824;
	// lwz r11,25344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 25344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d526c
	if (ctx.cr6.eq) goto loc_829D526C;
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 744);
	// cmpw cr6,r31,r10
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x829d526c
	if (!ctx.cr6.lt) goto loc_829D526C;
	// lwz r11,740(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 740);
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r11,r10
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d527c
	if (!ctx.cr6.eq) goto loc_829D527C;
loc_829D526C:
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x829d529c
	if (!ctx.cr6.eq) goto loc_829D529C;
	// lwz r3,2220(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 2220);
	// b 0x829d5284
	goto loc_829D5284;
loc_829D527C:
	// lwz r3,64(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// bl 0x829d9328
	ctx.lr = 0x829D5284;
	sub_829D9328(ctx, base);
loc_829D5284:
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d52a4
	if (!ctx.cr6.eq) goto loc_829D52A4;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x829d529c
	if (!ctx.cr6.eq) goto loc_829D529C;
	// lwz r3,2224(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 2224);
	// b 0x829d52ac
	goto loc_829D52AC;
loc_829D529C:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x829d52ac
	goto loc_829D52AC;
loc_829D52A4:
	// lwz r3,760(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 760);
	// bl 0x829d9428
	ctx.lr = 0x829D52AC;
	sub_829D9428(ctx, base);
loc_829D52AC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D52C4"))) PPC_WEAK_FUNC(sub_829D52C4);
PPC_FUNC_IMPL(__imp__sub_829D52C4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D52C8"))) PPC_WEAK_FUNC(sub_829D52C8);
PPC_FUNC_IMPL(__imp__sub_829D52C8) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D52CC"))) PPC_WEAK_FUNC(sub_829D52CC);
PPC_FUNC_IMPL(__imp__sub_829D52CC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D52D0"))) PPC_WEAK_FUNC(sub_829D52D0);
PPC_FUNC_IMPL(__imp__sub_829D52D0) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D52D4"))) PPC_WEAK_FUNC(sub_829D52D4);
PPC_FUNC_IMPL(__imp__sub_829D52D4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D52D8"))) PPC_WEAK_FUNC(sub_829D52D8);
PPC_FUNC_IMPL(__imp__sub_829D52D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x829d9f20
	ctx.lr = 0x829D52F0;
	sub_829D9F20(ctx, base);
	// lis r10,-31883
	ctx.r10.s64 = -2089484288;
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,-25724(r10)
	PPC_STORE_U32(ctx.r10.u32 + -25724, ctx.r11.u32);
	// bl 0x829d9ec0
	ctx.lr = 0x829D5304;
	sub_829D9EC0(ctx, base);
	// lis r9,-31883
	ctx.r9.s64 = -2089484288;
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,-25716(r9)
	PPC_STORE_U32(ctx.r9.u32 + -25716, ctx.r11.u32);
	// bl 0x829d9e60
	ctx.lr = 0x829D5318;
	sub_829D9E60(ctx, base);
	// lis r8,-31883
	ctx.r8.s64 = -2089484288;
	// stw r3,-25720(r8)
	PPC_STORE_U32(ctx.r8.u32 + -25720, ctx.r3.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D5334"))) PPC_WEAK_FUNC(sub_829D5334);
PPC_FUNC_IMPL(__imp__sub_829D5334) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D5338"))) PPC_WEAK_FUNC(sub_829D5338);
PPC_FUNC_IMPL(__imp__sub_829D5338) {
	PPC_FUNC_PROLOGUE();
	// b 0x829d6938
	sub_829D6938(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D533C"))) PPC_WEAK_FUNC(sub_829D533C);
PPC_FUNC_IMPL(__imp__sub_829D533C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D5340"))) PPC_WEAK_FUNC(sub_829D5340);
PPC_FUNC_IMPL(__imp__sub_829D5340) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10d0
	ctx.lr = 0x829D5348;
	__savegprlr_22(ctx, base);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31884
	ctx.r11.s64 = -2089549824;
	// li r24,0
	ctx.r24.s64 = 0;
	// mr r22,r5
	ctx.r22.u64 = ctx.r5.u64;
	// mr r23,r24
	ctx.r23.u64 = ctx.r24.u64;
	// lwz r11,25344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 25344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5384
	if (ctx.cr6.eq) goto loc_829D5384;
	// lwz r10,752(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 752);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d5384
	if (ctx.cr6.eq) goto loc_829D5384;
	// lwz r10,92(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 92);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d5384
	if (ctx.cr6.eq) goto loc_829D5384;
	// lwz r23,120(r10)
	ctx.r23.u64 = PPC_LOAD_U32(ctx.r10.u32 + 120);
loc_829D5384:
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// cmplwi cr6,r23,0
	ctx.cr6.compare<uint32_t>(ctx.r23.u32, 0, ctx.xer);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
	// beq cr6,0x829d5620
	if (ctx.cr6.eq) goto loc_829D5620;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5620
	if (ctx.cr6.eq) goto loc_829D5620;
	// cmplwi cr6,r22,0
	ctx.cr6.compare<uint32_t>(ctx.r22.u32, 0, ctx.xer);
	// bne cr6,0x829d53b8
	if (!ctx.cr6.eq) goto loc_829D53B8;
	// lwz r10,744(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 744);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x829d53b8
	if (ctx.cr6.eq) goto loc_829D53B8;
	// lwz r11,740(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 740);
	// lwz r22,0(r11)
	ctx.r22.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
loc_829D53B8:
	// lwz r10,4(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// addi r25,r11,11272
	ctx.r25.s64 = ctx.r11.s64 + 11272;
	// beq cr6,0x829d53d4
	if (ctx.cr6.eq) goto loc_829D53D4;
	// lwz r31,0(r4)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// b 0x829d53d8
	goto loc_829D53D8;
loc_829D53D4:
	// mr r31,r25
	ctx.r31.u64 = ctx.r25.u64;
loc_829D53D8:
	// stw r24,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r24.u32);
	// bl 0x822e2e28
	ctx.lr = 0x829D53E0;
	sub_822E2E28(ctx, base);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x822960c0
	ctx.lr = 0x829D53F0;
	sub_822960C0(ctx, base);
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x822a7100
	ctx.lr = 0x829D5408;
	sub_822A7100(ctx, base);
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r4,112(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x829d541c
	if (!ctx.cr6.eq) goto loc_829D541C;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
loc_829D541C:
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829D5430;
	sub_8233E028(ctx, base);
	// lwz r30,84(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x829d55d8
	if (ctx.cr6.eq) goto loc_829D55D8;
	// lis r11,-31884
	ctx.r11.s64 = -2089549824;
	// ld r28,88(r1)
	ctx.r28.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// lis r26,-31884
	ctx.r26.s64 = -2089549824;
	// lwz r11,24988(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24988);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5494
	if (ctx.cr6.eq) goto loc_829D5494;
	// lwz r11,24976(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 24976);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5468
	if (ctx.cr6.eq) goto loc_829D5468;
	// mr r8,r24
	ctx.r8.u64 = ctx.r24.u64;
	// b 0x829d5470
	goto loc_829D5470;
loc_829D5468:
	// li r8,1
	ctx.r8.s64 = 1;
	// rldicr r8,r8,42,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 42) & 0xFFFFFFFFFFFFFFFF;
loc_829D5470:
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x822a0408
	ctx.lr = 0x829D5488;
	sub_822A0408(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x829d55ec
	if (!ctx.cr6.eq) goto loc_829D55EC;
loc_829D5494:
	// lis r10,-31884
	ctx.r10.s64 = -2089549824;
	// lwz r11,25084(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 25084);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,25084(r10)
	PPC_STORE_U32(ctx.r10.u32 + 25084, ctx.r11.u32);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bne cr6,0x829d54b0
	if (!ctx.cr6.eq) goto loc_829D54B0;
	// bl 0x823648a0
	ctx.lr = 0x829D54B0;
	sub_823648A0(ctx, base);
loc_829D54B0:
	// mr r31,r30
	ctx.r31.u64 = ctx.r30.u64;
loc_829D54B4:
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d54c8
	if (ctx.cr6.eq) goto loc_829D54C8;
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// bne cr6,0x829d54b4
	if (!ctx.cr6.eq) goto loc_829D54B4;
loc_829D54C8:
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,40
	ctx.r5.s64 = 40;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x822a6698
	ctx.lr = 0x829D54E0;
	sub_822A6698(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x829d5594
	if (ctx.cr6.eq) goto loc_829D5594;
	// cmplw cr6,r30,r31
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, ctx.r31.u32, ctx.xer);
	// beq cr6,0x829d556c
	if (ctx.cr6.eq) goto loc_829D556C;
	// lwz r11,32(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 32);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x829d556c
	if (!ctx.cr6.eq) goto loc_829D556C;
	// stw r24,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r24.u32);
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// stw r24,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r24.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r24,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r24.u32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8229bcd0
	ctx.lr = 0x829D551C;
	sub_8229BCD0(ctx, base);
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r5,96(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x829d5530
	if (!ctx.cr6.eq) goto loc_829D5530;
	// mr r5,r25
	ctx.r5.u64 = ctx.r25.u64;
loc_829D5530:
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r3,52(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 52);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x822a7880
	ctx.lr = 0x829D554C;
	sub_822A7880(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82299080
	ctx.lr = 0x829D5558;
	sub_82299080(ctx, base);
	// cmplw cr6,r31,r30
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r30.u32, ctx.xer);
	// bne cr6,0x829d5594
	if (!ctx.cr6.eq) goto loc_829D5594;
	// lwz r11,32(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// beq cr6,0x829d5594
	if (ctx.cr6.eq) goto loc_829D5594;
loc_829D556C:
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x823aba10
	ctx.lr = 0x829D5588;
	sub_823ABA10(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x829d55cc
	if (!ctx.cr6.eq) goto loc_829D55CC;
loc_829D5594:
	// lwz r11,24976(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 24976);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d55a8
	if (ctx.cr6.eq) goto loc_829D55A8;
	// mr r8,r24
	ctx.r8.u64 = ctx.r24.u64;
	// b 0x829d55b0
	goto loc_829D55B0;
loc_829D55A8:
	// li r8,1
	ctx.r8.s64 = 1;
	// rldicr r8,r8,42,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 42) & 0xFFFFFFFFFFFFFFFF;
loc_829D55B0:
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x822a0408
	ctx.lr = 0x829D55C8;
	sub_822A0408(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
loc_829D55CC:
	// bl 0x822a8060
	ctx.lr = 0x829D55D0;
	sub_822A8060(ctx, base);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x829d55ec
	if (!ctx.cr6.eq) goto loc_829D55EC;
loc_829D55D8:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D55E0;
	sub_82299080(ctx, base);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82cb1120
	__restgprlr_22(ctx, base);
	return;
loc_829D55EC:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82299080
	ctx.lr = 0x829D55F4;
	sub_82299080(ctx, base);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x829d561c
	if (ctx.cr6.eq) goto loc_829D561C;
	// lwz r11,0(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 0);
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r22
	ctx.r5.u64 = ctx.r22.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// lwz r10,316(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 316);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D561C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D561C:
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_829D5620:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82cb1120
	__restgprlr_22(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D5628"))) PPC_WEAK_FUNC(sub_829D5628);
PPC_FUNC_IMPL(__imp__sub_829D5628) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10d4
	ctx.lr = 0x829D5630;
	__savegprlr_23(ctx, base);
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// li r23,0
	ctx.r23.s64 = 0;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// addi r4,r11,22368
	ctx.r4.s64 = ctx.r11.s64 + 22368;
	// stw r23,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r23.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r23,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r23.u32);
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// stw r23,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r23.u32);
	// bl 0x82295680
	ctx.lr = 0x829D565C;
	sub_82295680(ctx, base);
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x822952c8
	ctx.lr = 0x829D566C;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D567C;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x822951d0
	ctx.lr = 0x829D5688;
	sub_822951D0(ctx, base);
	// lwz r10,144(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// stw r23,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r23.u32);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x829d56ac
	if (ctx.cr6.eq) goto loc_829D56AC;
	// stw r23,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r23.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82294520
	ctx.lr = 0x829D56AC;
	sub_82294520(ctx, base);
loc_829D56AC:
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82294cc8
	ctx.lr = 0x829D56B4;
	sub_82294CC8(ctx, base);
	// lwz r11,160(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// stw r23,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r23.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d56d8
	if (ctx.cr6.eq) goto loc_829D56D8;
	// stw r23,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r23.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82294520
	ctx.lr = 0x829D56D8;
	sub_82294520(ctx, base);
loc_829D56D8:
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82294cc8
	ctx.lr = 0x829D56E0;
	sub_82294CC8(ctx, base);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stw r23,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r23.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d5704
	if (ctx.cr6.eq) goto loc_829D5704;
	// stw r23,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r23.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82294520
	ctx.lr = 0x829D5704;
	sub_82294520(ctx, base);
loc_829D5704:
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82294cc8
	ctx.lr = 0x829D570C;
	sub_82294CC8(ctx, base);
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r24,r11,11272
	ctx.r24.s64 = ctx.r11.s64 + 11272;
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d5728
	if (ctx.cr6.eq) goto loc_829D5728;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// b 0x829d572c
	goto loc_829D572C;
loc_829D5728:
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
loc_829D572C:
	// li r5,1
	ctx.r5.s64 = 1;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x822a7bf8
	ctx.lr = 0x829D5738;
	sub_822A7BF8(ctx, base);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d574c
	if (ctx.cr6.eq) goto loc_829D574C;
	// lwz r25,0(r31)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// b 0x829d5750
	goto loc_829D5750;
loc_829D574C:
	// mr r25,r24
	ctx.r25.u64 = ctx.r24.u64;
loc_829D5750:
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r30,104(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x829d5764
	if (!ctx.cr6.eq) goto loc_829D5764;
	// mr r30,r24
	ctx.r30.u64 = ctx.r24.u64;
loc_829D5764:
	// lis r31,-31884
	ctx.r31.s64 = -2089549824;
	// lwz r27,25216(r31)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// bne cr6,0x829d578c
	if (!ctx.cr6.eq) goto loc_829D578C;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,14476
	ctx.r3.s64 = ctx.r11.s64 + 14476;
	// bl 0x822aace8
	ctx.lr = 0x829D5780;
	sub_822AACE8(ctx, base);
	// stw r3,25216(r31)
	PPC_STORE_U32(ctx.r31.u32 + 25216, ctx.r3.u32);
	// bl 0x822aada8
	ctx.lr = 0x829D5788;
	sub_822AADA8(ctx, base);
	// lwz r27,25216(r31)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r31.u32 + 25216);
loc_829D578C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// stw r23,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r23.u32);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x822960c0
	ctx.lr = 0x829D579C;
	sub_822960C0(ctx, base);
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,168
	ctx.r4.s64 = ctx.r1.s64 + 168;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x822a7100
	ctx.lr = 0x829D57B4;
	sub_822A7100(ctx, base);
	// lwz r11,172(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// lwz r4,168(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x829d57c8
	if (!ctx.cr6.eq) goto loc_829D57C8;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
loc_829D57C8:
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8233e028
	ctx.lr = 0x829D57DC;
	sub_8233E028(ctx, base);
	// lwz r30,80(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x829d5984
	if (ctx.cr6.eq) goto loc_829D5984;
	// lis r11,-31884
	ctx.r11.s64 = -2089549824;
	// ld r28,88(r1)
	ctx.r28.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// lis r26,-31884
	ctx.r26.s64 = -2089549824;
	// lwz r11,24988(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24988);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5840
	if (ctx.cr6.eq) goto loc_829D5840;
	// lwz r11,24976(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 24976);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5814
	if (ctx.cr6.eq) goto loc_829D5814;
	// mr r8,r23
	ctx.r8.u64 = ctx.r23.u64;
	// b 0x829d581c
	goto loc_829D581C;
loc_829D5814:
	// li r8,1
	ctx.r8.s64 = 1;
	// rldicr r8,r8,42,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 42) & 0xFFFFFFFFFFFFFFFF;
loc_829D581C:
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x822a0408
	ctx.lr = 0x829D5834;
	sub_822A0408(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x829d5994
	if (!ctx.cr6.eq) goto loc_829D5994;
loc_829D5840:
	// lis r10,-31884
	ctx.r10.s64 = -2089549824;
	// lwz r11,25084(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 25084);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,25084(r10)
	PPC_STORE_U32(ctx.r10.u32 + 25084, ctx.r11.u32);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bne cr6,0x829d585c
	if (!ctx.cr6.eq) goto loc_829D585C;
	// bl 0x823648a0
	ctx.lr = 0x829D585C;
	sub_823648A0(ctx, base);
loc_829D585C:
	// mr r31,r30
	ctx.r31.u64 = ctx.r30.u64;
loc_829D5860:
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5874
	if (ctx.cr6.eq) goto loc_829D5874;
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// bne cr6,0x829d5860
	if (!ctx.cr6.eq) goto loc_829D5860;
loc_829D5874:
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,41
	ctx.r5.s64 = 41;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x822a6698
	ctx.lr = 0x829D588C;
	sub_822A6698(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x829d5940
	if (ctx.cr6.eq) goto loc_829D5940;
	// cmplw cr6,r30,r31
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, ctx.r31.u32, ctx.xer);
	// beq cr6,0x829d5918
	if (ctx.cr6.eq) goto loc_829D5918;
	// lwz r11,32(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 32);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x829d5918
	if (!ctx.cr6.eq) goto loc_829D5918;
	// stw r23,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r23.u32);
	// addi r5,r1,120
	ctx.r5.s64 = ctx.r1.s64 + 120;
	// stw r23,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r23.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r23,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r23.u32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8229bcd0
	ctx.lr = 0x829D58C8;
	sub_8229BCD0(ctx, base);
	// lwz r11,124(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r5,120(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x829d58dc
	if (!ctx.cr6.eq) goto loc_829D58DC;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
loc_829D58DC:
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r3,52(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 52);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r25
	ctx.r6.u64 = ctx.r25.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x822a7880
	ctx.lr = 0x829D58F8;
	sub_822A7880(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82299080
	ctx.lr = 0x829D5904;
	sub_82299080(ctx, base);
	// cmplw cr6,r31,r30
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r30.u32, ctx.xer);
	// bne cr6,0x829d5940
	if (!ctx.cr6.eq) goto loc_829D5940;
	// lwz r11,32(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// beq cr6,0x829d5940
	if (ctx.cr6.eq) goto loc_829D5940;
loc_829D5918:
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x823aba10
	ctx.lr = 0x829D5934;
	sub_823ABA10(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x829d5978
	if (!ctx.cr6.eq) goto loc_829D5978;
loc_829D5940:
	// lwz r11,24976(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 24976);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5954
	if (ctx.cr6.eq) goto loc_829D5954;
	// mr r8,r23
	ctx.r8.u64 = ctx.r23.u64;
	// b 0x829d595c
	goto loc_829D595C;
loc_829D5954:
	// li r8,1
	ctx.r8.s64 = 1;
	// rldicr r8,r8,42,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 42) & 0xFFFFFFFFFFFFFFFF;
loc_829D595C:
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x822a0408
	ctx.lr = 0x829D5974;
	sub_822A0408(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
loc_829D5978:
	// bl 0x822a8060
	ctx.lr = 0x829D597C;
	sub_822A8060(ctx, base);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x829d5994
	if (!ctx.cr6.eq) goto loc_829D5994;
loc_829D5984:
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x82299080
	ctx.lr = 0x829D598C;
	sub_82299080(ctx, base);
	// mr r31,r23
	ctx.r31.u64 = ctx.r23.u64;
	// b 0x829d599c
	goto loc_829D599C;
loc_829D5994:
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x82299080
	ctx.lr = 0x829D599C;
	sub_82299080(ctx, base);
loc_829D599C:
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r23,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r23.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d59c0
	if (ctx.cr6.eq) goto loc_829D59C0;
	// stw r23,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r23.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82294520
	ctx.lr = 0x829D59C0;
	sub_82294520(ctx, base);
loc_829D59C0:
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82294cc8
	ctx.lr = 0x829D59C8;
	sub_82294CC8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x82cb1124
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D59D4"))) PPC_WEAK_FUNC(sub_829D59D4);
PPC_FUNC_IMPL(__imp__sub_829D59D4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D59D8"))) PPC_WEAK_FUNC(sub_829D59D8);
PPC_FUNC_IMPL(__imp__sub_829D59D8) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// lbz r3,-27673(r11)
	ctx.r3.u64 = PPC_LOAD_U8(ctx.r11.u32 + -27673);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D59E4"))) PPC_WEAK_FUNC(sub_829D59E4);
PPC_FUNC_IMPL(__imp__sub_829D59E4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D59E8"))) PPC_WEAK_FUNC(sub_829D59E8);
PPC_FUNC_IMPL(__imp__sub_829D59E8) {
	PPC_FUNC_PROLOGUE();
	// lis r10,-31883
	ctx.r10.s64 = -2089484288;
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,-27673(r10)
	PPC_STORE_U8(ctx.r10.u32 + -27673, ctx.r11.u8);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D59F8"))) PPC_WEAK_FUNC(sub_829D59F8);
PPC_FUNC_IMPL(__imp__sub_829D59F8) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// lwz r10,-25448(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + -25448);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d5a30
	if (ctx.cr6.eq) goto loc_829D5A30;
	// lis r11,-31886
	ctx.r11.s64 = -2089680896;
	// lbz r9,-22329(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + -22329);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x829d5a28
	if (!ctx.cr6.eq) goto loc_829D5A28;
	// lbz r11,4(r10)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 4);
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bnelr cr6
	if (!ctx.cr6.eq) return;
loc_829D5A28:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
loc_829D5A30:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D5A38"))) PPC_WEAK_FUNC(sub_829D5A38);
PPC_FUNC_IMPL(__imp__sub_829D5A38) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10e8
	ctx.lr = 0x829D5A40;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// li r28,0
	ctx.r28.s64 = 0;
	// lwz r11,-25448(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -25448);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5a74
	if (ctx.cr6.eq) goto loc_829D5A74;
	// lis r10,-31886
	ctx.r10.s64 = -2089680896;
	// lbz r9,-22329(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + -22329);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x829d5b34
	if (!ctx.cr6.eq) goto loc_829D5B34;
	// lbz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r11.u32 + 4);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5b34
	if (ctx.cr6.eq) goto loc_829D5B34;
loc_829D5A74:
	// lis r11,-31884
	ctx.r11.s64 = -2089549824;
	// lwz r11,25344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 25344);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5b28
	if (ctx.cr6.eq) goto loc_829D5B28;
	// lwz r11,752(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 752);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5b28
	if (ctx.cr6.eq) goto loc_829D5B28;
	// lwz r11,92(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 92);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d5b28
	if (ctx.cr6.eq) goto loc_829D5B28;
	// lwz r30,120(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 120);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x829d5b28
	if (ctx.cr6.eq) goto loc_829D5B28;
	// lwz r11,196(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 196);
	// li r29,0
	ctx.r29.s64 = 0;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x829d5b28
	if (!ctx.cr6.gt) goto loc_829D5B28;
	// li r31,0
	ctx.r31.s64 = 0;
loc_829D5ABC:
	// lwz r11,192(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 192);
	// lwzx r3,r11,r31
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r31.u32);
	// bl 0x829d94a8
	ctx.lr = 0x829D5AC8;
	sub_829D94A8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d5ae8
	if (ctx.cr6.eq) goto loc_829D5AE8;
	// lbz r11,252(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 252);
	// cmplwi cr6,r11,5
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 5, ctx.xer);
	// beq cr6,0x829d5ae4
	if (ctx.cr6.eq) goto loc_829D5AE4;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d5b44
	if (!ctx.cr6.eq) goto loc_829D5B44;
loc_829D5AE4:
	// li r28,0
	ctx.r28.s64 = 0;
loc_829D5AE8:
	// lwz r11,192(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 192);
	// lwzx r3,r11,r31
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r31.u32);
	// bl 0x829d9528
	ctx.lr = 0x829D5AF4;
	sub_829D9528(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d5b14
	if (ctx.cr6.eq) goto loc_829D5B14;
	// lbz r11,252(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 252);
	// cmplwi cr6,r11,5
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 5, ctx.xer);
	// beq cr6,0x829d5b10
	if (ctx.cr6.eq) goto loc_829D5B10;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d5b44
	if (!ctx.cr6.eq) goto loc_829D5B44;
loc_829D5B10:
	// li r28,0
	ctx.r28.s64 = 0;
loc_829D5B14:
	// lwz r11,196(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 196);
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// addi r31,r31,4
	ctx.r31.s64 = ctx.r31.s64 + 4;
	// cmpw cr6,r29,r11
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x829d5abc
	if (ctx.cr6.lt) goto loc_829D5ABC;
loc_829D5B28:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82cb1138
	__restgprlr_28(ctx, base);
	return;
loc_829D5B34:
	// li r28,1
	ctx.r28.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82cb1138
	__restgprlr_28(ctx, base);
	return;
loc_829D5B44:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82cb1138
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D5B50"))) PPC_WEAK_FUNC(sub_829D5B50);
PPC_FUNC_IMPL(__imp__sub_829D5B50) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-31886
	ctx.r11.s64 = -2089680896;
	// lbz r3,-22329(r11)
	ctx.r3.u64 = PPC_LOAD_U8(ctx.r11.u32 + -22329);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D5B5C"))) PPC_WEAK_FUNC(sub_829D5B5C);
PPC_FUNC_IMPL(__imp__sub_829D5B5C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D5B60"))) PPC_WEAK_FUNC(sub_829D5B60);
PPC_FUNC_IMPL(__imp__sub_829D5B60) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// lwz r3,-25448(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -25448);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// b 0x82a17178
	sub_82A17178(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D5B74"))) PPC_WEAK_FUNC(sub_829D5B74);
PPC_FUNC_IMPL(__imp__sub_829D5B74) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D5B78"))) PPC_WEAK_FUNC(sub_829D5B78);
PPC_FUNC_IMPL(__imp__sub_829D5B78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10bc
	ctx.lr = 0x829D5B80;
	__savegprlr_17(ctx, base);
	// stfd f30,-144(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -144, ctx.f30.u64);
	// stfd f31,-136(r1)
	PPC_STORE_U64(ctx.r1.u32 + -136, ctx.f31.u64);
	// stwu r1,-400(r1)
	ea = -400 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r17,r4
	ctx.r17.u64 = ctx.r4.u64;
	// lis r10,-31883
	ctx.r10.s64 = -2089484288;
	// mr r26,r5
	ctx.r26.u64 = ctx.r5.u64;
	// mr r29,r6
	ctx.r29.u64 = ctx.r6.u64;
	// lis r9,-32230
	ctx.r9.s64 = -2112225280;
	// lwz r31,1052(r17)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r17.u32 + 1052);
	// li r24,0
	ctx.r24.s64 = 0;
	// lwz r5,-25700(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + -25700);
	// mr r19,r3
	ctx.r19.u64 = ctx.r3.u64;
	// addi r4,r9,22372
	ctx.r4.s64 = ctx.r9.s64 + 22372;
	// stw r24,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r24.u32);
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// stw r24,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, ctx.r24.u32);
	// stw r24,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, ctx.r24.u32);
	// lwz r11,108(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 108);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r11,r10
	ctx.r8.u64 = ctx.r11.u64 + ctx.r10.u64;
	// rlwinm r7,r8,1,0,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// srawi r6,r7,4
	ctx.xer.ca = (ctx.r7.s32 < 0) & ((ctx.r7.u32 & 0xF) != 0);
	ctx.r6.s64 = ctx.r7.s32 >> 4;
	// addze r30,r6
	temp.s64 = ctx.r6.s64 + ctx.xer.ca;
	ctx.xer.ca = temp.u32 < ctx.r6.u32;
	ctx.r30.s64 = temp.s64;
	// stw r30,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r30.u32);
	// bl 0x8232e868
	ctx.lr = 0x829D5BE4;
	sub_8232E868(ctx, base);
	// addi r4,r1,232
	ctx.r4.s64 = ctx.r1.s64 + 232;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x82295908
	ctx.lr = 0x829D5BF0;
	sub_82295908(ctx, base);
	// lwz r5,240(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	// stw r24,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, ctx.r24.u32);
	// cmpwi cr6,r5,0
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 0, ctx.xer);
	// beq cr6,0x829d5c14
	if (ctx.cr6.eq) goto loc_829D5C14;
	// stw r24,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294520
	ctx.lr = 0x829D5C14;
	sub_82294520(ctx, base);
loc_829D5C14:
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294cc8
	ctx.lr = 0x829D5C1C;
	sub_82294CC8(ctx, base);
	// extsw r10,r30
	ctx.r10.s64 = ctx.r30.s32;
	// lfs f13,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// std r10,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r10.u64);
	// lfd f0,144(r1)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// fcfid f11,f0
	ctx.f11.f64 = double(ctx.f0.s64);
	// lwz r9,188(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// fctiwz f12,f13
	ctx.f12.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfd f12,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.f12.u64);
	// lwz r8,148(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// addi r18,r11,11272
	ctx.r18.s64 = ctx.r11.s64 + 11272;
	// frsp f30,f11
	ctx.f30.f64 = double(float(ctx.f11.f64));
	// lwz r11,184(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// stfs f30,88(r31)
	temp.f32 = float(ctx.f30.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// stw r8,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r8.u32);
	// bne cr6,0x829d5c64
	if (!ctx.cr6.eq) goto loc_829D5C64;
	// mr r11,r18
	ctx.r11.u64 = ctx.r18.u64;
loc_829D5C64:
	// lis r9,-32245
	ctx.r9.s64 = -2113208320;
	// lwz r7,60(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 60);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// addi r5,r1,152
	ctx.r5.s64 = ctx.r1.s64 + 152;
	// li r4,1
	ctx.r4.s64 = 1;
	// lfs f31,-32444(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -32444);
	ctx.f31.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// fmr f2,f31
	ctx.f2.f64 = ctx.f31.f64;
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// bl 0x8242da20
	ctx.lr = 0x829D5C94;
	sub_8242DA20(ctx, base);
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lis r8,-31883
	ctx.r8.s64 = -2089484288;
	// lfs f13,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lis r7,-32230
	ctx.r7.s64 = -2112225280;
	// fadds f12,f0,f13
	ctx.f12.f64 = double(float(ctx.f0.f64 + ctx.f13.f64));
	// stfs f12,0(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r29.u32 + 0, temp.u32);
	// stfs f30,88(r31)
	temp.f32 = float(ctx.f30.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// lfs f11,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// addi r4,r7,22416
	ctx.r4.s64 = ctx.r7.s64 + 22416;
	// stfs f11,92(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r31.u32 + 92, temp.u32);
	// lwz r5,-25668(r8)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r8.u32 + -25668);
	// bl 0x8232e868
	ctx.lr = 0x829D5CC8;
	sub_8232E868(ctx, base);
	// addi r4,r1,232
	ctx.r4.s64 = ctx.r1.s64 + 232;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x82295908
	ctx.lr = 0x829D5CD4;
	sub_82295908(ctx, base);
	// lwz r6,240(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	// stw r24,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, ctx.r24.u32);
	// cmpwi cr6,r6,0
	ctx.cr6.compare<int32_t>(ctx.r6.s32, 0, ctx.xer);
	// beq cr6,0x829d5cf8
	if (ctx.cr6.eq) goto loc_829D5CF8;
	// stw r24,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294520
	ctx.lr = 0x829D5CF8;
	sub_82294520(ctx, base);
loc_829D5CF8:
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294cc8
	ctx.lr = 0x829D5D00;
	sub_82294CC8(ctx, base);
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lwz r11,188(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// fctiwz f13,f0
	ctx.f13.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfd f13,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.f13.u64);
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,184(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// stfs f30,88(r31)
	temp.f32 = float(ctx.f30.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// stw r10,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r10.u32);
	// bne cr6,0x829d5d2c
	if (!ctx.cr6.eq) goto loc_829D5D2C;
	// mr r11,r18
	ctx.r11.u64 = ctx.r18.u64;
loc_829D5D2C:
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r7,60(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 60);
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// addi r5,r1,152
	ctx.r5.s64 = ctx.r1.s64 + 152;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f31.f64;
	// li r4,1
	ctx.r4.s64 = 1;
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8242da20
	ctx.lr = 0x829D5D54;
	sub_8242DA20(ctx, base);
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// fadds f12,f0,f13
	ctx.f12.f64 = double(float(ctx.f0.f64 + ctx.f13.f64));
	// stfs f12,0(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r29.u32 + 0, temp.u32);
	// stfs f30,88(r31)
	temp.f32 = float(ctx.f30.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// lfs f11,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// stfs f11,92(r31)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r31.u32 + 92, temp.u32);
	// addi r4,r10,22460
	ctx.r4.s64 = ctx.r10.s64 + 22460;
	// lwz r5,-25692(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + -25692);
	// bl 0x8232e868
	ctx.lr = 0x829D5D88;
	sub_8232E868(ctx, base);
	// addi r4,r1,232
	ctx.r4.s64 = ctx.r1.s64 + 232;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x82295908
	ctx.lr = 0x829D5D94;
	sub_82295908(ctx, base);
	// lwz r9,240(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	// stw r24,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, ctx.r24.u32);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x829d5db8
	if (ctx.cr6.eq) goto loc_829D5DB8;
	// stw r24,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294520
	ctx.lr = 0x829D5DB8;
	sub_82294520(ctx, base);
loc_829D5DB8:
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294cc8
	ctx.lr = 0x829D5DC0;
	sub_82294CC8(ctx, base);
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// fctiwz f13,f0
	ctx.f13.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfd f13,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.f13.u64);
	// lwz r11,188(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// stfs f30,88(r31)
	temp.f32 = float(ctx.f30.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,184(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// stw r10,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r10.u32);
	// bne cr6,0x829d5dec
	if (!ctx.cr6.eq) goto loc_829D5DEC;
	// mr r11,r18
	ctx.r11.u64 = ctx.r18.u64;
loc_829D5DEC:
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r7,60(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 60);
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// addi r5,r1,152
	ctx.r5.s64 = ctx.r1.s64 + 152;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f31.f64;
	// li r4,1
	ctx.r4.s64 = 1;
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8242da20
	ctx.lr = 0x829D5E14;
	sub_8242DA20(ctx, base);
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// extsw r8,r9
	ctx.r8.s64 = ctx.r9.s32;
	// lfs f13,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// std r8,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r8.u64);
	// fadds f12,f0,f13
	ctx.f12.f64 = double(float(ctx.f0.f64 + ctx.f13.f64));
	// stfs f12,0(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r29.u32 + 0, temp.u32);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// lwz r5,-25684(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + -25684);
	// addi r4,r10,22504
	ctx.r4.s64 = ctx.r10.s64 + 22504;
	// lfd f11,144(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// fcfid f10,f11
	ctx.f10.f64 = double(ctx.f11.s64);
	// frsp f9,f10
	ctx.f9.f64 = double(float(ctx.f10.f64));
	// stfs f9,88(r31)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// lfs f8,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f8.f64 = double(temp.f32);
	// stfs f8,92(r31)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r31.u32 + 92, temp.u32);
	// bl 0x8232e868
	ctx.lr = 0x829D5E60;
	sub_8232E868(ctx, base);
	// addi r4,r1,232
	ctx.r4.s64 = ctx.r1.s64 + 232;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x82295908
	ctx.lr = 0x829D5E6C;
	sub_82295908(ctx, base);
	// lwz r7,240(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	// stw r24,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, ctx.r24.u32);
	// cmpwi cr6,r7,0
	ctx.cr6.compare<int32_t>(ctx.r7.s32, 0, ctx.xer);
	// beq cr6,0x829d5e90
	if (ctx.cr6.eq) goto loc_829D5E90;
	// stw r24,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294520
	ctx.lr = 0x829D5E90;
	sub_82294520(ctx, base);
loc_829D5E90:
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294cc8
	ctx.lr = 0x829D5E98;
	sub_82294CC8(ctx, base);
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// fctiwz f13,f0
	ctx.f13.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfd f13,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.f13.u64);
	// lwz r11,188(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// stfs f30,88(r31)
	temp.f32 = float(ctx.f30.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,184(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// stw r10,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r10.u32);
	// bne cr6,0x829d5ec4
	if (!ctx.cr6.eq) goto loc_829D5EC4;
	// mr r11,r18
	ctx.r11.u64 = ctx.r18.u64;
loc_829D5EC4:
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r7,60(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 60);
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// addi r5,r1,152
	ctx.r5.s64 = ctx.r1.s64 + 152;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f31.f64;
	// li r4,1
	ctx.r4.s64 = 1;
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8242da20
	ctx.lr = 0x829D5EEC;
	sub_8242DA20(ctx, base);
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// extsw r8,r9
	ctx.r8.s64 = ctx.r9.s32;
	// lfs f13,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// std r8,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r8.u64);
	// fadds f12,f0,f13
	ctx.f12.f64 = double(float(ctx.f0.f64 + ctx.f13.f64));
	// stfs f12,0(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r29.u32 + 0, temp.u32);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// lwz r5,-25676(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + -25676);
	// addi r4,r10,22548
	ctx.r4.s64 = ctx.r10.s64 + 22548;
	// lfd f11,144(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// fcfid f10,f11
	ctx.f10.f64 = double(ctx.f11.s64);
	// frsp f9,f10
	ctx.f9.f64 = double(float(ctx.f10.f64));
	// stfs f9,88(r31)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// lfs f8,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f8.f64 = double(temp.f32);
	// stfs f8,92(r31)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r31.u32 + 92, temp.u32);
	// bl 0x8232e868
	ctx.lr = 0x829D5F38;
	sub_8232E868(ctx, base);
	// addi r4,r1,232
	ctx.r4.s64 = ctx.r1.s64 + 232;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x82295908
	ctx.lr = 0x829D5F44;
	sub_82295908(ctx, base);
	// lwz r7,240(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	// stw r24,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, ctx.r24.u32);
	// cmpwi cr6,r7,0
	ctx.cr6.compare<int32_t>(ctx.r7.s32, 0, ctx.xer);
	// beq cr6,0x829d5f68
	if (ctx.cr6.eq) goto loc_829D5F68;
	// stw r24,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294520
	ctx.lr = 0x829D5F68;
	sub_82294520(ctx, base);
loc_829D5F68:
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294cc8
	ctx.lr = 0x829D5F70;
	sub_82294CC8(ctx, base);
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// fctiwz f13,f0
	ctx.f13.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfd f13,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.f13.u64);
	// lwz r11,188(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// stfs f30,88(r31)
	temp.f32 = float(ctx.f30.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,184(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// stw r10,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r10.u32);
	// bne cr6,0x829d5f9c
	if (!ctx.cr6.eq) goto loc_829D5F9C;
	// mr r11,r18
	ctx.r11.u64 = ctx.r18.u64;
loc_829D5F9C:
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r7,60(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 60);
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// addi r5,r1,152
	ctx.r5.s64 = ctx.r1.s64 + 152;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f31.f64;
	// li r4,1
	ctx.r4.s64 = 1;
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8242da20
	ctx.lr = 0x829D5FC4;
	sub_8242DA20(ctx, base);
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// extsw r8,r9
	ctx.r8.s64 = ctx.r9.s32;
	// lfs f13,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// std r8,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r8.u64);
	// fadds f12,f0,f13
	ctx.f12.f64 = double(float(ctx.f0.f64 + ctx.f13.f64));
	// stfs f12,0(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r29.u32 + 0, temp.u32);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// lwz r5,-25660(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + -25660);
	// addi r4,r10,22592
	ctx.r4.s64 = ctx.r10.s64 + 22592;
	// lfd f11,144(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// fcfid f10,f11
	ctx.f10.f64 = double(ctx.f11.s64);
	// frsp f9,f10
	ctx.f9.f64 = double(float(ctx.f10.f64));
	// stfs f9,88(r31)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// lfs f8,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f8.f64 = double(temp.f32);
	// stfs f8,92(r31)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r31.u32 + 92, temp.u32);
	// bl 0x8232e868
	ctx.lr = 0x829D6010;
	sub_8232E868(ctx, base);
	// addi r4,r1,232
	ctx.r4.s64 = ctx.r1.s64 + 232;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x82295908
	ctx.lr = 0x829D601C;
	sub_82295908(ctx, base);
	// lwz r7,240(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	// stw r24,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, ctx.r24.u32);
	// cmpwi cr6,r7,0
	ctx.cr6.compare<int32_t>(ctx.r7.s32, 0, ctx.xer);
	// beq cr6,0x829d6040
	if (ctx.cr6.eq) goto loc_829D6040;
	// stw r24,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294520
	ctx.lr = 0x829D6040;
	sub_82294520(ctx, base);
loc_829D6040:
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294cc8
	ctx.lr = 0x829D6048;
	sub_82294CC8(ctx, base);
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// fctiwz f13,f0
	ctx.f13.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfd f13,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.f13.u64);
	// lwz r11,188(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// stfs f30,88(r31)
	temp.f32 = float(ctx.f30.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,184(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// stw r10,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r10.u32);
	// bne cr6,0x829d6074
	if (!ctx.cr6.eq) goto loc_829D6074;
	// mr r11,r18
	ctx.r11.u64 = ctx.r18.u64;
loc_829D6074:
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r7,60(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 60);
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// addi r5,r1,152
	ctx.r5.s64 = ctx.r1.s64 + 152;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f31.f64;
	// li r4,1
	ctx.r4.s64 = 1;
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8242da20
	ctx.lr = 0x829D609C;
	sub_8242DA20(ctx, base);
	// lis r10,-31906
	ctx.r10.s64 = -2090991616;
	// lis r8,-32230
	ctx.r8.s64 = -2112225280;
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lis r9,-31883
	ctx.r9.s64 = -2089484288;
	// lfs f13,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// addi r4,r8,22640
	ctx.r4.s64 = ctx.r8.s64 + 22640;
	// fadds f12,f0,f13
	ctx.f12.f64 = double(float(ctx.f0.f64 + ctx.f13.f64));
	// lwz r8,-1272(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1272);
	// stfs f12,0(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r29.u32 + 0, temp.u32);
	// lwz r10,152(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// lwz r7,-25704(r9)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + -25704);
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// extsw r9,r10
	ctx.r9.s64 = ctx.r10.s32;
	// std r9,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r9.u64);
	// lfd f11,144(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// fcfid f10,f11
	ctx.f10.f64 = double(ctx.f11.s64);
	// lbz r6,-1443(r11)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r11.u32 + -1443);
	// frsp f9,f10
	ctx.f9.f64 = double(float(ctx.f10.f64));
	// stfs f9,88(r31)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// lfs f8,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f8.f64 = double(temp.f32);
	// cntlzw r5,r6
	ctx.r5.u64 = ctx.r6.u32 == 0 ? 32 : __builtin_clz(ctx.r6.u32);
	// stfs f8,92(r31)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r31.u32 + 92, temp.u32);
	// rlwinm r11,r5,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 27) & 0x1;
	// lwz r6,96(r19)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r19.u32 + 96);
	// xori r5,r11,1
	ctx.r5.u64 = ctx.r11.u64 ^ 1;
	// bl 0x8232e868
	ctx.lr = 0x829D6108;
	sub_8232E868(ctx, base);
	// addi r4,r1,232
	ctx.r4.s64 = ctx.r1.s64 + 232;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x82295908
	ctx.lr = 0x829D6114;
	sub_82295908(ctx, base);
	// lwz r8,240(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	// stw r24,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, ctx.r24.u32);
	// cmpwi cr6,r8,0
	ctx.cr6.compare<int32_t>(ctx.r8.s32, 0, ctx.xer);
	// beq cr6,0x829d6138
	if (ctx.cr6.eq) goto loc_829D6138;
	// stw r24,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294520
	ctx.lr = 0x829D6138;
	sub_82294520(ctx, base);
loc_829D6138:
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82294cc8
	ctx.lr = 0x829D6140;
	sub_82294CC8(ctx, base);
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// fctiwz f13,f0
	ctx.f13.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfd f13,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.f13.u64);
	// lwz r11,188(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// stfs f30,88(r31)
	temp.f32 = float(ctx.f30.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// lwz r30,184(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// stw r10,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r10.u32);
	// bne cr6,0x829d6170
	if (!ctx.cr6.eq) goto loc_829D6170;
	// mr r11,r18
	ctx.r11.u64 = ctx.r18.u64;
loc_829D6170:
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// lwz r7,60(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 60);
	// addi r5,r1,152
	ctx.r5.s64 = ctx.r1.s64 + 152;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f31.f64;
	// li r4,1
	ctx.r4.s64 = 1;
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8242da20
	ctx.lr = 0x829D6198;
	sub_8242DA20(ctx, base);
	// lwz r11,152(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lis r27,-31885
	ctx.r27.s64 = -2089615360;
	// extsw r10,r11
	ctx.r10.s64 = ctx.r11.s32;
	// lfs f13,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fadds f12,f0,f13
	ctx.f12.f64 = double(float(ctx.f0.f64 + ctx.f13.f64));
	// stfs f12,0(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r29.u32 + 0, temp.u32);
	// std r10,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r10.u64);
	// lfd f11,144(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// fcfid f10,f11
	ctx.f10.f64 = double(ctx.f11.s64);
	// mr r25,r24
	ctx.r25.u64 = ctx.r24.u64;
	// frsp f9,f10
	ctx.f9.f64 = double(float(ctx.f10.f64));
	// stfs f9,88(r31)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// lfs f8,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f8.f64 = double(temp.f32);
	// stfs f8,92(r31)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r31.u32 + 92, temp.u32);
	// lwz r9,96(r19)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r19.u32 + 96);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// ble cr6,0x829d64ec
	if (!ctx.cr6.gt) goto loc_829D64EC;
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// lis r9,-32230
	ctx.r9.s64 = -2112225280;
	// mr r23,r24
	ctx.r23.u64 = ctx.r24.u64;
	// addi r20,r11,-19580
	ctx.r20.s64 = ctx.r11.s64 + -19580;
	// addi r22,r10,22824
	ctx.r22.s64 = ctx.r10.s64 + 22824;
	// addi r21,r9,22744
	ctx.r21.s64 = ctx.r9.s64 + 22744;
loc_829D61FC:
	// lwz r11,92(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 92);
	// lwzx r30,r11,r23
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r23.u32);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x829d62b4
	if (!ctx.cr6.eq) goto loc_829D62B4;
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// mr r5,r25
	ctx.r5.u64 = ctx.r25.u64;
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// bl 0x8232e868
	ctx.lr = 0x829D621C;
	sub_8232E868(ctx, base);
	// addi r4,r1,200
	ctx.r4.s64 = ctx.r1.s64 + 200;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x82295908
	ctx.lr = 0x829D6228;
	sub_82295908(ctx, base);
	// lwz r11,208(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	// lwz r30,200(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d6274
	if (ctx.cr6.eq) goto loc_829D6274;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x829d62a4
	if (ctx.cr6.eq) goto loc_829D62A4;
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d6254
	if (!ctx.cr6.eq) goto loc_829D6254;
	// bl 0x822900a0
	ctx.lr = 0x829D6250;
	sub_822900A0(ctx, base);
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
loc_829D6254:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r6,8
	ctx.r6.s64 = 8;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D6270;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
loc_829D6274:
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x829d62a4
	if (ctx.cr6.eq) goto loc_829D62A4;
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d6290
	if (!ctx.cr6.eq) goto loc_829D6290;
	// bl 0x822900a0
	ctx.lr = 0x829D628C;
	sub_822900A0(ctx, base);
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
loc_829D6290:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 20);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D62A4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D62A4:
	// stw r24,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, ctx.r24.u32);
	// stw r24,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, ctx.r24.u32);
	// stw r24,204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 204, ctx.r24.u32);
	// b 0x829d644c
	goto loc_829D644C;
loc_829D62B4:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x829d62d0
	if (!ctx.cr6.eq) goto loc_829D62D0;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// bl 0x822960c0
	ctx.lr = 0x829D62CC;
	sub_822960C0(ctx, base);
	// b 0x829d62d8
	goto loc_829D62D8;
loc_829D62D0:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8233e1a0
	ctx.lr = 0x829D62D8;
	sub_8233E1A0(ctx, base);
loc_829D62D8:
	// lwz r11,236(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 236);
	// lwz r28,232(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// bne cr6,0x829d62f0
	if (!ctx.cr6.eq) goto loc_829D62F0;
	// mr r6,r18
	ctx.r6.u64 = ctx.r18.u64;
loc_829D62F0:
	// lfs f13,248(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 248);
	ctx.f13.f64 = double(temp.f32);
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// lfs f11,252(r30)
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 252);
	ctx.f11.f64 = double(temp.f32);
	// fctiwz f10,f13
	ctx.f10.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// fctiwz f9,f11
	ctx.f9.s64 = (ctx.f11.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f11.f64));
	// stfd f10,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, ctx.f10.u64);
	// stfd f9,168(r1)
	PPC_STORE_U64(ctx.r1.u32 + 168, ctx.f9.u64);
	// mr r5,r25
	ctx.r5.u64 = ctx.r25.u64;
	// lfs f0,244(r30)
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 244);
	ctx.f0.f64 = double(temp.f32);
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// fctiwz f12,f0
	ctx.f12.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfd f12,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.f12.u64);
	// lbz r7,2037(r30)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r30.u32 + 2037);
	// lwz r8,148(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r9,164(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r10,172(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// bl 0x8232e868
	ctx.lr = 0x829D6334;
	sub_8232E868(ctx, base);
	// addi r4,r1,216
	ctx.r4.s64 = ctx.r1.s64 + 216;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x82295908
	ctx.lr = 0x829D6340;
	sub_82295908(ctx, base);
	// lwz r11,224(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 224);
	// lwz r30,216(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d638c
	if (ctx.cr6.eq) goto loc_829D638C;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x829d63bc
	if (ctx.cr6.eq) goto loc_829D63BC;
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d636c
	if (!ctx.cr6.eq) goto loc_829D636C;
	// bl 0x822900a0
	ctx.lr = 0x829D6368;
	sub_822900A0(ctx, base);
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
loc_829D636C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r6,8
	ctx.r6.s64 = 8;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D6388;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
loc_829D638C:
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x829d63bc
	if (ctx.cr6.eq) goto loc_829D63BC;
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d63a8
	if (!ctx.cr6.eq) goto loc_829D63A8;
	// bl 0x822900a0
	ctx.lr = 0x829D63A4;
	sub_822900A0(ctx, base);
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
loc_829D63A8:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 20);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D63BC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D63BC:
	// lwz r11,240(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	// stw r24,216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 216, ctx.r24.u32);
	// stw r24,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r24,220(r1)
	PPC_STORE_U32(ctx.r1.u32 + 220, ctx.r24.u32);
	// beq cr6,0x829d6410
	if (ctx.cr6.eq) goto loc_829D6410;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x829d6440
	if (ctx.cr6.eq) goto loc_829D6440;
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d63f0
	if (!ctx.cr6.eq) goto loc_829D63F0;
	// bl 0x822900a0
	ctx.lr = 0x829D63EC;
	sub_822900A0(ctx, base);
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
loc_829D63F0:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r6,8
	ctx.r6.s64 = 8;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D640C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
loc_829D6410:
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x829d6440
	if (ctx.cr6.eq) goto loc_829D6440;
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d642c
	if (!ctx.cr6.eq) goto loc_829D642C;
	// bl 0x822900a0
	ctx.lr = 0x829D6428;
	sub_822900A0(ctx, base);
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
loc_829D642C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 20);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D6440;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D6440:
	// stw r24,232(r1)
	PPC_STORE_U32(ctx.r1.u32 + 232, ctx.r24.u32);
	// stw r24,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, ctx.r24.u32);
	// stw r24,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, ctx.r24.u32);
loc_829D644C:
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lwz r11,188(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// lwz r30,184(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// fctiwz f13,f0
	ctx.f13.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfd f13,168(r1)
	PPC_STORE_U64(ctx.r1.u32 + 168, ctx.f13.u64);
	// lwz r10,172(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stfs f30,88(r31)
	temp.f32 = float(ctx.f30.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// stw r10,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r10.u32);
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
	// bne cr6,0x829d647c
	if (!ctx.cr6.eq) goto loc_829D647C;
	// mr r11,r18
	ctx.r11.u64 = ctx.r18.u64;
loc_829D647C:
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r7,60(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 60);
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// addi r5,r1,152
	ctx.r5.s64 = ctx.r1.s64 + 152;
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f31.f64;
	// li r4,1
	ctx.r4.s64 = 1;
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8242da20
	ctx.lr = 0x829D64A4;
	sub_8242DA20(ctx, base);
	// lwz r11,152(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lfs f0,0(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// addi r25,r25,1
	ctx.r25.s64 = ctx.r25.s64 + 1;
	// extsw r10,r11
	ctx.r10.s64 = ctx.r11.s32;
	// std r10,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.r10.u64);
	// lfd f11,176(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// addi r23,r23,4
	ctx.r23.s64 = ctx.r23.s64 + 4;
	// fcfid f10,f11
	ctx.f10.f64 = double(ctx.f11.s64);
	// lfs f13,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fadds f12,f0,f13
	ctx.f12.f64 = double(float(ctx.f0.f64 + ctx.f13.f64));
	// stfs f12,0(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r29.u32 + 0, temp.u32);
	// frsp f9,f10
	ctx.f9.f64 = double(float(ctx.f10.f64));
	// stfs f9,88(r31)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
	// lfs f8,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f8.f64 = double(temp.f32);
	// stfs f8,92(r31)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r31.u32 + 92, temp.u32);
	// lwz r9,96(r19)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r19.u32 + 96);
	// cmpw cr6,r25,r9
	ctx.cr6.compare<int32_t>(ctx.r25.s32, ctx.r9.s32, ctx.xer);
	// blt cr6,0x829d61fc
	if (ctx.cr6.lt) goto loc_829D61FC;
loc_829D64EC:
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// mr r3,r17
	ctx.r3.u64 = ctx.r17.u64;
	// bl 0x82afd140
	ctx.lr = 0x829D64FC;
	sub_82AFD140(ctx, base);
	// lwz r11,192(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d6544
	if (ctx.cr6.eq) goto loc_829D6544;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x829d6574
	if (ctx.cr6.eq) goto loc_829D6574;
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d6524
	if (!ctx.cr6.eq) goto loc_829D6524;
	// bl 0x822900a0
	ctx.lr = 0x829D6520;
	sub_822900A0(ctx, base);
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
loc_829D6524:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r6,8
	ctx.r6.s64 = 8;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D6540;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
loc_829D6544:
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x829d6574
	if (ctx.cr6.eq) goto loc_829D6574;
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d6560
	if (!ctx.cr6.eq) goto loc_829D6560;
	// bl 0x822900a0
	ctx.lr = 0x829D655C;
	sub_822900A0(ctx, base);
	// lwz r3,28888(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 28888);
loc_829D6560:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 20);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D6574;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_829D6574:
	// addi r1,r1,400
	ctx.r1.s64 = ctx.r1.s64 + 400;
	// lfd f30,-144(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -144);
	// lfd f31,-136(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -136);
	// b 0x82cb110c
	__restgprlr_17(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D6584"))) PPC_WEAK_FUNC(sub_829D6584);
PPC_FUNC_IMPL(__imp__sub_829D6584) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D6588"))) PPC_WEAK_FUNC(sub_829D6588);
PPC_FUNC_IMPL(__imp__sub_829D6588) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x8260ab50
	ctx.lr = 0x829D65A0;
	sub_8260AB50(ctx, base);
	// lwz r3,492(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 492);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d65b0
	if (ctx.cr6.eq) goto loc_829D65B0;
	// bl 0x82516af8
	ctx.lr = 0x829D65B0;
	sub_82516AF8(ctx, base);
loc_829D65B0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D65C4"))) PPC_WEAK_FUNC(sub_829D65C4);
PPC_FUNC_IMPL(__imp__sub_829D65C4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D65C8"))) PPC_WEAK_FUNC(sub_829D65C8);
PPC_FUNC_IMPL(__imp__sub_829D65C8) {
	PPC_FUNC_PROLOGUE();
	// lwz r3,492(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 492);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// b 0x82516e80
	sub_82516E80(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D65D8"))) PPC_WEAK_FUNC(sub_829D65D8);
PPC_FUNC_IMPL(__imp__sub_829D65D8) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D65DC"))) PPC_WEAK_FUNC(sub_829D65DC);
PPC_FUNC_IMPL(__imp__sub_829D65DC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D65E0"))) PPC_WEAK_FUNC(sub_829D65E0);
PPC_FUNC_IMPL(__imp__sub_829D65E0) {
	PPC_FUNC_PROLOGUE();
	// lwz r3,492(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 492);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x82516518
	sub_82516518(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D65F4"))) PPC_WEAK_FUNC(sub_829D65F4);
PPC_FUNC_IMPL(__imp__sub_829D65F4) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D65F8"))) PPC_WEAK_FUNC(sub_829D65F8);
PPC_FUNC_IMPL(__imp__sub_829D65F8) {
	PPC_FUNC_PROLOGUE();
	// lwz r3,492(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 492);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// b 0x825166b8
	sub_825166B8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D6608"))) PPC_WEAK_FUNC(sub_829D6608);
PPC_FUNC_IMPL(__imp__sub_829D6608) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D660C"))) PPC_WEAK_FUNC(sub_829D660C);
PPC_FUNC_IMPL(__imp__sub_829D660C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D6610"))) PPC_WEAK_FUNC(sub_829D6610);
PPC_FUNC_IMPL(__imp__sub_829D6610) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	// lwz r11,504(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 504);
	// rlwinm r10,r11,0,2,2
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// lfs f0,164(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 164);
	ctx.f0.f64 = double(temp.f32);
	// fadds f13,f0,f1
	ctx.f13.f64 = double(float(ctx.f0.f64 + ctx.f1.f64));
	// stfs f13,164(r3)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r3.u32 + 164, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D6630"))) PPC_WEAK_FUNC(sub_829D6630);
PPC_FUNC_IMPL(__imp__sub_829D6630) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// beq cr6,0x829d66a0
	if (ctx.cr6.eq) goto loc_829D66A0;
	// clrlwi r11,r5,24
	ctx.r11.u64 = ctx.r5.u32 & 0xFF;
	// cmplwi cr6,r11,4
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 4, ctx.xer);
	// bgt cr6,0x829d66a0
	if (ctx.cr6.gt) goto loc_829D66A0;
	// lis r12,-32099
	ctx.r12.s64 = -2103640064;
	// addi r12,r12,26216
	ctx.r12.s64 = ctx.r12.s64 + 26216;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		goto loc_829D667C;
	case 1:
		goto loc_829D667C;
	case 2:
		goto loc_829D6690;
	case 3:
		goto loc_829D6690;
	case 4:
		goto loc_829D6690;
	default:
		__builtin_unreachable();
	}
	// lwz r20,26236(r29)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r29.u32 + 26236);
	// lwz r20,26236(r29)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r29.u32 + 26236);
	// lwz r20,26256(r29)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r29.u32 + 26256);
	// lwz r20,26256(r29)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r29.u32 + 26256);
	// lwz r20,26256(r29)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r29.u32 + 26256);
loc_829D667C:
	// bl 0x829d66e0
	ctx.lr = 0x829D6680;
	sub_829D66E0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
loc_829D6690:
	// stw r4,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r4.u32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r3,92
	ctx.r3.s64 = ctx.r3.s64 + 92;
	// bl 0x829d8d10
	ctx.lr = 0x829D66A0;
	sub_829D8D10(ctx, base);
loc_829D66A0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D66B0"))) PPC_WEAK_FUNC(sub_829D66B0);
PPC_FUNC_IMPL(__imp__sub_829D66B0) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// lbz r10,-1443(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + -1443);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d66d8
	if (ctx.cr6.eq) goto loc_829D66D8;
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// lwz r10,96(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 96);
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r11,-1272(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -1272);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bgelr cr6
	if (!ctx.cr6.lt) return;
loc_829D66D8:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D66E0"))) PPC_WEAK_FUNC(sub_829D66E0);
PPC_FUNC_IMPL(__imp__sub_829D66E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r4,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r4.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// addi r3,r31,92
	ctx.r3.s64 = ctx.r31.s64 + 92;
	// bl 0x829d8c60
	ctx.lr = 0x829D6704;
	sub_829D8C60(ctx, base);
	// lis r10,-31883
	ctx.r10.s64 = -2089484288;
	// lwz r11,96(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 96);
	// lwz r9,-25704(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + -25704);
	// cmpw cr6,r9,r11
	ctx.cr6.compare<int32_t>(ctx.r9.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x829d671c
	if (!ctx.cr6.lt) goto loc_829D671C;
	// stw r11,-25704(r10)
	PPC_STORE_U32(ctx.r10.u32 + -25704, ctx.r11.u32);
loc_829D671C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D6730"))) PPC_WEAK_FUNC(sub_829D6730);
PPC_FUNC_IMPL(__imp__sub_829D6730) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r4,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r4.u32);
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// addi r3,r3,92
	ctx.r3.s64 = ctx.r3.s64 + 92;
	// bl 0x829d8d10
	ctx.lr = 0x829D674C;
	sub_829D8D10(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D675C"))) PPC_WEAK_FUNC(sub_829D675C);
PPC_FUNC_IMPL(__imp__sub_829D675C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D6760"))) PPC_WEAK_FUNC(sub_829D6760);
PPC_FUNC_IMPL(__imp__sub_829D6760) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r3,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r3.u32);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,164
	ctx.r3.s64 = ctx.r1.s64 + 164;
	// addi r4,r11,22924
	ctx.r4.s64 = ctx.r11.s64 + 22924;
	// bl 0x82333168
	ctx.lr = 0x829D6784;
	sub_82333168(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d67a0
	if (!ctx.cr6.eq) goto loc_829D67A0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_829D67A0:
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,164
	ctx.r4.s64 = ctx.r1.s64 + 164;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x823335a8
	ctx.lr = 0x829D67B0;
	sub_823335A8(ctx, base);
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d6894
	if (ctx.cr6.eq) goto loc_829D6894;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d6894
	if (ctx.cr6.eq) goto loc_829D6894;
	// lwz r31,104(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lis r11,-32242
	ctx.r11.s64 = -2113011712;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,1556
	ctx.r4.s64 = ctx.r11.s64 + 1556;
	// bl 0x82cb0328
	ctx.lr = 0x829D67DC;
	sub_82CB0328(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x829d67f4
	if (!ctx.cr6.eq) goto loc_829D67F4;
	// lis r10,-31906
	ctx.r10.s64 = -2090991616;
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,-1443(r10)
	PPC_STORE_U8(ctx.r10.u32 + -1443, ctx.r11.u8);
	// b 0x829d6894
	goto loc_829D6894;
loc_829D67F4:
	// lis r11,-32242
	ctx.r11.s64 = -2113011712;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,1564
	ctx.r4.s64 = ctx.r11.s64 + 1564;
	// bl 0x82cb0328
	ctx.lr = 0x829D6804;
	sub_82CB0328(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x829d681c
	if (!ctx.cr6.eq) goto loc_829D681C;
	// lis r10,-31906
	ctx.r10.s64 = -2090991616;
	// li r11,0
	ctx.r11.s64 = 0;
	// stb r11,-1443(r10)
	PPC_STORE_U8(ctx.r10.u32 + -1443, ctx.r11.u8);
	// b 0x829d6894
	goto loc_829D6894;
loc_829D681C:
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,22932
	ctx.r4.s64 = ctx.r11.s64 + 22932;
	// bl 0x82cb0328
	ctx.lr = 0x829D682C;
	sub_82CB0328(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x829d6894
	if (!ctx.cr6.eq) goto loc_829D6894;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,164
	ctx.r4.s64 = ctx.r1.s64 + 164;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x823335a8
	ctx.lr = 0x829D6844;
	sub_823335A8(ctx, base);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d6858
	if (ctx.cr6.eq) goto loc_829D6858;
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// b 0x829d6860
	goto loc_829D6860;
loc_829D6858:
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11272
	ctx.r3.s64 = ctx.r11.s64 + 11272;
loc_829D6860:
	// bl 0x82cb2640
	ctx.lr = 0x829D6864;
	sub_82CB2640(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64));
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lfs f13,-15120(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -15120);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// ble cr6,0x829d688c
	if (!ctx.cr6.gt) goto loc_829D688C;
	// lis r10,-31906
	ctx.r10.s64 = -2090991616;
	// fctiwz f0,f0
	ctx.f0.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,-1272(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1272, ctx.r11.u32);
loc_829D688C:
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82299080
	ctx.lr = 0x829D6894;
	sub_82299080(ctx, base);
loc_829D6894:
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82299080
	ctx.lr = 0x829D689C;
	sub_82299080(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D68B4"))) PPC_WEAK_FUNC(sub_829D68B4);
PPC_FUNC_IMPL(__imp__sub_829D68B4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D68B8"))) PPC_WEAK_FUNC(sub_829D68B8);
PPC_FUNC_IMPL(__imp__sub_829D68B8) {
	PPC_FUNC_PROLOGUE();
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,4
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 4, ctx.xer);
	// bgt cr6,0x829d692c
	if (ctx.cr6.gt) goto loc_829D692C;
	// lis r12,-32099
	ctx.r12.s64 = -2103640064;
	// addi r12,r12,26844
	ctx.r12.s64 = ctx.r12.s64 + 26844;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		goto loc_829D68F0;
	case 1:
		goto loc_829D68FC;
	case 2:
		goto loc_829D6908;
	case 3:
		goto loc_829D6914;
	case 4:
		goto loc_829D6920;
	default:
		__builtin_unreachable();
	}
	// lwz r20,26864(r29)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r29.u32 + 26864);
	// lwz r20,26876(r29)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r29.u32 + 26876);
	// lwz r20,26888(r29)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r29.u32 + 26888);
	// lwz r20,26900(r29)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r29.u32 + 26900);
	// lwz r20,26912(r29)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r29.u32 + 26912);
loc_829D68F0:
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// addi r3,r11,-27584
	ctx.r3.s64 = ctx.r11.s64 + -27584;
	// blr 
	return;
loc_829D68FC:
	// lis r11,-32243
	ctx.r11.s64 = -2113077248;
	// addi r3,r11,-17380
	ctx.r3.s64 = ctx.r11.s64 + -17380;
	// blr 
	return;
loc_829D6908:
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r11,22952
	ctx.r3.s64 = ctx.r11.s64 + 22952;
	// blr 
	return;
loc_829D6914:
	// lis r11,-32232
	ctx.r11.s64 = -2112356352;
	// addi r3,r11,16532
	ctx.r3.s64 = ctx.r11.s64 + 16532;
	// blr 
	return;
loc_829D6920:
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r11,22968
	ctx.r3.s64 = ctx.r11.s64 + 22968;
	// blr 
	return;
loc_829D692C:
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11272
	ctx.r3.s64 = ctx.r11.s64 + 11272;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D6938"))) PPC_WEAK_FUNC(sub_829D6938);
PPC_FUNC_IMPL(__imp__sub_829D6938) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// lwz r11,-31264(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31264);
	// lwz r11,80(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// lwz r10,132(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bgt cr6,0x829d6958
	if (ctx.cr6.gt) goto loc_829D6958;
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x829d6960
	goto loc_829D6960;
loc_829D6958:
	// lwz r11,128(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 128);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
loc_829D6960:
	// lwz r11,980(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 980);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// lwz r10,2012(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 2012);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// li r11,0
	ctx.r11.s64 = 0;
loc_829D697C:
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bltlr cr6
	if (ctx.cr6.lt) return;
	// lwz r9,64(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 64);
	// cmpw cr6,r11,r9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r9.s32, ctx.xer);
	// bgelr cr6
	if (!ctx.cr6.lt) return;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// b 0x829d697c
	goto loc_829D697C;
}

__attribute__((alias("__imp__sub_829D6998"))) PPC_WEAK_FUNC(sub_829D6998);
PPC_FUNC_IMPL(__imp__sub_829D6998) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D699C"))) PPC_WEAK_FUNC(sub_829D699C);
PPC_FUNC_IMPL(__imp__sub_829D699C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D69A0"))) PPC_WEAK_FUNC(sub_829D69A0);
PPC_FUNC_IMPL(__imp__sub_829D69A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r3,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r3.u32);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r3,r1,164
	ctx.r3.s64 = ctx.r1.s64 + 164;
	// addi r4,r11,22980
	ctx.r4.s64 = ctx.r11.s64 + 22980;
	// bl 0x82333168
	ctx.lr = 0x829D69C4;
	sub_82333168(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x829d69e0
	if (!ctx.cr6.eq) goto loc_829D69E0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_829D69E0:
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,164
	ctx.r4.s64 = ctx.r1.s64 + 164;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x823335a8
	ctx.lr = 0x829D69F0;
	sub_823335A8(ctx, base);
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d6aa4
	if (ctx.cr6.eq) goto loc_829D6AA4;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d6aa4
	if (ctx.cr6.eq) goto loc_829D6AA4;
	// lwz r31,104(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,22932
	ctx.r4.s64 = ctx.r11.s64 + 22932;
	// bl 0x82cb0328
	ctx.lr = 0x829D6A1C;
	sub_82CB0328(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x829d6a88
	if (!ctx.cr6.eq) goto loc_829D6A88;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,164
	ctx.r4.s64 = ctx.r1.s64 + 164;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x823335a8
	ctx.lr = 0x829D6A34;
	sub_823335A8(ctx, base);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d6a48
	if (ctx.cr6.eq) goto loc_829D6A48;
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// b 0x829d6a50
	goto loc_829D6A50;
loc_829D6A48:
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11272
	ctx.r3.s64 = ctx.r11.s64 + 11272;
loc_829D6A50:
	// bl 0x82cb2640
	ctx.lr = 0x829D6A54;
	sub_82CB2640(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64));
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lfs f13,-15120(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -15120);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// ble cr6,0x829d6a7c
	if (!ctx.cr6.gt) goto loc_829D6A7C;
	// lis r10,-31906
	ctx.r10.s64 = -2090991616;
	// fctiwz f0,f0
	ctx.f0.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,-1268(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1268, ctx.r11.u32);
loc_829D6A7C:
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82299080
	ctx.lr = 0x829D6A84;
	sub_82299080(ctx, base);
	// b 0x829d6aa4
	goto loc_829D6AA4;
loc_829D6A88:
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,22988
	ctx.r4.s64 = ctx.r11.s64 + 22988;
	// bl 0x82cb0328
	ctx.lr = 0x829D6A98;
	sub_82CB0328(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x829d6aa4
	if (!ctx.cr6.eq) goto loc_829D6AA4;
	// bl 0x829d6938
	ctx.lr = 0x829D6AA4;
	sub_829D6938(ctx, base);
loc_829D6AA4:
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82299080
	ctx.lr = 0x829D6AAC;
	sub_82299080(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D6AC4"))) PPC_WEAK_FUNC(sub_829D6AC4);
PPC_FUNC_IMPL(__imp__sub_829D6AC4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D6AC8"))) PPC_WEAK_FUNC(sub_829D6AC8);
PPC_FUNC_IMPL(__imp__sub_829D6AC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x829d6b54
	if (ctx.cr6.eq) goto loc_829D6B54;
	// bl 0x8298e210
	ctx.lr = 0x829D6AE8;
	sub_8298E210(ctx, base);
	// mr r11,r31
	ctx.r11.u64 = ctx.r31.u64;
loc_829D6AEC:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d6b04
	if (ctx.cr6.eq) goto loc_829D6B04;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d6aec
	if (!ctx.cr6.eq) goto loc_829D6AEC;
	// b 0x829d6b18
	goto loc_829D6B18;
loc_829D6B04:
	// lis r11,-31906
	ctx.r11.s64 = -2090991616;
	// addi r10,r11,-1268
	ctx.r10.s64 = ctx.r11.s64 + -1268;
	// lwz r11,4(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r11.u32);
loc_829D6B18:
	// bl 0x82981ac8
	ctx.lr = 0x829D6B1C;
	sub_82981AC8(ctx, base);
	// mr r11,r31
	ctx.r11.u64 = ctx.r31.u64;
loc_829D6B20:
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x829d6b48
	if (ctx.cr6.eq) goto loc_829D6B48;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x829d6b20
	if (!ctx.cr6.eq) goto loc_829D6B20;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_829D6B48:
	// lis r10,-31906
	ctx.r10.s64 = -2090991616;
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,-1260(r10)
	PPC_STORE_U32(ctx.r10.u32 + -1260, ctx.r11.u32);
loc_829D6B54:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D6B68"))) PPC_WEAK_FUNC(sub_829D6B68);
PPC_FUNC_IMPL(__imp__sub_829D6B68) {
	PPC_FUNC_PROLOGUE();
	// lis r10,-31906
	ctx.r10.s64 = -2090991616;
	// li r11,0
	ctx.r11.s64 = 0;
	// addi r9,r10,-1268
	ctx.r9.s64 = ctx.r10.s64 + -1268;
	// stw r11,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D6B7C"))) PPC_WEAK_FUNC(sub_829D6B7C);
PPC_FUNC_IMPL(__imp__sub_829D6B7C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D6B80"))) PPC_WEAK_FUNC(sub_829D6B80);
PPC_FUNC_IMPL(__imp__sub_829D6B80) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D6B84"))) PPC_WEAK_FUNC(sub_829D6B84);
PPC_FUNC_IMPL(__imp__sub_829D6B84) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D6B88"))) PPC_WEAK_FUNC(sub_829D6B88);
PPC_FUNC_IMPL(__imp__sub_829D6B88) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r4,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r4.u32);
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// addi r3,r3,60
	ctx.r3.s64 = ctx.r3.s64 + 60;
	// bl 0x829d8d90
	ctx.lr = 0x829D6BA4;
	sub_829D8D90(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d6bc4
	if (ctx.cr6.eq) goto loc_829D6BC4;
	// lwz r5,24(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// li r7,8
	ctx.r7.s64 = 8;
	// li r6,4
	ctx.r6.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r3,20
	ctx.r3.s64 = ctx.r3.s64 + 20;
	// bl 0x8232d180
	ctx.lr = 0x829D6BC4;
	sub_8232D180(ctx, base);
loc_829D6BC4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D6BD4"))) PPC_WEAK_FUNC(sub_829D6BD4);
PPC_FUNC_IMPL(__imp__sub_829D6BD4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D6BD8"))) PPC_WEAK_FUNC(sub_829D6BD8);
PPC_FUNC_IMPL(__imp__sub_829D6BD8) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D6BDC"))) PPC_WEAK_FUNC(sub_829D6BDC);
PPC_FUNC_IMPL(__imp__sub_829D6BDC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D6BE0"))) PPC_WEAK_FUNC(sub_829D6BE0);
PPC_FUNC_IMPL(__imp__sub_829D6BE0) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D6BE4"))) PPC_WEAK_FUNC(sub_829D6BE4);
PPC_FUNC_IMPL(__imp__sub_829D6BE4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D6BE8"))) PPC_WEAK_FUNC(sub_829D6BE8);
PPC_FUNC_IMPL(__imp__sub_829D6BE8) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D6BEC"))) PPC_WEAK_FUNC(sub_829D6BEC);
PPC_FUNC_IMPL(__imp__sub_829D6BEC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D6BF0"))) PPC_WEAK_FUNC(sub_829D6BF0);
PPC_FUNC_IMPL(__imp__sub_829D6BF0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10e8
	ctx.lr = 0x829D6BF8;
	__savegprlr_28(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31883
	ctx.r30.s64 = -2089484288;
	// std r5,192(r1)
	PPC_STORE_U64(ctx.r1.u32 + 192, ctx.r5.u64);
	// mr r28,r4
	ctx.r28.u64 = ctx.r4.u64;
	// std r6,200(r1)
	PPC_STORE_U64(ctx.r1.u32 + 200, ctx.r6.u64);
	// li r31,0
	ctx.r31.s64 = 0;
	// std r7,208(r1)
	PPC_STORE_U64(ctx.r1.u32 + 208, ctx.r7.u64);
	// std r8,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, ctx.r8.u64);
	// addi r29,r1,112
	ctx.r29.s64 = ctx.r1.s64 + 112;
	// std r9,224(r1)
	PPC_STORE_U64(ctx.r1.u32 + 224, ctx.r9.u64);
	// lwz r4,-25776(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25776);
	// std r10,232(r1)
	PPC_STORE_U64(ctx.r1.u32 + 232, ctx.r10.u64);
	// stw r31,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r31.u32);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// stw r31,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r31.u32);
	// bne cr6,0x829d6c50
	if (!ctx.cr6.eq) goto loc_829D6C50;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r3,r11,11336
	ctx.r3.s64 = ctx.r11.s64 + 11336;
	// bl 0x829d0f08
	ctx.lr = 0x829D6C44;
	sub_829D0F08(ctx, base);
	// stw r3,-25776(r30)
	PPC_STORE_U32(ctx.r30.u32 + -25776, ctx.r3.u32);
	// bl 0x829d0fb8
	ctx.lr = 0x829D6C4C;
	sub_829D0FB8(ctx, base);
	// lwz r4,-25776(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + -25776);
loc_829D6C50:
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// ld r5,0(r29)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r29.u32 + 0);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r31,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r31.u32);
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r31.u32);
	// li r8,0
	ctx.r8.s64 = 0;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r31.u32);
	// addi r7,r1,208
	ctx.r7.s64 = ctx.r1.s64 + 208;
	// addi r6,r1,192
	ctx.r6.s64 = ctx.r1.s64 + 192;
	// lwz r3,-31264(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31264);
	// bl 0x8276e728
	ctx.lr = 0x829D6C80;
	sub_8276E728(ctx, base);
	// bl 0x829d95e0
	ctx.lr = 0x829D6C84;
	sub_829D95E0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x829d6cc4
	if (ctx.cr6.eq) goto loc_829D6CC4;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r3,492(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 492);
	// bl 0x82516720
	ctx.lr = 0x829D6C9C;
	sub_82516720(ctx, base);
	// lwz r10,100(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 100);
	// lwz r11,504(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 504);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// rlwinm r8,r10,0,7,5
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFDFFFFFF;
	// lwz r3,492(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 492);
	// clrlwi r9,r11,1
	ctx.r9.u64 = ctx.r11.u32 & 0x7FFFFFFF;
	// rlwinm r8,r8,0,4,1
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFFFCFFFFFFF;
	// stw r9,504(r31)
	PPC_STORE_U32(ctx.r31.u32 + 504, ctx.r9.u32);
	// stw r8,100(r31)
	PPC_STORE_U32(ctx.r31.u32 + 100, ctx.r8.u32);
	// bl 0x82651988
	ctx.lr = 0x829D6CC4;
	sub_82651988(ctx, base);
loc_829D6CC4:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82cb1138
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D6CD0"))) PPC_WEAK_FUNC(sub_829D6CD0);
PPC_FUNC_IMPL(__imp__sub_829D6CD0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,-31264(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31264);
	// addi r4,r11,240
	ctx.r4.s64 = ctx.r11.s64 + 240;
	// bl 0x82294bb8
	ctx.lr = 0x829D6CF4;
	sub_82294BB8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_829D6D0C"))) PPC_WEAK_FUNC(sub_829D6D0C);
PPC_FUNC_IMPL(__imp__sub_829D6D0C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D6D10"))) PPC_WEAK_FUNC(sub_829D6D10);
PPC_FUNC_IMPL(__imp__sub_829D6D10) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10d4
	ctx.lr = 0x829D6D18;
	__savegprlr_23(ctx, base);
	// stwu r1,-352(r1)
	ea = -352 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// std r4,376(r1)
	PPC_STORE_U64(ctx.r1.u32 + 376, ctx.r4.u64);
	// li r24,0
	ctx.r24.s64 = 0;
	// addi r31,r29,528
	ctx.r31.s64 = ctx.r29.s64 + 528;
	// li r4,1
	ctx.r4.s64 = 1;
	// stw r24,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r24.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r24,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r24.u32);
	// lwz r23,532(r29)
	ctx.r23.u64 = PPC_LOAD_U32(ctx.r29.u32 + 532);
	// mr r25,r5
	ctx.r25.u64 = ctx.r5.u64;
	// mr r27,r6
	ctx.r27.u64 = ctx.r6.u64;
	// stw r24,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r24.u32);
	// mr r28,r7
	ctx.r28.u64 = ctx.r7.u64;
	// mr r26,r8
	ctx.r26.u64 = ctx.r8.u64;
	// bl 0x829d8be8
	ctx.lr = 0x829D6D58;
	sub_829D8BE8(ctx, base);
	// lwz r8,160(r29)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r29.u32 + 160);
	// mulli r30,r23,28
	ctx.r30.s64 = ctx.r23.s64 * 28;
	// lwz r7,528(r29)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r29.u32 + 528);
	// lwz r10,376(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 376);
	// lwz r9,380(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 380);
	// lfs f0,852(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 852);
	ctx.f0.f64 = double(temp.f32);
	// fctiwz f13,f0
	ctx.f13.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfiwx f13,r7,r30
	PPC_STORE_U32(ctx.r7.u32 + ctx.r30.u32, ctx.f13.u32);
	// lwz r11,528(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 528);
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// stw r10,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r10.u32);
	// addi r10,r11,4
	ctx.r10.s64 = ctx.r11.s64 + 4;
	// stw r9,8(r11)
	PPC_STORE_U32(ctx.r11.u32 + 8, ctx.r9.u32);
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// lwz r11,528(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 528);
	// add r6,r11,r30
	ctx.r6.u64 = ctx.r11.u64 + ctx.r30.u64;
	// stw r25,12(r6)
	PPC_STORE_U32(ctx.r6.u32 + 12, ctx.r25.u32);
	// lwz r11,528(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 528);
	// add r5,r11,r30
	ctx.r5.u64 = ctx.r11.u64 + ctx.r30.u64;
	// stw r27,16(r5)
	PPC_STORE_U32(ctx.r5.u32 + 16, ctx.r27.u32);
	// lwz r11,528(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 528);
	// add r4,r11,r30
	ctx.r4.u64 = ctx.r11.u64 + ctx.r30.u64;
	// stw r28,20(r4)
	PPC_STORE_U32(ctx.r4.u32 + 20, ctx.r28.u32);
	// lwz r11,528(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 528);
	// add r3,r11,r30
	ctx.r3.u64 = ctx.r11.u64 + ctx.r30.u64;
	// stw r26,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, ctx.r26.u32);
	// blt cr6,0x829d6e10
	if (ctx.cr6.lt) goto loc_829D6E10;
	// lwz r10,516(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 516);
	// mulli r11,r28,120
	ctx.r11.s64 = ctx.r28.s64 * 120;
	// lis r9,-32230
	ctx.r9.s64 = -2112225280;
	// add r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 + ctx.r11.u64;
	// addi r4,r9,23004
	ctx.r4.s64 = ctx.r9.s64 + 23004;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// addi r28,r11,16
	ctx.r28.s64 = ctx.r11.s64 + 16;
	// bl 0x822960c0
	ctx.lr = 0x829D6DE4;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D6DF4;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82295908
	ctx.lr = 0x829D6E00;
	sub_82295908(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D6E08;
	sub_82299080(ctx, base);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x82299080
	ctx.lr = 0x829D6E10;
	sub_82299080(ctx, base);
loc_829D6E10:
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// beq cr6,0x829d6ea8
	if (ctx.cr6.eq) goto loc_829D6EA8;
	// lwz r11,4(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 4);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x829d6e38
	if (!ctx.cr6.eq) goto loc_829D6E38;
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// addi r4,r11,-19580
	ctx.r4.s64 = ctx.r11.s64 + -19580;
	// bl 0x822960c0
	ctx.lr = 0x829D6E34;
	sub_822960C0(ctx, base);
	// b 0x829d6e40
	goto loc_829D6E40;
loc_829D6E38:
	// addi r4,r26,44
	ctx.r4.s64 = ctx.r26.s64 + 44;
	// bl 0x8233e1a0
	ctx.lr = 0x829D6E40;
	sub_8233E1A0(ctx, base);
loc_829D6E40:
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// addi r4,r11,-26960
	ctx.r4.s64 = ctx.r11.s64 + -26960;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// addi r28,r10,23036
	ctx.r28.s64 = ctx.r10.s64 + 23036;
	// addi r26,r1,80
	ctx.r26.s64 = ctx.r1.s64 + 80;
	// bl 0x822960c0
	ctx.lr = 0x829D6E5C;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// bl 0x82295ff0
	ctx.lr = 0x829D6E6C;
	sub_82295FF0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D6E7C;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x822951d0
	ctx.lr = 0x829D6E88;
	sub_822951D0(ctx, base);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x82299080
	ctx.lr = 0x829D6E90;
	sub_82299080(ctx, base);
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// bl 0x82299080
	ctx.lr = 0x829D6E98;
	sub_82299080(ctx, base);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x82299080
	ctx.lr = 0x829D6EA0;
	sub_82299080(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82299080
	ctx.lr = 0x829D6EA8;
	sub_82299080(ctx, base);
loc_829D6EA8:
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-27584
	ctx.r4.s64 = ctx.r11.s64 + -27584;
	// bl 0x822960c0
	ctx.lr = 0x829D6EB8;
	sub_822960C0(ctx, base);
	// cmpwi cr6,r27,0
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 0, ctx.xer);
	// blt cr6,0x829d6ee4
	if (ctx.cr6.lt) goto loc_829D6EE4;
	// lwz r11,520(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 520);
	// cmpw cr6,r27,r11
	ctx.cr6.compare<int32_t>(ctx.r27.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x829d6ee4
	if (!ctx.cr6.lt) goto loc_829D6EE4;
	// lwz r11,516(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 516);
	// mulli r10,r27,120
	ctx.r10.s64 = ctx.r27.s64 * 120;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,16
	ctx.r4.s64 = ctx.r11.s64 + 16;
	// bl 0x82295908
	ctx.lr = 0x829D6EE4;
	sub_82295908(ctx, base);
loc_829D6EE4:
	// addi r4,r1,376
	ctx.r4.s64 = ctx.r1.s64 + 376;
	// lwz r31,0(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8233e1a0
	ctx.lr = 0x829D6EF4;
	sub_8233E1A0(ctx, base);
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwzx r31,r31,r30
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r30.u32);
	// lis r10,-32230
	ctx.r10.s64 = -2112225280;
	// lis r9,-32230
	ctx.r9.s64 = -2112225280;
	// addi r4,r11,23052
	ctx.r4.s64 = ctx.r11.s64 + 23052;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r30,r10,23096
	ctx.r30.s64 = ctx.r10.s64 + 23096;
	// addi r27,r9,23068
	ctx.r27.s64 = ctx.r9.s64 + 23068;
	// addi r26,r1,80
	ctx.r26.s64 = ctx.r1.s64 + 80;
	// bl 0x822960c0
	ctx.lr = 0x829D6F20;
	sub_822960C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// clrlwi r5,r25,16
	ctx.r5.u64 = ctx.r25.u32 & 0xFFFF;
	// bl 0x829d9c80
	ctx.lr = 0x829D6F30;
	sub_829D9C80(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
	// bl 0x82295ff0
	ctx.lr = 0x829D6F40;
	sub_82295FF0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// bl 0x822952c8
	ctx.lr = 0x829D6F50;
	sub_822952C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x82295ff0
	ctx.lr = 0x829D6F60;
	sub_82295FF0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// clrlwi r5,r31,16
	ctx.r5.u64 = ctx.r31.u32 & 0xFFFF;
	// bl 0x829d9c80
	ctx.lr = 0x829D6F70;
	sub_829D9C80(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// bl 0x829d9d08
	ctx.lr = 0x829D6F80;
	sub_829D9D08(ctx, base);
	// lwz r8,184(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// stw r24,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r24.u32);
	// cmpwi cr6,r8,0
	ctx.cr6.compare<int32_t>(ctx.r8.s32, 0, ctx.xer);
	// beq cr6,0x829d6fa4
	if (ctx.cr6.eq) goto loc_829D6FA4;
	// stw r24,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82294520
	ctx.lr = 0x829D6FA4;
	sub_82294520(ctx, base);
loc_829D6FA4:
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82294cc8
	ctx.lr = 0x829D6FAC;
	sub_82294CC8(ctx, base);
	// lwz r11,152(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// stw r24,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d6fd0
	if (ctx.cr6.eq) goto loc_829D6FD0;
	// stw r24,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82294520
	ctx.lr = 0x829D6FD0;
	sub_82294520(ctx, base);
loc_829D6FD0:
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82294cc8
	ctx.lr = 0x829D6FD8;
	sub_82294CC8(ctx, base);
	// lwz r11,200(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	// stw r24,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d6ffc
	if (ctx.cr6.eq) goto loc_829D6FFC;
	// stw r24,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82294520
	ctx.lr = 0x829D6FFC;
	sub_82294520(ctx, base);
loc_829D6FFC:
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82294cc8
	ctx.lr = 0x829D7004;
	sub_82294CC8(ctx, base);
	// lwz r11,120(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r24,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d7028
	if (ctx.cr6.eq) goto loc_829D7028;
	// stw r24,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82294520
	ctx.lr = 0x829D7028;
	sub_82294520(ctx, base);
loc_829D7028:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82294cc8
	ctx.lr = 0x829D7030;
	sub_82294CC8(ctx, base);
	// lwz r11,216(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	// stw r24,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d7054
	if (ctx.cr6.eq) goto loc_829D7054;
	// stw r24,216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 216, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x82294520
	ctx.lr = 0x829D7054;
	sub_82294520(ctx, base);
loc_829D7054:
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x82294cc8
	ctx.lr = 0x829D705C;
	sub_82294CC8(ctx, base);
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// stw r24,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d7080
	if (ctx.cr6.eq) goto loc_829D7080;
	// stw r24,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82294520
	ctx.lr = 0x829D7080;
	sub_82294520(ctx, base);
loc_829D7080:
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82294cc8
	ctx.lr = 0x829D7088;
	sub_82294CC8(ctx, base);
	// lwz r11,168(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// stw r24,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d70ac
	if (ctx.cr6.eq) goto loc_829D70AC;
	// stw r24,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82294520
	ctx.lr = 0x829D70AC;
	sub_82294520(ctx, base);
loc_829D70AC:
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82294cc8
	ctx.lr = 0x829D70B4;
	sub_82294CC8(ctx, base);
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d70f0
	if (ctx.cr6.eq) goto loc_829D70F0;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x829d70f0
	if (!ctx.cr6.gt) goto loc_829D70F0;
	// addi r4,r1,376
	ctx.r4.s64 = ctx.r1.s64 + 376;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x8233e1a0
	ctx.lr = 0x829D70D8;
	sub_8233E1A0(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x829d9d08
	ctx.lr = 0x829D70E8;
	sub_829D9D08(ctx, base);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x82299080
	ctx.lr = 0x829D70F0;
	sub_82299080(ctx, base);
loc_829D70F0:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r24,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d7114
	if (ctx.cr6.eq) goto loc_829D7114;
	// stw r24,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82294520
	ctx.lr = 0x829D7114;
	sub_82294520(ctx, base);
loc_829D7114:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82294cc8
	ctx.lr = 0x829D711C;
	sub_82294CC8(ctx, base);
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r24,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d7140
	if (ctx.cr6.eq) goto loc_829D7140;
	// stw r24,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r24.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82294520
	ctx.lr = 0x829D7140;
	sub_82294520(ctx, base);
loc_829D7140:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82294cc8
	ctx.lr = 0x829D7148;
	sub_82294CC8(ctx, base);
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// addi r1,r1,352
	ctx.r1.s64 = ctx.r1.s64 + 352;
	// b 0x82cb1124
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D7154"))) PPC_WEAK_FUNC(sub_829D7154);
PPC_FUNC_IMPL(__imp__sub_829D7154) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D7158"))) PPC_WEAK_FUNC(sub_829D7158);
PPC_FUNC_IMPL(__imp__sub_829D7158) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10c8
	ctx.lr = 0x829D7160;
	__savegprlr_20(ctx, base);
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r22,0
	ctx.r22.s64 = 0;
	// mr r23,r4
	ctx.r23.u64 = ctx.r4.u64;
	// mr r30,r22
	ctx.r30.u64 = ctx.r22.u64;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r25,r5
	ctx.r25.u64 = ctx.r5.u64;
	// stw r30,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r30.u32);
	// mr r21,r6
	ctx.r21.u64 = ctx.r6.u64;
	// cmplwi cr6,r23,0
	ctx.cr6.compare<uint32_t>(ctx.r23.u32, 0, ctx.xer);
	// beq cr6,0x829d74ec
	if (ctx.cr6.eq) goto loc_829D74EC;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// beq cr6,0x829d74ec
	if (ctx.cr6.eq) goto loc_829D74EC;
	// addi r4,r23,512
	ctx.r4.s64 = ctx.r23.s64 + 512;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82294bb8
	ctx.lr = 0x829D719C;
	sub_82294BB8(ctx, base);
	// addi r4,r25,512
	ctx.r4.s64 = ctx.r25.s64 + 512;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82294bb8
	ctx.lr = 0x829D71A8;
	sub_82294BB8(ctx, base);
	// lwz r11,520(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 520);
	// li r26,-1
	ctx.r26.s64 = -1;
	// li r24,-1
	ctx.r24.s64 = -1;
	// mr r27,r22
	ctx.r27.u64 = ctx.r22.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x829d72f8
	if (!ctx.cr6.gt) goto loc_829D72F8;
	// mr r28,r22
	ctx.r28.u64 = ctx.r22.u64;
loc_829D71C4:
	// cmpwi cr6,r24,-1
	ctx.cr6.compare<int32_t>(ctx.r24.s32, -1, ctx.xer);
	// bne cr6,0x829d720c
	if (!ctx.cr6.eq) goto loc_829D720C;
	// lwz r11,516(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 516);
	// ori r10,r30,1
	ctx.r10.u64 = ctx.r30.u64 | 1;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// ori r30,r10,2
	ctx.r30.u64 = ctx.r10.u64 | 2;
	// add r29,r11,r28
	ctx.r29.u64 = ctx.r11.u64 + ctx.r28.u64;
	// bl 0x822b1f60
	ctx.lr = 0x829D71E8;
	sub_822B1F60(ctx, base);
	// mr r20,r3
	ctx.r20.u64 = ctx.r3.u64;
	// addi r4,r29,4
	ctx.r4.s64 = ctx.r29.s64 + 4;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x822b1f60
	ctx.lr = 0x829D71F8;
	sub_822B1F60(ctx, base);
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// bl 0x822b21c0
	ctx.lr = 0x829D7200;
	sub_822B21C0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// li r11,1
	ctx.r11.s64 = 1;
	// bne cr6,0x829d7210
	if (!ctx.cr6.eq) goto loc_829D7210;
loc_829D720C:
	// mr r11,r22
	ctx.r11.u64 = ctx.r22.u64;
loc_829D7210:
	// rlwinm r10,r30,0,30,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 0) & 0x2;
	// clrlwi r29,r11,24
	ctx.r29.u64 = ctx.r11.u32 & 0xFF;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x829d722c
	if (ctx.cr6.eq) goto loc_829D722C;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// rlwinm r30,r30,0,31,29
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
	// bl 0x82299080
	ctx.lr = 0x829D722C;
	sub_82299080(ctx, base);
loc_829D722C:
	// clrlwi r11,r30,31
	ctx.r11.u64 = ctx.r30.u32 & 0x1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d7244
	if (ctx.cr6.eq) goto loc_829D7244;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// rlwinm r30,r30,0,0,30
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 0) & 0xFFFFFFFE;
	// bl 0x82299080
	ctx.lr = 0x829D7244;
	sub_82299080(ctx, base);
loc_829D7244:
	// clrlwi r11,r29,24
	ctx.r11.u64 = ctx.r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d7254
	if (ctx.cr6.eq) goto loc_829D7254;
	// mr r24,r27
	ctx.r24.u64 = ctx.r27.u64;
loc_829D7254:
	// cmpwi cr6,r26,-1
	ctx.cr6.compare<int32_t>(ctx.r26.s32, -1, ctx.xer);
	// bne cr6,0x829d729c
	if (!ctx.cr6.eq) goto loc_829D729C;
	// lwz r11,516(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 516);
	// ori r10,r30,4
	ctx.r10.u64 = ctx.r30.u64 | 4;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// ori r30,r10,8
	ctx.r30.u64 = ctx.r10.u64 | 8;
	// add r29,r11,r28
	ctx.r29.u64 = ctx.r11.u64 + ctx.r28.u64;
	// bl 0x822b1f60
	ctx.lr = 0x829D7278;
	sub_822B1F60(ctx, base);
	// mr r20,r3
	ctx.r20.u64 = ctx.r3.u64;
	// addi r4,r29,4
	ctx.r4.s64 = ctx.r29.s64 + 4;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x822b1f60
	ctx.lr = 0x829D7288;
	sub_822B1F60(ctx, base);
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// bl 0x822b21c0
	ctx.lr = 0x829D7290;
	sub_822B21C0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// li r11,1
	ctx.r11.s64 = 1;
	// bne cr6,0x829d72a0
	if (!ctx.cr6.eq) goto loc_829D72A0;
loc_829D729C:
	// mr r11,r22
	ctx.r11.u64 = ctx.r22.u64;
loc_829D72A0:
	// rlwinm r10,r30,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 0) & 0x8;
	// clrlwi r29,r11,24
	ctx.r29.u64 = ctx.r11.u32 & 0xFF;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x829d72bc
	if (ctx.cr6.eq) goto loc_829D72BC;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// rlwinm r30,r30,0,29,27
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// bl 0x82299080
	ctx.lr = 0x829D72BC;
	sub_82299080(ctx, base);
loc_829D72BC:
	// rlwinm r11,r30,0,29,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d72d4
	if (ctx.cr6.eq) goto loc_829D72D4;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// rlwinm r30,r30,0,30,28
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// bl 0x82299080
	ctx.lr = 0x829D72D4;
	sub_82299080(ctx, base);
loc_829D72D4:
	// clrlwi r11,r29,24
	ctx.r11.u64 = ctx.r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x829d72e4
	if (ctx.cr6.eq) goto loc_829D72E4;
	// mr r26,r27
	ctx.r26.u64 = ctx.r27.u64;
loc_829D72E4:
	// lwz r11,520(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 520);
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// addi r28,r28,120
	ctx.r28.s64 = ctx.r28.s64 + 120;
	// cmpw cr6,r27,r11
	ctx.cr6.compare<int32_t>(ctx.r27.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x829d71c4
	if (ctx.cr6.lt) goto loc_829D71C4;
loc_829D72F8:
	// lwz r11,160(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 160);
	// lis r10,-31882
	ctx.r10.s64 = -2089418752;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r30,r1,128
	ctx.r30.s64 = ctx.r1.s64 + 128;
	// lwz r29,936(r11)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r11.u32 + 936);
	// stw r22,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r22.u32);
	// stw r23,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r23.u32);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r25,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r25.u32);
	// ld r4,-20432(r10)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r10.u32 + -20432);
	// lwz r28,0(r29)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// bl 0x8229e490
	ctx.lr = 0x829D7328;
	sub_8229E490(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r9,228(r28)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r28.u32 + 228);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x829D7344;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r3,112(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + 112);
	// lwz r30,136(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// bl 0x829d9660
	ctx.lr = 0x829D7350;
	sub_829D9660(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d73d4
	if (ctx.cr6.eq) goto loc_829D73D4;
	// lwz r11,1324(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1324);
	// rlwinm r10,r11,0,2,2
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x20000000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x829d73d4
	if (ctx.cr6.eq) goto loc_829D73D4;
	// lwz r11,112(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 112);
	// lwz r10,112(r25)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r25.u32 + 112);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x829d73d4
	if (ctx.cr6.eq) goto loc_829D73D4;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r30,r1,80
	ctx.r30.s64 = ctx.r1.s64 + 80;
	// beq cr6,0x829d73b4
	if (ctx.cr6.eq) goto loc_829D73B4;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r4,r11,23108
	ctx.r4.s64 = ctx.r11.s64 + 23108;
	// bl 0x8233e028
	ctx.lr = 0x829D73A0;
	sub_8233E028(ctx, base);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// lwz r29,0(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x824c6428
	ctx.lr = 0x829D73AC;
	sub_824C6428(ctx, base);
	// mr r8,r22
	ctx.r8.u64 = ctx.r22.u64;
	// b 0x829d7418
	goto loc_829D7418;
loc_829D73B4:
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r4,r11,23152
	ctx.r4.s64 = ctx.r11.s64 + 23152;
	// bl 0x8233e028
	ctx.lr = 0x829D73C0;
	sub_8233E028(ctx, base);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// lwz r29,0(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x824c6428
	ctx.lr = 0x829D73CC;
	sub_824C6428(ctx, base);
	// mr r8,r22
	ctx.r8.u64 = ctx.r22.u64;
	// b 0x829d7418
	goto loc_829D7418;
loc_829D73D4:
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r30,r1,80
	ctx.r30.s64 = ctx.r1.s64 + 80;
	// beq cr6,0x829d73fc
	if (ctx.cr6.eq) goto loc_829D73FC;
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r4,r11,23188
	ctx.r4.s64 = ctx.r11.s64 + 23188;
	// b 0x829d7404
	goto loc_829D7404;
loc_829D73FC:
	// lis r11,-32230
	ctx.r11.s64 = -2112225280;
	// addi r4,r11,23208
	ctx.r4.s64 = ctx.r11.s64 + 23208;
loc_829D7404:
	// bl 0x8233e028
	ctx.lr = 0x829D7408;
	sub_8233E028(ctx, base);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// lwz r29,0(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x824c6428
	ctx.lr = 0x829D7414;
	sub_824C6428(ctx, base);
	// mr r8,r21
	ctx.r8.u64 = ctx.r21.u64;
loc_829D7418:
	// clrlwi r5,r3,24
	ctx.r5.u64 = ctx.r3.u32 & 0xFF;
	// lwz r10,996(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 996);
	// ld r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r30.u32 + 0);
	// mr r7,r26
	ctx.r7.u64 = ctx.r26.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r6,r24
	ctx.r6.u64 = ctx.r24.u64;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x829D7438;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
	// lwz r11,516(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 516);
	// mulli r30,r26,120
	ctx.r30.s64 = ctx.r26.s64 * 120;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r11,92
	ctx.r3.s64 = ctx.r11.s64 + 92;
	// bl 0x822ab8c0
	ctx.lr = 0x829D7454;
	sub_822AB8C0(ctx, base);
	// lwz r11,516(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 516);
	// mulli r10,r24,120
	ctx.r10.s64 = ctx.r24.s64 * 120;
	// add r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 + ctx.r11.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r11,104
	ctx.r3.s64 = ctx.r11.s64 + 104;
	// bl 0x822ab8c0
	ctx.lr = 0x829D746C;
	sub_822AB8C0(ctx, base);
	// cmpwi cr6,r26,0
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 0, ctx.xer);
	// blt cr6,0x829d7494
	if (ctx.cr6.lt) goto loc_829D7494;
	// cmpw cr6,r26,r24
	ctx.cr6.compare<int32_t>(ctx.r26.s32, ctx.r24.s32, ctx.xer);
	// bne cr6,0x829d7494
	if (!ctx.cr6.eq) goto loc_829D7494;
	// lwz r11,516(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 516);
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// addi r10,r11,116
	ctx.r10.s64 = ctx.r11.s64 + 116;
	// lwz r10,116(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 116);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,116(r11)
	PPC_STORE_U32(ctx.r11.u32 + 116, ctx.r10.u32);
loc_829D7494:
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r22,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r22.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d74b8
	if (ctx.cr6.eq) goto loc_829D74B8;
	// stw r22,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r22.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82294520
	ctx.lr = 0x829D74B8;
	sub_82294520(ctx, base);
loc_829D74B8:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82294cc8
	ctx.lr = 0x829D74C0;
	sub_82294CC8(ctx, base);
	// lwz r11,120(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r22,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r22.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x829d74e4
	if (ctx.cr6.eq) goto loc_829D74E4;
	// stw r22,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r22.u32);
	// li r5,8
	ctx.r5.s64 = 8;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82294520
	ctx.lr = 0x829D74E4;
	sub_82294520(ctx, base);
loc_829D74E4:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82294cc8
	ctx.lr = 0x829D74EC;
	sub_82294CC8(ctx, base);
loc_829D74EC:
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x82cb1118
	__restgprlr_20(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D74F4"))) PPC_WEAK_FUNC(sub_829D74F4);
PPC_FUNC_IMPL(__imp__sub_829D74F4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_829D74F8"))) PPC_WEAK_FUNC(sub_829D74F8);
PPC_FUNC_IMPL(__imp__sub_829D74F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82cb10e4
	ctx.lr = 0x829D7500;
	__savegprlr_27(ctx, base);
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, ctx.f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31883
	ctx.r11.s64 = -2089484288;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// lwz r11,-31264(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -31264);
	// lwz r11,80(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// lwz r10,132(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bgt cr6,0x829d7530
	if (ctx.cr6.gt) goto loc_829D7530;
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x829d7538
	goto loc_829D7538;
loc_829D7530:
	// lwz r11,128(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 128);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
loc_829D7538:
	// lwz r31,1008(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1008);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x829d75c0
	if (ctx.cr6.eq) goto loc_829D75C0;
loc_829D7544:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x829d96e0
	ctx.lr = 0x829D754C;
	sub_829D96E0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x829d75b4
	if (ctx.cr6.eq) goto loc_829D75B4;
	// rlwinm r11,r30,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r10,492(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 492);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// add r11,r30,r11
	ctx.r11.u64 = ctx.r30.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lwz r10,24(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24);
	// lfs f31,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	ctx.f31.f64 = double(temp.f32);
	// lwz r9,28(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// lwz r8,12(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// lwz r7,16(r11)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// lwz r28,32(r11)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// lwz r27,20(r11)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r11.u32 + 20);
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// stw r8,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r8.u32);
	// stw r7,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r7.u32);
	// bl 0x829d96e0
	ctx.lr = 0x829D759C;
	sub_829D96E0(ctx, base);
	// rldicr r6,r27,32,63
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r27.u64, 32) & 0xFFFFFFFFFFFFFFFF;
	// ld r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// rldicr r8,r28,32,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r28.u64, 32) & 0xFFFFFFFFFFFFFFFF;
	// ld r7,96(r1)
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// bl 0x829d9b80
	ctx.lr = 0x829D75B4;
	sub_829D9B80(ctx, base);
loc_829D75B4:
	// lwz r31,504(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 504);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x829d7544
	if (!ctx.cr6.eq) goto loc_829D7544;
loc_829D75C0:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x82cb1134
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_829D75CC"))) PPC_WEAK_FUNC(sub_829D75CC);
PPC_FUNC_IMPL(__imp__sub_829D75CC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

